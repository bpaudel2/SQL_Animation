// Generated from PlSqlParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PlSqlParserListener = require('./PlSqlParserListener').PlSqlParserListener;
var grammarFileName = "PlSqlParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u023f\u168c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004",
    "\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t",
    "\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004",
    "\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t",
    "\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004",
    "\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004\u0177\t",
    "\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t\u017a\u0004",
    "\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004\u017e\t",
    "\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t\u0181\u0004",
    "\u0182\t\u0182\u0003\u0002\u0003\u0002\u0005\u0002\u0307\n\u0002\u0003",
    "\u0002\u0005\u0002\u030a\n\u0002\u0007\u0002\u030c\n\u0002\f\u0002\u000e",
    "\u0002\u030f\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0331\n",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u033d",
    "\n\u0005\u0003\u0005\u0007\u0005\u0340\n\u0005\f\u0005\u000e\u0005\u0343",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0347\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u034e",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0007\u0006\u0356\n\u0006\f\u0006\u000e\u0006\u0359\u000b",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u035d\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006",
    "\u0365\n\u0006\f\u0006\u000e\u0006\u0368\u000b\u0006\u0003\u0006\u0005",
    "\u0006\u036b\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u036f\n\u0006",
    "\u0003\u0006\u0007\u0006\u0372\n\u0006\f\u0006\u000e\u0006\u0375\u000b",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0379\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u037e\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u0384\n\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u0390\n\b\f\b\u000e\b\u0393\u000b\b\u0003\b\u0003\b\u0005\b\u0397",
    "\n\b\u0003\b\u0005\b\u039a\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005",
    "\t\u03a0\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u03a7\n",
    "\n\f\n\u000e\n\u03aa\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b",
    "\u03b5\n\u000b\f\u000b\u000e\u000b\u03b8\u000b\u000b\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u03bf\n\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u03c4\n\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0005\r\u03ce\n\r\u0003\r\u0005\r\u03d1\n\r\u0003\r",
    "\u0007\r\u03d4\n\r\f\r\u000e\r\u03d7\u000b\r\u0003\r\u0003\r\u0005\r",
    "\u03db\n\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u03e2\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u03e8\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u03ec",
    "\n\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u03f0\n\u000e\f\u000e\u000e",
    "\u000e\u03f3\u000b\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u03f7\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u03fe\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u0405\n\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0007\u000f\u040a\n\u000f\f\u000f\u000e\u000f\u040d\u000b\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0413\n",
    "\u000f\u0005\u000f\u0415\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u0421\n\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0429\n\u0011",
    "\f\u0011\u000e\u0011\u042c\u000b\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u0430\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u043a\n",
    "\u0012\f\u0012\u000e\u0012\u043d\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u0441\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u0446\n\u0012\u0003\u0012\u0005\u0012\u0449\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0456\n",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0462",
    "\n\u0015\u0003\u0015\u0007\u0015\u0465\n\u0015\f\u0015\u000e\u0015\u0468",
    "\u000b\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u046c\n\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0007\u0016\u0476\n\u0016\f\u0016\u000e\u0016\u0479",
    "\u000b\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u047d\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007",
    "\u0016\u0485\n\u0016\f\u0016\u000e\u0016\u0488\u000b\u0016\u0003\u0016",
    "\u0005\u0016\u048b\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u048f",
    "\n\u0016\u0003\u0016\u0007\u0016\u0492\n\u0016\f\u0016\u000e\u0016\u0495",
    "\u000b\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0499\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u049e\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u04a8\n\u0017\f\u0017\u000e\u0017\u04ab\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u04af\n\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u04b3\n\u0017\u0003\u0017\u0007\u0017\u04b6",
    "\n\u0017\f\u0017\u000e\u0017\u04b9\u000b\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u04be\n\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u04c5\n\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018",
    "\u04cd\n\u0018\f\u0018\u000e\u0018\u04d0\u000b\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u04d4\n\u0018\u0003\u0018\u0005\u0018\u04d7\n\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u04db\n\u0018\u0003\u0018\u0007",
    "\u0018\u04de\n\u0018\f\u0018\u000e\u0018\u04e1\u000b\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u04e6\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u04f8\n\u001a\u0003\u001a",
    "\u0007\u001a\u04fb\n\u001a\f\u001a\u000e\u001a\u04fe\u000b\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0502\n\u001a\u0005\u001a\u0504\n\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u050b\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u0512\n\u001b\u0003\u001b\u0005\u001b\u0515\n\u001b",
    "\u0003\u001b\u0005\u001b\u0518\n\u001b\u0003\u001b\u0005\u001b\u051b",
    "\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u0524\n\u001c\f\u001c\u000e\u001c",
    "\u0527\u000b\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0532",
    "\n\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0536\n\u001e\u0003\u001e",
    "\u0005\u001e\u0539\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0005 \u0542\n \u0003!\u0003!\u0003!\u0003",
    "!\u0007!\u0548\n!\f!\u000e!\u054b\u000b!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u0552\n!\u0003!\u0005!\u0555\n!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u055c\n\"\u0003#\u0003#\u0005#\u0560\n#\u0003",
    "$\u0003$\u0003$\u0007$\u0565\n$\f$\u000e$\u0568\u000b$\u0003$\u0006",
    "$\u056b\n$\r$\u000e$\u056c\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0005%\u0596\n%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0005&\u05b2\n&\u0003\'\u0003\'\u0003\'\u0007\'\u05b7\n\'\f",
    "\'\u000e\'\u05ba\u000b\'\u0003\'\u0003\'\u0005\'\u05be\n\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u05c7\n(\f(\u000e(\u05ca",
    "\u000b(\u0005(\u05cc\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003",
    "*\u0006*\u05d5\n*\r*\u000e*\u05d6\u0003+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0005,\u05df\n,\u0003,\u0003,\u0005,\u05e3\n,\u0003,\u0003",
    ",\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u05ef",
    "\n-\u0003-\u0005-\u05f2\n-\u0003-\u0003-\u0003.\u0003.\u0005.\u05f8",
    "\n.\u0003.\u0005.\u05fb\n.\u0003.\u0007.\u05fe\n.\f.\u000e.\u0601\u000b",
    ".\u0003.\u0003.\u0005.\u0605\n.\u0003/\u0003/\u0005/\u0609\n/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u0611\n/\f/\u000e/\u0614",
    "\u000b/\u0003/\u0003/\u00030\u00030\u00030\u00070\u061b\n0\f0\u000e",
    "0\u061e\u000b0\u00031\u00031\u00031\u00051\u0623\n1\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00072\u062c\n2\f2\u000e2\u062f\u000b",
    "2\u00032\u00032\u00052\u0633\n2\u00033\u00033\u00053\u0637\n3\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00054\u063f\n4\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00055\u0647\n5\u00035\u00035\u00035\u00055\u064c",
    "\n5\u00035\u00055\u064f\n5\u00055\u0651\n5\u00036\u00056\u0654\n6\u0003",
    "6\u00036\u00036\u00036\u00037\u00037\u00037\u00057\u065d\n7\u00037\u0003",
    "7\u00037\u00057\u0662\n7\u00037\u00037\u00038\u00038\u00038\u00058\u0669",
    "\n8\u00038\u00058\u066c\n8\u00039\u00059\u066f\n9\u00039\u00039\u0005",
    "9\u0673\n9\u00039\u00059\u0676\n9\u00039\u00039\u00039\u00039\u0007",
    "9\u067c\n9\f9\u000e9\u067f\u000b9\u00039\u00039\u00059\u0683\n9\u0003",
    "9\u00079\u0686\n9\f9\u000e9\u0689\u000b9\u0003:\u0003:\u0003:\u0003",
    ":\u0005:\u068f\n:\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u0699\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003>\u0003>\u0003>\u0003>\u0006>\u06a7\n>\r>\u000e>\u06a8\u0003",
    ">\u0003>\u0003?\u0003?\u0005?\u06af\n?\u0003@\u0003@\u0003@\u0003@\u0003",
    "A\u0003A\u0003A\u0003A\u0005A\u06b9\nA\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0007B\u06c1\nB\fB\u000eB\u06c4\u000bB\u0003B\u0003B\u0003",
    "B\u0003B\u0005B\u06ca\nB\u0003B\u0007B\u06cd\nB\fB\u000eB\u06d0\u000b",
    "B\u0003B\u0003B\u0003B\u0005B\u06d5\nB\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0007C\u06dd\nC\fC\u000eC\u06e0\u000bC\u0003C\u0003C\u0005",
    "C\u06e4\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u06eb\nC\u0003",
    "C\u0007C\u06ee\nC\fC\u000eC\u06f1\u000bC\u0003C\u0003C\u0003C\u0005",
    "C\u06f6\nC\u0003D\u0005D\u06f9\nD\u0003D\u0005D\u06fc\nD\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0007D\u070b\nD\fD\u000eD\u070e\u000bD\u0003D\u0003D\u0005",
    "D\u0712\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u071b",
    "\nD\u0003D\u0007D\u071e\nD\fD\u000eD\u0721\u000bD\u0003D\u0003D\u0003",
    "D\u0005D\u0726\nD\u0003E\u0005E\u0729\nE\u0003E\u0003E\u0003F\u0003",
    "F\u0003F\u0005F\u0730\nF\u0003F\u0005F\u0733\nF\u0003G\u0003G\u0003",
    "G\u0003G\u0003H\u0005H\u073a\nH\u0003H\u0006H\u073d\nH\rH\u000eH\u073e",
    "\u0003H\u0003H\u0005H\u0743\nH\u0003I\u0003I\u0003I\u0005I\u0748\nI",
    "\u0003J\u0003J\u0003J\u0005J\u074d\nJ\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0007K\u0755\nK\fK\u000eK\u0758\u000bK\u0003K\u0003K\u0003",
    "K\u0005K\u075d\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u0765",
    "\nL\fL\u000eL\u0768\u000bL\u0003L\u0003L\u0005L\u076c\nL\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0005L\u0773\nL\u0003L\u0003L\u0003L\u0003L\u0005",
    "L\u0779\nL\u0003L\u0003L\u0005L\u077d\nL\u0003M\u0005M\u0780\nM\u0003",
    "M\u0005M\u0783\nM\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u0792\nM\fM\u000eM\u0795",
    "\u000bM\u0003M\u0003M\u0005M\u0799\nM\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0005M\u07a1\nM\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0007O\u07ad\nO\fO\u000eO\u07b0\u000bO\u0003",
    "O\u0003O\u0003P\u0003P\u0005P\u07b6\nP\u0003Q\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0006S\u07c4\nS\r",
    "S\u000eS\u07c5\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0007",
    "T\u07cf\nT\fT\u000eT\u07d2\u000bT\u0003T\u0003T\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0005U\u07e6\nU\u0003V\u0003V\u0003V\u0003V\u0003",
    "W\u0003W\u0005W\u07ee\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0007W\u07f8\nW\fW\u000eW\u07fb\u000bW\u0003W\u0003W\u0003",
    "W\u0005W\u0800\nW\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0814\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0007Z\u081f\nZ\fZ\u000eZ\u0822\u000bZ\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0005Z\u0829\nZ\u0003Z\u0003Z\u0003Z\u0005Z\u082e\n",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0836\nZ\fZ\u000e",
    "Z\u0839\u000bZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u084d\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0006Z\u0854\n",
    "Z\rZ\u000eZ\u0855\u0003Z\u0005Z\u0859\nZ\u0003Z\u0003Z\u0005Z\u085d",
    "\nZ\u0003Z\u0005Z\u0860\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0868\nZ\u0005Z\u086a\nZ\u0005Z\u086c\nZ\u0003Z\u0005Z\u086f",
    "\nZ\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003",
    "]\u0003^\u0003^\u0003^\u0005^\u0887\n^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0005^\u0890\n^\u0003^\u0003^\u0003^\u0005^\u0895\n",
    "^\u0003^\u0003^\u0003^\u0005^\u089a\n^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u08a0\n^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u08a7\n^\u0003",
    "^\u0003^\u0003^\u0005^\u08ac\n^\u0005^\u08ae\n^\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0005`\u08be\n`\u0003a\u0003a\u0003a\u0005a\u08c3\na\u0003",
    "a\u0003a\u0003a\u0003a\u0005a\u08c9\na\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0005b\u08d0\nb\u0003c\u0003c\u0003c\u0003c\u0003d\u0003d\u0003d\u0003",
    "d\u0003e\u0003e\u0003e\u0003e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0007f\u08e4\nf\ff\u000ef\u08e7\u000bf\u0003f\u0003f\u0003f\u0005",
    "f\u08ec\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0007g\u08f4\n",
    "g\fg\u000eg\u08f7\u000bg\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0005h\u0900\nh\u0003i\u0003i\u0003i\u0003i\u0003i\u0007i\u0907\n",
    "i\fi\u000ei\u090a\u000bi\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0007j\u0914\nj\fj\u000ej\u0917\u000bj\u0003j\u0003j\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003m\u0003m\u0003",
    "m\u0003m\u0003n\u0003n\u0003n\u0005n\u092a\nn\u0003o\u0003o\u0003o\u0003",
    "o\u0003p\u0003p\u0003p\u0005p\u0933\np\u0003p\u0003p\u0003p\u0005p\u0938",
    "\np\u0003p\u0003p\u0005p\u093c\np\u0003p\u0005p\u093f\np\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0005r\u094d\nr\u0003r\u0003r\u0003s\u0003s\u0007s\u0953\ns\fs\u000e",
    "s\u0956\u000bs\u0003s\u0005s\u0959\ns\u0003s\u0005s\u095c\ns\u0003t",
    "\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0005u\u096b\nu\u0003v\u0003v\u0005v\u096f\nv\u0003",
    "v\u0003v\u0003v\u0005v\u0974\nv\u0003v\u0005v\u0977\nv\u0003v\u0003",
    "v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0005",
    "w\u0984\nw\u0003w\u0003w\u0005w\u0988\nw\u0003w\u0003w\u0003x\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0007x\u0992\nx\fx\u000ex\u0995\u000b",
    "x\u0003x\u0003x\u0005x\u0999\nx\u0003x\u0003x\u0005x\u099d\nx\u0003",
    "x\u0003x\u0005x\u09a1\nx\u0003x\u0003x\u0003y\u0003y\u0005y\u09a7\n",
    "y\u0003y\u0005y\u09aa\ny\u0003y\u0005y\u09ad\ny\u0003z\u0003z\u0003",
    "z\u0003z\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0005{\u09c8\n{\u0003{\u0003{\u0006{\u09cc\n{\r{\u000e",
    "{\u09cd\u0003{\u0003{\u0005{\u09d2\n{\u0003{\u0003{\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0007|\u09db\n|\f|\u000e|\u09de\u000b|\u0003|\u0003",
    "|\u0003}\u0003}\u0005}\u09e4\n}\u0003}\u0003}\u0005}\u09e8\n}\u0003",
    "}\u0005}\u09eb\n}\u0003~\u0003~\u0003~\u0003~\u0005~\u09f1\n~\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0005\u007f\u09fa\n\u007f\u0003\u007f\u0003\u007f\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0a02\n\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u0a06\n\u0080\u0003\u0081\u0003\u0081",
    "\u0005\u0081\u0a0a\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0005\u0082\u0a12\n\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0005\u0082\u0a1b\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0006\u0083\u0a21\n\u0083\r\u0083\u000e\u0083\u0a22\u0003\u0084",
    "\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u0a31\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u0a46\n\u0085\u0003\u0086",
    "\u0006\u0086\u0a49\n\u0086\r\u0086\u000e\u0086\u0a4a\u0003\u0087\u0003",
    "\u0087\u0005\u0087\u0a4f\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u0a56\n\u0088\u0003\u0088\u0003",
    "\u0088\u0005\u0088\u0a5a\n\u0088\u0003\u0089\u0003\u0089\u0005\u0089",
    "\u0a5e\n\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0a62\n\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0007\u008b\u0a6c\n\u008b\f\u008b\u000e\u008b\u0a6f",
    "\u000b\u008b\u0003\u008b\u0005\u008b\u0a72\n\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0005\u008e\u0a80",
    "\n\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e",
    "\u0a86\n\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0005\u008e\u0a8d\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0005\u008f\u0a92\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005",
    "\u008f\u0a9d\n\u008f\u0003\u008f\u0005\u008f\u0aa0\n\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0aa6\n\u008f\u0005",
    "\u008f\u0aa8\n\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0ab1\n\u0090\u0003",
    "\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u0abb\n\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0005\u0091\u0ac0\n\u0091\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0094\u0003",
    "\u0094\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0005\u0096\u0acf",
    "\n\u0096\u0003\u0097\u0003\u0097\u0005\u0097\u0ad3\n\u0097\u0003\u0098",
    "\u0005\u0098\u0ad6\n\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0ada",
    "\n\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0006\u009a",
    "\u0ae6\n\u009a\r\u009a\u000e\u009a\u0ae7\u0005\u009a\u0aea\n\u009a\u0003",
    "\u009a\u0003\u009a\u0005\u009a\u0aee\n\u009a\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0007\u009b\u0af4\n\u009b\f\u009b\u000e\u009b",
    "\u0af7\u000b\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0005",
    "\u009c\u0afd\n\u009c\u0003\u009c\u0006\u009c\u0b00\n\u009c\r\u009c\u000e",
    "\u009c\u0b01\u0005\u009c\u0b04\n\u009c\u0003\u009c\u0003\u009c\u0003",
    "\u009d\u0005\u009d\u0b09\n\u009d\u0003\u009d\u0006\u009d\u0b0c\n\u009d",
    "\r\u009d\u000e\u009d\u0b0d\u0003\u009d\u0003\u009d\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0b16\n\u009e\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0b1d\n",
    "\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0b21\n\u009f\u0003\u009f",
    "\u0005\u009f\u0b24\n\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0005\u00a1\u0b30\n\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0005\u00a2\u0b36\n\u00a2\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u0b3f",
    "\n\u00a4\u0003\u00a4\u0005\u00a4\u0b42\n\u00a4\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0007\u00a5\u0b4a\n",
    "\u00a5\f\u00a5\u000e\u00a5\u0b4d\u000b\u00a5\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0007\u00a5\u0b55\n",
    "\u00a5\f\u00a5\u000e\u00a5\u0b58\u000b\u00a5\u0005\u00a5\u0b5a\n\u00a5",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6",
    "\u0b61\n\u00a6\u0003\u00a6\u0005\u00a6\u0b64\n\u00a6\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u0b6b\n\u00a7",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0b76\n\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0b7c\n\u00a8",
    "\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0b80\n\u00a8\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9\u0b88",
    "\n\u00a9\f\u00a9\u000e\u00a9\u0b8b\u000b\u00a9\u0005\u00a9\u0b8d\n\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0b93\n",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0b9e\n\u00aa",
    "\u0005\u00aa\u0ba0\n\u00aa\u0005\u00aa\u0ba2\n\u00aa\u0003\u00aa\u0005",
    "\u00aa\u0ba5\n\u00aa\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0ba9\n\u00ab",
    "\u0003\u00ab\u0005\u00ab\u0bac\n\u00ab\u0003\u00ac\u0003\u00ac\u0005",
    "\u00ac\u0bb0\n\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0bb4\n\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0bb9\n\u00ac\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0bc4\n\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0005\u00ae\u0bc8\n\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0bd0\n\u00ae",
    "\u0003\u00af\u0005\u00af\u0bd3\n\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0007\u00af\u0bd8\n\u00af\f\u00af\u000e\u00af\u0bdb\u000b\u00af",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0007\u00b0\u0be1\n",
    "\u00b0\f\u00b0\u000e\u00b0\u0be4\u000b\u00b0\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0007\u00b1\u0beb\n\u00b1\f\u00b1",
    "\u000e\u00b1\u0bee\u000b\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0bf2",
    "\n\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1",
    "\u0bf8\n\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0bfc\n\u00b1\u0003",
    "\u00b1\u0005\u00b1\u0bff\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0c07\n\u00b2\u0003",
    "\u00b2\u0005\u00b2\u0c0a\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2",
    "\u0c0e\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0c12\n\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0c17\n\u00b2\u0003\u00b2",
    "\u0005\u00b2\u0c1a\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0c1e",
    "\n\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0c22\n\u00b2\u0007\u00b2",
    "\u0c24\n\u00b2\f\u00b2\u000e\u00b2\u0c27\u000b\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0007",
    "\u00b3\u0c30\n\u00b3\f\u00b3\u000e\u00b3\u0c33\u000b\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b4\u0003\u00b4\u0007\u00b4\u0c3e\n\u00b4\f\u00b4\u000e\u00b4",
    "\u0c41\u000b\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0005\u00b5\u0c48\n\u00b5\u0003\u00b6\u0003\u00b6\u0005\u00b6",
    "\u0c4c\n\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0c50\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0c56\n\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0007\u00b7\u0c5c\n",
    "\u00b7\f\u00b7\u000e\u00b7\u0c5f\u000b\u00b7\u0005\u00b7\u0c61\n\u00b7",
    "\u0003\u00b7\u0005\u00b7\u0c64\n\u00b7\u0003\u00b7\u0003\u00b7\u0005",
    "\u00b7\u0c68\n\u00b7\u0003\u00b7\u0005\u00b7\u0c6b\n\u00b7\u0003\u00b7",
    "\u0005\u00b7\u0c6e\n\u00b7\u0003\u00b7\u0005\u00b7\u0c71\n\u00b7\u0003",
    "\u00b8\u0003\u00b8\u0005\u00b8\u0c75\n\u00b8\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0c81\n\u00ba\u0003\u00ba\u0005",
    "\u00ba\u0c84\n\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb",
    "\u0c89\n\u00bb\f\u00bb\u000e\u00bb\u0c8c\u000b\u00bb\u0003\u00bc\u0003",
    "\u00bc\u0007\u00bc\u0c90\n\u00bc\f\u00bc\u000e\u00bc\u0c93\u000b\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0c97\n\u00bc\u0003\u00bd\u0003",
    "\u00bd\u0007\u00bd\u0c9b\n\u00bd\f\u00bd\u000e\u00bd\u0c9e\u000b\u00bd",
    "\u0003\u00bd\u0005\u00bd\u0ca1\n\u00bd\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0005\u00be\u0ca6\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0007\u00be\u0cab\n\u00be\f\u00be\u000e\u00be\u0cae\u000b\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u0cb3\n\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u0cba\n",
    "\u00be\u0003\u00bf\u0005\u00bf\u0cbd\n\u00bf\u0003\u00bf\u0005\u00bf",
    "\u0cc0\n\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0cc4\n\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0cc9\n\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0007\u00bf\u0ccd\n\u00bf\f\u00bf\u000e\u00bf\u0cd0\u000b",
    "\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u0cda\n\u00c1\f\u00c1\u000e",
    "\u00c1\u0cdd\u000b\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2",
    "\u0005\u00c2\u0ce3\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0005\u00c3\u0cea\n\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u0cee\n\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u0cf8",
    "\n\u00c4\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0cfc\n\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0d02\n\u00c5\f\u00c5",
    "\u000e\u00c5\u0d05\u000b\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005",
    "\u00c6\u0d10\n\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0007\u00c7\u0d18\n\u00c7\f\u00c7\u000e\u00c7",
    "\u0d1b\u000b\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0d1f\n\u00c7",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0007\u00c8\u0d27\n\u00c8\f\u00c8\u000e\u00c8\u0d2a\u000b\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0007\u00c8\u0d2f\n\u00c8\f\u00c8\u000e",
    "\u00c8\u0d32\u000b\u00c8\u0005\u00c8\u0d34\n\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c9\u0003\u00c9\u0005\u00c9\u0d3a\n\u00c9\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0d3f\n\u00ca\u0003\u00ca\u0005",
    "\u00ca\u0d42\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb",
    "\u0d47\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0007\u00cb\u0d4f\n\u00cb\f\u00cb\u000e\u00cb\u0d52",
    "\u000b\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u0d56\n\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0007\u00cc\u0d61\n\u00cc\f\u00cc\u000e",
    "\u00cc\u0d64\u000b\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0007\u00cd\u0d6d\n\u00cd\f\u00cd",
    "\u000e\u00cd\u0d70\u000b\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u0d74",
    "\n\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0007\u00cd\u0d7c\n\u00cd\f\u00cd\u000e\u00cd\u0d7f\u000b",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd\u0d83\n\u00cd\u0005\u00cd",
    "\u0d85\n\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0d8a",
    "\n\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0d8e\n\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0d94\n\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0005\u00ce\u0d98\n\u00ce\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0007\u00d0\u0da3\n\u00d0\f\u00d0\u000e\u00d0\u0da6\u000b",
    "\u00d0\u0003\u00d0\u0005\u00d0\u0da9\n\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0007\u00d0\u0db1\n",
    "\u00d0\f\u00d0\u000e\u00d0\u0db4\u000b\u00d0\u0005\u00d0\u0db6\n\u00d0",
    "\u0005\u00d0\u0db8\n\u00d0\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005",
    "\u00d1\u0dbd\n\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0007\u00d2\u0dc4\n\u00d2\f\u00d2\u000e\u00d2\u0dc7\u000b",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0007\u00d3\u0dd1\n\u00d3\f\u00d3\u000e",
    "\u00d3\u0dd4\u000b\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0005\u00d4\u0ddb\n\u00d4\u0003\u00d4\u0003\u00d4\u0005",
    "\u00d4\u0ddf\n\u00d4\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6",
    "\u0003\u00d6\u0007\u00d6\u0de6\n\u00d6\f\u00d6\u000e\u00d6\u0de9\u000b",
    "\u00d6\u0003\u00d6\u0005\u00d6\u0dec\n\u00d6\u0003\u00d6\u0007\u00d6",
    "\u0def\n\u00d6\f\u00d6\u000e\u00d6\u0df2\u000b\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0005\u00d7\u0dfc\n\u00d7\u0005\u00d7\u0dfe\n\u00d7\u0003\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0007\u00d9",
    "\u0e0c\n\u00d9\f\u00d9\u000e\u00d9\u0e0f\u000b\u00d9\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u0e13\n\u00da\u0003\u00da\u0003\u00da\u0007\u00da",
    "\u0e17\n\u00da\f\u00da\u000e\u00da\u0e1a\u000b\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00db\u0005\u00db\u0e1f\n\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0007\u00dd\u0e2f\n\u00dd\f\u00dd\u000e\u00dd\u0e32\u000b\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0005\u00de\u0e38\n\u00de",
    "\u0003\u00de\u0005\u00de\u0e3b\n\u00de\u0003\u00df\u0005\u00df\u0e3e",
    "\n\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0007\u00df",
    "\u0e44\n\u00df\f\u00df\u000e\u00df\u0e47\u000b\u00df\u0005\u00df\u0e49",
    "\n\u00df\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0005\u00e0\u0e51\n\u00e0\u0005\u00e0\u0e53\n\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0005\u00e0\u0e57\n\u00e0\u0003\u00e0\u0005\u00e0",
    "\u0e5a\n\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0e5f",
    "\n\u00e1\u0005\u00e1\u0e61\n\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1",
    "\u0e65\n\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005",
    "\u00e3\u0e71\n\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0005\u00e5\u0e7a\n\u00e5\u0003",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0007\u00e5\u0e80\n\u00e5",
    "\f\u00e5\u000e\u00e5\u0e83\u000b\u00e5\u0003\u00e6\u0003\u00e6\u0005",
    "\u00e6\u0e87\n\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0e8b\n\u00e6",
    "\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u0e90\n\u00e7\u0003",
    "\u00e7\u0005\u00e7\u0e93\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0007\u00e8\u0e99\n\u00e8\f\u00e8\u000e\u00e8\u0e9c\u000b",
    "\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0005",
    "\u00e9\u0ea3\n\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea",
    "\u0005\u00ea\u0ea9\n\u00ea\u0003\u00ea\u0005\u00ea\u0eac\n\u00ea\u0003",
    "\u00ea\u0005\u00ea\u0eaf\n\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0003\u00eb\u0007\u00eb\u0eb5\n\u00eb\f\u00eb\u000e\u00eb\u0eb8\u000b",
    "\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0005\u00eb\u0ec1\n\u00eb\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0007\u00ec\u0ecb\n\u00ec\f\u00ec\u000e\u00ec\u0ece\u000b\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0ed4\n\u00ec",
    "\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0ed8\n\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0005\u00ed\u0edc\n\u00ed\u0003\u00ed\u0005\u00ed\u0edf\n\u00ed",
    "\u0003\u00ed\u0005\u00ed\u0ee2\n\u00ed\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0005\u00ee\u0ee7\n\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef",
    "\u0005\u00ef\u0eec\n\u00ef\u0003\u00ef\u0005\u00ef\u0eef\n\u00ef\u0003",
    "\u00ef\u0005\u00ef\u0ef2\n\u00ef\u0003\u00f0\u0003\u00f0\u0006\u00f0",
    "\u0ef6\n\u00f0\r\u00f0\u000e\u00f0\u0ef7\u0003\u00f0\u0005\u00f0\u0efb",
    "\n\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0005\u00f1",
    "\u0f01\n\u00f1\u0003\u00f1\u0005\u00f1\u0f04\n\u00f1\u0003\u00f2\u0005",
    "\u00f2\u0f07\n\u00f2\u0003\u00f2\u0006\u00f2\u0f0a\n\u00f2\r\u00f2\u000e",
    "\u00f2\u0f0b\u0003\u00f2\u0005\u00f2\u0f0f\n\u00f2\u0003\u00f3\u0003",
    "\u00f3\u0003\u00f3\u0003\u00f3\u0006\u00f3\u0f15\n\u00f3\r\u00f3\u000e",
    "\u00f3\u0f16\u0003\u00f4\u0003\u00f4\u0006\u00f4\u0f1b\n\u00f4\r\u00f4",
    "\u000e\u00f4\u0f1c\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0007\u00f5\u0f25\n\u00f5\f\u00f5\u000e\u00f5\u0f28",
    "\u000b\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0f2c\n\u00f5\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0f31\n\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7",
    "\u0f39\n\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u0f43\n\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0005\u00f7\u0f47\n\u00f7\u0005\u00f7\u0f49",
    "\n\u00f7\u0003\u00f7\u0005\u00f7\u0f4c\n\u00f7\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0007\u00f8\u0f56\n\u00f8\f\u00f8\u000e\u00f8\u0f59\u000b\u00f8\u0003",
    "\u00f8\u0005\u00f8\u0f5c\n\u00f8\u0003\u00f8\u0005\u00f8\u0f5f\n\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0007\u00fb\u0f71\n",
    "\u00fb\f\u00fb\u000e\u00fb\u0f74\u000b\u00fb\u0003\u00fb\u0003\u00fb",
    "\u0005\u00fb\u0f78\n\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0005",
    "\u00fb\u0f7d\n\u00fb\u0003\u00fb\u0003\u00fb\u0005\u00fb\u0f81\n\u00fb",
    "\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0005\u00fc",
    "\u0f88\n\u00fc\u0003\u00fc\u0005\u00fc\u0f8b\n\u00fc\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0007\u00fd\u0f92\n\u00fd",
    "\f\u00fd\u000e\u00fd\u0f95\u000b\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fd\u0005\u00fd\u0f9b\n\u00fd\u0003\u00fe\u0003\u00fe",
    "\u0003\u00fe\u0005\u00fe\u0fa0\n\u00fe\u0003\u00ff\u0003\u00ff\u0005",
    "\u00ff\u0fa4\n\u00ff\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100",
    "\u0003\u0100\u0003\u0100\u0005\u0100\u0fac\n\u0100\u0003\u0100\u0003",
    "\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u0fb2\n\u0100\u0003\u0101",
    "\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101",
    "\u0fba\n\u0101\u0003\u0101\u0005\u0101\u0fbd\n\u0101\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0103\u0003\u0103\u0003\u0103\u0005",
    "\u0103\u0fc6\n\u0103\u0003\u0103\u0005\u0103\u0fc9\n\u0103\u0003\u0103",
    "\u0005\u0103\u0fcc\n\u0103\u0003\u0104\u0003\u0104\u0003\u0104\u0003",
    "\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0fd5\n\u0105",
    "\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0005\u0106\u0fdb\n",
    "\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0106\u0005\u0106\u0fe1",
    "\n\u0106\u0005\u0106\u0fe3\n\u0106\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107\u0003\u0107",
    "\u0003\u0107\u0003\u0107\u0005\u0107\u0ff0\n\u0107\u0005\u0107\u0ff2",
    "\n\u0107\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0108\u0003\u0108\u0005\u0108\u0ffb\n\u0108\u0005\u0108\u0ffd",
    "\n\u0108\u0003\u0109\u0003\u0109\u0005\u0109\u1001\n\u0109\u0003\u0109",
    "\u0003\u0109\u0003\u0109\u0003\u0109\u0005\u0109\u1007\n\u0109\u0003",
    "\u0109\u0003\u0109\u0005\u0109\u100b\n\u0109\u0003\u010a\u0003\u010a",
    "\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0007\u010c\u1017\n\u010c\f\u010c\u000e\u010c",
    "\u101a\u000b\u010c\u0003\u010d\u0003\u010d\u0005\u010d\u101e\n\u010d",
    "\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010f",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u1029\n\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u1034\n\u010f\u0003\u010f",
    "\u0003\u010f\u0005\u010f\u1038\n\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0007\u010f\u103d\n\u010f\f\u010f\u000e\u010f\u1040\u000b\u010f",
    "\u0003\u010f\u0003\u010f\u0005\u010f\u1044\n\u010f\u0007\u010f\u1046",
    "\n\u010f\f\u010f\u000e\u010f\u1049\u000b\u010f\u0003\u010f\u0003\u010f",
    "\u0005\u010f\u104d\n\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0007\u010f\u1055\n\u010f\f\u010f\u000e",
    "\u010f\u1058\u000b\u010f\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110",
    "\u105d\n\u0110\u0003\u0110\u0005\u0110\u1060\n\u0110\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0007",
    "\u0111\u1069\n\u0111\f\u0111\u000e\u0111\u106c\u000b\u0111\u0003\u0112",
    "\u0003\u0112\u0005\u0112\u1070\n\u0112\u0003\u0112\u0003\u0112\u0003",
    "\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0003\u0112\u0005",
    "\u0112\u107a\n\u0112\u0005\u0112\u107c\n\u0112\u0005\u0112\u107e\n\u0112",
    "\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113",
    "\u0003\u0113\u0003\u0113\u0005\u0113\u1088\n\u0113\u0003\u0113\u0003",
    "\u0113\u0005\u0113\u108c\n\u0113\u0005\u0113\u108e\n\u0113\u0003\u0114",
    "\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114",
    "\u0003\u0114\u0007\u0114\u1098\n\u0114\f\u0114\u000e\u0114\u109b\u000b",
    "\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0005",
    "\u0114\u10a2\n\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115",
    "\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116",
    "\u0003\u0116\u0005\u0116\u10af\n\u0116\u0003\u0116\u0005\u0116\u10b2",
    "\n\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116",
    "\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0007\u0116",
    "\u10be\n\u0116\f\u0116\u000e\u0116\u10c1\u000b\u0116\u0003\u0117\u0003",
    "\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0005\u0117\u10c8\n\u0117",
    "\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117",
    "\u0005\u0117\u10d0\n\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003",
    "\u0117\u0003\u0117\u0005\u0117\u10d7\n\u0117\u0003\u0117\u0003\u0117",
    "\u0005\u0117\u10db\n\u0117\u0003\u0118\u0003\u0118\u0003\u0118\u0003",
    "\u0118\u0003\u0118\u0005\u0118\u10e2\n\u0118\u0003\u0119\u0003\u0119",
    "\u0005\u0119\u10e6\n\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0005",
    "\u0119\u10eb\n\u0119\u0007\u0119\u10ed\n\u0119\f\u0119\u000e\u0119\u10f0",
    "\u000b\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0007\u0119\u10f5\n",
    "\u0119\f\u0119\u000e\u0119\u10f8\u000b\u0119\u0003\u0119\u0005\u0119",
    "\u10fb\n\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0005\u011a\u1102\n\u011a\u0003\u011a\u0003\u011a\u0003\u011a",
    "\u0005\u011a\u1107\n\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0005\u011a\u1110\n\u011a",
    "\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0007\u011b",
    "\u1117\n\u011b\f\u011b\u000e\u011b\u111a\u000b\u011b\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0005\u011b\u1122",
    "\n\u011b\u0003\u011b\u0005\u011b\u1125\n\u011b\u0003\u011b\u0003\u011b",
    "\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c",
    "\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c",
    "\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005\u011c\u1139\n",
    "\u011c\u0003\u011d\u0003\u011d\u0005\u011d\u113d\n\u011d\u0003\u011e",
    "\u0005\u011e\u1140\n\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0006",
    "\u011e\u1145\n\u011e\r\u011e\u000e\u011e\u1146\u0003\u011e\u0005\u011e",
    "\u114a\n\u011e\u0003\u011e\u0003\u011e\u0005\u011e\u114e\n\u011e\u0003",
    "\u011e\u0005\u011e\u1151\n\u011e\u0003\u011f\u0003\u011f\u0003\u011f",
    "\u0003\u011f\u0003\u011f\u0005\u011f\u1158\n\u011f\u0003\u0120\u0005",
    "\u0120\u115b\n\u0120\u0003\u0120\u0003\u0120\u0006\u0120\u115f\n\u0120",
    "\r\u0120\u000e\u0120\u1160\u0003\u0120\u0005\u0120\u1164\n\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u1168\n\u0120\u0003\u0120\u0005\u0120",
    "\u116b\n\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0003",
    "\u0121\u0005\u0121\u1172\n\u0121\u0003\u0122\u0003\u0122\u0003\u0122",
    "\u0005\u0122\u1177\n\u0122\u0003\u0123\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0007\u0123\u1183\n\u0123\f\u0123\u000e\u0123\u1186\u000b\u0123",
    "\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0005\u0123\u118c\n",
    "\u0123\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u1197\n\u0124",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0005\u0125\u11a0\n\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u11a9",
    "\n\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u11ad\n\u0125\u0003\u0125",
    "\u0003\u0125\u0005\u0125\u11b1\n\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u11cb\n\u0125",
    "\u0003\u0125\u0005\u0125\u11ce\n\u0125\u0003\u0125\u0005\u0125\u11d1",
    "\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u11db\n\u0125\u0003",
    "\u0125\u0003\u0125\u0005\u0125\u11df\n\u0125\u0003\u0126\u0003\u0126",
    "\u0003\u0126\u0005\u0126\u11e4\n\u0126\u0003\u0127\u0003\u0127\u0003",
    "\u0127\u0005\u0127\u11e9\n\u0127\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0005\u0128\u11ee\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u11f7\n\u0128",
    "\u0003\u0128\u0005\u0128\u11fa\n\u0128\u0005\u0128\u11fc\n\u0128\u0003",
    "\u0128\u0003\u0128\u0005\u0128\u1200\n\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1207\n\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u120e",
    "\n\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1216\n\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0003\u0128\u0005\u0128\u1225",
    "\n\u0128\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u122a\n\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u122f\n\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1235\n\u0129",
    "\u0003\u0129\u0005\u0129\u1238\n\u0129\u0003\u0129\u0003\u0129\u0005",
    "\u0129\u123c\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1246\n",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1252",
    "\n\u0129\u0005\u0129\u1254\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u125b\n\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u125f\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0006\u0129\u1266\n\u0129\r\u0129\u000e\u0129",
    "\u1267\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0005\u0129\u1271\n\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u127f\n",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u1287\n\u0129\u0003\u0129\u0005\u0129\u128a\n\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0005\u0129\u1293\n\u0129\u0003\u0129\u0003\u0129\u0007",
    "\u0129\u1297\n\u0129\f\u0129\u000e\u0129\u129a\u000b\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0005\u0129\u12a3\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u12ab\n\u0129\u0003\u0129",
    "\u0005\u0129\u12ae\n\u0129\u0003\u0129\u0005\u0129\u12b1\n\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u12ba\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0005\u0129\u12bf\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0007\u0129\u12c6\n\u0129\f\u0129\u000e\u0129\u12c9",
    "\u000b\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u12ce\n",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u12d3\n\u0129",
    "\u0003\u0129\u0005\u0129\u12d6\n\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u12db\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0005\u0129\u12e0\n\u0129\u0007\u0129\u12e2\n\u0129\f\u0129\u000e\u0129",
    "\u12e5\u000b\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u12ea",
    "\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129",
    "\u12f0\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u12f9\n\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u12fe\n\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1306",
    "\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u130a\n\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u130f\n\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1315\n\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u131c\n",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1321\n\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129",
    "\u1328\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u132c\n\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1331\n\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129",
    "\u1339\n\u0129\u0003\u0129\u0005\u0129\u133c\n\u0129\u0003\u0129\u0005",
    "\u0129\u133f\n\u0129\u0003\u0129\u0005\u0129\u1342\n\u0129\u0003\u0129",
    "\u0003\u0129\u0005\u0129\u1346\n\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u134b\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0005\u0129\u1350\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1354",
    "\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0005\u0129\u135b\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005",
    "\u0129\u1360\n\u0129\u0005\u0129\u1362\n\u0129\u0003\u012a\u0003\u012a",
    "\u0003\u012b\u0003\u012b\u0003\u012c\u0003\u012c\u0003\u012d\u0003\u012d",
    "\u0003\u012d\u0005\u012d\u136d\n\u012d\u0003\u012d\u0003\u012d\u0005",
    "\u012d\u1371\n\u012d\u0005\u012d\u1373\n\u012d\u0003\u012d\u0003\u012d",
    "\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012e\u0005\u012e\u137e\n\u012e\u0003\u012f\u0003\u012f\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0005\u0130\u1389\n\u0130\u0003\u0131\u0003\u0131\u0003\u0131",
    "\u0003\u0131\u0003\u0131\u0007\u0131\u1390\n\u0131\f\u0131\u000e\u0131",
    "\u1393\u000b\u0131\u0005\u0131\u1395\n\u0131\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1399\n\u0132\u0003\u0132\u0005\u0132\u139c\n\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u13a0\n\u0132\u0003\u0133\u0003\u0133",
    "\u0003\u0133\u0003\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134",
    "\u0003\u0134\u0003\u0134\u0003\u0134\u0005\u0134\u13ad\n\u0134\u0003",
    "\u0135\u0003\u0135\u0003\u0135\u0005\u0135\u13b2\n\u0135\u0003\u0135",
    "\u0003\u0135\u0003\u0135\u0003\u0135\u0007\u0135\u13b8\n\u0135\f\u0135",
    "\u000e\u0135\u13bb\u000b\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003",
    "\u0135\u0005\u0135\u13c1\n\u0135\u0003\u0135\u0003\u0135\u0005\u0135",
    "\u13c5\n\u0135\u0003\u0136\u0003\u0136\u0003\u0136\u0005\u0136\u13ca",
    "\n\u0136\u0003\u0136\u0003\u0136\u0005\u0136\u13ce\n\u0136\u0003\u0136",
    "\u0003\u0136\u0003\u0136\u0005\u0136\u13d3\n\u0136\u0003\u0137\u0003",
    "\u0137\u0003\u0137\u0005\u0137\u13d8\n\u0137\u0003\u0137\u0005\u0137",
    "\u13db\n\u0137\u0003\u0137\u0003\u0137\u0003\u0137\u0007\u0137\u13e0",
    "\n\u0137\f\u0137\u000e\u0137\u13e3\u000b\u0137\u0003\u0137\u0003\u0137",
    "\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0005\u0138",
    "\u13ec\n\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0007",
    "\u0138\u13f2\n\u0138\f\u0138\u000e\u0138\u13f5\u000b\u0138\u0003\u0138",
    "\u0005\u0138\u13f8\n\u0138\u0003\u0138\u0003\u0138\u0003\u0139\u0003",
    "\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0003\u0139\u0005\u0139\u1402",
    "\n\u0139\u0003\u0139\u0005\u0139\u1405\n\u0139\u0005\u0139\u1407\n\u0139",
    "\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013b\u0003\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0005\u013b\u1411\n\u013b\u0005\u013b\u1413",
    "\n\u013b\u0003\u013c\u0003\u013c\u0003\u013c\u0003\u013c\u0005\u013c",
    "\u1419\n\u013c\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0005",
    "\u013d\u141f\n\u013d\u0005\u013d\u1421\n\u013d\u0003\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013f\u0003\u013f\u0003\u013f\u0003\u0140\u0003\u0140",
    "\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0005\u0140\u142f\n",
    "\u0140\u0005\u0140\u1431\n\u0140\u0003\u0141\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0005\u0141",
    "\u143b\n\u0141\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003",
    "\u0142\u0003\u0142\u0003\u0142\u0005\u0142\u1444\n\u0142\u0003\u0143",
    "\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143",
    "\u0005\u0143\u144d\n\u0143\u0003\u0144\u0003\u0144\u0005\u0144\u1451",
    "\n\u0144\u0003\u0144\u0003\u0144\u0005\u0144\u1455\n\u0144\u0003\u0144",
    "\u0003\u0144\u0003\u0145\u0005\u0145\u145a\n\u0145\u0003\u0145\u0003",
    "\u0145\u0005\u0145\u145e\n\u0145\u0003\u0145\u0005\u0145\u1461\n\u0145",
    "\u0003\u0146\u0003\u0146\u0005\u0146\u1465\n\u0146\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0005\u0147\u146c\n\u0147",
    "\u0003\u0148\u0003\u0148\u0005\u0148\u1470\n\u0148\u0003\u0148\u0003",
    "\u0148\u0003\u0148\u0003\u0148\u0007\u0148\u1476\n\u0148\f\u0148\u000e",
    "\u0148\u1479\u000b\u0148\u0003\u0149\u0003\u0149\u0005\u0149\u147d\n",
    "\u0149\u0003\u014a\u0003\u014a\u0003\u014b\u0003\u014b\u0003\u014c\u0003",
    "\u014c\u0003\u014d\u0003\u014d\u0003\u014e\u0003\u014e\u0003\u014f\u0003",
    "\u014f\u0003\u0150\u0003\u0150\u0003\u0150\u0007\u0150\u148e\n\u0150",
    "\f\u0150\u000e\u0150\u1491\u000b\u0150\u0003\u0150\u0003\u0150\u0005",
    "\u0150\u1495\n\u0150\u0003\u0151\u0003\u0151\u0003\u0152\u0003\u0152",
    "\u0003\u0152\u0005\u0152\u149c\n\u0152\u0003\u0153\u0003\u0153\u0003",
    "\u0154\u0003\u0154\u0003\u0155\u0003\u0155\u0003\u0156\u0003\u0156\u0003",
    "\u0156\u0007\u0156\u14a7\n\u0156\f\u0156\u000e\u0156\u14aa\u000b\u0156",
    "\u0003\u0157\u0003\u0157\u0003\u0158\u0003\u0158\u0003\u0158\u0007\u0158",
    "\u14b1\n\u0158\f\u0158\u000e\u0158\u14b4\u000b\u0158\u0003\u0158\u0003",
    "\u0158\u0005\u0158\u14b8\n\u0158\u0003\u0159\u0003\u0159\u0003\u015a",
    "\u0003\u015a\u0003\u015a\u0007\u015a\u14bf\n\u015a\f\u015a\u000e\u015a",
    "\u14c2\u000b\u015a\u0003\u015b\u0003\u015b\u0003\u015b\u0007\u015b\u14c7",
    "\n\u015b\f\u015b\u000e\u015b\u14ca\u000b\u015b\u0003\u015c\u0003\u015c",
    "\u0003\u015c\u0007\u015c\u14cf\n\u015c\f\u015c\u000e\u015c\u14d2\u000b",
    "\u015c\u0003\u015d\u0003\u015d\u0003\u015d\u0005\u015d\u14d7\n\u015d",
    "\u0003\u015e\u0003\u015e\u0003\u015e\u0005\u015e\u14dc\n\u015e\u0003",
    "\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u14e1\n\u015f\u0003\u0160",
    "\u0003\u0160\u0005\u0160\u14e5\n\u0160\u0003\u0160\u0003\u0160\u0003",
    "\u0160\u0005\u0160\u14ea\n\u0160\u0003\u0160\u0005\u0160\u14ed\n\u0160",
    "\u0003\u0161\u0003\u0161\u0003\u0162\u0003\u0162\u0005\u0162\u14f3\n",
    "\u0162\u0003\u0163\u0003\u0163\u0005\u0163\u14f7\n\u0163\u0003\u0164",
    "\u0003\u0164\u0003\u0164\u0005\u0164\u14fc\n\u0164\u0003\u0165\u0003",
    "\u0165\u0003\u0166\u0003\u0166\u0003\u0166\u0007\u0166\u1503\n\u0166",
    "\f\u0166\u000e\u0166\u1506\u000b\u0166\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0005\u0167\u150b\n\u0167\u0003\u0167\u0003\u0167\u0003\u0167",
    "\u0005\u0167\u1510\n\u0167\u0003\u0168\u0003\u0168\u0003\u0168\u0007",
    "\u0168\u1515\n\u0168\f\u0168\u000e\u0168\u1518\u000b\u0168\u0003\u0169",
    "\u0003\u0169\u0003\u016a\u0003\u016a\u0003\u016b\u0003\u016b\u0003\u016b",
    "\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0005\u016b\u1525\n",
    "\u016b\u0003\u016c\u0003\u016c\u0005\u016c\u1529\n\u016c\u0003\u016c",
    "\u0003\u016c\u0007\u016c\u152d\n\u016c\f\u016c\u000e\u016c\u1530\u000b",
    "\u016c\u0003\u016c\u0003\u016c\u0005\u016c\u1534\n\u016c\u0003\u016d",
    "\u0003\u016d\u0003\u016d\u0005\u016d\u1539\n\u016d\u0005\u016d\u153b",
    "\n\u016d\u0003\u016d\u0003\u016d\u0003\u016d\u0005\u016d\u1540\n\u016d",
    "\u0007\u016d\u1542\n\u016d\f\u016d\u000e\u016d\u1545\u000b\u016d\u0003",
    "\u016d\u0003\u016d\u0005\u016d\u1549\n\u016d\u0003\u016e\u0003\u016e",
    "\u0003\u016e\u0003\u016e\u0003\u016e\u0005\u016e\u1550\n\u016e\u0003",
    "\u016e\u0003\u016e\u0003\u016e\u0005\u016e\u1555\n\u016e\u0005\u016e",
    "\u1557\n\u016e\u0005\u016e\u1559\n\u016e\u0003\u016e\u0003\u016e\u0003",
    "\u016e\u0003\u016e\u0003\u016e\u0003\u016e\u0003\u016e\u0003\u016e\u0005",
    "\u016e\u1563\n\u016e\u0003\u016e\u0003\u016e\u0003\u016e\u0005\u016e",
    "\u1568\n\u016e\u0007\u016e\u156a\n\u016e\f\u016e\u000e\u016e\u156d\u000b",
    "\u016e\u0005\u016e\u156f\n\u016e\u0003\u016e\u0003\u016e\u0005\u016e",
    "\u1573\n\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0003\u0170\u0003",
    "\u0170\u0003\u0170\u0003\u0170\u0005\u0170\u157c\n\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0171\u0003\u0171\u0005\u0171\u1582\n\u0171\u0003",
    "\u0171\u0003\u0171\u0005\u0171\u1586\n\u0171\u0005\u0171\u1588\n\u0171",
    "\u0003\u0172\u0003\u0172\u0005\u0172\u158c\n\u0172\u0003\u0172\u0003",
    "\u0172\u0005\u0172\u1590\n\u0172\u0003\u0172\u0003\u0172\u0003\u0172",
    "\u0003\u0172\u0003\u0172\u0005\u0172\u1597\n\u0172\u0003\u0172\u0003",
    "\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0005\u0172\u159f",
    "\n\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0003\u0172",
    "\u0003\u0172\u0005\u0172\u15a7\n\u0172\u0005\u0172\u15a9\n\u0172\u0003",
    "\u0173\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u15af\n\u0173",
    "\u0003\u0173\u0005\u0173\u15b2\n\u0173\u0003\u0173\u0003\u0173\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0005\u0174\u15ca\n\u0174\u0003\u0174\u0003\u0174",
    "\u0003\u0174\u0003\u0174\u0003\u0174\u0005\u0174\u15d1\n\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0003",
    "\u0174\u0005\u0174\u15f2\n\u0174\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0005\u0175\u15f7\n\u0175\u0003\u0175\u0005\u0175\u15fa\n\u0175\u0003",
    "\u0175\u0003\u0175\u0003\u0175\u0005\u0175\u15ff\n\u0175\u0005\u0175",
    "\u1601\n\u0175\u0003\u0175\u0003\u0175\u0007\u0175\u1605\n\u0175\f\u0175",
    "\u000e\u0175\u1608\u000b\u0175\u0003\u0176\u0003\u0176\u0003\u0176\u0007",
    "\u0176\u160d\n\u0176\f\u0176\u000e\u0176\u1610\u000b\u0176\u0003\u0177",
    "\u0003\u0177\u0005\u0177\u1614\n\u0177\u0003\u0177\u0003\u0177\u0003",
    "\u0177\u0007\u0177\u1619\n\u0177\f\u0177\u000e\u0177\u161c\u000b\u0177",
    "\u0003\u0177\u0003\u0177\u0005\u0177\u1620\n\u0177\u0003\u0177\u0005",
    "\u0177\u1623\n\u0177\u0003\u0178\u0003\u0178\u0005\u0178\u1627\n\u0178",
    "\u0003\u0178\u0003\u0178\u0003\u0178\u0007\u0178\u162c\n\u0178\f\u0178",
    "\u000e\u0178\u162f\u000b\u0178\u0003\u0179\u0003\u0179\u0003\u0179\u0005",
    "\u0179\u1634\n\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179",
    "\u0005\u0179\u163a\n\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0005\u0179\u1640\n\u0179\u0003\u0179\u0003\u0179\u0003\u0179",
    "\u0003\u0179\u0005\u0179\u1646\n\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0005\u0179\u164b\n\u0179\u0005\u0179\u164d\n\u0179\u0003\u0179",
    "\u0005\u0179\u1650\n\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0005\u0179\u165a",
    "\n\u0179\u0003\u0179\u0005\u0179\u165d\n\u0179\u0005\u0179\u165f\n\u0179",
    "\u0005\u0179\u1661\n\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0003\u0179\u0003\u0179\u0005\u0179\u166f\n\u0179\u0003\u017a",
    "\u0003\u017a\u0003\u017b\u0003\u017b\u0003\u017b\u0003\u017c\u0003\u017c",
    "\u0003\u017d\u0003\u017d\u0005\u017d\u167a\n\u017d\u0003\u017d\u0003",
    "\u017d\u0003\u017e\u0003\u017e\u0005\u017e\u1680\n\u017e\u0003\u017f",
    "\u0003\u017f\u0003\u017f\u0003\u017f\u0003\u0180\u0003\u0180\u0003\u0181",
    "\u0003\u0181\u0003\u0182\u0003\u0182\u0003\u0182\u0002\u0005\u021c\u0220",
    "\u022a\u0183\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4",
    "\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc",
    "\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4",
    "\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c",
    "\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124",
    "\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c",
    "\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154",
    "\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c",
    "\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184",
    "\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c",
    "\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4",
    "\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc",
    "\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4",
    "\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc",
    "\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214",
    "\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c",
    "\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244",
    "\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c",
    "\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274",
    "\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c",
    "\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4",
    "\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc",
    "\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4",
    "\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec",
    "\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0002",
    "_\u0004\u0002\u000f\u000f\u00ce\u00ce\u0004\u0002\u0006\u0006\u0140",
    "\u0140\u0005\u0002\u00ae\u00ae\u00e1\u00e1\u0152\u0152\u0004\u0002:",
    ":\u0128\u0128\u0005\u0002$$\u0130\u0130\u0191\u0191\u0004\u0002tt\u0080",
    "\u0080\u0004\u0002\u0004\u0004\u001b\u001b\u0005\u0002oo\u00c5\u00c5",
    "\u01c3\u01c3\u0005\u0002\u0106\u0106\u0120\u0120\u0133\u0133\u0004\u0002",
    "\u00a0\u00a0\u01c8\u01c8\u0004\u0002$$\u0191\u0191\u0004\u0002\u0003",
    "\u0003yy\u0005\u0002\u0003\u0003yy\u00fa\u00fa\u0005\u0002\\\\\u0127",
    "\u0127\u0192\u0192\u0004\u0002\u00ed\u00ed\u0128\u0128\u0004\u0002\u00f1",
    "\u00f1\u0199\u0199\u0005\u0002\u0098\u0098\u00c6\u00c6\u012f\u012f\u0004",
    "\u0002oo\u014b\u014b\u0004\u0002mm\u00b5\u00b5\u0004\u0002\u01bf\u01bf",
    "\u021b\u021b\u0005\u0002kk\u00d3\u00d3\u0157\u0157\u0005\u0002kk\u00d3",
    "\u00d3\u0111\u0111\u0005\u0002\u0097\u0097\u00e5\u00e5\u010e\u010e\u0004",
    "\u0002\r\r\u0150\u0150\u0004\u0002\u00b1\u00b1\u00eb\u00eb\u0004\u0002",
    "ZZnn\u0006\u0002\u00bf\u00bf\u00c4\u00c4\u010b\u010b\u012d\u012d\u0004",
    "\u0002kk\u022a\u022a\u0003\u0003\u0233\u0233\u0003\u0002\u0233\u0233",
    "\u0003\u0002\u0164\u0165\u0004\u0002\u0122\u0122\u01dc\u01dc\u0003\u0002",
    "JK\u0004\u0002\u0116\u0116\u01d2\u01d2\u0004\u0002\u001a\u001a\u00b5",
    "\u00b5\u0004\u0002\'\'pp\u0005\u0002\b\bvv\u01be\u01be\u0004\u0002W",
    "W\u00ff\u00ff\u0005\u0002\u00a6\u00a6\u00d9\u00d9\u0169\u0169\u0004",
    "\u0002\u0175\u0175\u01aa\u01aa\u0005\u0002\u0175\u0175\u018f\u018f\u01aa",
    "\u01aa\u0004\u0002\u008c\u008c\u00b6\u00b6\u0004\u0002XX\u016b\u016b",
    "\u0004\u0002\u00b4\u00b4\u00d3\u00d3\u0004\u0002\b\b\u01c2\u01c2\u0004",
    "\u0002\u0017\u0017\u017d\u017d\u0004\u0002\u0010\u0010qq\u0004\u0002",
    "\u0099\u0099\u00d6\u00d6\u0004\u0002\b\b\u0099\u0099\u0004\u0002\u01a5",
    "\u01a5\u01a8\u01a8\u0004\u0002\u00f1\u00f1\u019d\u019d\u0003\u0002\u00dc",
    "\u00df\u0003\u0002\u0230\u0231\u0004\u0002\u0224\u0224\u0228\u0228\u0003",
    "\u0002\u0225\u0226\u0004\u0002jj\u00b8\u00b8\u0006\u0002\b\b\f\f\u008f",
    "\u008f\u0190\u0190\u0005\u0002&&\u00d8\u00d8\u01b3\u01b3\u0004\u0002",
    "\b\bvv\u0004\u000211\u01df\u01df\u0004\u0002vv\u01be\u01be\u0003\u0002",
    "\u013a\u013d\u0004\u0002..BB\u0004\u0002\u009a\u009a\u00d7\u00d7\u0004",
    "\u000244\u0102\u0102\u0004\u0002\u01e0\u01e0\u01e3\u01e3\u0004\u0002",
    "\u0084\u0084\u010d\u010d\u0004\u0002\u0088\u0088\u00fd\u00fd\u0004\u0002",
    "MMww\u0004\u0002\u00b0\u00b0\u0186\u0186\u0007\u0002\u01fd\u01ff\u0201",
    "\u0206\u0208\u0209\u020b\u020b\u020f\u0212\u0003\u0002\u01f6\u01fc\u0003",
    "\u0002\u01f0\u01f5\u0004\u0002\u0152\u0152\u016e\u016e\u0004\u0002\u009d",
    "\u009d\u0148\u0148\u0004\u0002\u0114\u0114\u0173\u0173\u0003\u0002\u0085",
    "\u0086\u0004\u0002\u012b\u012b\u0193\u0193\u0005\u0002\u0094\u0094\u01a1",
    "\u01a1\u01d3\u01d3\u0004\u0002@@\u016a\u016a\u0005\u0002@@\u0111\u0111",
    "\u016a\u016a\u0004\u0002\u0134\u0134\u019e\u019e\u0004\u0002\u00b4\u00b4",
    "\u0160\u0160\u0003\u0002\u013e\u013f\u0004\u0002aa\u01ec\u01ec\u0004",
    "\u0002\u00fb\u00fb\u0177\u0177\u0004\u0002++33\b\u0002aa\u00b2\u00b2",
    "\u00f5\u00f5\u00fb\u00fb\u0177\u0177\u01ec\u01ec\u0003\u0002\u021b\u021c",
    "\u0004\u0002\u0216\u0216\u021d\u021dX\u0002\u0003\u0007\n\n\u000e\u000e",
    "\u0011\u0018\u001a\u001b\u001e&))++-/146:<<>DITWXZ_agijloruwxz|\u007f",
    "\u0081\u0084\u008c\u008e\u008e\u0090\u0094\u0098\u009a\u009c\u00a0\u00a6",
    "\u00a7\u00ac\u00ac\u00ae\u00ae\u00b0\u00b0\u00b2\u00b2\u00b4\u00ba\u00bc",
    "\u00be\u00c2\u00c4\u00c6\u00c8\u00ca\u00cb\u00cd\u00cd\u00cf\u00de\u00e0",
    "\u00e0\u00e2\u00e3\u00e6\u00ea\u00ec\u00f2\u00f5\u00f8\u00fa\u0106\u0108",
    "\u0108\u010b\u010d\u0111\u0112\u0114\u0114\u0118\u011d\u011f\u0120\u0122",
    "\u0122\u0124\u0124\u0127\u0127\u0129\u0129\u012b\u0136\u0140\u0140\u0143",
    "\u014a\u0151\u0156\u0158\u0158\u015a\u0167\u0169\u0175\u0177\u0179\u017b",
    "\u017b\u017d\u0184\u0186\u018b\u018d\u0194\u0196\u019a\u019c\u01a2\u01a6",
    "\u01a6\u01a9\u01b1\u01b3\u01b7\u01b9\u01bc\u01bf\u01bf\u01c1\u01c2\u01c4",
    "\u01c6\u01c8\u01c8\u01ca\u01d5\u01d8\u01d9\u01db\u01ff\u0201\u0206\u0208",
    "\u0209\u020b\u020c\u020e\u0212\u023e\u023e\u0005\u000266\u0200\u0200",
    "\u020c\u020e\u0007\u0002TT\u01fd\u01fd\u0207\u0207\u020a\u020a\u020f",
    "\u020f\u0002\u1948\u0002\u030d\u0003\u0002\u0002\u0002\u0004\u0330\u0003",
    "\u0002\u0002\u0002\u0006\u0332\u0003\u0002\u0002\u0002\b\u0337\u0003",
    "\u0002\u0002\u0002\n\u034a\u0003\u0002\u0002\u0002\f\u0381\u0003\u0002",
    "\u0002\u0002\u000e\u0385\u0003\u0002\u0002\u0002\u0010\u039d\u0003\u0002",
    "\u0002\u0002\u0012\u03a1\u0003\u0002\u0002\u0002\u0014\u03ad\u0003\u0002",
    "\u0002\u0002\u0016\u03bb\u0003\u0002\u0002\u0002\u0018\u03c8\u0003\u0002",
    "\u0002\u0002\u001a\u03de\u0003\u0002\u0002\u0002\u001c\u03fa\u0003\u0002",
    "\u0002\u0002\u001e\u0420\u0003\u0002\u0002\u0002 \u0422\u0003\u0002",
    "\u0002\u0002\"\u0433\u0003\u0002\u0002\u0002$\u0455\u0003\u0002\u0002",
    "\u0002&\u0457\u0003\u0002\u0002\u0002(\u045c\u0003\u0002\u0002\u0002",
    "*\u046f\u0003\u0002\u0002\u0002,\u04a1\u0003\u0002\u0002\u0002.\u04c1",
    "\u0003\u0002\u0002\u00020\u04e9\u0003\u0002\u0002\u00022\u04ee\u0003",
    "\u0002\u0002\u00024\u0507\u0003\u0002\u0002\u00026\u051f\u0003\u0002",
    "\u0002\u00028\u0528\u0003\u0002\u0002\u0002:\u0531\u0003\u0002\u0002",
    "\u0002<\u053a\u0003\u0002\u0002\u0002>\u053e\u0003\u0002\u0002\u0002",
    "@\u0543\u0003\u0002\u0002\u0002B\u055b\u0003\u0002\u0002\u0002D\u055d",
    "\u0003\u0002\u0002\u0002F\u0561\u0003\u0002\u0002\u0002H\u0595\u0003",
    "\u0002\u0002\u0002J\u05b1\u0003\u0002\u0002\u0002L\u05b3\u0003\u0002",
    "\u0002\u0002N\u05c1\u0003\u0002\u0002\u0002P\u05cd\u0003\u0002\u0002",
    "\u0002R\u05d2\u0003\u0002\u0002\u0002T\u05d8\u0003\u0002\u0002\u0002",
    "V\u05db\u0003\u0002\u0002\u0002X\u05e6\u0003\u0002\u0002\u0002Z\u05f5",
    "\u0003\u0002\u0002\u0002\\\u0606\u0003\u0002\u0002\u0002^\u0617\u0003",
    "\u0002\u0002\u0002`\u061f\u0003\u0002\u0002\u0002b\u0624\u0003\u0002",
    "\u0002\u0002d\u0634\u0003\u0002\u0002\u0002f\u0638\u0003\u0002\u0002",
    "\u0002h\u0650\u0003\u0002\u0002\u0002j\u0653\u0003\u0002\u0002\u0002",
    "l\u0659\u0003\u0002\u0002\u0002n\u0665\u0003\u0002\u0002\u0002p\u066e",
    "\u0003\u0002\u0002\u0002r\u068a\u0003\u0002\u0002\u0002t\u0690\u0003",
    "\u0002\u0002\u0002v\u0693\u0003\u0002\u0002\u0002x\u069a\u0003\u0002",
    "\u0002\u0002z\u06a2\u0003\u0002\u0002\u0002|\u06ae\u0003\u0002\u0002",
    "\u0002~\u06b0\u0003\u0002\u0002\u0002\u0080\u06b4\u0003\u0002\u0002",
    "\u0002\u0082\u06ba\u0003\u0002\u0002\u0002\u0084\u06d6\u0003\u0002\u0002",
    "\u0002\u0086\u06f8\u0003\u0002\u0002\u0002\u0088\u0728\u0003\u0002\u0002",
    "\u0002\u008a\u0732\u0003\u0002\u0002\u0002\u008c\u0734\u0003\u0002\u0002",
    "\u0002\u008e\u0739\u0003\u0002\u0002\u0002\u0090\u0747\u0003\u0002\u0002",
    "\u0002\u0092\u0749\u0003\u0002\u0002\u0002\u0094\u074e\u0003\u0002\u0002",
    "\u0002\u0096\u075e\u0003\u0002\u0002\u0002\u0098\u077f\u0003\u0002\u0002",
    "\u0002\u009a\u07a2\u0003\u0002\u0002\u0002\u009c\u07a6\u0003\u0002\u0002",
    "\u0002\u009e\u07b5\u0003\u0002\u0002\u0002\u00a0\u07b7\u0003\u0002\u0002",
    "\u0002\u00a2\u07ba\u0003\u0002\u0002\u0002\u00a4\u07bf\u0003\u0002\u0002",
    "\u0002\u00a6\u07c9\u0003\u0002\u0002\u0002\u00a8\u07e5\u0003\u0002\u0002",
    "\u0002\u00aa\u07e7\u0003\u0002\u0002\u0002\u00ac\u07eb\u0003\u0002\u0002",
    "\u0002\u00ae\u0803\u0003\u0002\u0002\u0002\u00b0\u080b\u0003\u0002\u0002",
    "\u0002\u00b2\u0810\u0003\u0002\u0002\u0002\u00b4\u0872\u0003\u0002\u0002",
    "\u0002\u00b6\u0875\u0003\u0002\u0002\u0002\u00b8\u087a\u0003\u0002\u0002",
    "\u0002\u00ba\u08ad\u0003\u0002\u0002\u0002\u00bc\u08af\u0003\u0002\u0002",
    "\u0002\u00be\u08b6\u0003\u0002\u0002\u0002\u00c0\u08bf\u0003\u0002\u0002",
    "\u0002\u00c2\u08ca\u0003\u0002\u0002\u0002\u00c4\u08d1\u0003\u0002\u0002",
    "\u0002\u00c6\u08d5\u0003\u0002\u0002\u0002\u00c8\u08d9\u0003\u0002\u0002",
    "\u0002\u00ca\u08dd\u0003\u0002\u0002\u0002\u00cc\u08ed\u0003\u0002\u0002",
    "\u0002\u00ce\u08fa\u0003\u0002\u0002\u0002\u00d0\u0901\u0003\u0002\u0002",
    "\u0002\u00d2\u090d\u0003\u0002\u0002\u0002\u00d4\u091a\u0003\u0002\u0002",
    "\u0002\u00d6\u091f\u0003\u0002\u0002\u0002\u00d8\u0922\u0003\u0002\u0002",
    "\u0002\u00da\u0926\u0003\u0002\u0002\u0002\u00dc\u092b\u0003\u0002\u0002",
    "\u0002\u00de\u092f\u0003\u0002\u0002\u0002\u00e0\u0940\u0003\u0002\u0002",
    "\u0002\u00e2\u0946\u0003\u0002\u0002\u0002\u00e4\u0950\u0003\u0002\u0002",
    "\u0002\u00e6\u095d\u0003\u0002\u0002\u0002\u00e8\u096a\u0003\u0002\u0002",
    "\u0002\u00ea\u096c\u0003\u0002\u0002\u0002\u00ec\u097a\u0003\u0002\u0002",
    "\u0002\u00ee\u098b\u0003\u0002\u0002\u0002\u00f0\u09a4\u0003\u0002\u0002",
    "\u0002\u00f2\u09ae\u0003\u0002\u0002\u0002\u00f4\u09b2\u0003\u0002\u0002",
    "\u0002\u00f6\u09d5\u0003\u0002\u0002\u0002\u00f8\u09e1\u0003\u0002\u0002",
    "\u0002\u00fa\u09ec\u0003\u0002\u0002\u0002\u00fc\u09f2\u0003\u0002\u0002",
    "\u0002\u00fe\u09fd\u0003\u0002\u0002\u0002\u0100\u0a09\u0003\u0002\u0002",
    "\u0002\u0102\u0a11\u0003\u0002\u0002\u0002\u0104\u0a20\u0003\u0002\u0002",
    "\u0002\u0106\u0a24\u0003\u0002\u0002\u0002\u0108\u0a45\u0003\u0002\u0002",
    "\u0002\u010a\u0a48\u0003\u0002\u0002\u0002\u010c\u0a4e\u0003\u0002\u0002",
    "\u0002\u010e\u0a53\u0003\u0002\u0002\u0002\u0110\u0a5b\u0003\u0002\u0002",
    "\u0002\u0112\u0a63\u0003\u0002\u0002\u0002\u0114\u0a66\u0003\u0002\u0002",
    "\u0002\u0116\u0a76\u0003\u0002\u0002\u0002\u0118\u0a7b\u0003\u0002\u0002",
    "\u0002\u011a\u0a7f\u0003\u0002\u0002\u0002\u011c\u0aa7\u0003\u0002\u0002",
    "\u0002\u011e\u0aa9\u0003\u0002\u0002\u0002\u0120\u0abf\u0003\u0002\u0002",
    "\u0002\u0122\u0ac1\u0003\u0002\u0002\u0002\u0124\u0ac6\u0003\u0002\u0002",
    "\u0002\u0126\u0ac8\u0003\u0002\u0002\u0002\u0128\u0aca\u0003\u0002\u0002",
    "\u0002\u012a\u0acc\u0003\u0002\u0002\u0002\u012c\u0ad0\u0003\u0002\u0002",
    "\u0002\u012e\u0ad5\u0003\u0002\u0002\u0002\u0130\u0adb\u0003\u0002\u0002",
    "\u0002\u0132\u0ae1\u0003\u0002\u0002\u0002\u0134\u0aef\u0003\u0002\u0002",
    "\u0002\u0136\u0b03\u0003\u0002\u0002\u0002\u0138\u0b08\u0003\u0002\u0002",
    "\u0002\u013a\u0b15\u0003\u0002\u0002\u0002\u013c\u0b17\u0003\u0002\u0002",
    "\u0002\u013e\u0b25\u0003\u0002\u0002\u0002\u0140\u0b2f\u0003\u0002\u0002",
    "\u0002\u0142\u0b35\u0003\u0002\u0002\u0002\u0144\u0b37\u0003\u0002\u0002",
    "\u0002\u0146\u0b3a\u0003\u0002\u0002\u0002\u0148\u0b43\u0003\u0002\u0002",
    "\u0002\u014a\u0b5b\u0003\u0002\u0002\u0002\u014c\u0b6a\u0003\u0002\u0002",
    "\u0002\u014e\u0b6c\u0003\u0002\u0002\u0002\u0150\u0b81\u0003\u0002\u0002",
    "\u0002\u0152\u0b90\u0003\u0002\u0002\u0002\u0154\u0ba6\u0003\u0002\u0002",
    "\u0002\u0156\u0bad\u0003\u0002\u0002\u0002\u0158\u0bba\u0003\u0002\u0002",
    "\u0002\u015a\u0bbd\u0003\u0002\u0002\u0002\u015c\u0bd2\u0003\u0002\u0002",
    "\u0002\u015e\u0bdc\u0003\u0002\u0002\u0002\u0160\u0be5\u0003\u0002\u0002",
    "\u0002\u0162\u0c00\u0003\u0002\u0002\u0002\u0164\u0c2b\u0003\u0002\u0002",
    "\u0002\u0166\u0c3b\u0003\u0002\u0002\u0002\u0168\u0c47\u0003\u0002\u0002",
    "\u0002\u016a\u0c4f\u0003\u0002\u0002\u0002\u016c\u0c53\u0003\u0002\u0002",
    "\u0002\u016e\u0c72\u0003\u0002\u0002\u0002\u0170\u0c76\u0003\u0002\u0002",
    "\u0002\u0172\u0c83\u0003\u0002\u0002\u0002\u0174\u0c85\u0003\u0002\u0002",
    "\u0002\u0176\u0c8d\u0003\u0002\u0002\u0002\u0178\u0c98\u0003\u0002\u0002",
    "\u0002\u017a\u0cb9\u0003\u0002\u0002\u0002\u017c\u0cbc\u0003\u0002\u0002",
    "\u0002\u017e\u0cd1\u0003\u0002\u0002\u0002\u0180\u0cd4\u0003\u0002\u0002",
    "\u0002\u0182\u0ce0\u0003\u0002\u0002\u0002\u0184\u0ce4\u0003\u0002\u0002",
    "\u0002\u0186\u0cf7\u0003\u0002\u0002\u0002\u0188\u0cf9\u0003\u0002\u0002",
    "\u0002\u018a\u0d0a\u0003\u0002\u0002\u0002\u018c\u0d11\u0003\u0002\u0002",
    "\u0002\u018e\u0d20\u0003\u0002\u0002\u0002\u0190\u0d37\u0003\u0002\u0002",
    "\u0002\u0192\u0d41\u0003\u0002\u0002\u0002\u0194\u0d43\u0003\u0002\u0002",
    "\u0002\u0196\u0d5b\u0003\u0002\u0002\u0002\u0198\u0d73\u0003\u0002\u0002",
    "\u0002\u019a\u0d97\u0003\u0002\u0002\u0002\u019c\u0d99\u0003\u0002\u0002",
    "\u0002\u019e\u0db7\u0003\u0002\u0002\u0002\u01a0\u0dbc\u0003\u0002\u0002",
    "\u0002\u01a2\u0dbe\u0003\u0002\u0002\u0002\u01a4\u0dca\u0003\u0002\u0002",
    "\u0002\u01a6\u0dde\u0003\u0002\u0002\u0002\u01a8\u0de0\u0003\u0002\u0002",
    "\u0002\u01aa\u0de3\u0003\u0002\u0002\u0002\u01ac\u0dfd\u0003\u0002\u0002",
    "\u0002\u01ae\u0dff\u0003\u0002\u0002\u0002\u01b0\u0e03\u0003\u0002\u0002",
    "\u0002\u01b2\u0e12\u0003\u0002\u0002\u0002\u01b4\u0e1e\u0003\u0002\u0002",
    "\u0002\u01b6\u0e26\u0003\u0002\u0002\u0002\u01b8\u0e2a\u0003\u0002\u0002",
    "\u0002\u01ba\u0e37\u0003\u0002\u0002\u0002\u01bc\u0e3d\u0003\u0002\u0002",
    "\u0002\u01be\u0e4c\u0003\u0002\u0002\u0002\u01c0\u0e60\u0003\u0002\u0002",
    "\u0002\u01c2\u0e69\u0003\u0002\u0002\u0002\u01c4\u0e6b\u0003\u0002\u0002",
    "\u0002\u01c6\u0e72\u0003\u0002\u0002\u0002\u01c8\u0e77\u0003\u0002\u0002",
    "\u0002\u01ca\u0e84\u0003\u0002\u0002\u0002\u01cc\u0e8c\u0003\u0002\u0002",
    "\u0002\u01ce\u0e94\u0003\u0002\u0002\u0002\u01d0\u0ea2\u0003\u0002\u0002",
    "\u0002\u01d2\u0ea4\u0003\u0002\u0002\u0002\u01d4\u0eb0\u0003\u0002\u0002",
    "\u0002\u01d6\u0ed3\u0003\u0002\u0002\u0002\u01d8\u0ed5\u0003\u0002\u0002",
    "\u0002\u01da\u0ee3\u0003\u0002\u0002\u0002\u01dc\u0ee8\u0003\u0002\u0002",
    "\u0002\u01de\u0efa\u0003\u0002\u0002\u0002\u01e0\u0efe\u0003\u0002\u0002",
    "\u0002\u01e2\u0f06\u0003\u0002\u0002\u0002\u01e4\u0f10\u0003\u0002\u0002",
    "\u0002\u01e6\u0f18\u0003\u0002\u0002\u0002\u01e8\u0f1e\u0003\u0002\u0002",
    "\u0002\u01ea\u0f2d\u0003\u0002\u0002\u0002\u01ec\u0f34\u0003\u0002\u0002",
    "\u0002\u01ee\u0f4d\u0003\u0002\u0002\u0002\u01f0\u0f60\u0003\u0002\u0002",
    "\u0002\u01f2\u0f64\u0003\u0002\u0002\u0002\u01f4\u0f67\u0003\u0002\u0002",
    "\u0002\u01f6\u0f87\u0003\u0002\u0002\u0002\u01f8\u0f8c\u0003\u0002\u0002",
    "\u0002\u01fa\u0f9f\u0003\u0002\u0002\u0002\u01fc\u0fa1\u0003\u0002\u0002",
    "\u0002\u01fe\u0fb1\u0003\u0002\u0002\u0002\u0200\u0fb9\u0003\u0002\u0002",
    "\u0002\u0202\u0fbe\u0003\u0002\u0002\u0002\u0204\u0fc2\u0003\u0002\u0002",
    "\u0002\u0206\u0fcd\u0003\u0002\u0002\u0002\u0208\u0fd0\u0003\u0002\u0002",
    "\u0002\u020a\u0fe2\u0003\u0002\u0002\u0002\u020c\u0fe4\u0003\u0002\u0002",
    "\u0002\u020e\u0ff3\u0003\u0002\u0002\u0002\u0210\u0ffe\u0003\u0002\u0002",
    "\u0002\u0212\u100c\u0003\u0002\u0002\u0002\u0214\u1011\u0003\u0002\u0002",
    "\u0002\u0216\u1013\u0003\u0002\u0002\u0002\u0218\u101d\u0003\u0002\u0002",
    "\u0002\u021a\u101f\u0003\u0002\u0002\u0002\u021c\u104c\u0003\u0002\u0002",
    "\u0002\u021e\u1059\u0003\u0002\u0002\u0002\u0220\u1061\u0003\u0002\u0002",
    "\u0002\u0222\u106d\u0003\u0002\u0002\u0002\u0224\u108d\u0003\u0002\u0002",
    "\u0002\u0226\u10a1\u0003\u0002\u0002\u0002\u0228\u10a3\u0003\u0002\u0002",
    "\u0002\u022a\u10a7\u0003\u0002\u0002\u0002\u022c\u10da\u0003\u0002\u0002",
    "\u0002\u022e\u10dc\u0003\u0002\u0002\u0002\u0230\u10fa\u0003\u0002\u0002",
    "\u0002\u0232\u10fc\u0003\u0002\u0002\u0002\u0234\u1111\u0003\u0002\u0002",
    "\u0002\u0236\u1138\u0003\u0002\u0002\u0002\u0238\u113c\u0003\u0002\u0002",
    "\u0002\u023a\u113f\u0003\u0002\u0002\u0002\u023c\u1152\u0003\u0002\u0002",
    "\u0002\u023e\u115a\u0003\u0002\u0002\u0002\u0240\u116c\u0003\u0002\u0002",
    "\u0002\u0242\u1173\u0003\u0002\u0002\u0002\u0244\u118b\u0003\u0002\u0002",
    "\u0002\u0246\u118d\u0003\u0002\u0002\u0002\u0248\u11de\u0003\u0002\u0002",
    "\u0002\u024a\u11e3\u0003\u0002\u0002\u0002\u024c\u11e5\u0003\u0002\u0002",
    "\u0002\u024e\u1224\u0003\u0002\u0002\u0002\u0250\u1361\u0003\u0002\u0002",
    "\u0002\u0252\u1363\u0003\u0002\u0002\u0002\u0254\u1365\u0003\u0002\u0002",
    "\u0002\u0256\u1367\u0003\u0002\u0002\u0002\u0258\u1369\u0003\u0002\u0002",
    "\u0002\u025a\u1376\u0003\u0002\u0002\u0002\u025c\u137f\u0003\u0002\u0002",
    "\u0002\u025e\u1388\u0003\u0002\u0002\u0002\u0260\u138a\u0003\u0002\u0002",
    "\u0002\u0262\u139b\u0003\u0002\u0002\u0002\u0264\u13a1\u0003\u0002\u0002",
    "\u0002\u0266\u13ac\u0003\u0002\u0002\u0002\u0268\u13ae\u0003\u0002\u0002",
    "\u0002\u026a\u13c6\u0003\u0002\u0002\u0002\u026c\u13d4\u0003\u0002\u0002",
    "\u0002\u026e\u13e6\u0003\u0002\u0002\u0002\u0270\u13fb\u0003\u0002\u0002",
    "\u0002\u0272\u1408\u0003\u0002\u0002\u0002\u0274\u140b\u0003\u0002\u0002",
    "\u0002\u0276\u1414\u0003\u0002\u0002\u0002\u0278\u141a\u0003\u0002\u0002",
    "\u0002\u027a\u1422\u0003\u0002\u0002\u0002\u027c\u1425\u0003\u0002\u0002",
    "\u0002\u027e\u1430\u0003\u0002\u0002\u0002\u0280\u143a\u0003\u0002\u0002",
    "\u0002\u0282\u143c\u0003\u0002\u0002\u0002\u0284\u1445\u0003\u0002\u0002",
    "\u0002\u0286\u144e\u0003\u0002\u0002\u0002\u0288\u1460\u0003\u0002\u0002",
    "\u0002\u028a\u1464\u0003\u0002\u0002\u0002\u028c\u1466\u0003\u0002\u0002",
    "\u0002\u028e\u146f\u0003\u0002\u0002\u0002\u0290\u147c\u0003\u0002\u0002",
    "\u0002\u0292\u147e\u0003\u0002\u0002\u0002\u0294\u1480\u0003\u0002\u0002",
    "\u0002\u0296\u1482\u0003\u0002\u0002\u0002\u0298\u1484\u0003\u0002\u0002",
    "\u0002\u029a\u1486\u0003\u0002\u0002\u0002\u029c\u1488\u0003\u0002\u0002",
    "\u0002\u029e\u148a\u0003\u0002\u0002\u0002\u02a0\u1496\u0003\u0002\u0002",
    "\u0002\u02a2\u1498\u0003\u0002\u0002\u0002\u02a4\u149d\u0003\u0002\u0002",
    "\u0002\u02a6\u149f\u0003\u0002\u0002\u0002\u02a8\u14a1\u0003\u0002\u0002",
    "\u0002\u02aa\u14a3\u0003\u0002\u0002\u0002\u02ac\u14ab\u0003\u0002\u0002",
    "\u0002\u02ae\u14ad\u0003\u0002\u0002\u0002\u02b0\u14b9\u0003\u0002\u0002",
    "\u0002\u02b2\u14bb\u0003\u0002\u0002\u0002\u02b4\u14c3\u0003\u0002\u0002",
    "\u0002\u02b6\u14cb\u0003\u0002\u0002\u0002\u02b8\u14d3\u0003\u0002\u0002",
    "\u0002\u02ba\u14d8\u0003\u0002\u0002\u0002\u02bc\u14dd\u0003\u0002\u0002",
    "\u0002\u02be\u14ec\u0003\u0002\u0002\u0002\u02c0\u14ee\u0003\u0002\u0002",
    "\u0002\u02c2\u14f2\u0003\u0002\u0002\u0002\u02c4\u14f6\u0003\u0002\u0002",
    "\u0002\u02c6\u14f8\u0003\u0002\u0002\u0002\u02c8\u14fd\u0003\u0002\u0002",
    "\u0002\u02ca\u14ff\u0003\u0002\u0002\u0002\u02cc\u1507\u0003\u0002\u0002",
    "\u0002\u02ce\u1511\u0003\u0002\u0002\u0002\u02d0\u1519\u0003\u0002\u0002",
    "\u0002\u02d2\u151b\u0003\u0002\u0002\u0002\u02d4\u151d\u0003\u0002\u0002",
    "\u0002\u02d6\u1526\u0003\u0002\u0002\u0002\u02d8\u1535\u0003\u0002\u0002",
    "\u0002\u02da\u154a\u0003\u0002\u0002\u0002\u02dc\u1574\u0003\u0002\u0002",
    "\u0002\u02de\u157b\u0003\u0002\u0002\u0002\u02e0\u1587\u0003\u0002\u0002",
    "\u0002\u02e2\u15a8\u0003\u0002\u0002\u0002\u02e4\u15aa\u0003\u0002\u0002",
    "\u0002\u02e6\u15f1\u0003\u0002\u0002\u0002\u02e8\u15f6\u0003\u0002\u0002",
    "\u0002\u02ea\u1609\u0003\u0002\u0002\u0002\u02ec\u1613\u0003\u0002\u0002",
    "\u0002\u02ee\u1626\u0003\u0002\u0002\u0002\u02f0\u166e\u0003\u0002\u0002",
    "\u0002\u02f2\u1670\u0003\u0002\u0002\u0002\u02f4\u1672\u0003\u0002\u0002",
    "\u0002\u02f6\u1675\u0003\u0002\u0002\u0002\u02f8\u1679\u0003\u0002\u0002",
    "\u0002\u02fa\u167f\u0003\u0002\u0002\u0002\u02fc\u1681\u0003\u0002\u0002",
    "\u0002\u02fe\u1685\u0003\u0002\u0002\u0002\u0300\u1687\u0003\u0002\u0002",
    "\u0002\u0302\u1689\u0003\u0002\u0002\u0002\u0304\u0307\u0005\u0004\u0003",
    "\u0002\u0305\u0307\u0005\u0280\u0141\u0002\u0306\u0304\u0003\u0002\u0002",
    "\u0002\u0306\u0305\u0003\u0002\u0002\u0002\u0307\u0309\u0003\u0002\u0002",
    "\u0002\u0308\u030a\u0007\u0233\u0002\u0002\u0309\u0308\u0003\u0002\u0002",
    "\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002\u0002",
    "\u0002\u030b\u0306\u0003\u0002\u0002\u0002\u030c\u030f\u0003\u0002\u0002",
    "\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002",
    "\u0002\u030e\u0310\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002",
    "\u0002\u0310\u0311\u0007\u0002\u0002\u0003\u0311\u0003\u0003\u0002\u0002",
    "\u0002\u0312\u0331\u0005\b\u0005\u0002\u0313\u0331\u0005\u0018\r\u0002",
    "\u0314\u0331\u0005(\u0015\u0002\u0315\u0331\u0005\u00a4S\u0002\u0316",
    "\u0331\u00052\u001a\u0002\u0317\u0331\u0005X-\u0002\u0318\u0331\u0005",
    "\u00be`\u0002\u0319\u0331\u0005\u00aeX\u0002\u031a\u0331\u0005\n\u0006",
    "\u0002\u031b\u0331\u0005.\u0018\u0002\u031c\u0331\u0005\u001a\u000e",
    "\u0002\u031d\u0331\u0005\u001c\u000f\u0002\u031e\u0331\u0005\u00acW",
    "\u0002\u031f\u0331\u0005\u00b2Z\u0002\u0320\u0331\u0005\u00a6T\u0002",
    "\u0321\u0331\u00054\u001b\u0002\u0322\u0331\u0005l7\u0002\u0323\u0331",
    "\u0005\u00ba^\u0002\u0324\u0331\u0005\u0006\u0004\u0002\u0325\u0331",
    "\u0005\u0016\f\u0002\u0326\u0331\u0005&\u0014\u0002\u0327\u0331\u0005",
    "\u00a2R\u0002\u0328\u0331\u00050\u0019\u0002\u0329\u0331\u0005V,\u0002",
    "\u032a\u0331\u0005\u0140\u00a1\u0002\u032b\u0331\u0005\u00b6\\\u0002",
    "\u032c\u0331\u0005\u00b0Y\u0002\u032d\u0331\u0005\u00b8]\u0002\u032e",
    "\u0331\u0005\u00bc_\u0002\u032f\u0331\u0005\u00d4k\u0002\u0330\u0312",
    "\u0003\u0002\u0002\u0002\u0330\u0313\u0003\u0002\u0002\u0002\u0330\u0314",
    "\u0003\u0002\u0002\u0002\u0330\u0315\u0003\u0002\u0002\u0002\u0330\u0316",
    "\u0003\u0002\u0002\u0002\u0330\u0317\u0003\u0002\u0002\u0002\u0330\u0318",
    "\u0003\u0002\u0002\u0002\u0330\u0319\u0003\u0002\u0002\u0002\u0330\u031a",
    "\u0003\u0002\u0002\u0002\u0330\u031b\u0003\u0002\u0002\u0002\u0330\u031c",
    "\u0003\u0002\u0002\u0002\u0330\u031d\u0003\u0002\u0002\u0002\u0330\u031e",
    "\u0003\u0002\u0002\u0002\u0330\u031f\u0003\u0002\u0002\u0002\u0330\u0320",
    "\u0003\u0002\u0002\u0002\u0330\u0321\u0003\u0002\u0002\u0002\u0330\u0322",
    "\u0003\u0002\u0002\u0002\u0330\u0323\u0003\u0002\u0002\u0002\u0330\u0324",
    "\u0003\u0002\u0002\u0002\u0330\u0325\u0003\u0002\u0002\u0002\u0330\u0326",
    "\u0003\u0002\u0002\u0002\u0330\u0327\u0003\u0002\u0002\u0002\u0330\u0328",
    "\u0003\u0002\u0002\u0002\u0330\u0329\u0003\u0002\u0002\u0002\u0330\u032a",
    "\u0003\u0002\u0002\u0002\u0330\u032b\u0003\u0002\u0002\u0002\u0330\u032c",
    "\u0003\u0002\u0002\u0002\u0330\u032d\u0003\u0002\u0002\u0002\u0330\u032e",
    "\u0003\u0002\u0002\u0002\u0330\u032f\u0003\u0002\u0002\u0002\u0331\u0005",
    "\u0003\u0002\u0002\u0002\u0332\u0333\u0007y\u0002\u0002\u0333\u0334",
    "\u0007\u00a7\u0002\u0002\u0334\u0335\u0005\u02b8\u015d\u0002\u0335\u0336",
    "\u0007\u0233\u0002\u0002\u0336\u0007\u0003\u0002\u0002\u0002\u0337\u0338",
    "\u0007\t\u0002\u0002\u0338\u0339\u0007\u00a7\u0002\u0002\u0339\u033a",
    "\u0005\u02b8\u015d\u0002\u033a\u033c\u0007C\u0002\u0002\u033b\u033d",
    "\u0007e\u0002\u0002\u033c\u033b\u0003\u0002\u0002\u0002\u033c\u033d",
    "\u0003\u0002\u0002\u0002\u033d\u0341\u0003\u0002\u0002\u0002\u033e\u0340",
    "\u0005\u00d8m\u0002\u033f\u033e\u0003\u0002\u0002\u0002\u0340\u0343",
    "\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0341\u0342",
    "\u0003\u0002\u0002\u0002\u0342\u0346\u0003\u0002\u0002\u0002\u0343\u0341",
    "\u0003\u0002\u0002\u0002\u0344\u0345\u0007\u0166\u0002\u0002\u0345\u0347",
    "\u0007\u0184\u0002\u0002\u0346\u0344\u0003\u0002\u0002\u0002\u0346\u0347",
    "\u0003\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349",
    "\u0007\u0233\u0002\u0002\u0349\t\u0003\u0002\u0002\u0002\u034a\u034d",
    "\u0007U\u0002\u0002\u034b\u034c\u0007\u012a\u0002\u0002\u034c\u034e",
    "\u0007\u015f\u0002\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034d\u034e",
    "\u0003\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0350",
    "\u0007\u00a7\u0002\u0002\u0350\u035c\u0005\u02b8\u015d\u0002\u0351\u0352",
    "\u0007\u0221\u0002\u0002\u0352\u0357\u0005\u00e4s\u0002\u0353\u0354",
    "\u0007\u0227\u0002\u0002\u0354\u0356\u0005\u00e4s\u0002\u0355\u0353",
    "\u0003\u0002\u0002\u0002\u0356\u0359\u0003\u0002\u0002\u0002\u0357\u0355",
    "\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u035a",
    "\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u035a\u035b",
    "\u0007\u0222\u0002\u0002\u035b\u035d\u0003\u0002\u0002\u0002\u035c\u0351",
    "\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035e",
    "\u0003\u0002\u0002\u0002\u035e\u035f\u0007\u0165\u0002\u0002\u035f\u0366",
    "\u0005\u02e0\u0171\u0002\u0360\u0365\u0005\u00d6l\u0002\u0361\u0365",
    "\u0005\f\u0007\u0002\u0362\u0365\u0005\u0010\t\u0002\u0363\u0365\u0007",
    "r\u0002\u0002\u0364\u0360\u0003\u0002\u0002\u0002\u0364\u0361\u0003",
    "\u0002\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002\u0364\u0363\u0003",
    "\u0002\u0002\u0002\u0365\u0368\u0003\u0002\u0002\u0002\u0366\u0364\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367\u037d\u0003",
    "\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002\u0002\u0369\u036b\u0007",
    "\u0140\u0002\u0002\u036a\u0369\u0003\u0002\u0002\u0002\u036a\u036b\u0003",
    "\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u0378\t",
    "\u0002\u0002\u0002\u036d\u036f\u0007h\u0002\u0002\u036e\u036d\u0003",
    "\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0373\u0003",
    "\u0002\u0002\u0002\u0370\u0372\u0005\u00e8u\u0002\u0371\u0370\u0003",
    "\u0002\u0002\u0002\u0372\u0375\u0003\u0002\u0002\u0002\u0373\u0371\u0003",
    "\u0002\u0002\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0376\u0003",
    "\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0376\u0379\u0005",
    "\u0132\u009a\u0002\u0377\u0379\u0005\u00dan\u0002\u0378\u036e\u0003",
    "\u0002\u0002\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0379\u037e\u0003",
    "\u0002\u0002\u0002\u037a\u037b\t\u0003\u0002\u0002\u037b\u037c\u0007",
    "\u01c7\u0002\u0002\u037c\u037e\u0005\u02a2\u0152\u0002\u037d\u036a\u0003",
    "\u0002\u0002\u0002\u037d\u037a\u0003\u0002\u0002\u0002\u037e\u037f\u0003",
    "\u0002\u0002\u0002\u037f\u0380\u0007\u0233\u0002\u0002\u0380\u000b\u0003",
    "\u0002\u0002\u0002\u0381\u0383\u0007\u0131\u0002\u0002\u0382\u0384\u0005",
    "\u000e\b\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0383\u0384\u0003",
    "\u0002\u0002\u0002\u0384\r\u0003\u0002\u0002\u0002\u0385\u0386\u0007",
    "\u0221\u0002\u0002\u0386\u0387\u0007\u0134\u0002\u0002\u0387\u0388\u0005",
    "\u0218\u010d\u0002\u0388\u0396\u0007*\u0002\u0002\u0389\u0397\u0007",
    "\f\u0002\u0002\u038a\u038b\t\u0004\u0002\u0002\u038b\u038c\u0007\u0221",
    "\u0002\u0002\u038c\u0391\u0005\u02ca\u0166\u0002\u038d\u038e\u0007\u0227",
    "\u0002\u0002\u038e\u0390\u0005\u02ca\u0166\u0002\u038f\u038d\u0003\u0002",
    "\u0002\u0002\u0390\u0393\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002",
    "\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0394\u0003\u0002",
    "\u0002\u0002\u0393\u0391\u0003\u0002\u0002\u0002\u0394\u0395\u0007\u0222",
    "\u0002\u0002\u0395\u0397\u0003\u0002\u0002\u0002\u0396\u0389\u0003\u0002",
    "\u0002\u0002\u0396\u038a\u0003\u0002\u0002\u0002\u0397\u0399\u0003\u0002",
    "\u0002\u0002\u0398\u039a\u0005\u0014\u000b\u0002\u0399\u0398\u0003\u0002",
    "\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002",
    "\u0002\u0002\u039b\u039c\u0007\u0222\u0002\u0002\u039c\u000f\u0003\u0002",
    "\u0002\u0002\u039d\u039f\u0007\u0162\u0002\u0002\u039e\u03a0\u0005\u0012",
    "\n\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002",
    "\u0002\u0002\u03a0\u0011\u0003\u0002\u0002\u0002\u03a1\u03a2\u0007\u015d",
    "\u0002\u0002\u03a2\u03a3\u0007\u0221\u0002\u0002\u03a3\u03a8\u0005\u02cc",
    "\u0167\u0002\u03a4\u03a5\u0007\u0227\u0002\u0002\u03a5\u03a7\u0005\u02cc",
    "\u0167\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a7\u03aa\u0003\u0002",
    "\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002",
    "\u0002\u0002\u03a9\u03ab\u0003\u0002\u0002\u0002\u03aa\u03a8\u0003\u0002",
    "\u0002\u0002\u03ab\u03ac\u0007\u0222\u0002\u0002\u03ac\u0013\u0003\u0002",
    "\u0002\u0002\u03ad\u03ae\t\u0005\u0002\u0002\u03ae\u03af\u0005\u0218",
    "\u010d\u0002\u03af\u03b0\u0007*\u0002\u0002\u03b0\u03b1\u0007\u0221",
    "\u0002\u0002\u03b1\u03b6\u0005\u02ca\u0166\u0002\u03b2\u03b3\u0007\u0227",
    "\u0002\u0002\u03b3\u03b5\u0005\u02ca\u0166\u0002\u03b4\u03b2\u0003\u0002",
    "\u0002\u0002\u03b5\u03b8\u0003\u0002\u0002\u0002\u03b6\u03b4\u0003\u0002",
    "\u0002\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u03b9\u0003\u0002",
    "\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b9\u03ba\u0007\u0222",
    "\u0002\u0002\u03ba\u0015\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007y",
    "\u0002\u0002\u03bc\u03be\u0007\u0130\u0002\u0002\u03bd\u03bf\u0007$",
    "\u0002\u0002\u03be\u03bd\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002",
    "\u0002\u0002\u03bf\u03c3\u0003\u0002\u0002\u0002\u03c0\u03c1\u0005\u02d2",
    "\u016a\u0002\u03c1\u03c2\u0007\u021a\u0002\u0002\u03c2\u03c4\u0003\u0002",
    "\u0002\u0002\u03c3\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002",
    "\u0002\u0002\u03c4\u03c5\u0003\u0002\u0002\u0002\u03c5\u03c6\u0005\u02a0",
    "\u0151\u0002\u03c6\u03c7\u0007\u0233\u0002\u0002\u03c7\u0017\u0003\u0002",
    "\u0002\u0002\u03c8\u03c9\u0007\t\u0002\u0002\u03c9\u03ca\u0007\u0130",
    "\u0002\u0002\u03ca\u03cb\u0005\u02a0\u0151\u0002\u03cb\u03cd\u0007C",
    "\u0002\u0002\u03cc\u03ce\u0007e\u0002\u0002\u03cd\u03cc\u0003\u0002",
    "\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002\u03ce\u03d0\u0003\u0002",
    "\u0002\u0002\u03cf\u03d1\t\u0006\u0002\u0002\u03d0\u03cf\u0003\u0002",
    "\u0002\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d1\u03d5\u0003\u0002",
    "\u0002\u0002\u03d2\u03d4\u0005\u00d8m\u0002\u03d3\u03d2\u0003\u0002",
    "\u0002\u0002\u03d4\u03d7\u0003\u0002\u0002\u0002\u03d5\u03d3\u0003\u0002",
    "\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03da\u0003\u0002",
    "\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d8\u03d9\u0007\u0166",
    "\u0002\u0002\u03d9\u03db\u0007\u0184\u0002\u0002\u03da\u03d8\u0003\u0002",
    "\u0002\u0002\u03da\u03db\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002",
    "\u0002\u0002\u03dc\u03dd\u0007\u0233\u0002\u0002\u03dd\u0019\u0003\u0002",
    "\u0002\u0002\u03de\u03e1\u0007U\u0002\u0002\u03df\u03e0\u0007\u012a",
    "\u0002\u0002\u03e0\u03e2\u0007\u015f\u0002\u0002\u03e1\u03df\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003\u0002",
    "\u0002\u0002\u03e3\u03e7\u0007\u0130\u0002\u0002\u03e4\u03e5\u0005\u02d2",
    "\u016a\u0002\u03e5\u03e6\u0007\u021a\u0002\u0002\u03e6\u03e8\u0003\u0002",
    "\u0002\u0002\u03e7\u03e4\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003\u0002",
    "\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9\u03eb\u0005\u02a0",
    "\u0151\u0002\u03ea\u03ec\u0005\u00d6l\u0002\u03eb\u03ea\u0003\u0002",
    "\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002",
    "\u0002\u0002\u03ed\u03f1\t\u0002\u0002\u0002\u03ee\u03f0\u0005\u001e",
    "\u0010\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f3\u0003\u0002",
    "\u0002\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002",
    "\u0002\u0002\u03f2\u03f4\u0003\u0002\u0002\u0002\u03f3\u03f1\u0003\u0002",
    "\u0002\u0002\u03f4\u03f6\u0007\u0083\u0002\u0002\u03f5\u03f7\u0005\u02a0",
    "\u0151\u0002\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002",
    "\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\u0233",
    "\u0002\u0002\u03f9\u001b\u0003\u0002\u0002\u0002\u03fa\u03fd\u0007U",
    "\u0002\u0002\u03fb\u03fc\u0007\u012a\u0002\u0002\u03fc\u03fe\u0007\u015f",
    "\u0002\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003\u0002",
    "\u0002\u0002\u03fe\u03ff\u0003\u0002\u0002\u0002\u03ff\u0400\u0007\u0130",
    "\u0002\u0002\u0400\u0404\u0007$\u0002\u0002\u0401\u0402\u0005\u02d2",
    "\u016a\u0002\u0402\u0403\u0007\u021a\u0002\u0002\u0403\u0405\u0003\u0002",
    "\u0002\u0002\u0404\u0401\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002",
    "\u0002\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u0406\u0407\u0005\u02a0",
    "\u0151\u0002\u0407\u040b\t\u0002\u0002\u0002\u0408\u040a\u0005$\u0013",
    "\u0002\u0409\u0408\u0003\u0002\u0002\u0002\u040a\u040d\u0003\u0002\u0002",
    "\u0002\u040b\u0409\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002\u0002",
    "\u0002\u040c\u0414\u0003\u0002\u0002\u0002\u040d\u040b\u0003\u0002\u0002",
    "\u0002\u040e\u040f\u0007\u001c\u0002\u0002\u040f\u0415\u0005\u0104\u0083",
    "\u0002\u0410\u0412\u0007\u0083\u0002\u0002\u0411\u0413\u0005\u02a0\u0151",
    "\u0002\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002",
    "\u0002\u0413\u0415\u0003\u0002\u0002\u0002\u0414\u040e\u0003\u0002\u0002",
    "\u0002\u0414\u0410\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002\u0002",
    "\u0002\u0416\u0417\u0007\u0233\u0002\u0002\u0417\u001d\u0003\u0002\u0002",
    "\u0002\u0418\u0421\u0005\u00eav\u0002\u0419\u0421\u0005\u00ecw\u0002",
    "\u041a\u0421\u0005\u00eex\u0002\u041b\u0421\u0005\u00f2z\u0002\u041c",
    "\u0421\u0005\u00f4{\u0002\u041d\u0421\u0005\u00fc\u007f\u0002\u041e",
    "\u0421\u0005 \u0011\u0002\u041f\u0421\u0005\"\u0012\u0002\u0420\u0418",
    "\u0003\u0002\u0002\u0002\u0420\u0419\u0003\u0002\u0002\u0002\u0420\u041a",
    "\u0003\u0002\u0002\u0002\u0420\u041b\u0003\u0002\u0002\u0002\u0420\u041c",
    "\u0003\u0002\u0002\u0002\u0420\u041d\u0003\u0002\u0002\u0002\u0420\u041e",
    "\u0003\u0002\u0002\u0002\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u001f",
    "\u0003\u0002\u0002\u0002\u0422\u0423\u0007\u014e\u0002\u0002\u0423\u042f",
    "\u0005\u02f8\u017d\u0002\u0424\u0425\u0007\u0221\u0002\u0002\u0425\u042a",
    "\u0005\u00e4s\u0002\u0426\u0427\u0007\u0227\u0002\u0002\u0427\u0429",
    "\u0005\u00e4s\u0002\u0428\u0426\u0003\u0002\u0002\u0002\u0429\u042c",
    "\u0003\u0002\u0002\u0002\u042a\u0428\u0003\u0002\u0002\u0002\u042a\u042b",
    "\u0003\u0002\u0002\u0002\u042b\u042d\u0003\u0002\u0002\u0002\u042c\u042a",
    "\u0003\u0002\u0002\u0002\u042d\u042e\u0007\u0222\u0002\u0002\u042e\u0430",
    "\u0003\u0002\u0002\u0002\u042f\u0424\u0003\u0002\u0002\u0002\u042f\u0430",
    "\u0003\u0002\u0002\u0002\u0430\u0431\u0003\u0002\u0002\u0002\u0431\u0432",
    "\u0007\u0233\u0002\u0002\u0432!\u0003\u0002\u0002\u0002\u0433\u0434",
    "\u0007\u00a7\u0002\u0002\u0434\u0440\u0005\u02f8\u017d\u0002\u0435\u0436",
    "\u0007\u0221\u0002\u0002\u0436\u043b\u0005\u00e4s\u0002\u0437\u0438",
    "\u0007\u0227\u0002\u0002\u0438\u043a\u0005\u00e4s\u0002\u0439\u0437",
    "\u0003\u0002\u0002\u0002\u043a\u043d\u0003\u0002\u0002\u0002\u043b\u0439",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u043e",
    "\u0003\u0002\u0002\u0002\u043d\u043b\u0003\u0002\u0002\u0002\u043e\u043f",
    "\u0007\u0222\u0002\u0002\u043f\u0441\u0003\u0002\u0002\u0002\u0440\u0435",
    "\u0003\u0002\u0002\u0002\u0440\u0441\u0003\u0002\u0002\u0002\u0441\u0442",
    "\u0003\u0002\u0002\u0002\u0442\u0443\u0007\u0165\u0002\u0002\u0443\u0445",
    "\u0005\u02e0\u0171\u0002\u0444\u0446\u0007r\u0002\u0002\u0445\u0444",
    "\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0448",
    "\u0003\u0002\u0002\u0002\u0447\u0449\u0007\u0162\u0002\u0002\u0448\u0447",
    "\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u044a",
    "\u0003\u0002\u0002\u0002\u044a\u044b\u0007\u0233\u0002\u0002\u044b#",
    "\u0003\u0002\u0002\u0002\u044c\u0456\u0005\u00eav\u0002\u044d\u0456",
    "\u0005\u00ecw\u0002\u044e\u0456\u0005\u00eex\u0002\u044f\u0456\u0005",
    "\u00f2z\u0002\u0450\u0456\u0005\u00fc\u007f\u0002\u0451\u0456\u0005",
    ",\u0017\u0002\u0452\u0456\u0005*\u0016\u0002\u0453\u0456\u0005 \u0011",
    "\u0002\u0454\u0456\u0005\"\u0012\u0002\u0455\u044c\u0003\u0002\u0002",
    "\u0002\u0455\u044d\u0003\u0002\u0002\u0002\u0455\u044e\u0003\u0002\u0002",
    "\u0002\u0455\u044f\u0003\u0002\u0002\u0002\u0455\u0450\u0003\u0002\u0002",
    "\u0002\u0455\u0451\u0003\u0002\u0002\u0002\u0455\u0452\u0003\u0002\u0002",
    "\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0455\u0454\u0003\u0002\u0002",
    "\u0002\u0456%\u0003\u0002\u0002\u0002\u0457\u0458\u0007y\u0002\u0002",
    "\u0458\u0459\u0007\u014e\u0002\u0002\u0459\u045a\u0005\u02ba\u015e\u0002",
    "\u045a\u045b\u0007\u0233\u0002\u0002\u045b\'\u0003\u0002\u0002\u0002",
    "\u045c\u045d\u0007\t\u0002\u0002\u045d\u045e\u0007\u014e\u0002\u0002",
    "\u045e\u045f\u0005\u02ba\u015e\u0002\u045f\u0461\u0007C\u0002\u0002",
    "\u0460\u0462\u0007e\u0002\u0002\u0461\u0460\u0003\u0002\u0002\u0002",
    "\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0466\u0003\u0002\u0002\u0002",
    "\u0463\u0465\u0005\u00d8m\u0002\u0464\u0463\u0003\u0002\u0002\u0002",
    "\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002",
    "\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u046b\u0003\u0002\u0002\u0002",
    "\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u046a\u0007\u0166\u0002\u0002",
    "\u046a\u046c\u0007\u0184\u0002\u0002\u046b\u0469\u0003\u0002\u0002\u0002",
    "\u046b\u046c\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002",
    "\u046d\u046e\u0007\u0233\u0002\u0002\u046e)\u0003\u0002\u0002\u0002",
    "\u046f\u0470\u0007\u00a7\u0002\u0002\u0470\u047c\u0005\u02f8\u017d\u0002",
    "\u0471\u0472\u0007\u0221\u0002\u0002\u0472\u0477\u0005\u00e4s\u0002",
    "\u0473\u0474\u0007\u0227\u0002\u0002\u0474\u0476\u0005\u00e4s\u0002",
    "\u0475\u0473\u0003\u0002\u0002\u0002\u0476\u0479\u0003\u0002\u0002\u0002",
    "\u0477\u0475\u0003\u0002\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002",
    "\u0478\u047a\u0003\u0002\u0002\u0002\u0479\u0477\u0003\u0002\u0002\u0002",
    "\u047a\u047b\u0007\u0222\u0002\u0002\u047b\u047d\u0003\u0002\u0002\u0002",
    "\u047c\u0471\u0003\u0002\u0002\u0002\u047c\u047d\u0003\u0002\u0002\u0002",
    "\u047d\u047e\u0003\u0002\u0002\u0002\u047e\u047f\u0007\u0165\u0002\u0002",
    "\u047f\u0486\u0005\u02e0\u0171\u0002\u0480\u0485\u0005\u00d6l\u0002",
    "\u0481\u0485\u0005\f\u0007\u0002\u0482\u0485\u0005\u0010\t\u0002\u0483",
    "\u0485\u0007r\u0002\u0002\u0484\u0480\u0003\u0002\u0002\u0002\u0484",
    "\u0481\u0003\u0002\u0002\u0002\u0484\u0482\u0003\u0002\u0002\u0002\u0484",
    "\u0483\u0003\u0002\u0002\u0002\u0485\u0488\u0003\u0002\u0002\u0002\u0486",
    "\u0484\u0003\u0002\u0002\u0002\u0486\u0487\u0003\u0002\u0002\u0002\u0487",
    "\u049d\u0003\u0002\u0002\u0002\u0488\u0486\u0003\u0002\u0002\u0002\u0489",
    "\u048b\u0007\u0140\u0002\u0002\u048a\u0489\u0003\u0002\u0002\u0002\u048a",
    "\u048b\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c",
    "\u0498\t\u0002\u0002\u0002\u048d\u048f\u0007h\u0002\u0002\u048e\u048d",
    "\u0003\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0493",
    "\u0003\u0002\u0002\u0002\u0490\u0492\u0005\u00e8u\u0002\u0491\u0490",
    "\u0003\u0002\u0002\u0002\u0492\u0495\u0003\u0002\u0002\u0002\u0493\u0491",
    "\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0496",
    "\u0003\u0002\u0002\u0002\u0495\u0493\u0003\u0002\u0002\u0002\u0496\u0499",
    "\u0005\u0132\u009a\u0002\u0497\u0499\u0005\u00dan\u0002\u0498\u048e",
    "\u0003\u0002\u0002\u0002\u0498\u0497\u0003\u0002\u0002\u0002\u0499\u049e",
    "\u0003\u0002\u0002\u0002\u049a\u049b\t\u0003\u0002\u0002\u049b\u049c",
    "\u0007\u01c7\u0002\u0002\u049c\u049e\u0005\u02a2\u0152\u0002\u049d\u048a",
    "\u0003\u0002\u0002\u0002\u049d\u049a\u0003\u0002\u0002\u0002\u049e\u049f",
    "\u0003\u0002\u0002\u0002\u049f\u04a0\u0007\u0233\u0002\u0002\u04a0+",
    "\u0003\u0002\u0002\u0002\u04a1\u04a2\u0007\u014e\u0002\u0002\u04a2\u04ae",
    "\u0005\u02f8\u017d\u0002\u04a3\u04a4\u0007\u0221\u0002\u0002\u04a4\u04a9",
    "\u0005\u00e4s\u0002\u04a5\u04a6\u0007\u0227\u0002\u0002\u04a6\u04a8",
    "\u0005\u00e4s\u0002\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a8\u04ab",
    "\u0003\u0002\u0002\u0002\u04a9\u04a7\u0003\u0002\u0002\u0002\u04a9\u04aa",
    "\u0003\u0002\u0002\u0002\u04aa\u04ac\u0003\u0002\u0002\u0002\u04ab\u04a9",
    "\u0003\u0002\u0002\u0002\u04ac\u04ad\u0007\u0222\u0002\u0002\u04ad\u04af",
    "\u0003\u0002\u0002\u0002\u04ae\u04a3\u0003\u0002\u0002\u0002\u04ae\u04af",
    "\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04bd",
    "\t\u0002\u0002\u0002\u04b1\u04b3\u0007h\u0002\u0002\u04b2\u04b1\u0003",
    "\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b7\u0003",
    "\u0002\u0002\u0002\u04b4\u04b6\u0005\u00e8u\u0002\u04b5\u04b4\u0003",
    "\u0002\u0002\u0002\u04b6\u04b9\u0003\u0002\u0002\u0002\u04b7\u04b5\u0003",
    "\u0002\u0002\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04ba\u0003",
    "\u0002\u0002\u0002\u04b9\u04b7\u0003\u0002\u0002\u0002\u04ba\u04be\u0005",
    "\u0132\u009a\u0002\u04bb\u04be\u0005\u00dan\u0002\u04bc\u04be\u0007",
    "\u0092\u0002\u0002\u04bd\u04b2\u0003\u0002\u0002\u0002\u04bd\u04bb\u0003",
    "\u0002\u0002\u0002\u04bd\u04bc\u0003\u0002\u0002\u0002\u04be\u04bf\u0003",
    "\u0002\u0002\u0002\u04bf\u04c0\u0007\u0233\u0002\u0002\u04c0-\u0003",
    "\u0002\u0002\u0002\u04c1\u04c4\u0007U\u0002\u0002\u04c2\u04c3\u0007",
    "\u012a\u0002\u0002\u04c3\u04c5\u0007\u015f\u0002\u0002\u04c4\u04c2\u0003",
    "\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003",
    "\u0002\u0002\u0002\u04c6\u04c7\u0007\u014e\u0002\u0002\u04c7\u04d3\u0005",
    "\u02ba\u015e\u0002\u04c8\u04c9\u0007\u0221\u0002\u0002\u04c9\u04ce\u0005",
    "\u00e4s\u0002\u04ca\u04cb\u0007\u0227\u0002\u0002\u04cb\u04cd\u0005",
    "\u00e4s\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cd\u04d0\u0003",
    "\u0002\u0002\u0002\u04ce\u04cc\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003",
    "\u0002\u0002\u0002\u04cf\u04d1\u0003\u0002\u0002\u0002\u04d0\u04ce\u0003",
    "\u0002\u0002\u0002\u04d1\u04d2\u0007\u0222\u0002\u0002\u04d2\u04d4\u0003",
    "\u0002\u0002\u0002\u04d3\u04c8\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003",
    "\u0002\u0002\u0002\u04d4\u04d6\u0003\u0002\u0002\u0002\u04d5\u04d7\u0005",
    "\u00d6l\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003",
    "\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04e5\t",
    "\u0002\u0002\u0002\u04d9\u04db\u0007h\u0002\u0002\u04da\u04d9\u0003",
    "\u0002\u0002\u0002\u04da\u04db\u0003\u0002\u0002\u0002\u04db\u04df\u0003",
    "\u0002\u0002\u0002\u04dc\u04de\u0005\u00e8u\u0002\u04dd\u04dc\u0003",
    "\u0002\u0002\u0002\u04de\u04e1\u0003\u0002\u0002\u0002\u04df\u04dd\u0003",
    "\u0002\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e2\u0003",
    "\u0002\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e2\u04e6\u0005",
    "\u0132\u009a\u0002\u04e3\u04e6\u0005\u00dan\u0002\u04e4\u04e6\u0007",
    "\u0092\u0002\u0002\u04e5\u04da\u0003\u0002\u0002\u0002\u04e5\u04e3\u0003",
    "\u0002\u0002\u0002\u04e5\u04e4\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003",
    "\u0002\u0002\u0002\u04e7\u04e8\u0007\u0233\u0002\u0002\u04e8/\u0003",
    "\u0002\u0002\u0002\u04e9\u04ea\u0007y\u0002\u0002\u04ea\u04eb\u0007",
    "\u01b7\u0002\u0002\u04eb\u04ec\u0005\u02bc\u015f\u0002\u04ec\u04ed\u0007",
    "\u0233\u0002\u0002\u04ed1\u0003\u0002\u0002\u0002\u04ee\u04ef\u0007",
    "\t\u0002\u0002\u04ef\u04f0\u0007\u01b7\u0002\u0002\u04f0\u0503\u0005",
    "\u02bc\u015f\u0002\u04f1\u0504\t\u0007\u0002\u0002\u04f2\u04f3\u0007",
    "\u015e\u0002\u0002\u04f3\u04f4\u0007\u01b2\u0002\u0002\u04f4\u0504\u0005",
    "\u02bc\u015f\u0002\u04f5\u04f7\u0007C\u0002\u0002\u04f6\u04f8\u0007",
    "e\u0002\u0002\u04f7\u04f6\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003",
    "\u0002\u0002\u0002\u04f8\u04fc\u0003\u0002\u0002\u0002\u04f9\u04fb\u0005",
    "\u00d8m\u0002\u04fa\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fe\u0003",
    "\u0002\u0002\u0002\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003",
    "\u0002\u0002\u0002\u04fd\u0501\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003",
    "\u0002\u0002\u0002\u04ff\u0500\u0007\u0166\u0002\u0002\u0500\u0502\u0007",
    "\u0184\u0002\u0002\u0501\u04ff\u0003\u0002\u0002\u0002\u0501\u0502\u0003",
    "\u0002\u0002\u0002\u0502\u0504\u0003\u0002\u0002\u0002\u0503\u04f1\u0003",
    "\u0002\u0002\u0002\u0503\u04f2\u0003\u0002\u0002\u0002\u0503\u04f5\u0003",
    "\u0002\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002\u0505\u0506\u0007",
    "\u0233\u0002\u0002\u05063\u0003\u0002\u0002\u0002\u0507\u050a\u0007",
    "U\u0002\u0002\u0508\u0509\u0007\u012a\u0002\u0002\u0509\u050b\u0007",
    "\u015f\u0002\u0002\u050a\u0508\u0003\u0002\u0002\u0002\u050a\u050b\u0003",
    "\u0002\u0002\u0002\u050b\u050c\u0003\u0002\u0002\u0002\u050c\u050d\u0007",
    "\u01b7\u0002\u0002\u050d\u0511\u0005\u02bc\u015f\u0002\u050e\u0512\u0005",
    ":\u001e\u0002\u050f\u0512\u0005> \u0002\u0510\u0512\u0005@!\u0002\u0511",
    "\u050e\u0003\u0002\u0002\u0002\u0511\u050f\u0003\u0002\u0002\u0002\u0511",
    "\u0510\u0003\u0002\u0002\u0002\u0512\u0514\u0003\u0002\u0002\u0002\u0513",
    "\u0515\u00056\u001c\u0002\u0514\u0513\u0003\u0002\u0002\u0002\u0514",
    "\u0515\u0003\u0002\u0002\u0002\u0515\u0517\u0003\u0002\u0002\u0002\u0516",
    "\u0518\t\u0007\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0517",
    "\u0518\u0003\u0002\u0002\u0002\u0518\u051a\u0003\u0002\u0002\u0002\u0519",
    "\u051b\u00058\u001d\u0002\u051a\u0519\u0003\u0002\u0002\u0002\u051a",
    "\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c",
    "\u051d\u0005B\"\u0002\u051d\u051e\u0007\u0233\u0002\u0002\u051e5\u0003",
    "\u0002\u0002\u0002\u051f\u0520\u0007\u009e\u0002\u0002\u0520\u0525\u0005",
    "\u02bc\u015f\u0002\u0521\u0522\u0007\u0227\u0002\u0002\u0522\u0524\u0005",
    "\u02bc\u015f\u0002\u0523\u0521\u0003\u0002\u0002\u0002\u0524\u0527\u0003",
    "\u0002\u0002\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0525\u0526\u0003",
    "\u0002\u0002\u0002\u05267\u0003\u0002\u0002\u0002\u0527\u0525\u0003",
    "\u0002\u0002\u0002\u0528\u0529\u0007\u01d6\u0002\u0002\u0529\u052a\u0007",
    "\u0221\u0002\u0002\u052a\u052b\u0005\u0214\u010b\u0002\u052b\u052c\u0007",
    "\u0222\u0002\u0002\u052c9\u0003\u0002\u0002\u0002\u052d\u0532\u0007",
    "\u001b\u0002\u0002\u052e\u0532\u0007\u0004\u0002\u0002\u052f\u0530\u0007",
    "\u00c7\u0002\u0002\u0530\u0532\u0007\u011e\u0002\u0002\u0531\u052d\u0003",
    "\u0002\u0002\u0002\u0531\u052e\u0003\u0002\u0002\u0002\u0531\u052f\u0003",
    "\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002\u0533\u0535\u0005",
    "L\'\u0002\u0534\u0536\u0005R*\u0002\u0535\u0534\u0003\u0002\u0002\u0002",
    "\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u0538\u0003\u0002\u0002\u0002",
    "\u0537\u0539\u0005<\u001f\u0002\u0538\u0537\u0003\u0002\u0002\u0002",
    "\u0538\u0539\u0003\u0002\u0002\u0002\u0539;\u0003\u0002\u0002\u0002",
    "\u053a\u053b\u0007\u00a2\u0002\u0002\u053b\u053c\u0007{\u0002\u0002",
    "\u053c\u053d\u0007\u016d\u0002\u0002\u053d=\u0003\u0002\u0002\u0002",
    "\u053e\u053f\u0007\u00a2\u0002\u0002\u053f\u0541\u0005L\'\u0002\u0540",
    "\u0542\u0005R*\u0002\u0541\u0540\u0003\u0002\u0002\u0002\u0541\u0542",
    "\u0003\u0002\u0002\u0002\u0542?\u0003\u0002\u0002\u0002\u0543\u0544",
    "\t\b\u0002\u0002\u0544\u0549\u0005J&\u0002\u0545\u0546\u0007\u012a\u0002",
    "\u0002\u0546\u0548\u0005J&\u0002\u0547\u0545\u0003\u0002\u0002\u0002",
    "\u0548\u054b\u0003\u0002\u0002\u0002\u0549\u0547\u0003\u0002\u0002\u0002",
    "\u0549\u054a\u0003\u0002\u0002\u0002\u054a\u054c\u0003\u0002\u0002\u0002",
    "\u054b\u0549\u0003\u0002\u0002\u0002\u054c\u0554\u0007\u0123\u0002\u0002",
    "\u054d\u0555\u0007^\u0002\u0002\u054e\u054f\u0005\u029c\u014f\u0002",
    "\u054f\u0550\u0007\u021a\u0002\u0002\u0550\u0552\u0003\u0002\u0002\u0002",
    "\u0551\u054e\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002",
    "\u0552\u0553\u0003\u0002\u0002\u0002\u0553\u0555\u0007\u0174\u0002\u0002",
    "\u0554\u054d\u0003\u0002\u0002\u0002\u0554\u0551\u0003\u0002\u0002\u0002",
    "\u0555A\u0003\u0002\u0002\u0002\u0556\u0557\u0007D\u0002\u0002\u0557",
    "\u055c\u0007\u01b7\u0002\u0002\u0558\u0559\u0007-\u0002\u0002\u0559",
    "\u055c\u0005\u02f8\u017d\u0002\u055a\u055c\u0005\u0136\u009c\u0002\u055b",
    "\u0556\u0003\u0002\u0002\u0002\u055b\u0558\u0003\u0002\u0002\u0002\u055b",
    "\u055a\u0003\u0002\u0002\u0002\u055cC\u0003\u0002\u0002\u0002\u055d",
    "\u055f\u0005\u029e\u0150\u0002\u055e\u0560\u0005\u02d6\u016c\u0002\u055f",
    "\u055e\u0003\u0002\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002\u0560",
    "E\u0003\u0002\u0002\u0002\u0561\u0562\u0007D\u0002\u0002\u0562\u0566",
    "\u0007\u01b7\u0002\u0002\u0563\u0565\u0005\u00e8u\u0002\u0564\u0563",
    "\u0003\u0002\u0002\u0002\u0565\u0568\u0003\u0002\u0002\u0002\u0566\u0564",
    "\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002\u0567\u056a",
    "\u0003\u0002\u0002\u0002\u0568\u0566\u0003\u0002\u0002\u0002\u0569\u056b",
    "\u0005H%\u0002\u056a\u0569\u0003\u0002\u0002\u0002\u056b\u056c\u0003",
    "\u0002\u0002\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056d\u0003",
    "\u0002\u0002\u0002\u056d\u056e\u0003\u0002\u0002\u0002\u056e\u056f\u0007",
    "\u0083\u0002\u0002\u056f\u0570\u0005\u02bc\u015f\u0002\u0570G\u0003",
    "\u0002\u0002\u0002\u0571\u0572\u0007\u001b\u0002\u0002\u0572\u0573\u0007",
    "\u0198\u0002\u0002\u0573\u0574\u0007\u00ce\u0002\u0002\u0574\u0575\u0005",
    "\u0136\u009c\u0002\u0575\u0576\u0007\u001b\u0002\u0002\u0576\u0577\u0007",
    "\u0198\u0002\u0002\u0577\u0578\u0007\u0233\u0002\u0002\u0578\u0596\u0003",
    "\u0002\u0002\u0002\u0579\u057a\u0007\u001b\u0002\u0002\u057a\u057b\u0007",
    "{\u0002\u0002\u057b\u057c\u0007\u016d\u0002\u0002\u057c\u057d\u0007",
    "\u00ce\u0002\u0002\u057d\u057e\u0005\u0136\u009c\u0002\u057e\u057f\u0007",
    "\u001b\u0002\u0002\u057f\u0580\u0007{\u0002\u0002\u0580\u0581\u0007",
    "\u016d\u0002\u0002\u0581\u0582\u0007\u0233\u0002\u0002\u0582\u0596\u0003",
    "\u0002\u0002\u0002\u0583\u0584\u0007\u0004\u0002\u0002\u0584\u0585\u0007",
    "\u0198\u0002\u0002\u0585\u0586\u0007\u00ce\u0002\u0002\u0586\u0587\u0005",
    "\u0136\u009c\u0002\u0587\u0588\u0007\u0004\u0002\u0002\u0588\u0589\u0007",
    "\u0198\u0002\u0002\u0589\u058a\u0007\u0233\u0002\u0002\u058a\u0596\u0003",
    "\u0002\u0002\u0002\u058b\u058c\u0007\u0004\u0002\u0002\u058c\u058d\u0007",
    "{\u0002\u0002\u058d\u058e\u0007\u016d\u0002\u0002\u058e\u058f\u0007",
    "\u00ce\u0002\u0002\u058f\u0590\u0005\u0136\u009c\u0002\u0590\u0591\u0007",
    "\u0004\u0002\u0002\u0591\u0592\u0007{\u0002\u0002\u0592\u0593\u0007",
    "\u016d\u0002\u0002\u0593\u0594\u0007\u0233\u0002\u0002\u0594\u0596\u0003",
    "\u0002\u0002\u0002\u0595\u0571\u0003\u0002\u0002\u0002\u0595\u0579\u0003",
    "\u0002\u0002\u0002\u0595\u0583\u0003\u0002\u0002\u0002\u0595\u058b\u0003",
    "\u0002\u0002\u0002\u0596I\u0003\u0002\u0002\u0002\u0597\u05b2\u0007",
    "\t\u0002\u0002\u0598\u05b2\u0007\n\u0002\u0002\u0599\u059a\u0007\u0011",
    "\u0002\u0002\u059a\u05b2\u0007\u019a\u0002\u0002\u059b\u05b2\u0007\u0014",
    "\u0002\u0002\u059c\u05b2\u0007?\u0002\u0002\u059d\u05b2\u0007U\u0002",
    "\u0002\u059e\u059f\u0007u\u0002\u0002\u059f\u05b2\u0007\u019a\u0002",
    "\u0002\u05a0\u05b2\u0007y\u0002\u0002\u05a1\u05b2\u0007\u00aa\u0002",
    "\u0002\u05a2\u05b2\u0007\u0108\u0002\u0002\u05a3\u05b2\u0007\u015e\u0002",
    "\u0002\u05a4\u05b2\u0007\u0168\u0002\u0002\u05a5\u05b2\u0007\u01b9\u0002",
    "\u0002\u05a6\u05b2\u0007d\u0002\u0002\u05a7\u05b2\u0007\u0196\u0002",
    "\u0002\u05a8\u05b2\u0007\u0187\u0002\u0002\u05a9\u05b2\u0007b\u0002",
    "\u0002\u05aa\u05b2\u0007\u00e8\u0002\u0002\u05ab\u05b2\u0007\u00e7\u0002",
    "\u0002\u05ac\u05b2\u0007\u0180\u0002\u0002\u05ad\u05b2\u0007\u01a2\u0002",
    "\u0002\u05ae\u05b2\u0007^\u0002\u0002\u05af\u05b2\u0007\u0174\u0002",
    "\u0002\u05b0\u05b2\u0007\u009e\u0002\u0002\u05b1\u0597\u0003\u0002\u0002",
    "\u0002\u05b1\u0598\u0003\u0002\u0002\u0002\u05b1\u0599\u0003\u0002\u0002",
    "\u0002\u05b1\u059b\u0003\u0002\u0002\u0002\u05b1\u059c\u0003\u0002\u0002",
    "\u0002\u05b1\u059d\u0003\u0002\u0002\u0002\u05b1\u059e\u0003\u0002\u0002",
    "\u0002\u05b1\u05a0\u0003\u0002\u0002\u0002\u05b1\u05a1\u0003\u0002\u0002",
    "\u0002\u05b1\u05a2\u0003\u0002\u0002\u0002\u05b1\u05a3\u0003\u0002\u0002",
    "\u0002\u05b1\u05a4\u0003\u0002\u0002\u0002\u05b1\u05a5\u0003\u0002\u0002",
    "\u0002\u05b1\u05a6\u0003\u0002\u0002\u0002\u05b1\u05a7\u0003\u0002\u0002",
    "\u0002\u05b1\u05a8\u0003\u0002\u0002\u0002\u05b1\u05a9\u0003\u0002\u0002",
    "\u0002\u05b1\u05aa\u0003\u0002\u0002\u0002\u05b1\u05ab\u0003\u0002\u0002",
    "\u0002\u05b1\u05ac\u0003\u0002\u0002\u0002\u05b1\u05ad\u0003\u0002\u0002",
    "\u0002\u05b1\u05ae\u0003\u0002\u0002\u0002\u05b1\u05af\u0003\u0002\u0002",
    "\u0002\u05b1\u05b0\u0003\u0002\u0002\u0002\u05b2K\u0003\u0002\u0002",
    "\u0002\u05b3\u05b8\u0005N(\u0002\u05b4\u05b5\u0007\u012a\u0002\u0002",
    "\u05b5\u05b7\u0005N(\u0002\u05b6\u05b4\u0003\u0002\u0002\u0002\u05b7",
    "\u05ba\u0003\u0002\u0002\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b8",
    "\u05b9\u0003\u0002\u0002\u0002\u05b9\u05bb\u0003\u0002\u0002\u0002\u05ba",
    "\u05b8\u0003\u0002\u0002\u0002\u05bb\u05bd\u0007\u0123\u0002\u0002\u05bc",
    "\u05be\u0005P)\u0002\u05bd\u05bc\u0003\u0002\u0002\u0002\u05bd\u05be",
    "\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bf\u05c0",
    "\u0005\u02cc\u0167\u0002\u05c0M\u0003\u0002\u0002\u0002\u05c1\u05cb",
    "\t\t\u0002\u0002\u05c2\u05c3\u0007\u011e\u0002\u0002\u05c3\u05c8\u0005",
    "\u02ca\u0166\u0002\u05c4\u05c5\u0007\u0227\u0002\u0002\u05c5\u05c7\u0005",
    "\u02ca\u0166\u0002\u05c6\u05c4\u0003\u0002\u0002\u0002\u05c7\u05ca\u0003",
    "\u0002\u0002\u0002\u05c8\u05c6\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003",
    "\u0002\u0002\u0002\u05c9\u05cc\u0003\u0002\u0002\u0002\u05ca\u05c8\u0003",
    "\u0002\u0002\u0002\u05cb\u05c2\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003",
    "\u0002\u0002\u0002\u05ccO\u0003\u0002\u0002\u0002\u05cd\u05ce\u0007",
    "\u0105\u0002\u0002\u05ce\u05cf\u0007\u01a5\u0002\u0002\u05cf\u05d0\u0005",
    "\u02cc\u0167\u0002\u05d0\u05d1\u0007\u011e\u0002\u0002\u05d1Q\u0003",
    "\u0002\u0002\u0002\u05d2\u05d4\u0007\u015a\u0002\u0002\u05d3\u05d5\u0005",
    "T+\u0002\u05d4\u05d3\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002",
    "\u0002\u0002\u05d6\u05d4\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002",
    "\u0002\u0002\u05d7S\u0003\u0002\u0002\u0002\u05d8\u05d9\t\n\u0002\u0002",
    "\u05d9\u05da\u0005\u0288\u0145\u0002\u05daU\u0003\u0002\u0002\u0002",
    "\u05db\u05dc\u0007y\u0002\u0002\u05dc\u05de\u0007\u01ba\u0002\u0002",
    "\u05dd\u05df\u0007$\u0002\u0002\u05de\u05dd\u0003\u0002\u0002\u0002",
    "\u05de\u05df\u0003\u0002\u0002\u0002\u05df\u05e0\u0003\u0002\u0002\u0002",
    "\u05e0\u05e2\u0005\u02b2\u015a\u0002\u05e1\u05e3\t\u000b\u0002\u0002",
    "\u05e2\u05e1\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002",
    "\u05e3\u05e4\u0003\u0002\u0002\u0002\u05e4\u05e5\u0007\u0233\u0002\u0002",
    "\u05e5W\u0003\u0002\u0002\u0002\u05e6\u05e7\u0007\t\u0002\u0002\u05e7",
    "\u05e8\u0007\u01ba\u0002\u0002\u05e8\u05ee\u0005\u02b2\u015a\u0002\u05e9",
    "\u05ef\u0005Z.\u0002\u05ea\u05ef\u0005\\/\u0002\u05eb\u05ef\u0005^0",
    "\u0002\u05ec\u05ef\u0005f4\u0002\u05ed\u05ef\u0005\u0088E\u0002\u05ee",
    "\u05e9\u0003\u0002\u0002\u0002\u05ee\u05ea\u0003\u0002\u0002\u0002\u05ee",
    "\u05eb\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003\u0002\u0002\u0002\u05ee",
    "\u05ed\u0003\u0002\u0002\u0002\u05ef\u05f1\u0003\u0002\u0002\u0002\u05f0",
    "\u05f2\u0005h5\u0002\u05f1\u05f0\u0003\u0002\u0002\u0002\u05f1\u05f2",
    "\u0003\u0002\u0002\u0002\u05f2\u05f3\u0003\u0002\u0002\u0002\u05f3\u05f4",
    "\u0007\u0233\u0002\u0002\u05f4Y\u0003\u0002\u0002\u0002\u05f5\u05f7",
    "\u0007C\u0002\u0002\u05f6\u05f8\u0007e\u0002\u0002\u05f7\u05f6\u0003",
    "\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002\u05f8\u05fa\u0003",
    "\u0002\u0002\u0002\u05f9\u05fb\t\f\u0002\u0002\u05fa\u05f9\u0003\u0002",
    "\u0002\u0002\u05fa\u05fb\u0003\u0002\u0002\u0002\u05fb\u05ff\u0003\u0002",
    "\u0002\u0002\u05fc\u05fe\u0005\u00d8m\u0002\u05fd\u05fc\u0003\u0002",
    "\u0002\u0002\u05fe\u0601\u0003\u0002\u0002\u0002\u05ff\u05fd\u0003\u0002",
    "\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002\u0600\u0604\u0003\u0002",
    "\u0002\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0602\u0603\u0007\u0166",
    "\u0002\u0002\u0603\u0605\u0007\u0184\u0002\u0002\u0604\u0602\u0003\u0002",
    "\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002\u0605[\u0003\u0002",
    "\u0002\u0002\u0606\u0608\u0007\u015f\u0002\u0002\u0607\u0609\u0005\u00d6",
    "l\u0002\u0608\u0607\u0003\u0002\u0002\u0002\u0608\u0609\u0003\u0002",
    "\u0002\u0002\u0609\u060a\u0003\u0002\u0002\u0002\u060a\u060b\u0007\u000f",
    "\u0002\u0002\u060b\u060c\u0007\u011c\u0002\u0002\u060c\u060d\u0007\u0221",
    "\u0002\u0002\u060d\u0612\u0005\u008aF\u0002\u060e\u060f\u0007\u0227",
    "\u0002\u0002\u060f\u0611\u0005\u008aF\u0002\u0610\u060e\u0003\u0002",
    "\u0002\u0002\u0611\u0614\u0003\u0002\u0002\u0002\u0612\u0610\u0003\u0002",
    "\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002\u0613\u0615\u0003\u0002",
    "\u0002\u0002\u0614\u0612\u0003\u0002\u0002\u0002\u0615\u0616\u0007\u0222",
    "\u0002\u0002\u0616]\u0003\u0002\u0002\u0002\u0617\u061c\u0005`1\u0002",
    "\u0618\u0619\u0007\u0227\u0002\u0002\u0619\u061b\u0005`1\u0002\u061a",
    "\u0618\u0003\u0002\u0002\u0002\u061b\u061e\u0003\u0002\u0002\u0002\u061c",
    "\u061a\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002\u0002\u0002\u061d",
    "_\u0003\u0002\u0002\u0002\u061e\u061c\u0003\u0002\u0002\u0002\u061f",
    "\u0622\t\r\u0002\u0002\u0620\u0623\u0005\u009aN\u0002\u0621\u0623\u0005",
    "\u0092J\u0002\u0622\u0620\u0003\u0002\u0002\u0002\u0622\u0621\u0003",
    "\u0002\u0002\u0002\u0623a\u0003\u0002\u0002\u0002\u0624\u0625\t\u000e",
    "\u0002\u0002\u0625\u0632\u0007\u0013\u0002\u0002\u0626\u0633\u0005d",
    "3\u0002\u0627\u0628\u0007\u0221\u0002\u0002\u0628\u062d\u0005d3\u0002",
    "\u0629\u062a\u0007\u0227\u0002\u0002\u062a\u062c\u0005d3\u0002\u062b",
    "\u0629\u0003\u0002\u0002\u0002\u062c\u062f\u0003\u0002\u0002\u0002\u062d",
    "\u062b\u0003\u0002\u0002\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e",
    "\u0630\u0003\u0002\u0002\u0002\u062f\u062d\u0003\u0002\u0002\u0002\u0630",
    "\u0631\u0007\u0222\u0002\u0002\u0631\u0633\u0003\u0002\u0002\u0002\u0632",
    "\u0626\u0003\u0002\u0002\u0002\u0632\u0627\u0003\u0002\u0002\u0002\u0633",
    "c\u0003\u0002\u0002\u0002\u0634\u0636\u0005\u0294\u014b\u0002\u0635",
    "\u0637\u0005\u02e0\u0171\u0002\u0636\u0635\u0003\u0002\u0002\u0002\u0636",
    "\u0637\u0003\u0002\u0002\u0002\u0637e\u0003\u0002\u0002\u0002\u0638",
    "\u063e\u0007\u00fa\u0002\u0002\u0639\u063a\u0007\u00e0\u0002\u0002\u063a",
    "\u063f\u0005\u0218\u010d\u0002\u063b\u063c\u0007|\u0002\u0002\u063c",
    "\u063d\u0007\u01ba\u0002\u0002\u063d\u063f\u0005\u02e0\u0171\u0002\u063e",
    "\u0639\u0003\u0002\u0002\u0002\u063e\u063b\u0003\u0002\u0002\u0002\u063f",
    "g\u0003\u0002\u0002\u0002\u0640\u0651\u0007\u00cd\u0002\u0002\u0641",
    "\u064b\u0007/\u0002\u0002\u0642\u0643\u0007P\u0002\u0002\u0643\u0644",
    "\u0007\u01b2\u0002\u0002\u0644\u064c\u0007\u019f\u0002\u0002\u0645\u0647",
    "\u0007\u0115\u0002\u0002\u0646\u0645\u0003\u0002\u0002\u0002\u0646\u0647",
    "\u0003\u0002\u0002\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u0649",
    "\u0007\u00b7\u0002\u0002\u0649\u064a\u0007\u01a5\u0002\u0002\u064a\u064c",
    "\u0007_\u0002\u0002\u064b\u0642\u0003\u0002\u0002\u0002\u064b\u0646",
    "\u0003\u0002\u0002\u0002\u064b\u064c\u0003\u0002\u0002\u0002\u064c\u064e",
    "\u0003\u0002\u0002\u0002\u064d\u064f\u0005j6\u0002\u064e\u064d\u0003",
    "\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002\u0002\u064f\u0651\u0003",
    "\u0002\u0002\u0002\u0650\u0640\u0003\u0002\u0002\u0002\u0650\u0641\u0003",
    "\u0002\u0002\u0002\u0651i\u0003\u0002\u0002\u0002\u0652\u0654\u0007",
    "\u00a0\u0002\u0002\u0653\u0652\u0003\u0002\u0002\u0002\u0653\u0654\u0003",
    "\u0002\u0002\u0002\u0654\u0655\u0003\u0002\u0002\u0002\u0655\u0656\u0007",
    "\u008b\u0002\u0002\u0656\u0657\u0007\u00cc\u0002\u0002\u0657\u0658\u0005",
    "\u02cc\u0167\u0002\u0658k\u0003\u0002\u0002\u0002\u0659\u065c\u0007",
    "U\u0002\u0002\u065a\u065b\u0007\u012a\u0002\u0002\u065b\u065d\u0007",
    "\u015f\u0002\u0002\u065c\u065a\u0003\u0002\u0002\u0002\u065c\u065d\u0003",
    "\u0002\u0002\u0002\u065d\u065e\u0003\u0002\u0002\u0002\u065e\u0661\u0007",
    "\u01ba\u0002\u0002\u065f\u0662\u0005n8\u0002\u0660\u0662\u0005z>\u0002",
    "\u0661\u065f\u0003\u0002\u0002\u0002\u0661\u0660\u0003\u0002\u0002\u0002",
    "\u0662\u0663\u0003\u0002\u0002\u0002\u0663\u0664\u0007\u0233\u0002\u0002",
    "\u0664m\u0003\u0002\u0002\u0002\u0665\u0668\u0005\u02b2\u015a\u0002",
    "\u0666\u0667\u0007\u011f\u0002\u0002\u0667\u0669\u0007\u021d\u0002\u0002",
    "\u0668\u0666\u0003\u0002\u0002\u0002\u0668\u0669\u0003\u0002\u0002\u0002",
    "\u0669\u066b\u0003\u0002\u0002\u0002\u066a\u066c\u0005p9\u0002\u066b",
    "\u066a\u0003\u0002\u0002\u0002\u066b\u066c\u0003\u0002\u0002\u0002\u066c",
    "o\u0003\u0002\u0002\u0002\u066d\u066f\u0005\u00d6l\u0002\u066e\u066d",
    "\u0003\u0002\u0002\u0002\u066e\u066f\u0003\u0002\u0002\u0002\u066f\u0672",
    "\u0003\u0002\u0002\u0002\u0670\u0673\u0005r:\u0002\u0671\u0673\u0005",
    "t;\u0002\u0672\u0670\u0003\u0002\u0002\u0002\u0672\u0671\u0003\u0002",
    "\u0002\u0002\u0673\u0675\u0003\u0002\u0002\u0002\u0674\u0676\u0005x",
    "=\u0002\u0675\u0674\u0003\u0002\u0002\u0002\u0675\u0676\u0003\u0002",
    "\u0002\u0002\u0676\u0682\u0003\u0002\u0002\u0002\u0677\u0678\u0007\u0221",
    "\u0002\u0002\u0678\u067d\u0005\u008aF\u0002\u0679\u067a\u0007\u0227",
    "\u0002\u0002\u067a\u067c\u0005\u008aF\u0002\u067b\u0679\u0003\u0002",
    "\u0002\u0002\u067c\u067f\u0003\u0002\u0002\u0002\u067d\u067b\u0003\u0002",
    "\u0002\u0002\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u0680\u0003\u0002",
    "\u0002\u0002\u067f\u067d\u0003\u0002\u0002\u0002\u0680\u0681\u0007\u0222",
    "\u0002\u0002\u0681\u0683\u0003\u0002\u0002\u0002\u0682\u0677\u0003\u0002",
    "\u0002\u0002\u0682\u0683\u0003\u0002\u0002\u0002\u0683\u0687\u0003\u0002",
    "\u0002\u0002\u0684\u0686\u0005\u0088E\u0002\u0685\u0684\u0003\u0002",
    "\u0002\u0002\u0686\u0689\u0003\u0002\u0002\u0002\u0687\u0685\u0003\u0002",
    "\u0002\u0002\u0687\u0688\u0003\u0002\u0002\u0002\u0688q\u0003\u0002",
    "\u0002\u0002\u0689\u0687\u0003\u0002\u0002\u0002\u068a\u068e\t\u0002",
    "\u0002\u0002\u068b\u068f\u0007\u011c\u0002\u0002\u068c\u068f\u0005\u0102",
    "\u0082\u0002\u068d\u068f\u0005v<\u0002\u068e\u068b\u0003\u0002\u0002",
    "\u0002\u068e\u068c\u0003\u0002\u0002\u0002\u068e\u068d\u0003\u0002\u0002",
    "\u0002\u068fs\u0003\u0002\u0002\u0002\u0690\u0691\u0007\u01bc\u0002",
    "\u0002\u0691\u0692\u0005\u02e0\u0171\u0002\u0692u\u0003\u0002\u0002",
    "\u0002\u0693\u0694\u0007\u01a5\u0002\u0002\u0694\u0695\u0007\u011e\u0002",
    "\u0002\u0695\u0698\u0005\u02e0\u0171\u0002\u0696\u0697\u0007\u0115\u0002",
    "\u0002\u0697\u0699\u0007\u0117\u0002\u0002\u0698\u0696\u0003\u0002\u0002",
    "\u0002\u0698\u0699\u0003\u0002\u0002\u0002\u0699w\u0003\u0002\u0002",
    "\u0002\u069a\u069b\u0007\u0092\u0002\u0002\u069b\u069c\u0007\u00fd\u0002",
    "\u0002\u069c\u069d\u0005\u0218\u010d\u0002\u069d\u069e\u0007\u00d5\u0002",
    "\u0002\u069e\u069f\u0007\u00d1\u0002\u0002\u069f\u06a0\u0007\u01c7\u0002",
    "\u0002\u06a0\u06a1\t\u000f\u0002\u0002\u06a1y\u0003\u0002\u0002\u0002",
    "\u06a2\u06a3\u0007$\u0002\u0002\u06a3\u06a4\u0005\u02b2\u015a\u0002",
    "\u06a4\u06a6\t\u0002\u0002\u0002\u06a5\u06a7\u0005|?\u0002\u06a6\u06a5",
    "\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a6",
    "\u0003\u0002\u0002\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa",
    "\u0003\u0002\u0002\u0002\u06aa\u06ab\u0007\u0083\u0002\u0002\u06ab{",
    "\u0003\u0002\u0002\u0002\u06ac\u06af\u0005~@\u0002\u06ad\u06af\u0005",
    "\u0080A\u0002\u06ae\u06ac\u0003\u0002\u0002\u0002\u06ae\u06ad\u0003",
    "\u0002\u0002\u0002\u06af}\u0003\u0002\u0002\u0002\u06b0\u06b1\t\u0010",
    "\u0002\u0002\u06b1\u06b2\u0007\u00f1\u0002\u0002\u06b2\u06b3\u0005\u0084",
    "C\u0002\u06b3\u007f\u0003\u0002\u0002\u0002\u06b4\u06b8\t\u0011\u0002",
    "\u0002\u06b5\u06b9\u0005\u0082B\u0002\u06b6\u06b9\u0005\u0084C\u0002",
    "\u06b7\u06b9\u0005\u0086D\u0002\u06b8\u06b5\u0003\u0002\u0002\u0002",
    "\u06b8\u06b6\u0003\u0002\u0002\u0002\u06b8\u06b7\u0003\u0002\u0002\u0002",
    "\u06b9\u0081\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007\u014e\u0002\u0002",
    "\u06bb\u06bc\u0005\u02ba\u015e\u0002\u06bc\u06bd\u0007\u0221\u0002\u0002",
    "\u06bd\u06c2\u0005\u00a0Q\u0002\u06be\u06bf\u0007\u0227\u0002\u0002",
    "\u06bf\u06c1\u0005\u00a0Q\u0002\u06c0\u06be\u0003\u0002\u0002\u0002",
    "\u06c1\u06c4\u0003\u0002\u0002\u0002\u06c2\u06c0\u0003\u0002\u0002\u0002",
    "\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c5\u0003\u0002\u0002\u0002",
    "\u06c4\u06c2\u0003\u0002\u0002\u0002\u06c5\u06c6\u0007\u0222\u0002\u0002",
    "\u06c6\u06d4\t\u0002\u0002\u0002\u06c7\u06d5\u0005\u00dan\u0002\u06c8",
    "\u06ca\u0007h\u0002\u0002\u06c9\u06c8\u0003\u0002\u0002\u0002\u06c9",
    "\u06ca\u0003\u0002\u0002\u0002\u06ca\u06ce\u0003\u0002\u0002\u0002\u06cb",
    "\u06cd\u0005\u00e8u\u0002\u06cc\u06cb\u0003\u0002\u0002\u0002\u06cd",
    "\u06d0\u0003\u0002\u0002\u0002\u06ce\u06cc\u0003\u0002\u0002\u0002\u06ce",
    "\u06cf\u0003\u0002\u0002\u0002\u06cf\u06d1\u0003\u0002\u0002\u0002\u06d0",
    "\u06ce\u0003\u0002\u0002\u0002\u06d1\u06d2\u0005\u0132\u009a\u0002\u06d2",
    "\u06d3\u0007\u0233\u0002\u0002\u06d3\u06d5\u0003\u0002\u0002\u0002\u06d4",
    "\u06c7\u0003\u0002\u0002\u0002\u06d4\u06c9\u0003\u0002\u0002\u0002\u06d5",
    "\u0083\u0003\u0002\u0002\u0002\u06d6\u06d7\u0007\u00a7\u0002\u0002\u06d7",
    "\u06e3\u0005\u02b8\u015d\u0002\u06d8\u06d9\u0007\u0221\u0002\u0002\u06d9",
    "\u06de\u0005\u00a0Q\u0002\u06da\u06db\u0007\u0227\u0002\u0002\u06db",
    "\u06dd\u0005\u00a0Q\u0002\u06dc\u06da\u0003\u0002\u0002\u0002\u06dd",
    "\u06e0\u0003\u0002\u0002\u0002\u06de\u06dc\u0003\u0002\u0002\u0002\u06de",
    "\u06df\u0003\u0002\u0002\u0002\u06df\u06e1\u0003\u0002\u0002\u0002\u06e0",
    "\u06de\u0003\u0002\u0002\u0002\u06e1\u06e2\u0007\u0222\u0002\u0002\u06e2",
    "\u06e4\u0003\u0002\u0002\u0002\u06e3\u06d8\u0003\u0002\u0002\u0002\u06e3",
    "\u06e4\u0003\u0002\u0002\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5",
    "\u06e6\u0007\u0165\u0002\u0002\u06e6\u06e7\u0005\u02e0\u0171\u0002\u06e7",
    "\u06f5\t\u0002\u0002\u0002\u06e8\u06f6\u0005\u00dan\u0002\u06e9\u06eb",
    "\u0007h\u0002\u0002\u06ea\u06e9\u0003\u0002\u0002\u0002\u06ea\u06eb",
    "\u0003\u0002\u0002\u0002\u06eb\u06ef\u0003\u0002\u0002\u0002\u06ec\u06ee",
    "\u0005\u00e8u\u0002\u06ed\u06ec\u0003\u0002\u0002\u0002\u06ee\u06f1",
    "\u0003\u0002\u0002\u0002\u06ef\u06ed\u0003\u0002\u0002\u0002\u06ef\u06f0",
    "\u0003\u0002\u0002\u0002\u06f0\u06f2\u0003\u0002\u0002\u0002\u06f1\u06ef",
    "\u0003\u0002\u0002\u0002\u06f2\u06f3\u0005\u0132\u009a\u0002\u06f3\u06f4",
    "\u0007\u0233\u0002\u0002\u06f4\u06f6\u0003\u0002\u0002\u0002\u06f5\u06e8",
    "\u0003\u0002\u0002\u0002\u06f5\u06ea\u0003\u0002\u0002\u0002\u06f6\u0085",
    "\u0003\u0002\u0002\u0002\u06f7\u06f9\u0007\u0098\u0002\u0002\u06f8\u06f7",
    "\u0003\u0002\u0002\u0002\u06f8\u06f9\u0003\u0002\u0002\u0002\u06f9\u06fb",
    "\u0003\u0002\u0002\u0002\u06fa\u06fc\u0007\u00c6\u0002\u0002\u06fb\u06fa",
    "\u0003\u0002\u0002\u0002\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u06fd",
    "\u0003\u0002\u0002\u0002\u06fd\u06fe\u0007L\u0002\u0002\u06fe\u06ff",
    "\u0007\u00a7\u0002\u0002\u06ff\u0711\u0005\u02e0\u0171\u0002\u0700\u0701",
    "\u0007\u0221\u0002\u0002\u0701\u0702\u0007\u017b\u0002\u0002\u0702\u0703",
    "\u0007\u00bf\u0002\u0002\u0703\u0704\u0007\u012d\u0002\u0002\u0704\u0705",
    "\u0005\u02e0\u0171\u0002\u0705\u0706\u0007\u0227\u0002\u0002\u0706\u0707",
    "\u0003\u0002\u0002\u0002\u0707\u070c\u0005\u00a0Q\u0002\u0708\u0709",
    "\u0007\u0227\u0002\u0002\u0709\u070b\u0005\u00a0Q\u0002\u070a\u0708",
    "\u0003\u0002\u0002\u0002\u070b\u070e\u0003\u0002\u0002\u0002\u070c\u070a",
    "\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002\u0002\u0002\u070d\u070f",
    "\u0003\u0002\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070f\u0710",
    "\u0007\u0222\u0002\u0002\u0710\u0712\u0003\u0002\u0002\u0002\u0711\u0700",
    "\u0003\u0002\u0002\u0002\u0711\u0712\u0003\u0002\u0002\u0002\u0712\u0713",
    "\u0003\u0002\u0002\u0002\u0713\u0714\u0007\u0165\u0002\u0002\u0714\u0715",
    "\u0007\u017b\u0002\u0002\u0715\u0716\u0007\u000f\u0002\u0002\u0716\u0717",
    "\u0007\u0163\u0002\u0002\u0717\u0725\t\u0002\u0002\u0002\u0718\u0726",
    "\u0005\u00dan\u0002\u0719\u071b\u0007h\u0002\u0002\u071a\u0719\u0003",
    "\u0002\u0002\u0002\u071a\u071b\u0003\u0002\u0002\u0002\u071b\u071f\u0003",
    "\u0002\u0002\u0002\u071c\u071e\u0005\u00e8u\u0002\u071d\u071c\u0003",
    "\u0002\u0002\u0002\u071e\u0721\u0003\u0002\u0002\u0002\u071f\u071d\u0003",
    "\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u0722\u0003",
    "\u0002\u0002\u0002\u0721\u071f\u0003\u0002\u0002\u0002\u0722\u0723\u0005",
    "\u0132\u009a\u0002\u0723\u0724\u0007\u0233\u0002\u0002\u0724\u0726\u0003",
    "\u0002\u0002\u0002\u0725\u0718\u0003\u0002\u0002\u0002\u0725\u071a\u0003",
    "\u0002\u0002\u0002\u0726\u0087\u0003\u0002\u0002\u0002\u0727\u0729\u0007",
    "\u0115\u0002\u0002\u0728\u0727\u0003\u0002\u0002\u0002\u0728\u0729\u0003",
    "\u0002\u0002\u0002\u0729\u072a\u0003\u0002\u0002\u0002\u072a\u072b\t",
    "\u0012\u0002\u0002\u072b\u0089\u0003\u0002\u0002\u0002\u072c\u072d\u0005",
    "\u02f8\u017d\u0002\u072d\u072f\u0005\u02e0\u0171\u0002\u072e\u0730\u0005",
    "\u008cG\u0002\u072f\u072e\u0003\u0002\u0002\u0002\u072f\u0730\u0003",
    "\u0002\u0002\u0002\u0730\u0733\u0003\u0002\u0002\u0002\u0731\u0733\u0005",
    "\u008eH\u0002\u0732\u072c\u0003\u0002\u0002\u0002\u0732\u0731\u0003",
    "\u0002\u0002\u0002\u0733\u008b\u0003\u0002\u0002\u0002\u0734\u0735\u0007",
    "\u0092\u0002\u0002\u0735\u0736\u0007\u00fd\u0002\u0002\u0736\u0737\u0005",
    "\u0218\u010d\u0002\u0737\u008d\u0003\u0002\u0002\u0002\u0738\u073a\u0005",
    "\u0088E\u0002\u0739\u0738\u0003\u0002\u0002\u0002\u0739\u073a\u0003",
    "\u0002\u0002\u0002\u073a\u073c\u0003\u0002\u0002\u0002\u073b\u073d\u0005",
    "\u0090I\u0002\u073c\u073b\u0003\u0002\u0002\u0002\u073d\u073e\u0003",
    "\u0002\u0002\u0002\u073e\u073c\u0003\u0002\u0002\u0002\u073e\u073f\u0003",
    "\u0002\u0002\u0002\u073f\u0742\u0003\u0002\u0002\u0002\u0740\u0741\u0007",
    "\u0227\u0002\u0002\u0741\u0743\u0005\u009cO\u0002\u0742\u0740\u0003",
    "\u0002\u0002\u0002\u0742\u0743\u0003\u0002\u0002\u0002\u0743\u008f\u0003",
    "\u0002\u0002\u0002\u0744\u0748\u0005\u0092J\u0002\u0745\u0748\u0005",
    "\u0098M\u0002\u0746\u0748\u0005\u009aN\u0002\u0747\u0744\u0003\u0002",
    "\u0002\u0002\u0747\u0745\u0003\u0002\u0002\u0002\u0747\u0746\u0003\u0002",
    "\u0002\u0002\u0748\u0091\u0003\u0002\u0002\u0002\u0749\u074c\t\u0011",
    "\u0002\u0002\u074a\u074d\u0005\u0094K\u0002\u074b\u074d\u0005\u0096",
    "L\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074c\u074b\u0003\u0002",
    "\u0002\u0002\u074d\u0093\u0003\u0002\u0002\u0002\u074e\u074f\u0007\u014e",
    "\u0002\u0002\u074f\u0750\u0005\u02ba\u015e\u0002\u0750\u0751\u0007\u0221",
    "\u0002\u0002\u0751\u0756\u0005\u00a0Q\u0002\u0752\u0753\u0007\u0227",
    "\u0002\u0002\u0753\u0755\u0005\u00a0Q\u0002\u0754\u0752\u0003\u0002",
    "\u0002\u0002\u0755\u0758\u0003\u0002\u0002\u0002\u0756\u0754\u0003\u0002",
    "\u0002\u0002\u0756\u0757\u0003\u0002\u0002\u0002\u0757\u0759\u0003\u0002",
    "\u0002\u0002\u0758\u0756\u0003\u0002\u0002\u0002\u0759\u075c\u0007\u0222",
    "\u0002\u0002\u075a\u075b\t\u0002\u0002\u0002\u075b\u075d\u0005\u00da",
    "n\u0002\u075c\u075a\u0003\u0002\u0002\u0002\u075c\u075d\u0003\u0002",
    "\u0002\u0002\u075d\u0095\u0003\u0002\u0002\u0002\u075e\u075f\u0007\u00a7",
    "\u0002\u0002\u075f\u076b\u0005\u02b8\u015d\u0002\u0760\u0761\u0007\u0221",
    "\u0002\u0002\u0761\u0766\u0005\u00a0Q\u0002\u0762\u0763\u0007\u0227",
    "\u0002\u0002\u0763\u0765\u0005\u00a0Q\u0002\u0764\u0762\u0003\u0002",
    "\u0002\u0002\u0765\u0768\u0003\u0002\u0002\u0002\u0766\u0764\u0003\u0002",
    "\u0002\u0002\u0766\u0767\u0003\u0002\u0002\u0002\u0767\u0769\u0003\u0002",
    "\u0002\u0002\u0768\u0766\u0003\u0002\u0002\u0002\u0769\u076a\u0007\u0222",
    "\u0002\u0002\u076a\u076c\u0003\u0002\u0002\u0002\u076b\u0760\u0003\u0002",
    "\u0002\u0002\u076b\u076c\u0003\u0002\u0002\u0002\u076c\u076d\u0003\u0002",
    "\u0002\u0002\u076d\u0772\u0007\u0165\u0002\u0002\u076e\u0773\u0005\u02e0",
    "\u0171\u0002\u076f\u0770\u0007\u017b\u0002\u0002\u0770\u0771\u0007\u000f",
    "\u0002\u0002\u0771\u0773\u0007\u0163\u0002\u0002\u0772\u076e\u0003\u0002",
    "\u0002\u0002\u0772\u076f\u0003\u0002\u0002\u0002\u0773\u077c\u0003\u0002",
    "\u0002\u0002\u0774\u0775\t\u0002\u0002\u0002\u0775\u077d\u0005\u00da",
    "n\u0002\u0776\u0778\u0007\u0092\u0002\u0002\u0777\u0779\u0007\u01cd",
    "\u0002\u0002\u0778\u0777\u0003\u0002\u0002\u0002\u0778\u0779\u0003\u0002",
    "\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u077b\u0007\u00fd",
    "\u0002\u0002\u077b\u077d\u0005\u0218\u010d\u0002\u077c\u0774\u0003\u0002",
    "\u0002\u0002\u077c\u0776\u0003\u0002\u0002\u0002\u077c\u077d\u0003\u0002",
    "\u0002\u0002\u077d\u0097\u0003\u0002\u0002\u0002\u077e\u0780\u0007\u0098",
    "\u0002\u0002\u077f\u077e\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002",
    "\u0002\u0002\u0780\u0782\u0003\u0002\u0002\u0002\u0781\u0783\u0007\u00c6",
    "\u0002\u0002\u0782\u0781\u0003\u0002\u0002\u0002\u0782\u0783\u0003\u0002",
    "\u0002\u0002\u0783\u0784\u0003\u0002\u0002\u0002\u0784\u0785\u0007L",
    "\u0002\u0002\u0785\u0786\u0007\u00a7\u0002\u0002\u0786\u0798\u0005\u02e0",
    "\u0171\u0002\u0787\u0788\u0007\u0221\u0002\u0002\u0788\u0789\u0007\u017b",
    "\u0002\u0002\u0789\u078a\u0007\u00bf\u0002\u0002\u078a\u078b\u0007\u012d",
    "\u0002\u0002\u078b\u078c\u0005\u02e0\u0171\u0002\u078c\u078d\u0007\u0227",
    "\u0002\u0002\u078d\u078e\u0003\u0002\u0002\u0002\u078e\u0793\u0005\u00a0",
    "Q\u0002\u078f\u0790\u0007\u0227\u0002\u0002\u0790\u0792\u0005\u00a0",
    "Q\u0002\u0791\u078f\u0003\u0002\u0002\u0002\u0792\u0795\u0003\u0002",
    "\u0002\u0002\u0793\u0791\u0003\u0002\u0002\u0002\u0793\u0794\u0003\u0002",
    "\u0002\u0002\u0794\u0796\u0003\u0002\u0002\u0002\u0795\u0793\u0003\u0002",
    "\u0002\u0002\u0796\u0797\u0007\u0222\u0002\u0002\u0797\u0799\u0003\u0002",
    "\u0002\u0002\u0798\u0787\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002",
    "\u0002\u0002\u0799\u079a\u0003\u0002\u0002\u0002\u079a\u079b\u0007\u0165",
    "\u0002\u0002\u079b\u079c\u0007\u017b\u0002\u0002\u079c\u079d\u0007\u000f",
    "\u0002\u0002\u079d\u07a0\u0007\u0163\u0002\u0002\u079e\u079f\t\u0002",
    "\u0002\u0002\u079f\u07a1\u0005\u00dan\u0002\u07a0\u079e\u0003\u0002",
    "\u0002\u0002\u07a0\u07a1\u0003\u0002\u0002\u0002\u07a1\u0099\u0003\u0002",
    "\u0002\u0002\u07a2\u07a3\t\u0010\u0002\u0002\u07a3\u07a4\u0007\u00f1",
    "\u0002\u0002\u07a4\u07a5\u0005\u0096L\u0002\u07a5\u009b\u0003\u0002",
    "\u0002\u0002\u07a6\u07a7\u0007\u0147\u0002\u0002\u07a7\u07a8\u0007\u0161",
    "\u0002\u0002\u07a8\u07a9\u0007\u0221\u0002\u0002\u07a9\u07ae\u0005\u009e",
    "P\u0002\u07aa\u07ab\u0007\u0227\u0002\u0002\u07ab\u07ad\u0005\u009e",
    "P\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002\u07ad\u07b0\u0003\u0002",
    "\u0002\u0002\u07ae\u07ac\u0003\u0002\u0002\u0002\u07ae\u07af\u0003\u0002",
    "\u0002\u0002\u07af\u07b1\u0003\u0002\u0002\u0002\u07b0\u07ae\u0003\u0002",
    "\u0002\u0002\u07b1\u07b2\u0007\u0222\u0002\u0002\u07b2\u009d\u0003\u0002",
    "\u0002\u0002\u07b3\u07b6\u0005\u02f8\u017d\u0002\u07b4\u07b6\u0007k",
    "\u0002\u0002\u07b5\u07b3\u0003\u0002\u0002\u0002\u07b5\u07b4\u0003\u0002",
    "\u0002\u0002\u07b6\u009f\u0003\u0002\u0002\u0002\u07b7\u07b8\u0005\u02a4",
    "\u0153\u0002\u07b8\u07b9\u0005\u02e0\u0171\u0002\u07b9\u00a1\u0003\u0002",
    "\u0002\u0002\u07ba\u07bb\u0007y\u0002\u0002\u07bb\u07bc\u0007\u017c",
    "\u0002\u0002\u07bc\u07bd\u0005\u02b4\u015b\u0002\u07bd\u07be\u0007\u0233",
    "\u0002\u0002\u07be\u00a3\u0003\u0002\u0002\u0002\u07bf\u07c0\u0007\t",
    "\u0002\u0002\u07c0\u07c1\u0007\u017c\u0002\u0002\u07c1\u07c3\u0005\u02b4",
    "\u015b\u0002\u07c2\u07c4\u0005\u00a8U\u0002\u07c3\u07c2\u0003\u0002",
    "\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5\u07c3\u0003\u0002",
    "\u0002\u0002\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07c7\u0003\u0002",
    "\u0002\u0002\u07c7\u07c8\u0007\u0233\u0002\u0002\u07c8\u00a5\u0003\u0002",
    "\u0002\u0002\u07c9\u07ca\u0007U\u0002\u0002\u07ca\u07cb\u0007\u017c",
    "\u0002\u0002\u07cb\u07d0\u0005\u02b4\u015b\u0002\u07cc\u07cf\u0005\u00aa",
    "V\u0002\u07cd\u07cf\u0005\u00a8U\u0002\u07ce\u07cc\u0003\u0002\u0002",
    "\u0002\u07ce\u07cd\u0003\u0002\u0002\u0002\u07cf\u07d2\u0003\u0002\u0002",
    "\u0002\u07d0\u07ce\u0003\u0002\u0002\u0002\u07d0\u07d1\u0003\u0002\u0002",
    "\u0002\u07d1\u07d3\u0003\u0002\u0002\u0002\u07d2\u07d0\u0003\u0002\u0002",
    "\u0002\u07d3\u07d4\u0007\u0233\u0002\u0002\u07d4\u00a7\u0003\u0002\u0002",
    "\u0002\u07d5\u07d6\u0007\u00b8\u0002\u0002\u07d6\u07d7\u0007*\u0002",
    "\u0002\u07d7\u07e6\u0007\u021b\u0002\u0002\u07d8\u07d9\u0007\u00ef\u0002",
    "\u0002\u07d9\u07e6\u0007\u021b\u0002\u0002\u07da\u07e6\u0007\u010f\u0002",
    "\u0002\u07db\u07dc\u0007\u00f6\u0002\u0002\u07dc\u07e6\u0007\u021b\u0002",
    "\u0002\u07dd\u07e6\u0007\u0110\u0002\u0002\u07de\u07e6\u0007]\u0002",
    "\u0002\u07df\u07e6\u0007\u010c\u0002\u0002\u07e0\u07e1\u0007,\u0002",
    "\u0002\u07e1\u07e6\u0007\u021b\u0002\u0002\u07e2\u07e6\u0007\u0109\u0002",
    "\u0002\u07e3\u07e6\u0007\u0128\u0002\u0002\u07e4\u07e6\u0007\u0113\u0002",
    "\u0002\u07e5\u07d5\u0003\u0002\u0002\u0002\u07e5\u07d8\u0003\u0002\u0002",
    "\u0002\u07e5\u07da\u0003\u0002\u0002\u0002\u07e5\u07db\u0003\u0002\u0002",
    "\u0002\u07e5\u07dd\u0003\u0002\u0002\u0002\u07e5\u07de\u0003\u0002\u0002",
    "\u0002\u07e5\u07df\u0003\u0002\u0002\u0002\u07e5\u07e0\u0003\u0002\u0002",
    "\u0002\u07e5\u07e2\u0003\u0002\u0002\u0002\u07e5\u07e3\u0003\u0002\u0002",
    "\u0002\u07e5\u07e4\u0003\u0002\u0002\u0002\u07e6\u00a9\u0003\u0002\u0002",
    "\u0002\u07e7\u07e8\u0007\u0195\u0002\u0002\u07e8\u07e9\u0007\u01da\u0002",
    "\u0002\u07e9\u07ea\u0007\u021b\u0002\u0002\u07ea\u00ab\u0003\u0002\u0002",
    "\u0002\u07eb\u07ed\u0007U\u0002\u0002\u07ec\u07ee\u0007\u01be\u0002",
    "\u0002\u07ed\u07ec\u0003\u0002\u0002\u0002\u07ed\u07ee\u0003\u0002\u0002",
    "\u0002\u07ee\u07ef\u0003\u0002\u0002\u0002\u07ef\u07f0\u0007\u00bb\u0002",
    "\u0002\u07f0\u07f1\u0005\u02c0\u0161\u0002\u07f1\u07f2\u0007\u0123\u0002",
    "\u0002\u07f2\u07f3\u0005\u02cc\u0167\u0002\u07f3\u07f4\u0007\u0221\u0002",
    "\u0002\u07f4\u07f9\u0005\u02ca\u0166\u0002\u07f5\u07f6\u0007\u0227\u0002",
    "\u0002\u07f6\u07f8\u0005\u02ca\u0166\u0002\u07f7\u07f5\u0003\u0002\u0002",
    "\u0002\u07f8\u07fb\u0003\u0002\u0002\u0002\u07f9\u07f7\u0003\u0002\u0002",
    "\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002\u07fa\u07fc\u0003\u0002\u0002",
    "\u0002\u07fb\u07f9\u0003\u0002\u0002\u0002\u07fc\u07ff\u0007\u0222\u0002",
    "\u0002\u07fd\u07fe\u0007F\u0002\u0002\u07fe\u0800\u0007\u019a\u0002",
    "\u0002\u07ff\u07fd\u0003\u0002\u0002\u0002\u07ff\u0800\u0003\u0002\u0002",
    "\u0002\u0800\u0801\u0003\u0002\u0002\u0002\u0801\u0802\u0007\u0233\u0002",
    "\u0002\u0802\u00ad\u0003\u0002\u0002\u0002\u0803\u0804\u0007\t\u0002",
    "\u0002\u0804\u0805\u0007\u00bb\u0002\u0002\u0805\u0806\u0005\u02c0\u0161",
    "\u0002\u0806\u0807\u0007\u015e\u0002\u0002\u0807\u0808\u0007\u01b2\u0002",
    "\u0002\u0808\u0809\u0005\u02c0\u0161\u0002\u0809\u080a\u0007\u0233\u0002",
    "\u0002\u080a\u00af\u0003\u0002\u0002\u0002\u080b\u080c\u0007y\u0002",
    "\u0002\u080c\u080d\u0007\u00bb\u0002\u0002\u080d\u080e\u0005\u02c0\u0161",
    "\u0002\u080e\u080f\u0007\u0233\u0002\u0002\u080f\u00b1\u0003\u0002\u0002",
    "\u0002\u0810\u0813\u0007U\u0002\u0002\u0811\u0812\u0007\u00a8\u0002",
    "\u0002\u0812\u0814\u0007\u01a6\u0002\u0002\u0813\u0811\u0003\u0002\u0002",
    "\u0002\u0813\u0814\u0003\u0002\u0002\u0002\u0814\u0815\u0003\u0002\u0002",
    "\u0002\u0815\u0816\u0007\u01a5\u0002\u0002\u0816\u0817\u0005\u02cc\u0167",
    "\u0002\u0817\u0818\u0007\u0221\u0002\u0002\u0818\u0819\u0005\u02ca\u0166",
    "\u0002\u0819\u0820\u0005\u02e2\u0172\u0002\u081a\u081b\u0007\u0227\u0002",
    "\u0002\u081b\u081c\u0005\u02ca\u0166\u0002\u081c\u081d\u0005\u02e2\u0172",
    "\u0002\u081d\u081f\u0003\u0002\u0002\u0002\u081e\u081a\u0003\u0002\u0002",
    "\u0002\u081f\u0822\u0003\u0002\u0002\u0002\u0820\u081e\u0003\u0002\u0002",
    "\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u0823\u0003\u0002\u0002",
    "\u0002\u0822\u0820\u0003\u0002\u0002\u0002\u0823\u0828\u0007\u0222\u0002",
    "\u0002\u0824\u0825\u0007\u0123\u0002\u0002\u0825\u0826\u0007@\u0002",
    "\u0002\u0826\u0827\t\u0013\u0002\u0002\u0827\u0829\u0007\u016e\u0002",
    "\u0002\u0828\u0824\u0003\u0002\u0002\u0002\u0828\u0829\u0003\u0002\u0002",
    "\u0002\u0829\u082d\u0003\u0002\u0002\u0002\u082a\u082b\u0007\u0179\u0002",
    "\u0002\u082b\u082c\u0007V\u0002\u0002\u082c\u082e\t\u0014\u0002\u0002",
    "\u082d\u082a\u0003\u0002\u0002\u0002\u082d\u082e\u0003\u0002\u0002\u0002",
    "\u082e\u0837\u0003\u0002\u0002\u0002\u082f\u0830\u0007\u0137\u0002\u0002",
    "\u0830\u0836\u0007\u021b\u0002\u0002\u0831\u0832\u0007\u0139\u0002\u0002",
    "\u0832\u0836\u0007\u021b\u0002\u0002\u0833\u0834\u0007\u00c1\u0002\u0002",
    "\u0834\u0836\u0007\u021b\u0002\u0002\u0835\u082f\u0003\u0002\u0002\u0002",
    "\u0835\u0831\u0003\u0002\u0002\u0002\u0835\u0833\u0003\u0002\u0002\u0002",
    "\u0836\u0839\u0003\u0002\u0002\u0002\u0837\u0835\u0003\u0002\u0002\u0002",
    "\u0837\u0838\u0003\u0002\u0002\u0002\u0838\u0858\u0003\u0002\u0002\u0002",
    "\u0839\u0837\u0003\u0002\u0002\u0002\u083a\u083b\u0007\u019b\u0002\u0002",
    "\u083b\u0853\u0007\u0221\u0002\u0002\u083c\u083d\u0007\u00c0\u0002\u0002",
    "\u083d\u0854\u0005\u00b4[\u0002\u083e\u083f\u0007\u0107\u0002\u0002",
    "\u083f\u0854\u0005\u00b4[\u0002\u0840\u0841\u0007\u00f3\u0002\u0002",
    "\u0841\u0854\t\u0015\u0002\u0002\u0842\u0843\u0007\u0138\u0002\u0002",
    "\u0843\u0854\u0007\u021b\u0002\u0002\u0844\u0845\u0007\u00a4\u0002\u0002",
    "\u0845\u0854\u0007\u021b\u0002\u0002\u0846\u0847\u0007\u00a3\u0002\u0002",
    "\u0847\u0848\u0007\u00ad\u0002\u0002\u0848\u0854\u0007\u021b\u0002\u0002",
    "\u0849\u084c\u0007\u0125\u0002\u0002\u084a\u084d\u0005\u00b4[\u0002",
    "\u084b\u084d\u0007\u0117\u0002\u0002\u084c\u084a\u0003\u0002\u0002\u0002",
    "\u084c\u084b\u0003\u0002\u0002\u0002\u084d\u0854\u0003\u0002\u0002\u0002",
    "\u084e\u084f\u0007(\u0002\u0002\u084f\u0854\t\u0016\u0002\u0002\u0850",
    "\u0851\u0007\u009b\u0002\u0002\u0851\u0854\t\u0017\u0002\u0002\u0852",
    "\u0854\u0007\u0082\u0002\u0002\u0853\u083c\u0003\u0002\u0002\u0002\u0853",
    "\u083e\u0003\u0002\u0002\u0002\u0853\u0840\u0003\u0002\u0002\u0002\u0853",
    "\u0842\u0003\u0002\u0002\u0002\u0853\u0844\u0003\u0002\u0002\u0002\u0853",
    "\u0846\u0003\u0002\u0002\u0002\u0853\u0849\u0003\u0002\u0002\u0002\u0853",
    "\u084e\u0003\u0002\u0002\u0002\u0853\u0850\u0003\u0002\u0002\u0002\u0853",
    "\u0852\u0003\u0002\u0002\u0002\u0854\u0855\u0003\u0002\u0002\u0002\u0855",
    "\u0853\u0003\u0002\u0002\u0002\u0855\u0856\u0003\u0002\u0002\u0002\u0856",
    "\u0857\u0003\u0002\u0002\u0002\u0857\u0859\u0007\u0222\u0002\u0002\u0858",
    "\u083a\u0003\u0002\u0002\u0002\u0858\u0859\u0003\u0002\u0002\u0002\u0859",
    "\u085c\u0003\u0002\u0002\u0002\u085a\u085b\u0007\u01a4\u0002\u0002\u085b",
    "\u085d\u0007\u023e\u0002\u0002\u085c\u085a\u0003\u0002\u0002\u0002\u085c",
    "\u085d\u0003\u0002\u0002\u0002\u085d\u085f\u0003\u0002\u0002\u0002\u085e",
    "\u0860\t\u0018\u0002\u0002\u085f\u085e\u0003\u0002\u0002\u0002\u085f",
    "\u0860\u0003\u0002\u0002\u0002\u0860\u086e\u0003\u0002\u0002\u0002\u0861",
    "\u086b\u0007E\u0002\u0002\u0862\u086c\u0007\u0019\u0002\u0002\u0863",
    "\u0869\u0007\u00a2\u0002\u0002\u0864\u086a\u0007\u0121\u0002\u0002\u0865",
    "\u0867\t\u0019\u0002\u0002\u0866\u0868\t\u001a\u0002\u0002\u0867\u0866",
    "\u0003\u0002\u0002\u0002\u0867\u0868\u0003\u0002\u0002\u0002\u0868\u086a",
    "\u0003\u0002\u0002\u0002\u0869\u0864\u0003\u0002\u0002\u0002\u0869\u0865",
    "\u0003\u0002\u0002\u0002\u086a\u086c\u0003\u0002\u0002\u0002\u086b\u0862",
    "\u0003\u0002\u0002\u0002\u086b\u0863\u0003\u0002\u0002\u0002\u086b\u086c",
    "\u0003\u0002\u0002\u0002\u086c\u086f\u0003\u0002\u0002\u0002\u086d\u086f",
    "\u0007\u010a\u0002\u0002\u086e\u0861\u0003\u0002\u0002\u0002\u086e\u086d",
    "\u0003\u0002\u0002\u0002\u086e\u086f\u0003\u0002\u0002\u0002\u086f\u0870",
    "\u0003\u0002\u0002\u0002\u0870\u0871\u0007\u0233\u0002\u0002\u0871\u00b3",
    "\u0003\u0002\u0002\u0002\u0872\u0873\u0007\u021b\u0002\u0002\u0873\u0874",
    "\u0007\u023e\u0002\u0002\u0874\u00b5\u0003\u0002\u0002\u0002\u0875\u0876",
    "\u0007y\u0002\u0002\u0876\u0877\u0007\u01a5\u0002\u0002\u0877\u0878",
    "\u0005\u02cc\u0167\u0002\u0878\u0879\u0007\u0233\u0002\u0002\u0879\u00b7",
    "\u0003\u0002\u0002\u0002\u087a\u087b\u0007?\u0002\u0002\u087b\u087c",
    "\u0007\u0123\u0002\u0002\u087c\u087d\u0007=\u0002\u0002\u087d\u087e",
    "\u0005\u02cc\u0167\u0002\u087e\u087f\u0007\u021a\u0002\u0002\u087f\u0880",
    "\u0005\u02ca\u0166\u0002\u0880\u0881\u0007\u00ce\u0002\u0002\u0881\u0882",
    "\u0005\u02f6\u017c\u0002\u0882\u00b9\u0003\u0002\u0002\u0002\u0883\u0886",
    "\u0007U\u0002\u0002\u0884\u0885\u0007\u012a\u0002\u0002\u0885\u0887",
    "\u0007\u015f\u0002\u0002\u0886\u0884\u0003\u0002\u0002\u0002\u0886\u0887",
    "\u0003\u0002\u0002\u0002\u0887\u0888\u0003\u0002\u0002\u0002\u0888\u0889",
    "\u0007\u014f\u0002\u0002\u0889\u088a\u0007\u01a3\u0002\u0002\u088a\u088b",
    "\u0005\u02d0\u0169\u0002\u088b\u088f\u0007\u00a2\u0002\u0002\u088c\u088d",
    "\u0005\u029c\u014f\u0002\u088d\u088e\u0007\u021a\u0002\u0002\u088e\u0890",
    "\u0003\u0002\u0002\u0002\u088f\u088c\u0003\u0002\u0002\u0002\u088f\u0890",
    "\u0003\u0002\u0002\u0002\u0890\u0891\u0003\u0002\u0002\u0002\u0891\u0894",
    "\u0005\u02d2\u016a\u0002\u0892\u0893\u0007\u0229\u0002\u0002\u0893\u0895",
    "\u0005\u02c8\u0165\u0002\u0894\u0892\u0003\u0002\u0002\u0002\u0894\u0895",
    "\u0003\u0002\u0002\u0002\u0895\u08ae\u0003\u0002\u0002\u0002\u0896\u0899",
    "\u0007U\u0002\u0002\u0897\u0898\u0007\u012a\u0002\u0002\u0898\u089a",
    "\u0007\u015f\u0002\u0002\u0899\u0897\u0003\u0002\u0002\u0002\u0899\u089a",
    "\u0003\u0002\u0002\u0002\u089a\u089b\u0003\u0002\u0002\u0002\u089b\u089f",
    "\u0007\u01a3\u0002\u0002\u089c\u089d\u0005\u029c\u014f\u0002\u089d\u089e",
    "\u0007\u021a\u0002\u0002\u089e\u08a0\u0003\u0002\u0002\u0002\u089f\u089c",
    "\u0003\u0002\u0002\u0002\u089f\u08a0\u0003\u0002\u0002\u0002\u08a0\u08a1",
    "\u0003\u0002\u0002\u0002\u08a1\u08a2\u0005\u02d0\u0169\u0002\u08a2\u08a6",
    "\u0007\u00a2\u0002\u0002\u08a3\u08a4\u0005\u029c\u014f\u0002\u08a4\u08a5",
    "\u0007\u021a\u0002\u0002\u08a5\u08a7\u0003\u0002\u0002\u0002\u08a6\u08a3",
    "\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08a8",
    "\u0003\u0002\u0002\u0002\u08a8\u08ab\u0005\u02d2\u016a\u0002\u08a9\u08aa",
    "\u0007\u0229\u0002\u0002\u08aa\u08ac\u0005\u02c8\u0165\u0002\u08ab\u08a9",
    "\u0003\u0002\u0002\u0002\u08ab\u08ac\u0003\u0002\u0002\u0002\u08ac\u08ae",
    "\u0003\u0002\u0002\u0002\u08ad\u0883\u0003\u0002\u0002\u0002\u08ad\u0896",
    "\u0003\u0002\u0002\u0002\u08ae\u00bb\u0003\u0002\u0002\u0002\u08af\u08b0",
    "\u0007?\u0002\u0002\u08b0\u08b1\u0007\u0123\u0002\u0002\u08b1\u08b2",
    "\u0007\u01a5\u0002\u0002\u08b2\u08b3\u0005\u02cc\u0167\u0002\u08b3\u08b4",
    "\u0007\u00ce\u0002\u0002\u08b4\u08b5\u0005\u02f6\u017c\u0002\u08b5\u00bd",
    "\u0003\u0002\u0002\u0002\u08b6\u08b7\u0007\t\u0002\u0002\u08b7\u08b8",
    "\u0007\u01a5\u0002\u0002\u08b8\u08bd\u0005\u02cc\u0167\u0002\u08b9\u08be",
    "\u0005\u00c0a\u0002\u08ba\u08be\u0005\u00c4c\u0002\u08bb\u08be\u0005",
    "\u00c6d\u0002\u08bc\u08be\u0005\u00c8e\u0002\u08bd\u08b9\u0003\u0002",
    "\u0002\u0002\u08bd\u08ba\u0003\u0002\u0002\u0002\u08bd\u08bb\u0003\u0002",
    "\u0002\u0002\u08bd\u08bc\u0003\u0002\u0002\u0002\u08be\u00bf\u0003\u0002",
    "\u0002\u0002\u08bf\u08c2\u0007\u0003\u0002\u0002\u08c0\u08c1\u0007J",
    "\u0002\u0002\u08c1\u08c3\u0005\u02ae\u0158\u0002\u08c2\u08c0\u0003\u0002",
    "\u0002\u0002\u08c2\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c8\u0003\u0002",
    "\u0002\u0002\u08c4\u08c9\u0005\u00d2j\u0002\u08c5\u08c9\u0005\u00ca",
    "f\u0002\u08c6\u08c9\u0005\u00d0i\u0002\u08c7\u08c9\u0005\u00c2b\u0002",
    "\u08c8\u08c4\u0003\u0002\u0002\u0002\u08c8\u08c5\u0003\u0002\u0002\u0002",
    "\u08c8\u08c6\u0003\u0002\u0002\u0002\u08c8\u08c7\u0003\u0002\u0002\u0002",
    "\u08c9\u00c1\u0003\u0002\u0002\u0002\u08ca\u08cb\u00075\u0002\u0002",
    "\u08cb\u08cc\u0007\u0221\u0002\u0002\u08cc\u08cd\u0005\u0214\u010b\u0002",
    "\u08cd\u08cf\u0007\u0222\u0002\u0002\u08ce\u08d0\u0007t\u0002\u0002",
    "\u08cf\u08ce\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003\u0002\u0002\u0002",
    "\u08d0\u00c3\u0003\u0002\u0002\u0002\u08d1\u08d2\u0007y\u0002\u0002",
    "\u08d2\u08d3\u0007J\u0002\u0002\u08d3\u08d4\u0005\u02ae\u0158\u0002",
    "\u08d4\u00c5\u0003\u0002\u0002\u0002\u08d5\u08d6\u0007\u0080\u0002\u0002",
    "\u08d6\u08d7\u0007J\u0002\u0002\u08d7\u08d8\u0005\u02ae\u0158\u0002",
    "\u08d8\u00c7\u0003\u0002\u0002\u0002\u08d9\u08da\u0007t\u0002\u0002",
    "\u08da\u08db\u0007J\u0002\u0002\u08db\u08dc\u0005\u02ae\u0158\u0002",
    "\u08dc\u00c9\u0003\u0002\u0002\u0002\u08dd\u08de\u0007\u00a1\u0002\u0002",
    "\u08de\u08df\u0007\u00d4\u0002\u0002\u08df\u08e0\u0007\u0221\u0002\u0002",
    "\u08e0\u08e5\u0005\u02ca\u0166\u0002\u08e1\u08e2\u0007\u0227\u0002\u0002",
    "\u08e2\u08e4\u0005\u02ca\u0166\u0002\u08e3\u08e1\u0003\u0002\u0002\u0002",
    "\u08e4\u08e7\u0003\u0002\u0002\u0002\u08e5\u08e3\u0003\u0002\u0002\u0002",
    "\u08e5\u08e6\u0003\u0002\u0002\u0002\u08e6\u08e8\u0003\u0002\u0002\u0002",
    "\u08e7\u08e5\u0003\u0002\u0002\u0002\u08e8\u08e9\u0007\u0222\u0002\u0002",
    "\u08e9\u08eb\u0005\u00ccg\u0002\u08ea\u08ec\u0005\u00ceh\u0002\u08eb",
    "\u08ea\u0003\u0002\u0002\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002\u08ec",
    "\u00cb\u0003\u0002\u0002\u0002\u08ed\u08ee\u0007\u0159\u0002\u0002\u08ee",
    "\u08ef\u0005\u02cc\u0167\u0002\u08ef\u08f0\u0007\u0221\u0002\u0002\u08f0",
    "\u08f5\u0005\u02ca\u0166\u0002\u08f1\u08f2\u0007\u0227\u0002\u0002\u08f2",
    "\u08f4\u0005\u02ca\u0166\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f4",
    "\u08f7\u0003\u0002\u0002\u0002\u08f5\u08f3\u0003\u0002\u0002\u0002\u08f5",
    "\u08f6\u0003\u0002\u0002\u0002\u08f6\u08f8\u0003\u0002\u0002\u0002\u08f7",
    "\u08f5\u0003\u0002\u0002\u0002\u08f8\u08f9\u0007\u0222\u0002\u0002\u08f9",
    "\u00cd\u0003\u0002\u0002\u0002\u08fa\u08fb\u0007\u0123\u0002\u0002\u08fb",
    "\u08ff\u0007o\u0002\u0002\u08fc\u0900\u0007/\u0002\u0002\u08fd\u08fe",
    "\u0007\u0182\u0002\u0002\u08fe\u0900\u0007\u0117\u0002\u0002\u08ff\u08fc",
    "\u0003\u0002\u0002\u0002\u08ff\u08fd\u0003\u0002\u0002\u0002\u0900\u00cf",
    "\u0003\u0002\u0002\u0002\u0901\u0902\u0007\u01be\u0002\u0002\u0902\u0903",
    "\u0007\u0221\u0002\u0002\u0903\u0908\u0005\u02ca\u0166\u0002\u0904\u0905",
    "\u0007\u0227\u0002\u0002\u0905\u0907\u0005\u02ca\u0166\u0002\u0906\u0904",
    "\u0003\u0002\u0002\u0002\u0907\u090a\u0003\u0002\u0002\u0002\u0908\u0906",
    "\u0003\u0002\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002\u0909\u090b",
    "\u0003\u0002\u0002\u0002\u090a\u0908\u0003\u0002\u0002\u0002\u090b\u090c",
    "\u0007\u0222\u0002\u0002\u090c\u00d1\u0003\u0002\u0002\u0002\u090d\u090e",
    "\u0007\u014c\u0002\u0002\u090e\u090f\u0007\u00d4\u0002\u0002\u090f\u0910",
    "\u0007\u0221\u0002\u0002\u0910\u0915\u0005\u02ca\u0166\u0002\u0911\u0912",
    "\u0007\u0227\u0002\u0002\u0912\u0914\u0005\u02ca\u0166\u0002\u0913\u0911",
    "\u0003\u0002\u0002\u0002\u0914\u0917\u0003\u0002\u0002\u0002\u0915\u0913",
    "\u0003\u0002\u0002\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u0918",
    "\u0003\u0002\u0002\u0002\u0917\u0915\u0003\u0002\u0002\u0002\u0918\u0919",
    "\u0007\u0222\u0002\u0002\u0919\u00d3\u0003\u0002\u0002\u0002\u091a\u091b",
    "\u0007\u001c\u0002\u0002\u091b\u091c\u0005\u0104\u0083\u0002\u091c\u091d",
    "\u0007\u0083\u0002\u0002\u091d\u091e\u0007\u0233\u0002\u0002\u091e\u00d5",
    "\u0003\u0002\u0002\u0002\u091f\u0920\u0007\u0015\u0002\u0002\u0920\u0921",
    "\t\u001b\u0002\u0002\u0921\u00d7\u0003\u0002\u0002\u0002\u0922\u0923",
    "\u0005\u02f8\u017d\u0002\u0923\u0924\u0007\u0235\u0002\u0002\u0924\u0925",
    "\u0005\u0218\u010d\u0002\u0925\u00d9\u0003\u0002\u0002\u0002\u0926\u0929",
    "\u0007\u00d5\u0002\u0002\u0927\u092a\u0005\u00dco\u0002\u0928\u092a",
    "\u0005\u00dep\u0002\u0929\u0927\u0003\u0002\u0002\u0002\u0929\u0928",
    "\u0003\u0002\u0002\u0002\u092a\u00db\u0003\u0002\u0002\u0002\u092b\u092c",
    "\u0007\u00d1\u0002\u0002\u092c\u092d\u0007\u00fd\u0002\u0002\u092d\u092e",
    "\u0007\u021d\u0002\u0002\u092e\u00dd\u0003\u0002\u0002\u0002\u092f\u0932",
    "\u00077\u0002\u0002\u0930\u0931\u0007\u00fd\u0002\u0002\u0931\u0933",
    "\u0007\u021d\u0002\u0002\u0932\u0930\u0003\u0002\u0002\u0002\u0932\u0933",
    "\u0003\u0002\u0002\u0002\u0933\u0934\u0003\u0002\u0002\u0002\u0934\u0935",
    "\u0007\u00db\u0002\u0002\u0935\u0937\u0005\u02f8\u017d\u0002\u0936\u0938",
    "\u0005\u00e0q\u0002\u0937\u0936\u0003\u0002\u0002\u0002\u0937\u0938",
    "\u0003\u0002\u0002\u0002\u0938\u093b\u0003\u0002\u0002\u0002\u0939\u093a",
    "\u0007\u01da\u0002\u0002\u093a\u093c\u0007N\u0002\u0002\u093b\u0939",
    "\u0003\u0002\u0002\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093e",
    "\u0003\u0002\u0002\u0002\u093d\u093f\u0005\u00e2r\u0002\u093e\u093d",
    "\u0003\u0002\u0002\u0002\u093e\u093f\u0003\u0002\u0002\u0002\u093f\u00df",
    "\u0003\u0002\u0002\u0002\u0940\u0941\u0007\u0005\u0002\u0002\u0941\u0942",
    "\u0007\u00bf\u0002\u0002\u0942\u0943\u0007\u0221\u0002\u0002\u0943\u0944",
    "\u0005\u0216\u010c\u0002\u0944\u0945\u0007\u0222\u0002\u0002\u0945\u00e1",
    "\u0003\u0002\u0002\u0002\u0946\u0947\u0007\u0132\u0002\u0002\u0947\u094c",
    "\u0007\u0221\u0002\u0002\u0948\u094d\u0005\u0216\u010c\u0002\u0949\u094a",
    "\u0007\u021a\u0002\u0002\u094a\u094b\u0007\u021a\u0002\u0002\u094b\u094d",
    "\u0007\u021a\u0002\u0002\u094c\u0948\u0003\u0002\u0002\u0002\u094c\u0949",
    "\u0003\u0002\u0002\u0002\u094d\u094e\u0003\u0002\u0002\u0002\u094e\u094f",
    "\u0007\u0222\u0002\u0002\u094f\u00e3\u0003\u0002\u0002\u0002\u0950\u0954",
    "\u0005\u02a4\u0153\u0002\u0951\u0953\t\u001c\u0002\u0002\u0952\u0951",
    "\u0003\u0002\u0002\u0002\u0953\u0956\u0003\u0002\u0002\u0002\u0954\u0952",
    "\u0003\u0002\u0002\u0002\u0954\u0955\u0003\u0002\u0002\u0002\u0955\u0958",
    "\u0003\u0002\u0002\u0002\u0956\u0954\u0003\u0002\u0002\u0002\u0957\u0959",
    "\u0005\u02e0\u0171\u0002\u0958\u0957\u0003\u0002\u0002\u0002\u0958\u0959",
    "\u0003\u0002\u0002\u0002\u0959\u095b\u0003\u0002\u0002\u0002\u095a\u095c",
    "\u0005\u00e6t\u0002\u095b\u095a\u0003\u0002\u0002\u0002\u095b\u095c",
    "\u0003\u0002\u0002\u0002\u095c\u00e5\u0003\u0002\u0002\u0002\u095d\u095e",
    "\t\u001d\u0002\u0002\u095e\u095f\u0005\u0218\u010d\u0002\u095f\u00e7",
    "\u0003\u0002\u0002\u0002\u0960\u096b\u0005\u00eav\u0002\u0961\u096b",
    "\u0005\u00ecw\u0002\u0962\u096b\u0005\u00eex\u0002\u0963\u096b\u0005",
    "\u00f2z\u0002\u0964\u096b\u0005\u00f4{\u0002\u0965\u096b\u0005\u00fc",
    "\u007f\u0002\u0966\u096b\u0005 \u0011\u0002\u0967\u096b\u0005\"\u0012",
    "\u0002\u0968\u096b\u0005,\u0017\u0002\u0969\u096b\u0005*\u0016\u0002",
    "\u096a\u0960\u0003\u0002\u0002\u0002\u096a\u0961\u0003\u0002\u0002\u0002",
    "\u096a\u0962\u0003\u0002\u0002\u0002\u096a\u0963\u0003\u0002\u0002\u0002",
    "\u096a\u0964\u0003\u0002\u0002\u0002\u096a\u0965\u0003\u0002\u0002\u0002",
    "\u096a\u0966\u0003\u0002\u0002\u0002\u096a\u0967\u0003\u0002\u0002\u0002",
    "\u096a\u0968\u0003\u0002\u0002\u0002\u096a\u0969\u0003\u0002\u0002\u0002",
    "\u096b\u00e9\u0003\u0002\u0002\u0002\u096c\u096e\u0005\u02f8\u017d\u0002",
    "\u096d\u096f\u0007I\u0002\u0002\u096e\u096d\u0003\u0002\u0002\u0002",
    "\u096e\u096f\u0003\u0002\u0002\u0002\u096f\u0970\u0003\u0002\u0002\u0002",
    "\u0970\u0973\u0005\u02e0\u0171\u0002\u0971\u0972\u0007\u0115\u0002\u0002",
    "\u0972\u0974\u0007\u0117\u0002\u0002\u0973\u0971\u0003\u0002\u0002\u0002",
    "\u0973\u0974\u0003\u0002\u0002\u0002\u0974\u0976\u0003\u0002\u0002\u0002",
    "\u0975\u0977\u0005\u00e6t\u0002\u0976\u0975\u0003\u0002\u0002\u0002",
    "\u0976\u0977\u0003\u0002\u0002\u0002\u0977\u0978\u0003\u0002\u0002\u0002",
    "\u0978\u0979\u0007\u0233\u0002\u0002\u0979\u00eb\u0003\u0002\u0002\u0002",
    "\u097a\u097b\u0007\u01a0\u0002\u0002\u097b\u097c\u0005\u02f8\u017d\u0002",
    "\u097c\u097d\u0007\u00ce\u0002\u0002\u097d\u0983\u0005\u02e0\u0171\u0002",
    "\u097e\u097f\u0007\u0152\u0002\u0002\u097f\u0980\u0005\u0218\u010d\u0002",
    "\u0980\u0981\u0007\u0219\u0002\u0002\u0981\u0982\u0005\u0218\u010d\u0002",
    "\u0982\u0984\u0003\u0002\u0002\u0002\u0983\u097e\u0003\u0002\u0002\u0002",
    "\u0983\u0984\u0003\u0002\u0002\u0002\u0984\u0987\u0003\u0002\u0002\u0002",
    "\u0985\u0986\u0007\u0115\u0002\u0002\u0986\u0988\u0007\u0117\u0002\u0002",
    "\u0987\u0985\u0003\u0002\u0002\u0002\u0987\u0988\u0003\u0002\u0002\u0002",
    "\u0988\u0989\u0003\u0002\u0002\u0002\u0989\u098a\u0007\u0233\u0002\u0002",
    "\u098a\u00ed\u0003\u0002\u0002\u0002\u098b\u098c\u0007[\u0002\u0002",
    "\u098c\u0998\u0005\u02f8\u017d\u0002\u098d\u098e\u0007\u0221\u0002\u0002",
    "\u098e\u0993\u0005\u00f0y\u0002\u098f\u0990\u0007\u0227\u0002\u0002",
    "\u0990\u0992\u0005\u00f0y\u0002\u0991\u098f\u0003\u0002\u0002\u0002",
    "\u0992\u0995\u0003\u0002\u0002\u0002\u0993\u0991\u0003\u0002\u0002\u0002",
    "\u0993\u0994\u0003\u0002\u0002\u0002\u0994\u0996\u0003\u0002\u0002\u0002",
    "\u0995\u0993\u0003\u0002\u0002\u0002\u0996\u0997\u0007\u0222\u0002\u0002",
    "\u0997\u0999\u0003\u0002\u0002\u0002\u0998\u098d\u0003\u0002\u0002\u0002",
    "\u0998\u0999\u0003\u0002\u0002\u0002\u0999\u099c\u0003\u0002\u0002\u0002",
    "\u099a\u099b\u0007\u0165\u0002\u0002\u099b\u099d\u0005\u02e0\u0171\u0002",
    "\u099c\u099a\u0003\u0002\u0002\u0002\u099c\u099d\u0003\u0002\u0002\u0002",
    "\u099d\u09a0\u0003\u0002\u0002\u0002\u099e\u099f\u0007\u00ce\u0002\u0002",
    "\u099f\u09a1\u0005\u015c\u00af\u0002\u09a0\u099e\u0003\u0002\u0002\u0002",
    "\u09a0\u09a1\u0003\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002",
    "\u09a2\u09a3\u0007\u0233\u0002\u0002\u09a3\u00ef\u0003\u0002\u0002\u0002",
    "\u09a4\u09a9\u0005\u02a4\u0153\u0002\u09a5\u09a7\u0007\u00bf\u0002\u0002",
    "\u09a6\u09a5\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002\u0002",
    "\u09a7\u09a8\u0003\u0002\u0002\u0002\u09a8\u09aa\u0005\u02e0\u0171\u0002",
    "\u09a9\u09a6\u0003\u0002\u0002\u0002\u09a9\u09aa\u0003\u0002\u0002\u0002",
    "\u09aa\u09ac\u0003\u0002\u0002\u0002\u09ab\u09ad\u0005\u00e6t\u0002",
    "\u09ac\u09ab\u0003\u0002\u0002\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002",
    "\u09ad\u00f1\u0003\u0002\u0002\u0002\u09ae\u09af\u0005\u02f8\u017d\u0002",
    "\u09af\u09b0\u0007\u0089\u0002\u0002\u09b0\u09b1\u0007\u0233\u0002\u0002",
    "\u09b1\u00f3\u0003\u0002\u0002\u0002\u09b2\u09d1\u0007\u0147\u0002\u0002",
    "\u09b3\u09d2\u0007\u017f\u0002\u0002\u09b4\u09d2\u0007\u0018\u0002\u0002",
    "\u09b5\u09b6\u0007\u008a\u0002\u0002\u09b6\u09b7\u0007\u0221\u0002\u0002",
    "\u09b7\u09b8\u0005\u02b6\u015c\u0002\u09b8\u09b9\u0007\u0227\u0002\u0002",
    "\u09b9\u09ba\u0005\u02f4\u017b\u0002\u09ba\u09bb\u0007\u0222\u0002\u0002",
    "\u09bb\u09d2\u0003\u0002\u0002\u0002\u09bc\u09bd\u0007\u00c2\u0002\u0002",
    "\u09bd\u09be\u0007\u0221\u0002\u0002\u09be\u09bf\u0005\u02f8\u017d\u0002",
    "\u09bf\u09c0\u0007\u0227\u0002\u0002\u09c0\u09c1\u0005\u0218\u010d\u0002",
    "\u09c1\u09c2\u0007\u0222\u0002\u0002\u09c2\u09d2\u0003\u0002\u0002\u0002",
    "\u09c3\u09c4\u0007\u0161\u0002\u0002\u09c4\u09c7\u0007\u0221\u0002\u0002",
    "\u09c5\u09c8\u0005\u02f8\u017d\u0002\u09c6\u09c8\u0007k\u0002\u0002",
    "\u09c7\u09c5\u0003\u0002\u0002\u0002\u09c7\u09c6\u0003\u0002\u0002\u0002",
    "\u09c8\u09cb\u0003\u0002\u0002\u0002\u09c9\u09ca\u0007\u0227\u0002\u0002",
    "\u09ca\u09cc\u0005\u02f8\u017d\u0002\u09cb\u09c9\u0003\u0002\u0002\u0002",
    "\u09cc\u09cd\u0003\u0002\u0002\u0002\u09cd\u09cb\u0003\u0002\u0002\u0002",
    "\u09cd\u09ce\u0003\u0002\u0002\u0002\u09ce\u09cf\u0003\u0002\u0002\u0002",
    "\u09cf\u09d0\u0007\u0222\u0002\u0002\u09d0\u09d2\u0003\u0002\u0002\u0002",
    "\u09d1\u09b3\u0003\u0002\u0002\u0002\u09d1\u09b4\u0003\u0002\u0002\u0002",
    "\u09d1\u09b5\u0003\u0002\u0002\u0002\u09d1\u09bc\u0003\u0002\u0002\u0002",
    "\u09d1\u09c3\u0003\u0002\u0002\u0002\u09d2\u09d3\u0003\u0002\u0002\u0002",
    "\u09d3\u09d4\u0007\u0233\u0002\u0002\u09d4\u00f5\u0003\u0002\u0002\u0002",
    "\u09d5\u09d6\u0007\u0156\u0002\u0002\u09d6\u09d7\u0007\u0221\u0002\u0002",
    "\u09d7\u09dc\u0005\u00f8}\u0002\u09d8\u09d9\u0007\u0227\u0002\u0002",
    "\u09d9\u09db\u0005\u00f8}\u0002\u09da\u09d8\u0003\u0002\u0002\u0002",
    "\u09db\u09de\u0003\u0002\u0002\u0002\u09dc\u09da\u0003\u0002\u0002\u0002",
    "\u09dc\u09dd\u0003\u0002\u0002\u0002\u09dd\u09df\u0003\u0002\u0002\u0002",
    "\u09de\u09dc\u0003\u0002\u0002\u0002\u09df\u09e0\u0007\u0222\u0002\u0002",
    "\u09e0\u00f7\u0003\u0002\u0002\u0002\u09e1\u09e3\u0005\u02ca\u0166\u0002",
    "\u09e2\u09e4\u0005\u02e0\u0171\u0002\u09e3\u09e2\u0003\u0002\u0002\u0002",
    "\u09e3\u09e4\u0003\u0002\u0002\u0002\u09e4\u09e7\u0003\u0002\u0002\u0002",
    "\u09e5\u09e6\u0007\u0115\u0002\u0002\u09e6\u09e8\u0007\u0117\u0002\u0002",
    "\u09e7\u09e5\u0003\u0002\u0002\u0002\u09e7\u09e8\u0003\u0002\u0002\u0002",
    "\u09e8\u09ea\u0003\u0002\u0002\u0002\u09e9\u09eb\u0005\u00e6t\u0002",
    "\u09ea\u09e9\u0003\u0002\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002",
    "\u09eb\u00f9\u0003\u0002\u0002\u0002\u09ec\u09ed\u0007\u015b\u0002\u0002",
    "\u09ed\u09f0\u0007[\u0002\u0002\u09ee\u09ef\u0007\u0165\u0002\u0002",
    "\u09ef\u09f1\u0005\u02e0\u0171\u0002\u09f0\u09ee\u0003\u0002\u0002\u0002",
    "\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u00fb\u0003\u0002\u0002\u0002",
    "\u09f2\u09f3\u0007\u01ba\u0002\u0002\u09f3\u09f4\u0005\u02f8\u017d\u0002",
    "\u09f4\u09f9\u0007\u00ce\u0002\u0002\u09f5\u09fa\u0005\u00fe\u0080\u0002",
    "\u09f6\u09fa\u0005\u0102\u0082\u0002\u09f7\u09fa\u0005\u00f6|\u0002",
    "\u09f8\u09fa\u0005\u00fa~\u0002\u09f9\u09f5\u0003\u0002\u0002\u0002",
    "\u09f9\u09f6\u0003\u0002\u0002\u0002\u09f9\u09f7\u0003\u0002\u0002\u0002",
    "\u09f9\u09f8\u0003\u0002\u0002\u0002\u09fa\u09fb\u0003\u0002\u0002\u0002",
    "\u09fb\u09fc\u0007\u0233\u0002\u0002\u09fc\u00fd\u0003\u0002\u0002\u0002",
    "\u09fd\u09fe\u0007\u01a5\u0002\u0002\u09fe\u09ff\u0007\u011e\u0002\u0002",
    "\u09ff\u0a01\u0005\u02e0\u0171\u0002\u0a00\u0a02\u0005\u0100\u0081\u0002",
    "\u0a01\u0a00\u0003\u0002\u0002\u0002\u0a01\u0a02\u0003\u0002\u0002\u0002",
    "\u0a02\u0a05\u0003\u0002\u0002\u0002\u0a03\u0a04\u0007\u0115\u0002\u0002",
    "\u0a04\u0a06\u0007\u0117\u0002\u0002\u0a05\u0a03\u0003\u0002\u0002\u0002",
    "\u0a05\u0a06\u0003\u0002\u0002\u0002\u0a06\u00ff\u0003\u0002\u0002\u0002",
    "\u0a07\u0a0a\u0007\u00ba\u0002\u0002\u0a08\u0a0a\u0007\u00bb\u0002\u0002",
    "\u0a09\u0a07\u0003\u0002\u0002\u0002\u0a09\u0a08\u0003\u0002\u0002\u0002",
    "\u0a0a\u0a0b\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0007*\u0002\u0002",
    "\u0a0c\u0a0d\u0005\u02e0\u0171\u0002\u0a0d\u0101\u0003\u0002\u0002\u0002",
    "\u0a0e\u0a12\u0007\u01ce\u0002\u0002\u0a0f\u0a10\u0007\u01cf\u0002\u0002",
    "\u0a10\u0a12\u0007\u000e\u0002\u0002\u0a11\u0a0e\u0003\u0002\u0002\u0002",
    "\u0a11\u0a0f\u0003\u0002\u0002\u0002\u0a12\u0a13\u0003\u0002\u0002\u0002",
    "\u0a13\u0a14\u0007\u0221\u0002\u0002\u0a14\u0a15\u0005\u0218\u010d\u0002",
    "\u0a15\u0a16\u0007\u0222\u0002\u0002\u0a16\u0a17\u0007\u011e\u0002\u0002",
    "\u0a17\u0a1a\u0005\u02e0\u0171\u0002\u0a18\u0a19\u0007\u0115\u0002\u0002",
    "\u0a19\u0a1b\u0007\u0117\u0002\u0002\u0a1a\u0a18\u0003\u0002\u0002\u0002",
    "\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b\u0103\u0003\u0002\u0002\u0002",
    "\u0a1c\u0a1d\u0005\u0108\u0085\u0002\u0a1d\u0a1e\t\u001e\u0002\u0002",
    "\u0a1e\u0a21\u0003\u0002\u0002\u0002\u0a1f\u0a21\u0005\u0106\u0084\u0002",
    "\u0a20\u0a1c\u0003\u0002\u0002\u0002\u0a20\u0a1f\u0003\u0002\u0002\u0002",
    "\u0a21\u0a22\u0003\u0002\u0002\u0002\u0a22\u0a20\u0003\u0002\u0002\u0002",
    "\u0a22\u0a23\u0003\u0002\u0002\u0002\u0a23\u0105\u0003\u0002\u0002\u0002",
    "\u0a24\u0a25\u0007\u0231\u0002\u0002\u0a25\u0a26\u0007\u0231\u0002\u0002",
    "\u0a26\u0a27\u0005\u02b0\u0159\u0002\u0a27\u0a28\u0007\u0230\u0002\u0002",
    "\u0a28\u0a29\u0007\u0230\u0002\u0002\u0a29\u0107\u0003\u0002\u0002\u0002",
    "\u0a2a\u0a2b\u0007U\u0002\u0002\u0a2b\u0a46\u0005\u010a\u0086\u0002",
    "\u0a2c\u0a2d\u0007\t\u0002\u0002\u0a2d\u0a46\u0005\u010a\u0086\u0002",
    "\u0a2e\u0a30\u0007\u00aa\u0002\u0002\u0a2f\u0a31\u0007\b\u0002\u0002",
    "\u0a30\u0a2f\u0003\u0002\u0002\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002",
    "\u0a31\u0a32\u0003\u0002\u0002\u0002\u0a32\u0a46\u0005\u010a\u0086\u0002",
    "\u0a33\u0a34\u0007\u01b9\u0002\u0002\u0a34\u0a46\u0005\u010a\u0086\u0002",
    "\u0a35\u0a46\u0005\u0132\u009a\u0002\u0a36\u0a46\u0005\u0138\u009d\u0002",
    "\u0a37\u0a46\u0005\u010c\u0087\u0002\u0a38\u0a46\u0005\u010e\u0088\u0002",
    "\u0a39\u0a46\u0005\u0110\u0089\u0002\u0a3a\u0a46\u0005\u0112\u008a\u0002",
    "\u0a3b\u0a46\u0005\u0114\u008b\u0002\u0a3c\u0a46\u0005\u011a\u008e\u0002",
    "\u0a3d\u0a46\u0005\u011e\u0090\u0002\u0a3e\u0a46\u0005\u0128\u0095\u0002",
    "\u0a3f\u0a46\u0005\u012a\u0096\u0002\u0a40\u0a46\u0005\u012c\u0097\u0002",
    "\u0a41\u0a46\u0005\u0238\u011d\u0002\u0a42\u0a46\u0005\u013a\u009e\u0002",
    "\u0a43\u0a46\u0005\u012e\u0098\u0002\u0a44\u0a46\u0005\u0130\u0099\u0002",
    "\u0a45\u0a2a\u0003\u0002\u0002\u0002\u0a45\u0a2c\u0003\u0002\u0002\u0002",
    "\u0a45\u0a2e\u0003\u0002\u0002\u0002\u0a45\u0a33\u0003\u0002\u0002\u0002",
    "\u0a45\u0a35\u0003\u0002\u0002\u0002\u0a45\u0a36\u0003\u0002\u0002\u0002",
    "\u0a45\u0a37\u0003\u0002\u0002\u0002\u0a45\u0a38\u0003\u0002\u0002\u0002",
    "\u0a45\u0a39\u0003\u0002\u0002\u0002\u0a45\u0a3a\u0003\u0002\u0002\u0002",
    "\u0a45\u0a3b\u0003\u0002\u0002\u0002\u0a45\u0a3c\u0003\u0002\u0002\u0002",
    "\u0a45\u0a3d\u0003\u0002\u0002\u0002\u0a45\u0a3e\u0003\u0002\u0002\u0002",
    "\u0a45\u0a3f\u0003\u0002\u0002\u0002\u0a45\u0a40\u0003\u0002\u0002\u0002",
    "\u0a45\u0a41\u0003\u0002\u0002\u0002\u0a45\u0a42\u0003\u0002\u0002\u0002",
    "\u0a45\u0a43\u0003\u0002\u0002\u0002\u0a45\u0a44\u0003\u0002\u0002\u0002",
    "\u0a46\u0109\u0003\u0002\u0002\u0002\u0a47\u0a49\n\u001f\u0002\u0002",
    "\u0a48\u0a47\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002",
    "\u0a4a\u0a48\u0003\u0002\u0002\u0002\u0a4a\u0a4b\u0003\u0002\u0002\u0002",
    "\u0a4b\u010b\u0003\u0002\u0002\u0002\u0a4c\u0a4f\u0005\u02ea\u0176\u0002",
    "\u0a4d\u0a4f\u0005\u02e8\u0175\u0002\u0a4e\u0a4c\u0003\u0002\u0002\u0002",
    "\u0a4e\u0a4d\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002\u0002\u0002",
    "\u0a50\u0a51\u0007\u022a\u0002\u0002\u0a51\u0a52\u0005\u0218\u010d\u0002",
    "\u0a52\u010d\u0003\u0002\u0002\u0002\u0a53\u0a55\u0007O\u0002\u0002",
    "\u0a54\u0a56\u0005\u02b0\u0159\u0002\u0a55\u0a54\u0003\u0002\u0002\u0002",
    "\u0a55\u0a56\u0003\u0002\u0002\u0002\u0a56\u0a59\u0003\u0002\u0002\u0002",
    "\u0a57\u0a58\u0007\u01d6\u0002\u0002\u0a58\u0a5a\u0005\u0214\u010b\u0002",
    "\u0a59\u0a57\u0003\u0002\u0002\u0002\u0a59\u0a5a\u0003\u0002\u0002\u0002",
    "\u0a5a\u010f\u0003\u0002\u0002\u0002\u0a5b\u0a5d\u0007\u0090\u0002\u0002",
    "\u0a5c\u0a5e\u0005\u02b0\u0159\u0002\u0a5d\u0a5c\u0003\u0002\u0002\u0002",
    "\u0a5d\u0a5e\u0003\u0002\u0002\u0002\u0a5e\u0a61\u0003\u0002\u0002\u0002",
    "\u0a5f\u0a60\u0007\u01d6\u0002\u0002\u0a60\u0a62\u0005\u0214\u010b\u0002",
    "\u0a61\u0a5f\u0003\u0002\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002",
    "\u0a62\u0111\u0003\u0002\u0002\u0002\u0a63\u0a64\u0007\u00a9\u0002\u0002",
    "\u0a64\u0a65\u0005\u02b0\u0159\u0002\u0a65\u0113\u0003\u0002\u0002\u0002",
    "\u0a66\u0a67\u0007\u00b3\u0002\u0002\u0a67\u0a68\u0005\u0214\u010b\u0002",
    "\u0a68\u0a69\u0007\u01a7\u0002\u0002\u0a69\u0a6d\u0005\u0104\u0083\u0002",
    "\u0a6a\u0a6c\u0005\u0116\u008c\u0002\u0a6b\u0a6a\u0003\u0002\u0002\u0002",
    "\u0a6c\u0a6f\u0003\u0002\u0002\u0002\u0a6d\u0a6b\u0003\u0002\u0002\u0002",
    "\u0a6d\u0a6e\u0003\u0002\u0002\u0002\u0a6e\u0a71\u0003\u0002\u0002\u0002",
    "\u0a6f\u0a6d\u0003\u0002\u0002\u0002\u0a70\u0a72\u0005\u0118\u008d\u0002",
    "\u0a71\u0a70\u0003\u0002\u0002\u0002\u0a71\u0a72\u0003\u0002\u0002\u0002",
    "\u0a72\u0a73\u0003\u0002\u0002\u0002\u0a73\u0a74\u0007\u0083\u0002\u0002",
    "\u0a74\u0a75\u0007\u00b3\u0002\u0002\u0a75\u0115\u0003\u0002\u0002\u0002",
    "\u0a76\u0a77\u0007~\u0002\u0002\u0a77\u0a78\u0005\u0214\u010b\u0002",
    "\u0a78\u0a79\u0007\u01a7\u0002\u0002\u0a79\u0a7a\u0005\u0104\u0083\u0002",
    "\u0a7a\u0117\u0003\u0002\u0002\u0002\u0a7b\u0a7c\u0007}\u0002\u0002",
    "\u0a7c\u0a7d\u0005\u0104\u0083\u0002\u0a7d\u0119\u0003\u0002\u0002\u0002",
    "\u0a7e\u0a80\u0005\u02b0\u0159\u0002\u0a7f\u0a7e\u0003\u0002\u0002\u0002",
    "\u0a7f\u0a80\u0003\u0002\u0002\u0002\u0a80\u0a85\u0003\u0002\u0002\u0002",
    "\u0a81\u0a82\u0007\u01d8\u0002\u0002\u0a82\u0a86\u0005\u0214\u010b\u0002",
    "\u0a83\u0a84\u0007\u00a2\u0002\u0002\u0a84\u0a86\u0005\u011c\u008f\u0002",
    "\u0a85\u0a81\u0003\u0002\u0002\u0002\u0a85\u0a83\u0003\u0002\u0002\u0002",
    "\u0a85\u0a86\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003\u0002\u0002\u0002",
    "\u0a87\u0a88\u0007\u00ea\u0002\u0002\u0a88\u0a89\u0005\u0104\u0083\u0002",
    "\u0a89\u0a8a\u0007\u0083\u0002\u0002\u0a8a\u0a8c\u0007\u00ea\u0002\u0002",
    "\u0a8b\u0a8d\u0005\u02b0\u0159\u0002\u0a8c\u0a8b\u0003\u0002\u0002\u0002",
    "\u0a8c\u0a8d\u0003\u0002\u0002\u0002\u0a8d\u011b\u0003\u0002\u0002\u0002",
    "\u0a8e\u0a8f\u0005\u02c0\u0161\u0002\u0a8f\u0a91\u0007\u00bf\u0002\u0002",
    "\u0a90\u0a92\u0007\u0167\u0002\u0002\u0a91\u0a90\u0003\u0002\u0002\u0002",
    "\u0a91\u0a92\u0003\u0002\u0002\u0002\u0a92\u0a93\u0003\u0002\u0002\u0002",
    "\u0a93\u0a94\u0005\u0124\u0093\u0002\u0a94\u0a95\u0007\u0219\u0002\u0002",
    "\u0a95\u0a96\u0005\u0126\u0094\u0002\u0a96\u0aa8\u0003\u0002\u0002\u0002",
    "\u0a97\u0a98\u0005\u02c4\u0163\u0002\u0a98\u0aa5\u0007\u00bf\u0002\u0002",
    "\u0a99\u0a9f\u0005\u02c2\u0162\u0002\u0a9a\u0a9c\u0007\u0221\u0002\u0002",
    "\u0a9b\u0a9d\u0005\u0216\u010c\u0002\u0a9c\u0a9b\u0003\u0002\u0002\u0002",
    "\u0a9c\u0a9d\u0003\u0002\u0002\u0002\u0a9d\u0a9e\u0003\u0002\u0002\u0002",
    "\u0a9e\u0aa0\u0007\u0222\u0002\u0002\u0a9f\u0a9a\u0003\u0002\u0002\u0002",
    "\u0a9f\u0aa0\u0003\u0002\u0002\u0002\u0aa0\u0aa6\u0003\u0002\u0002\u0002",
    "\u0aa1\u0aa2\u0007\u0221\u0002\u0002\u0aa2\u0aa3\u0005\u015c\u00af\u0002",
    "\u0aa3\u0aa4\u0007\u0222\u0002\u0002\u0aa4\u0aa6\u0003\u0002\u0002\u0002",
    "\u0aa5\u0a99\u0003\u0002\u0002\u0002\u0aa5\u0aa1\u0003\u0002\u0002\u0002",
    "\u0aa6\u0aa8\u0003\u0002\u0002\u0002\u0aa7\u0a8e\u0003\u0002\u0002\u0002",
    "\u0aa7\u0a97\u0003\u0002\u0002\u0002\u0aa8\u011d\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aaa\u0007\u009f\u0002\u0002\u0aaa\u0aab\u0005\u02c0\u0161\u0002",
    "\u0aab\u0aac\u0007\u00bf\u0002\u0002\u0aac\u0aad\u0005\u0120\u0091\u0002",
    "\u0aad\u0ab0\u0005\u013a\u009e\u0002\u0aae\u0aaf\u0007\u0172\u0002\u0002",
    "\u0aaf\u0ab1\u0007\u008b\u0002\u0002\u0ab0\u0aae\u0003\u0002\u0002\u0002",
    "\u0ab0\u0ab1\u0003\u0002\u0002\u0002\u0ab1\u011f\u0003\u0002\u0002\u0002",
    "\u0ab2\u0ab3\u0005\u0124\u0093\u0002\u0ab3\u0ab4\u0007\u0219\u0002\u0002",
    "\u0ab4\u0ab5\u0005\u0126\u0094\u0002\u0ab5\u0ac0\u0003\u0002\u0002\u0002",
    "\u0ab6\u0ab7\u0007\u00bd\u0002\u0002\u0ab7\u0ab8\u0007\u011e\u0002\u0002",
    "\u0ab8\u0aba\u0005\u02c6\u0164\u0002\u0ab9\u0abb\u0005\u0122\u0092\u0002",
    "\u0aba\u0ab9\u0003\u0002\u0002\u0002\u0aba\u0abb\u0003\u0002\u0002\u0002",
    "\u0abb\u0ac0\u0003\u0002\u0002\u0002\u0abc\u0abd\u0007\u01c9\u0002\u0002",
    "\u0abd\u0abe\u0007\u011e\u0002\u0002\u0abe\u0ac0\u0005\u02c0\u0161\u0002",
    "\u0abf\u0ab2\u0003\u0002\u0002\u0002\u0abf\u0ab6\u0003\u0002\u0002\u0002",
    "\u0abf\u0abc\u0003\u0002\u0002\u0002\u0ac0\u0121\u0003\u0002\u0002\u0002",
    "\u0ac1\u0ac2\u0007\u001d\u0002\u0002\u0ac2\u0ac3\u0005\u0124\u0093\u0002",
    "\u0ac3\u0ac4\u0007\u000b\u0002\u0002\u0ac4\u0ac5\u0005\u0126\u0094\u0002",
    "\u0ac5\u0123\u0003\u0002\u0002\u0002\u0ac6\u0ac7\u0005\u022a\u0116\u0002",
    "\u0ac7\u0125\u0003\u0002\u0002\u0002\u0ac8\u0ac9\u0005\u022a\u0116\u0002",
    "\u0ac9\u0127\u0003\u0002\u0002\u0002\u0aca\u0acb\u0007\u0117\u0002\u0002",
    "\u0acb\u0129\u0003\u0002\u0002\u0002\u0acc\u0ace\u0007\u0151\u0002\u0002",
    "\u0acd\u0acf\u0005\u02b6\u015c\u0002\u0ace\u0acd\u0003\u0002\u0002\u0002",
    "\u0ace\u0acf\u0003\u0002\u0002\u0002\u0acf\u012b\u0003\u0002\u0002\u0002",
    "\u0ad0\u0ad2\u0007\u0165\u0002\u0002\u0ad1\u0ad3\u0005\u0218\u010d\u0002",
    "\u0ad2\u0ad1\u0003\u0002\u0002\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002",
    "\u0ad3\u012d\u0003\u0002\u0002\u0002\u0ad4\u0ad6\u0007-\u0002\u0002",
    "\u0ad5\u0ad4\u0003\u0002\u0002\u0002\u0ad5\u0ad6\u0003\u0002\u0002\u0002",
    "\u0ad6\u0ad7\u0003\u0002\u0002\u0002\u0ad7\u0ad9\u0005\u029e\u0150\u0002",
    "\u0ad8\u0ada\u0005\u02d6\u016c\u0002\u0ad9\u0ad8\u0003\u0002\u0002\u0002",
    "\u0ad9\u0ada\u0003\u0002\u0002\u0002\u0ada\u012f\u0003\u0002\u0002\u0002",
    "\u0adb\u0adc\u0007\u0141\u0002\u0002\u0adc\u0add\u0007\u016d\u0002\u0002",
    "\u0add\u0ade\u0007\u0221\u0002\u0002\u0ade\u0adf\u0005\u0218\u010d\u0002",
    "\u0adf\u0ae0\u0007\u0222\u0002\u0002\u0ae0\u0131\u0003\u0002\u0002\u0002",
    "\u0ae1\u0ae2\u0007\u001c\u0002\u0002\u0ae2\u0ae9\u0005\u0104\u0083\u0002",
    "\u0ae3\u0ae5\u0007\u0089\u0002\u0002\u0ae4\u0ae6\u0005\u0134\u009b\u0002",
    "\u0ae5\u0ae4\u0003\u0002\u0002\u0002\u0ae6\u0ae7\u0003\u0002\u0002\u0002",
    "\u0ae7\u0ae5\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0003\u0002\u0002\u0002",
    "\u0ae8\u0aea\u0003\u0002\u0002\u0002\u0ae9\u0ae3\u0003\u0002\u0002\u0002",
    "\u0ae9\u0aea\u0003\u0002\u0002\u0002\u0aea\u0aeb\u0003\u0002\u0002\u0002",
    "\u0aeb\u0aed\u0007\u0083\u0002\u0002\u0aec\u0aee\u0005\u02b0\u0159\u0002",
    "\u0aed\u0aec\u0003\u0002\u0002\u0002\u0aed\u0aee\u0003\u0002\u0002\u0002",
    "\u0aee\u0133\u0003\u0002\u0002\u0002\u0aef\u0af0\u0007\u01d6\u0002\u0002",
    "\u0af0\u0af5\u0005\u02b6\u015c\u0002\u0af1\u0af2\u0007\u012a\u0002\u0002",
    "\u0af2\u0af4\u0005\u02b6\u015c\u0002\u0af3\u0af1\u0003\u0002\u0002\u0002",
    "\u0af4\u0af7\u0003\u0002\u0002\u0002\u0af5\u0af3\u0003\u0002\u0002\u0002",
    "\u0af5\u0af6\u0003\u0002\u0002\u0002\u0af6\u0af8\u0003\u0002\u0002\u0002",
    "\u0af7\u0af5\u0003\u0002\u0002\u0002\u0af8\u0af9\u0007\u01a7\u0002\u0002",
    "\u0af9\u0afa\u0005\u0104\u0083\u0002\u0afa\u0135\u0003\u0002\u0002\u0002",
    "\u0afb\u0afd\u0007h\u0002\u0002\u0afc\u0afb\u0003\u0002\u0002\u0002",
    "\u0afc\u0afd\u0003\u0002\u0002\u0002\u0afd\u0aff\u0003\u0002\u0002\u0002",
    "\u0afe\u0b00\u0005\u00e8u\u0002\u0aff\u0afe\u0003\u0002\u0002\u0002",
    "\u0b00\u0b01\u0003\u0002\u0002\u0002\u0b01\u0aff\u0003\u0002\u0002\u0002",
    "\u0b01\u0b02\u0003\u0002\u0002\u0002\u0b02\u0b04\u0003\u0002\u0002\u0002",
    "\u0b03\u0afc\u0003\u0002\u0002\u0002\u0b03\u0b04\u0003\u0002\u0002\u0002",
    "\u0b04\u0b05\u0003\u0002\u0002\u0002\u0b05\u0b06\u0005\u0132\u009a\u0002",
    "\u0b06\u0137\u0003\u0002\u0002\u0002\u0b07\u0b09\u0007h\u0002\u0002",
    "\u0b08\u0b07\u0003\u0002\u0002\u0002\u0b08\u0b09\u0003\u0002\u0002\u0002",
    "\u0b09\u0b0b\u0003\u0002\u0002\u0002\u0b0a\u0b0c\u0005\u00e8u\u0002",
    "\u0b0b\u0b0a\u0003\u0002\u0002\u0002\u0b0c\u0b0d\u0003\u0002\u0002\u0002",
    "\u0b0d\u0b0b\u0003\u0002\u0002\u0002\u0b0d\u0b0e\u0003\u0002\u0002\u0002",
    "\u0b0e\u0b0f\u0003\u0002\u0002\u0002\u0b0f\u0b10\u0005\u0132\u009a\u0002",
    "\u0b10\u0139\u0003\u0002\u0002\u0002\u0b11\u0b16\u0005\u013c\u009f\u0002",
    "\u0b12\u0b16\u0005\u0140\u00a1\u0002\u0b13\u0b16\u0005\u0142\u00a2\u0002",
    "\u0b14\u0b16\u0005\u014c\u00a7\u0002\u0b15\u0b11\u0003\u0002\u0002\u0002",
    "\u0b15\u0b12\u0003\u0002\u0002\u0002\u0b15\u0b13\u0003\u0002\u0002\u0002",
    "\u0b15\u0b14\u0003\u0002\u0002\u0002\u0b16\u013b\u0003\u0002\u0002\u0002",
    "\u0b17\u0b18\u0007\u008e\u0002\u0002\u0b18\u0b19\u0007\u00b5\u0002\u0002",
    "\u0b19\u0b23\u0005\u0218\u010d\u0002\u0b1a\u0b1c\u0005\u028e\u0148\u0002",
    "\u0b1b\u0b1d\u0005\u0260\u0131\u0002\u0b1c\u0b1b\u0003\u0002\u0002\u0002",
    "\u0b1c\u0b1d\u0003\u0002\u0002\u0002\u0b1d\u0b24\u0003\u0002\u0002\u0002",
    "\u0b1e\u0b20\u0005\u0260\u0131\u0002\u0b1f\u0b21\u0005\u013e\u00a0\u0002",
    "\u0b20\u0b1f\u0003\u0002\u0002\u0002\u0b20\u0b21\u0003\u0002\u0002\u0002",
    "\u0b21\u0b24\u0003\u0002\u0002\u0002\u0b22\u0b24\u0005\u013e\u00a0\u0002",
    "\u0b23\u0b1a\u0003\u0002\u0002\u0002\u0b23\u0b1e\u0003\u0002\u0002\u0002",
    "\u0b23\u0b22\u0003\u0002\u0002\u0002\u0b23\u0b24\u0003\u0002\u0002\u0002",
    "\u0b24\u013d\u0003\u0002\u0002\u0002\u0b25\u0b26\t \u0002\u0002\u0b26",
    "\u0b27\u0005\u028e\u0148\u0002\u0b27\u013f\u0003\u0002\u0002\u0002\u0b28",
    "\u0b30\u0005\u01ec\u00f7\u0002\u0b29\u0b30\u0005\u01f8\u00fd\u0002\u0b2a",
    "\u0b30\u0005\u015c\u00af\u0002\u0b2b\u0b30\u0005\u01d2\u00ea\u0002\u0b2c",
    "\u0b30\u0005\u01d8\u00ed\u0002\u0b2d\u0b30\u0005\u01da\u00ee\u0002\u0b2e",
    "\u0b30\u0005\u015a\u00ae\u0002\u0b2f\u0b28\u0003\u0002\u0002\u0002\u0b2f",
    "\u0b29\u0003\u0002\u0002\u0002\u0b2f\u0b2a\u0003\u0002\u0002\u0002\u0b2f",
    "\u0b2b\u0003\u0002\u0002\u0002\u0b2f\u0b2c\u0003\u0002\u0002\u0002\u0b2f",
    "\u0b2d\u0003\u0002\u0002\u0002\u0b2f\u0b2e\u0003\u0002\u0002\u0002\u0b30",
    "\u0141\u0003\u0002\u0002\u0002\u0b31\u0b36\u0005\u0144\u00a3\u0002\u0b32",
    "\u0b36\u0005\u0146\u00a4\u0002\u0b33\u0b36\u0005\u0148\u00a5\u0002\u0b34",
    "\u0b36\u0005\u014a\u00a6\u0002\u0b35\u0b31\u0003\u0002\u0002\u0002\u0b35",
    "\u0b32\u0003\u0002\u0002\u0002\u0b35\u0b33\u0003\u0002\u0002\u0002\u0b35",
    "\u0b34\u0003\u0002\u0002\u0002\u0b36\u0143\u0003\u0002\u0002\u0002\u0b37",
    "\u0b38\u00079\u0002\u0002\u0b38\u0b39\u0005\u02c2\u0162\u0002\u0b39",
    "\u0145\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0007\u0124\u0002\u0002\u0b3b",
    "\u0b41\u0005\u02c2\u0162\u0002\u0b3c\u0b3e\u0007\u0221\u0002\u0002\u0b3d",
    "\u0b3f\u0005\u0216\u010c\u0002\u0b3e\u0b3d\u0003\u0002\u0002\u0002\u0b3e",
    "\u0b3f\u0003\u0002\u0002\u0002\u0b3f\u0b40\u0003\u0002\u0002\u0002\u0b40",
    "\u0b42\u0007\u0222\u0002\u0002\u0b41\u0b3c\u0003\u0002\u0002\u0002\u0b41",
    "\u0b42\u0003\u0002\u0002\u0002\u0b42\u0147\u0003\u0002\u0002\u0002\u0b43",
    "\u0b44\u0007\u0096\u0002\u0002\u0b44\u0b59\u0005\u02c2\u0162\u0002\u0b45",
    "\u0b46\u0007\u00cc\u0002\u0002\u0b46\u0b4b\u0005\u02be\u0160\u0002\u0b47",
    "\u0b48\u0007\u0227\u0002\u0002\u0b48\u0b4a\u0005\u02be\u0160\u0002\u0b49",
    "\u0b47\u0003\u0002\u0002\u0002\u0b4a\u0b4d\u0003\u0002\u0002\u0002\u0b4b",
    "\u0b49\u0003\u0002\u0002\u0002\u0b4b\u0b4c\u0003\u0002\u0002\u0002\u0b4c",
    "\u0b5a\u0003\u0002\u0002\u0002\u0b4d\u0b4b\u0003\u0002\u0002\u0002\u0b4e",
    "\u0b4f\u0007)\u0002\u0002\u0b4f\u0b50\u0007<\u0002\u0002\u0b50\u0b51",
    "\u0007\u00cc\u0002\u0002\u0b51\u0b56\u0005\u02be\u0160\u0002\u0b52\u0b53",
    "\u0007\u0227\u0002\u0002\u0b53\u0b55\u0005\u02be\u0160\u0002\u0b54\u0b52",
    "\u0003\u0002\u0002\u0002\u0b55\u0b58\u0003\u0002\u0002\u0002\u0b56\u0b54",
    "\u0003\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002\u0b57\u0b5a",
    "\u0003\u0002\u0002\u0002\u0b58\u0b56\u0003\u0002\u0002\u0002\u0b59\u0b45",
    "\u0003\u0002\u0002\u0002\u0b59\u0b4e\u0003\u0002\u0002\u0002\u0b5a\u0149",
    "\u0003\u0002\u0002\u0002\u0b5b\u0b5c\u0007\u0124\u0002\u0002\u0b5c\u0b5d",
    "\u0005\u02be\u0160\u0002\u0b5d\u0b60\u0007\u00a2\u0002\u0002\u0b5e\u0b61",
    "\u0005\u015c\u00af\u0002\u0b5f\u0b61\u0005\u0218\u010d\u0002\u0b60\u0b5e",
    "\u0003\u0002\u0002\u0002\u0b60\u0b5f\u0003\u0002\u0002\u0002\u0b61\u0b63",
    "\u0003\u0002\u0002\u0002\u0b62\u0b64\u0005\u0260\u0131\u0002\u0b63\u0b62",
    "\u0003\u0002\u0002\u0002\u0b63\u0b64\u0003\u0002\u0002\u0002\u0b64\u014b",
    "\u0003\u0002\u0002\u0002\u0b65\u0b6b\u0005\u014e\u00a8\u0002\u0b66\u0b6b",
    "\u0005\u0150\u00a9\u0002\u0b67\u0b6b\u0005\u0152\u00aa\u0002\u0b68\u0b6b",
    "\u0005\u0156\u00ac\u0002\u0b69\u0b6b\u0005\u0158\u00ad\u0002\u0b6a\u0b65",
    "\u0003\u0002\u0002\u0002\u0b6a\u0b66\u0003\u0002\u0002\u0002\u0b6a\u0b67",
    "\u0003\u0002\u0002\u0002\u0b6a\u0b68\u0003\u0002\u0002\u0002\u0b6a\u0b69",
    "\u0003\u0002\u0002\u0002\u0b6b\u014d\u0003\u0002\u0002\u0002\u0b6c\u0b6d",
    "\u0007\u0182\u0002\u0002\u0b6d\u0b7b\u0007\u01b4\u0002\u0002\u0b6e\u0b6f",
    "\u0007\u0154\u0002\u0002\u0b6f\u0b7c\t!\u0002\u0002\u0b70\u0b71\u0007",
    "\u00cf\u0002\u0002\u0b71\u0b75\u0007\u00da\u0002\u0002\u0b72\u0b76\u0007",
    "\u017e\u0002\u0002\u0b73\u0b74\u0007\u0154\u0002\u0002\u0b74\u0b76\u0007",
    "A\u0002\u0002\u0b75\u0b72\u0003\u0002\u0002\u0002\u0b75\u0b73\u0003",
    "\u0002\u0002\u0002\u0b76\u0b7c\u0003\u0002\u0002\u0002\u0b77\u0b78\u0007",
    "\u01c6\u0002\u0002\u0b78\u0b79\u0007\u016a\u0002\u0002\u0b79\u0b7a\u0007",
    "\u0179\u0002\u0002\u0b7a\u0b7c\u0005\u0298\u014d\u0002\u0b7b\u0b6e\u0003",
    "\u0002\u0002\u0002\u0b7b\u0b70\u0003\u0002\u0002\u0002\u0b7b\u0b77\u0003",
    "\u0002\u0002\u0002\u0b7b\u0b7c\u0003\u0002\u0002\u0002\u0b7c\u0b7f\u0003",
    "\u0002\u0002\u0002\u0b7d\u0b7e\u0007\u00fd\u0002\u0002\u0b7e\u0b80\u0005",
    "\u02f6\u017c\u0002\u0b7f\u0b7d\u0003\u0002\u0002\u0002\u0b7f\u0b80\u0003",
    "\u0002\u0002\u0002\u0b80\u014f\u0003\u0002\u0002\u0002\u0b81\u0b82\u0007",
    "\u0182\u0002\u0002\u0b82\u0b8c\t\"\u0002\u0002\u0b83\u0b8d\u0007\b\u0002",
    "\u0002\u0b84\u0b89\u0005\u02ae\u0158\u0002\u0b85\u0b86\u0007\u0227\u0002",
    "\u0002\u0b86\u0b88\u0005\u02ae\u0158\u0002\u0b87\u0b85\u0003\u0002\u0002",
    "\u0002\u0b88\u0b8b\u0003\u0002\u0002\u0002\u0b89\u0b87\u0003\u0002\u0002",
    "\u0002\u0b89\u0b8a\u0003\u0002\u0002\u0002\u0b8a\u0b8d\u0003\u0002\u0002",
    "\u0002\u0b8b\u0b89\u0003\u0002\u0002\u0002\u0b8c\u0b83\u0003\u0002\u0002",
    "\u0002\u0b8c\u0b84\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0003\u0002\u0002",
    "\u0002\u0b8e\u0b8f\t\u0014\u0002\u0002\u0b8f\u0151\u0003\u0002\u0002",
    "\u0002\u0b90\u0b92\u0007@\u0002\u0002\u0b91\u0b93\u0007\u01db\u0002",
    "\u0002\u0b92\u0b91\u0003\u0002\u0002\u0002\u0b92\u0b93\u0003\u0002\u0002",
    "\u0002\u0b93\u0ba1\u0003\u0002\u0002\u0002\u0b94\u0b95\u0007?\u0002",
    "\u0002\u0b95\u0ba2\u0005\u0218\u010d\u0002\u0b96\u0b9f\u0007\u00a0\u0002",
    "\u0002\u0b97\u0b98\u0007R\u0002\u0002\u0b98\u0ba0\u0005\u0218\u010d",
    "\u0002\u0b99\u0ba0\u0007Q\u0002\u0002\u0b9a\u0b9d\u0005\u0218\u010d",
    "\u0002\u0b9b\u0b9c\u0007\u0227\u0002\u0002\u0b9c\u0b9e\u0005\u0218\u010d",
    "\u0002\u0b9d\u0b9b\u0003\u0002\u0002\u0002\u0b9d\u0b9e\u0003\u0002\u0002",
    "\u0002\u0b9e\u0ba0\u0003\u0002\u0002\u0002\u0b9f\u0b97\u0003\u0002\u0002",
    "\u0002\u0b9f\u0b99\u0003\u0002\u0002\u0002\u0b9f\u0b9a\u0003\u0002\u0002",
    "\u0002\u0ba0\u0ba2\u0003\u0002\u0002\u0002\u0ba1\u0b94\u0003\u0002\u0002",
    "\u0002\u0ba1\u0b96\u0003\u0002\u0002\u0002\u0ba1\u0ba2\u0003\u0002\u0002",
    "\u0002\u0ba2\u0ba4\u0003\u0002\u0002\u0002\u0ba3\u0ba5\u0005\u0154\u00ab",
    "\u0002\u0ba4\u0ba3\u0003\u0002\u0002\u0002\u0ba4\u0ba5\u0003\u0002\u0002",
    "\u0002\u0ba5\u0153\u0003\u0002\u0002\u0002\u0ba6\u0ba8\u0007\u01dc\u0002",
    "\u0002\u0ba7\u0ba9\t#\u0002\u0002\u0ba8\u0ba7\u0003\u0002\u0002\u0002",
    "\u0ba8\u0ba9\u0003\u0002\u0002\u0002\u0ba9\u0bab\u0003\u0002\u0002\u0002",
    "\u0baa\u0bac\t$\u0002\u0002\u0bab\u0baa\u0003\u0002\u0002\u0002\u0bab",
    "\u0bac\u0003\u0002\u0002\u0002\u0bac\u0155\u0003\u0002\u0002\u0002\u0bad",
    "\u0baf\u0007\u016a\u0002\u0002\u0bae\u0bb0\u0007\u01db\u0002\u0002\u0baf",
    "\u0bae\u0003\u0002\u0002\u0002\u0baf\u0bb0\u0003\u0002\u0002\u0002\u0bb0",
    "\u0bb8\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0007\u01b2\u0002\u0002\u0bb2",
    "\u0bb4\u0007\u0171\u0002\u0002\u0bb3\u0bb2\u0003\u0002\u0002\u0002\u0bb3",
    "\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0bb5\u0003\u0002\u0002\u0002\u0bb5",
    "\u0bb9\u0005\u0296\u014c\u0002\u0bb6\u0bb7\u0007\u00a0\u0002\u0002\u0bb7",
    "\u0bb9\u0005\u02f6\u017c\u0002\u0bb8\u0bb1\u0003\u0002\u0002\u0002\u0bb8",
    "\u0bb6\u0003\u0002\u0002\u0002\u0bb8\u0bb9\u0003\u0002\u0002\u0002\u0bb9",
    "\u0157\u0003\u0002\u0002\u0002\u0bba\u0bbb\u0007\u0171\u0002\u0002\u0bbb",
    "\u0bbc\u0005\u0296\u014c\u0002\u0bbc\u0159\u0003\u0002\u0002\u0002\u0bbd",
    "\u0bbe\u0007\u0091\u0002\u0002\u0bbe\u0bc3\u0007\u0143\u0002\u0002\u0bbf",
    "\u0bc0\u0007\u0182\u0002\u0002\u0bc0\u0bc1\u0007\u0197\u0002\u0002\u0bc1",
    "\u0bc2\u0007\u0235\u0002\u0002\u0bc2\u0bc4\u0005\u02f6\u017c\u0002\u0bc3",
    "\u0bbf\u0003\u0002\u0002\u0002\u0bc3\u0bc4\u0003\u0002\u0002\u0002\u0bc4",
    "\u0bc7\u0003\u0002\u0002\u0002\u0bc5\u0bc6\u0007\u00cc\u0002\u0002\u0bc6",
    "\u0bc8\u0005\u02cc\u0167\u0002\u0bc7\u0bc5\u0003\u0002\u0002\u0002\u0bc7",
    "\u0bc8\u0003\u0002\u0002\u0002\u0bc8\u0bc9\u0003\u0002\u0002\u0002\u0bc9",
    "\u0bcf\u0007\u00a2\u0002\u0002\u0bca\u0bd0\u0005\u015c\u00af\u0002\u0bcb",
    "\u0bd0\u0005\u01d2\u00ea\u0002\u0bcc\u0bd0\u0005\u01d8\u00ed\u0002\u0bcd",
    "\u0bd0\u0005\u01da\u00ee\u0002\u0bce\u0bd0\u0005\u01ec\u00f7\u0002\u0bcf",
    "\u0bca\u0003\u0002\u0002\u0002\u0bcf\u0bcb\u0003\u0002\u0002\u0002\u0bcf",
    "\u0bcc\u0003\u0002\u0002\u0002\u0bcf\u0bcd\u0003\u0002\u0002\u0002\u0bcf",
    "\u0bce\u0003\u0002\u0002\u0002\u0bd0\u015b\u0003\u0002\u0002\u0002\u0bd1",
    "\u0bd3\u0005\u015e\u00b0\u0002\u0bd2\u0bd1\u0003\u0002\u0002\u0002\u0bd2",
    "\u0bd3\u0003\u0002\u0002\u0002\u0bd3\u0bd4\u0003\u0002\u0002\u0002\u0bd4",
    "\u0bd9\u0005\u0166\u00b4\u0002\u0bd5\u0bd8\u0005\u01cc\u00e7\u0002\u0bd6",
    "\u0bd8\u0005\u01c8\u00e5\u0002\u0bd7\u0bd5\u0003\u0002\u0002\u0002\u0bd7",
    "\u0bd6\u0003\u0002\u0002\u0002\u0bd8\u0bdb\u0003\u0002\u0002\u0002\u0bd9",
    "\u0bd7\u0003\u0002\u0002\u0002\u0bd9\u0bda\u0003\u0002\u0002\u0002\u0bda",
    "\u015d\u0003\u0002\u0002\u0002\u0bdb\u0bd9\u0003\u0002\u0002\u0002\u0bdc",
    "\u0bdd\u0007\u01da\u0002\u0002\u0bdd\u0be2\u0005\u0160\u00b1\u0002\u0bde",
    "\u0bdf\u0007\u0227\u0002\u0002\u0bdf\u0be1\u0005\u0160\u00b1\u0002\u0be0",
    "\u0bde\u0003\u0002\u0002\u0002\u0be1\u0be4\u0003\u0002\u0002\u0002\u0be2",
    "\u0be0\u0003\u0002\u0002\u0002\u0be2\u0be3\u0003\u0002\u0002\u0002\u0be3",
    "\u015f\u0003\u0002\u0002\u0002\u0be4\u0be2\u0003\u0002\u0002\u0002\u0be5",
    "\u0bf1\u0005\u02ac\u0157\u0002\u0be6\u0be7\u0007\u0221\u0002\u0002\u0be7",
    "\u0bec\u0005\u02ca\u0166\u0002\u0be8\u0be9\u0007\u0227\u0002\u0002\u0be9",
    "\u0beb\u0005\u02ca\u0166\u0002\u0bea\u0be8\u0003\u0002\u0002\u0002\u0beb",
    "\u0bee\u0003\u0002\u0002\u0002\u0bec\u0bea\u0003\u0002\u0002\u0002\u0bec",
    "\u0bed\u0003\u0002\u0002\u0002\u0bed\u0bef\u0003\u0002\u0002\u0002\u0bee",
    "\u0bec\u0003\u0002\u0002\u0002\u0bef\u0bf0\u0007\u0222\u0002\u0002\u0bf0",
    "\u0bf2\u0003\u0002\u0002\u0002\u0bf1\u0be6\u0003\u0002\u0002\u0002\u0bf1",
    "\u0bf2\u0003\u0002\u0002\u0002\u0bf2\u0bf3\u0003\u0002\u0002\u0002\u0bf3",
    "\u0bf4\u0007\u000f\u0002\u0002\u0bf4\u0bf5\u0007\u0221\u0002\u0002\u0bf5",
    "\u0bf7\u0005\u0166\u00b4\u0002\u0bf6\u0bf8\u0005\u01c8\u00e5\u0002\u0bf7",
    "\u0bf6\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0003\u0002\u0002\u0002\u0bf8",
    "\u0bf9\u0003\u0002\u0002\u0002\u0bf9\u0bfb\u0007\u0222\u0002\u0002\u0bfa",
    "\u0bfc\u0005\u0162\u00b2\u0002\u0bfb\u0bfa\u0003\u0002\u0002\u0002\u0bfb",
    "\u0bfc\u0003\u0002\u0002\u0002\u0bfc\u0bfe\u0003\u0002\u0002\u0002\u0bfd",
    "\u0bff\u0005\u0164\u00b3\u0002\u0bfe\u0bfd\u0003\u0002\u0002\u0002\u0bfe",
    "\u0bff\u0003\u0002\u0002\u0002\u0bff\u0161\u0003\u0002\u0002\u0002\u0c00",
    "\u0c01\u0007\u0176\u0002\u0002\u0c01\u0c02\t%\u0002\u0002\u0c02\u0c03",
    "\u0007\u0099\u0002\u0002\u0c03\u0c04\u0007*\u0002\u0002\u0c04\u0c06",
    "\u0005\u02ca\u0166\u0002\u0c05\u0c07\u0007\u0010\u0002\u0002\u0c06\u0c05",
    "\u0003\u0002\u0002\u0002\u0c06\u0c07\u0003\u0002\u0002\u0002\u0c07\u0c09",
    "\u0003\u0002\u0002\u0002\u0c08\u0c0a\u0007q\u0002\u0002\u0c09\u0c08",
    "\u0003\u0002\u0002\u0002\u0c09\u0c0a\u0003\u0002\u0002\u0002\u0c0a\u0c0d",
    "\u0003\u0002\u0002\u0002\u0c0b\u0c0c\u0007\u0118\u0002\u0002\u0c0c\u0c0e",
    "\u0007\u0099\u0002\u0002\u0c0d\u0c0b\u0003\u0002\u0002\u0002\u0c0d\u0c0e",
    "\u0003\u0002\u0002\u0002\u0c0e\u0c11\u0003\u0002\u0002\u0002\u0c0f\u0c10",
    "\u0007\u0118\u0002\u0002\u0c10\u0c12\u0007\u00d6\u0002\u0002\u0c11\u0c0f",
    "\u0003\u0002\u0002\u0002\u0c11\u0c12\u0003\u0002\u0002\u0002\u0c12\u0c25",
    "\u0003\u0002\u0002\u0002\u0c13\u0c14\u0007\u0227\u0002\u0002\u0c14\u0c16",
    "\u0005\u02ca\u0166\u0002\u0c15\u0c17\u0007\u0010\u0002\u0002\u0c16\u0c15",
    "\u0003\u0002\u0002\u0002\u0c16\u0c17\u0003\u0002\u0002\u0002\u0c17\u0c19",
    "\u0003\u0002\u0002\u0002\u0c18\u0c1a\u0007q\u0002\u0002\u0c19\u0c18",
    "\u0003\u0002\u0002\u0002\u0c19\u0c1a\u0003\u0002\u0002\u0002\u0c1a\u0c1d",
    "\u0003\u0002\u0002\u0002\u0c1b\u0c1c\u0007\u0118\u0002\u0002\u0c1c\u0c1e",
    "\u0007\u0099\u0002\u0002\u0c1d\u0c1b\u0003\u0002\u0002\u0002\u0c1d\u0c1e",
    "\u0003\u0002\u0002\u0002\u0c1e\u0c21\u0003\u0002\u0002\u0002\u0c1f\u0c20",
    "\u0007\u0118\u0002\u0002\u0c20\u0c22\u0007\u00d6\u0002\u0002\u0c21\u0c1f",
    "\u0003\u0002\u0002\u0002\u0c21\u0c22\u0003\u0002\u0002\u0002\u0c22\u0c24",
    "\u0003\u0002\u0002\u0002\u0c23\u0c13\u0003\u0002\u0002\u0002\u0c24\u0c27",
    "\u0003\u0002\u0002\u0002\u0c25\u0c23\u0003\u0002\u0002\u0002\u0c25\u0c26",
    "\u0003\u0002\u0002\u0002\u0c26\u0c28\u0003\u0002\u0002\u0002\u0c27\u0c25",
    "\u0003\u0002\u0002\u0002\u0c28\u0c29\u0007\u0182\u0002\u0002\u0c29\u0c2a",
    "\u0005\u02ca\u0166\u0002\u0c2a\u0163\u0003\u0002\u0002\u0002\u0c2b\u0c2c",
    "\u0007]\u0002\u0002\u0c2c\u0c31\u0005\u02ca\u0166\u0002\u0c2d\u0c2e",
    "\u0007\u0227\u0002\u0002\u0c2e\u0c30\u0005\u02ca\u0166\u0002\u0c2f\u0c2d",
    "\u0003\u0002\u0002\u0002\u0c30\u0c33\u0003\u0002\u0002\u0002\u0c31\u0c2f",
    "\u0003\u0002\u0002\u0002\u0c31\u0c32\u0003\u0002\u0002\u0002\u0c32\u0c34",
    "\u0003\u0002\u0002\u0002\u0c33\u0c31\u0003\u0002\u0002\u0002\u0c34\u0c35",
    "\u0007\u0182\u0002\u0002\u0c35\u0c36\u0005\u02ca\u0166\u0002\u0c36\u0c37",
    "\u0007\u01b2\u0002\u0002\u0c37\u0c38\u0005\u0218\u010d\u0002\u0c38\u0c39",
    "\u0007k\u0002\u0002\u0c39\u0c3a\u0005\u0218\u010d\u0002\u0c3a\u0165",
    "\u0003\u0002\u0002\u0002\u0c3b\u0c3f\u0005\u0168\u00b5\u0002\u0c3c\u0c3e",
    "\u0005\u016a\u00b6\u0002\u0c3d\u0c3c\u0003\u0002\u0002\u0002\u0c3e\u0c41",
    "\u0003\u0002\u0002\u0002\u0c3f\u0c3d\u0003\u0002\u0002\u0002\u0c3f\u0c40",
    "\u0003\u0002\u0002\u0002\u0c40\u0167\u0003\u0002\u0002\u0002\u0c41\u0c3f",
    "\u0003\u0002\u0002\u0002\u0c42\u0c48\u0005\u016c\u00b7\u0002\u0c43\u0c44",
    "\u0007\u0221\u0002\u0002\u0c44\u0c45\u0005\u0166\u00b4\u0002\u0c45\u0c46",
    "\u0007\u0222\u0002\u0002\u0c46\u0c48\u0003\u0002\u0002\u0002\u0c47\u0c42",
    "\u0003\u0002\u0002\u0002\u0c47\u0c43\u0003\u0002\u0002\u0002\u0c48\u0169",
    "\u0003\u0002\u0002\u0002\u0c49\u0c4b\u0007\u01bd\u0002\u0002\u0c4a\u0c4c",
    "\u0007\b\u0002\u0002\u0c4b\u0c4a\u0003\u0002\u0002\u0002\u0c4b\u0c4c",
    "\u0003\u0002\u0002\u0002\u0c4c\u0c50\u0003\u0002\u0002\u0002\u0c4d\u0c50",
    "\u0007\u00c9\u0002\u0002\u0c4e\u0c50\u0007\u00f4\u0002\u0002\u0c4f\u0c49",
    "\u0003\u0002\u0002\u0002\u0c4f\u0c4d\u0003\u0002\u0002\u0002\u0c4f\u0c4e",
    "\u0003\u0002\u0002\u0002\u0c50\u0c51\u0003\u0002\u0002\u0002\u0c51\u0c52",
    "\u0005\u0168\u00b5\u0002\u0c52\u016b\u0003\u0002\u0002\u0002\u0c53\u0c55",
    "\u0007\u017a\u0002\u0002\u0c54\u0c56\t&\u0002\u0002\u0c55\u0c54\u0003",
    "\u0002\u0002\u0002\u0c55\u0c56\u0003\u0002\u0002\u0002\u0c56\u0c60\u0003",
    "\u0002\u0002\u0002\u0c57\u0c61\u0007\u0224\u0002\u0002\u0c58\u0c5d\u0005",
    "\u016e\u00b8\u0002\u0c59\u0c5a\u0007\u0227\u0002\u0002\u0c5a\u0c5c\u0005",
    "\u016e\u00b8\u0002\u0c5b\u0c59\u0003\u0002\u0002\u0002\u0c5c\u0c5f\u0003",
    "\u0002\u0002\u0002\u0c5d\u0c5b\u0003\u0002\u0002\u0002\u0c5d\u0c5e\u0003",
    "\u0002\u0002\u0002\u0c5e\u0c61\u0003\u0002\u0002\u0002\u0c5f\u0c5d\u0003",
    "\u0002\u0002\u0002\u0c60\u0c57\u0003\u0002\u0002\u0002\u0c60\u0c58\u0003",
    "\u0002\u0002\u0002\u0c61\u0c63\u0003\u0002\u0002\u0002\u0c62\u0c64\u0005",
    "\u028e\u0148\u0002\u0c63\u0c62\u0003\u0002\u0002\u0002\u0c63\u0c64\u0003",
    "\u0002\u0002\u0002\u0c64\u0c65\u0003\u0002\u0002\u0002\u0c65\u0c67\u0005",
    "\u0170\u00b9\u0002\u0c66\u0c68\u0005\u028c\u0147\u0002\u0c67\u0c66\u0003",
    "\u0002\u0002\u0002\u0c67\u0c68\u0003\u0002\u0002\u0002\u0c68\u0c6a\u0003",
    "\u0002\u0002\u0002\u0c69\u0c6b\u0005\u019a\u00ce\u0002\u0c6a\u0c69\u0003",
    "\u0002\u0002\u0002\u0c6a\u0c6b\u0003\u0002\u0002\u0002\u0c6b\u0c6d\u0003",
    "\u0002\u0002\u0002\u0c6c\u0c6e\u0005\u019e\u00d0\u0002\u0c6d\u0c6c\u0003",
    "\u0002\u0002\u0002\u0c6d\u0c6e\u0003\u0002\u0002\u0002\u0c6e\u0c70\u0003",
    "\u0002\u0002\u0002\u0c6f\u0c71\u0005\u01aa\u00d6\u0002\u0c70\u0c6f\u0003",
    "\u0002\u0002\u0002\u0c70\u0c71\u0003\u0002\u0002\u0002\u0c71\u016d\u0003",
    "\u0002\u0002\u0002\u0c72\u0c74\u0005\u0172\u00ba\u0002\u0c73\u0c75\u0005",
    "\u0288\u0145\u0002\u0c74\u0c73\u0003\u0002\u0002\u0002\u0c74\u0c75\u0003",
    "\u0002\u0002\u0002\u0c75\u016f\u0003\u0002\u0002\u0002\u0c76\u0c77\u0007",
    "\u00a5\u0002\u0002\u0c77\u0c78\u0005\u0174\u00bb\u0002\u0c78\u0171\u0003",
    "\u0002\u0002\u0002\u0c79\u0c7a\u0005\u02cc\u0167\u0002\u0c7a\u0c7b\u0007",
    "\u021a\u0002\u0002\u0c7b\u0c7c\u0007\u0224\u0002\u0002\u0c7c\u0c84\u0003",
    "\u0002\u0002\u0002\u0c7d\u0c7e\u0005\u02fe\u0180\u0002\u0c7e\u0c7f\u0007",
    "\u021a\u0002\u0002\u0c7f\u0c81\u0003\u0002\u0002\u0002\u0c80\u0c7d\u0003",
    "\u0002\u0002\u0002\u0c80\u0c81\u0003\u0002\u0002\u0002\u0c81\u0c82\u0003",
    "\u0002\u0002\u0002\u0c82\u0c84\u0005\u0218\u010d\u0002\u0c83\u0c79\u0003",
    "\u0002\u0002\u0002\u0c83\u0c80\u0003\u0002\u0002\u0002\u0c84\u0173\u0003",
    "\u0002\u0002\u0002\u0c85\u0c8a\u0005\u0176\u00bc\u0002\u0c86\u0c87\u0007",
    "\u0227\u0002\u0002\u0c87\u0c89\u0005\u0176\u00bc\u0002\u0c88\u0c86\u0003",
    "\u0002\u0002\u0002\u0c89\u0c8c\u0003\u0002\u0002\u0002\u0c8a\u0c88\u0003",
    "\u0002\u0002\u0002\u0c8a\u0c8b\u0003\u0002\u0002\u0002\u0c8b\u0175\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c8a\u0003\u0002\u0002\u0002\u0c8d\u0c91\u0005",
    "\u0178\u00bd\u0002\u0c8e\u0c90\u0005\u017c\u00bf\u0002\u0c8f\u0c8e\u0003",
    "\u0002\u0002\u0002\u0c90\u0c93\u0003\u0002\u0002\u0002\u0c91\u0c8f\u0003",
    "\u0002\u0002\u0002\u0c91\u0c92\u0003\u0002\u0002\u0002\u0c92\u0c96\u0003",
    "\u0002\u0002\u0002\u0c93\u0c91\u0003\u0002\u0002\u0002\u0c94\u0c97\u0005",
    "\u0188\u00c5\u0002\u0c95\u0c97\u0005\u0194\u00cb\u0002\u0c96\u0c94\u0003",
    "\u0002\u0002\u0002\u0c96\u0c95\u0003\u0002\u0002\u0002\u0c96\u0c97\u0003",
    "\u0002\u0002\u0002\u0c97\u0177\u0003\u0002\u0002\u0002\u0c98\u0c9c\u0005",
    "\u017a\u00be\u0002\u0c99\u0c9b\u0005\u0186\u00c4\u0002\u0c9a\u0c99\u0003",
    "\u0002\u0002\u0002\u0c9b\u0c9e\u0003\u0002\u0002\u0002\u0c9c\u0c9a\u0003",
    "\u0002\u0002\u0002\u0c9c\u0c9d\u0003\u0002\u0002\u0002\u0c9d\u0ca0\u0003",
    "\u0002\u0002\u0002\u0c9e\u0c9c\u0003\u0002\u0002\u0002\u0c9f\u0ca1\u0005",
    "\u028a\u0146\u0002\u0ca0\u0c9f\u0003\u0002\u0002\u0002\u0ca0\u0ca1\u0003",
    "\u0002\u0002\u0002\u0ca1\u0179\u0003\u0002\u0002\u0002\u0ca2\u0ca5\u0005",
    "\u020a\u0106\u0002\u0ca3\u0ca6\u0005\u0188\u00c5\u0002\u0ca4\u0ca6\u0005",
    "\u0194\u00cb\u0002\u0ca5\u0ca3\u0003\u0002\u0002\u0002\u0ca5\u0ca4\u0003",
    "\u0002\u0002\u0002\u0ca5\u0ca6\u0003\u0002\u0002\u0002\u0ca6\u0cba\u0003",
    "\u0002\u0002\u0002\u0ca7\u0ca8\u0007\u0221\u0002\u0002\u0ca8\u0cac\u0005",
    "\u0176\u00bc\u0002\u0ca9\u0cab\u0005\u016a\u00b6\u0002\u0caa\u0ca9\u0003",
    "\u0002\u0002\u0002\u0cab\u0cae\u0003\u0002\u0002\u0002\u0cac\u0caa\u0003",
    "\u0002\u0002\u0002\u0cac\u0cad\u0003\u0002\u0002\u0002\u0cad\u0caf\u0003",
    "\u0002\u0002\u0002\u0cae\u0cac\u0003\u0002\u0002\u0002\u0caf\u0cb2\u0007",
    "\u0222\u0002\u0002\u0cb0\u0cb3\u0005\u0188\u00c5\u0002\u0cb1\u0cb3\u0005",
    "\u0194\u00cb\u0002\u0cb2\u0cb0\u0003\u0002\u0002\u0002\u0cb2\u0cb1\u0003",
    "\u0002\u0002\u0002\u0cb2\u0cb3\u0003\u0002\u0002\u0002\u0cb3\u0cba\u0003",
    "\u0002\u0002\u0002\u0cb4\u0cb5\u0007\u0122\u0002\u0002\u0cb5\u0cb6\u0007",
    "\u0221\u0002\u0002\u0cb6\u0cb7\u0005\u020a\u0106\u0002\u0cb7\u0cb8\u0007",
    "\u0222\u0002\u0002\u0cb8\u0cba\u0003\u0002\u0002\u0002\u0cb9\u0ca2\u0003",
    "\u0002\u0002\u0002\u0cb9\u0ca7\u0003\u0002\u0002\u0002\u0cb9\u0cb4\u0003",
    "\u0002\u0002\u0002\u0cba\u017b\u0003\u0002\u0002\u0002\u0cbb\u0cbd\u0005",
    "\u0184\u00c3\u0002\u0cbc\u0cbb\u0003\u0002\u0002\u0002\u0cbc\u0cbd\u0003",
    "\u0002\u0002\u0002\u0cbd\u0cbf\u0003\u0002\u0002\u0002\u0cbe\u0cc0\t",
    "\'\u0002\u0002\u0cbf\u0cbe\u0003\u0002\u0002\u0002\u0cbf\u0cc0\u0003",
    "\u0002\u0002\u0002\u0cc0\u0cc3\u0003\u0002\u0002\u0002\u0cc1\u0cc4\u0007",
    "\u00c3\u0002\u0002\u0cc2\u0cc4\u0005\u0182\u00c2\u0002\u0cc3\u0cc1\u0003",
    "\u0002\u0002\u0002\u0cc3\u0cc2\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0003",
    "\u0002\u0002\u0002\u0cc4\u0cc5\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0007",
    "\u00d2\u0002\u0002\u0cc6\u0cc8\u0005\u0178\u00bd\u0002\u0cc7\u0cc9\u0005",
    "\u0184\u00c3\u0002\u0cc8\u0cc7\u0003\u0002\u0002\u0002\u0cc8\u0cc9\u0003",
    "\u0002\u0002\u0002\u0cc9\u0cce\u0003\u0002\u0002\u0002\u0cca\u0ccd\u0005",
    "\u017e\u00c0\u0002\u0ccb\u0ccd\u0005\u0180\u00c1\u0002\u0ccc\u0cca\u0003",
    "\u0002\u0002\u0002\u0ccc\u0ccb\u0003\u0002\u0002\u0002\u0ccd\u0cd0\u0003",
    "\u0002\u0002\u0002\u0cce\u0ccc\u0003\u0002\u0002\u0002\u0cce\u0ccf\u0003",
    "\u0002\u0002\u0002\u0ccf\u017d\u0003\u0002\u0002\u0002\u0cd0\u0cce\u0003",
    "\u0002\u0002\u0002\u0cd1\u0cd2\u0007\u0123\u0002\u0002\u0cd2\u0cd3\u0005",
    "\u0214\u010b\u0002\u0cd3\u017f\u0003\u0002\u0002\u0002\u0cd4\u0cd5\u0007",
    "\u01c7\u0002\u0002\u0cd5\u0cd6\u0007\u0221\u0002\u0002\u0cd6\u0cdb\u0005",
    "\u02ca\u0166\u0002\u0cd7\u0cd8\u0007\u0227\u0002\u0002\u0cd8\u0cda\u0005",
    "\u02ca\u0166\u0002\u0cd9\u0cd7\u0003\u0002\u0002\u0002\u0cda\u0cdd\u0003",
    "\u0002\u0002\u0002\u0cdb\u0cd9\u0003\u0002\u0002\u0002\u0cdb\u0cdc\u0003",
    "\u0002\u0002\u0002\u0cdc\u0cde\u0003\u0002\u0002\u0002\u0cdd\u0cdb\u0003",
    "\u0002\u0002\u0002\u0cde\u0cdf\u0007\u0222\u0002\u0002\u0cdf\u0181\u0003",
    "\u0002\u0002\u0002\u0ce0\u0ce2\t(\u0002\u0002\u0ce1\u0ce3\u0007\u012c",
    "\u0002\u0002\u0ce2\u0ce1\u0003\u0002\u0002\u0002\u0ce2\u0ce3\u0003\u0002",
    "\u0002\u0002\u0ce3\u0183\u0003\u0002\u0002\u0002\u0ce4\u0ce5\u0007\u0134",
    "\u0002\u0002\u0ce5\u0ced\u0007*\u0002\u0002\u0ce6\u0ce9\u0007\u0221",
    "\u0002\u0002\u0ce7\u0cea\u0005\u0166\u00b4\u0002\u0ce8\u0cea\u0005\u0216",
    "\u010c\u0002\u0ce9\u0ce7\u0003\u0002\u0002\u0002\u0ce9\u0ce8\u0003\u0002",
    "\u0002\u0002\u0ce9\u0cea\u0003\u0002\u0002\u0002\u0cea\u0ceb\u0003\u0002",
    "\u0002\u0002\u0ceb\u0cee\u0007\u0222\u0002\u0002\u0cec\u0cee\u0005\u0216",
    "\u010c\u0002\u0ced\u0ce6\u0003\u0002\u0002\u0002\u0ced\u0cec\u0003\u0002",
    "\u0002\u0002\u0cee\u0185\u0003\u0002\u0002\u0002\u0cef\u0cf0\u0007\u01d0",
    "\u0002\u0002\u0cf0\u0cf1\u0007\u001d\u0002\u0002\u0cf1\u0cf2\t)\u0002",
    "\u0002\u0cf2\u0cf8\u0005\u0218\u010d\u0002\u0cf3\u0cf4\u0007\u000f\u0002",
    "\u0002\u0cf4\u0cf5\u0007\u011e\u0002\u0002\u0cf5\u0cf6\t*\u0002\u0002",
    "\u0cf6\u0cf8\u0005\u0218\u010d\u0002\u0cf7\u0cef\u0003\u0002\u0002\u0002",
    "\u0cf7\u0cf3\u0003\u0002\u0002\u0002\u0cf8\u0187\u0003\u0002\u0002\u0002",
    "\u0cf9\u0cfb\u0007\u0142\u0002\u0002\u0cfa\u0cfc\u0007\u01eb\u0002\u0002",
    "\u0cfb\u0cfa\u0003\u0002\u0002\u0002\u0cfb\u0cfc\u0003\u0002\u0002\u0002",
    "\u0cfc\u0cfd\u0003\u0002\u0002\u0002\u0cfd\u0cfe\u0007\u0221\u0002\u0002",
    "\u0cfe\u0d03\u0005\u018a\u00c6\u0002\u0cff\u0d00\u0007\u0227\u0002\u0002",
    "\u0d00\u0d02\u0005\u018a\u00c6\u0002\u0d01\u0cff\u0003\u0002\u0002\u0002",
    "\u0d02\u0d05\u0003\u0002\u0002\u0002\u0d03\u0d01\u0003\u0002\u0002\u0002",
    "\u0d03\u0d04\u0003\u0002\u0002\u0002\u0d04\u0d06\u0003\u0002\u0002\u0002",
    "\u0d05\u0d03\u0003\u0002\u0002\u0002\u0d06\u0d07\u0005\u018c\u00c7\u0002",
    "\u0d07\u0d08\u0005\u018e\u00c8\u0002\u0d08\u0d09\u0007\u0222\u0002\u0002",
    "\u0d09\u0189\u0003\u0002\u0002\u0002\u0d0a\u0d0b\u0005\u02aa\u0156\u0002",
    "\u0d0b\u0d0c\u0007\u0221\u0002\u0002\u0d0c\u0d0d\u0005\u0218\u010d\u0002",
    "\u0d0d\u0d0f\u0007\u0222\u0002\u0002\u0d0e\u0d10\u0005\u0288\u0145\u0002",
    "\u0d0f\u0d0e\u0003\u0002\u0002\u0002\u0d0f\u0d10\u0003\u0002\u0002\u0002",
    "\u0d10\u018b\u0003\u0002\u0002\u0002\u0d11\u0d1e\u0007\u00a2\u0002\u0002",
    "\u0d12\u0d1f\u0005\u02ca\u0166\u0002\u0d13\u0d14\u0007\u0221\u0002\u0002",
    "\u0d14\u0d19\u0005\u02ca\u0166\u0002\u0d15\u0d16\u0007\u0227\u0002\u0002",
    "\u0d16\u0d18\u0005\u02ca\u0166\u0002\u0d17\u0d15\u0003\u0002\u0002\u0002",
    "\u0d18\u0d1b\u0003\u0002\u0002\u0002\u0d19\u0d17\u0003\u0002\u0002\u0002",
    "\u0d19\u0d1a\u0003\u0002\u0002\u0002\u0d1a\u0d1c\u0003\u0002\u0002\u0002",
    "\u0d1b\u0d19\u0003\u0002\u0002\u0002\u0d1c\u0d1d\u0007\u0222\u0002\u0002",
    "\u0d1d\u0d1f\u0003\u0002\u0002\u0002\u0d1e\u0d12\u0003\u0002\u0002\u0002",
    "\u0d1e\u0d13\u0003\u0002\u0002\u0002\u0d1f\u018d\u0003\u0002\u0002\u0002",
    "\u0d20\u0d21\u0007\u00bf\u0002\u0002\u0d21\u0d33\u0007\u0221\u0002\u0002",
    "\u0d22\u0d34\u0005\u0166\u00b4\u0002\u0d23\u0d28\u0007\f\u0002\u0002",
    "\u0d24\u0d25\u0007\u0227\u0002\u0002\u0d25\u0d27\u0007\f\u0002\u0002",
    "\u0d26\u0d24\u0003\u0002\u0002\u0002\u0d27\u0d2a\u0003\u0002\u0002\u0002",
    "\u0d28\u0d26\u0003\u0002\u0002\u0002\u0d28\u0d29\u0003\u0002\u0002\u0002",
    "\u0d29\u0d34\u0003\u0002\u0002\u0002\u0d2a\u0d28\u0003\u0002\u0002\u0002",
    "\u0d2b\u0d30\u0005\u0190\u00c9\u0002\u0d2c\u0d2d\u0007\u0227\u0002\u0002",
    "\u0d2d\u0d2f\u0005\u0190\u00c9\u0002\u0d2e\u0d2c\u0003\u0002\u0002\u0002",
    "\u0d2f\u0d32\u0003\u0002\u0002\u0002\u0d30\u0d2e\u0003\u0002\u0002\u0002",
    "\u0d30\u0d31\u0003\u0002\u0002\u0002\u0d31\u0d34\u0003\u0002\u0002\u0002",
    "\u0d32\u0d30\u0003\u0002\u0002\u0002\u0d33\u0d22\u0003\u0002\u0002\u0002",
    "\u0d33\u0d23\u0003\u0002\u0002\u0002\u0d33\u0d2b\u0003\u0002\u0002\u0002",
    "\u0d34\u0d35\u0003\u0002\u0002\u0002\u0d35\u0d36\u0007\u0222\u0002\u0002",
    "\u0d36\u018f\u0003\u0002\u0002\u0002\u0d37\u0d39\u0005\u0192\u00ca\u0002",
    "\u0d38\u0d3a\u0005\u0288\u0145\u0002\u0d39\u0d38\u0003\u0002\u0002\u0002",
    "\u0d39\u0d3a\u0003\u0002\u0002\u0002\u0d3a\u0191\u0003\u0002\u0002\u0002",
    "\u0d3b\u0d42\u0005\u0218\u010d\u0002\u0d3c\u0d3e\u0007\u0221\u0002\u0002",
    "\u0d3d\u0d3f\u0005\u0216\u010c\u0002\u0d3e\u0d3d\u0003\u0002\u0002\u0002",
    "\u0d3e\u0d3f\u0003\u0002\u0002\u0002\u0d3f\u0d40\u0003\u0002\u0002\u0002",
    "\u0d40\u0d42\u0007\u0222\u0002\u0002\u0d41\u0d3b\u0003\u0002\u0002\u0002",
    "\u0d41\u0d3c\u0003\u0002\u0002\u0002\u0d42\u0193\u0003\u0002\u0002\u0002",
    "\u0d43\u0d46\u0007\u01c0\u0002\u0002\u0d44\u0d45\t+\u0002\u0002\u0d45",
    "\u0d47\u0007\u0118\u0002\u0002\u0d46\u0d44\u0003\u0002\u0002\u0002\u0d46",
    "\u0d47\u0003\u0002\u0002\u0002\u0d47\u0d48\u0003\u0002\u0002\u0002\u0d48",
    "\u0d55\u0007\u0221\u0002\u0002\u0d49\u0d56\u0005\u02ca\u0166\u0002\u0d4a",
    "\u0d4b\u0007\u0221\u0002\u0002\u0d4b\u0d50\u0005\u02ca\u0166\u0002\u0d4c",
    "\u0d4d\u0007\u0227\u0002\u0002\u0d4d\u0d4f\u0005\u02ca\u0166\u0002\u0d4e",
    "\u0d4c\u0003\u0002\u0002\u0002\u0d4f\u0d52\u0003\u0002\u0002\u0002\u0d50",
    "\u0d4e\u0003\u0002\u0002\u0002\u0d50\u0d51\u0003\u0002\u0002\u0002\u0d51",
    "\u0d53\u0003\u0002\u0002\u0002\u0d52\u0d50\u0003\u0002\u0002\u0002\u0d53",
    "\u0d54\u0007\u0222\u0002\u0002\u0d54\u0d56\u0003\u0002\u0002\u0002\u0d55",
    "\u0d49\u0003\u0002\u0002\u0002\u0d55\u0d4a\u0003\u0002\u0002\u0002\u0d56",
    "\u0d57\u0003\u0002\u0002\u0002\u0d57\u0d58\u0005\u018c\u00c7\u0002\u0d58",
    "\u0d59\u0005\u0196\u00cc\u0002\u0d59\u0d5a\u0007\u0222\u0002\u0002\u0d5a",
    "\u0195\u0003\u0002\u0002\u0002\u0d5b\u0d5c\u0007\u00bf\u0002\u0002\u0d5c",
    "\u0d5d\u0007\u0221\u0002\u0002\u0d5d\u0d62\u0005\u0198\u00cd\u0002\u0d5e",
    "\u0d5f\u0007\u0227\u0002\u0002\u0d5f\u0d61\u0005\u0198\u00cd\u0002\u0d60",
    "\u0d5e\u0003\u0002\u0002\u0002\u0d61\u0d64\u0003\u0002\u0002\u0002\u0d62",
    "\u0d60\u0003\u0002\u0002\u0002\u0d62\u0d63\u0003\u0002\u0002\u0002\u0d63",
    "\u0d65\u0003\u0002\u0002\u0002\u0d64\u0d62\u0003\u0002\u0002\u0002\u0d65",
    "\u0d66\u0007\u0222\u0002\u0002\u0d66\u0197\u0003\u0002\u0002\u0002\u0d67",
    "\u0d74\u0005\u02ca\u0166\u0002\u0d68\u0d69\u0007\u0221\u0002\u0002\u0d69",
    "\u0d6e\u0005\u02ca\u0166\u0002\u0d6a\u0d6b\u0007\u0227\u0002\u0002\u0d6b",
    "\u0d6d\u0005\u02ca\u0166\u0002\u0d6c\u0d6a\u0003\u0002\u0002\u0002\u0d6d",
    "\u0d70\u0003\u0002\u0002\u0002\u0d6e\u0d6c\u0003\u0002\u0002\u0002\u0d6e",
    "\u0d6f\u0003\u0002\u0002\u0002\u0d6f\u0d71\u0003\u0002\u0002\u0002\u0d70",
    "\u0d6e\u0003\u0002\u0002\u0002\u0d71\u0d72\u0007\u0222\u0002\u0002\u0d72",
    "\u0d74\u0003\u0002\u0002\u0002\u0d73\u0d67\u0003\u0002\u0002\u0002\u0d73",
    "\u0d68\u0003\u0002\u0002\u0002\u0d74\u0d84\u0003\u0002\u0002\u0002\u0d75",
    "\u0d82\u0007\u000f\u0002\u0002\u0d76\u0d83\u0005\u02f0\u0179\u0002\u0d77",
    "\u0d78\u0007\u0221\u0002\u0002\u0d78\u0d7d\u0005\u02f0\u0179\u0002\u0d79",
    "\u0d7a\u0007\u0227\u0002\u0002\u0d7a\u0d7c\u0005\u02f0\u0179\u0002\u0d7b",
    "\u0d79\u0003\u0002\u0002\u0002\u0d7c\u0d7f\u0003\u0002\u0002\u0002\u0d7d",
    "\u0d7b\u0003\u0002\u0002\u0002\u0d7d\u0d7e\u0003\u0002\u0002\u0002\u0d7e",
    "\u0d80\u0003\u0002\u0002\u0002\u0d7f\u0d7d\u0003\u0002\u0002\u0002\u0d80",
    "\u0d81\u0007\u0222\u0002\u0002\u0d81\u0d83\u0003\u0002\u0002\u0002\u0d82",
    "\u0d76\u0003\u0002\u0002\u0002\u0d82\u0d77\u0003\u0002\u0002\u0002\u0d83",
    "\u0d85\u0003\u0002\u0002\u0002\u0d84\u0d75\u0003\u0002\u0002\u0002\u0d84",
    "\u0d85\u0003\u0002\u0002\u0002\u0d85\u0199\u0003\u0002\u0002\u0002\u0d86",
    "\u0d87\u0007H\u0002\u0002\u0d87\u0d89\u0007*\u0002\u0002\u0d88\u0d8a",
    "\u0007\u010c\u0002\u0002\u0d89\u0d88\u0003\u0002\u0002\u0002\u0d89\u0d8a",
    "\u0003\u0002\u0002\u0002\u0d8a\u0d8b\u0003\u0002\u0002\u0002\u0d8b\u0d8d",
    "\u0005\u0214\u010b\u0002\u0d8c\u0d8e\u0005\u019c\u00cf\u0002\u0d8d\u0d8c",
    "\u0003\u0002\u0002\u0002\u0d8d\u0d8e\u0003\u0002\u0002\u0002\u0d8e\u0d98",
    "\u0003\u0002\u0002\u0002\u0d8f\u0d90\u0005\u019c\u00cf\u0002\u0d90\u0d91",
    "\u0007H\u0002\u0002\u0d91\u0d93\u0007*\u0002\u0002\u0d92\u0d94\u0007",
    "\u010c\u0002\u0002\u0d93\u0d92\u0003\u0002\u0002\u0002\u0d93\u0d94\u0003",
    "\u0002\u0002\u0002\u0d94\u0d95\u0003\u0002\u0002\u0002\u0d95\u0d96\u0005",
    "\u0214\u010b\u0002\u0d96\u0d98\u0003\u0002\u0002\u0002\u0d97\u0d86\u0003",
    "\u0002\u0002\u0002\u0d97\u0d8f\u0003\u0002\u0002\u0002\u0d98\u019b\u0003",
    "\u0002\u0002\u0002\u0d99\u0d9a\u0007\u0195\u0002\u0002\u0d9a\u0d9b\u0007",
    "\u01da\u0002\u0002\u0d9b\u0d9c\u0005\u0214\u010b\u0002\u0d9c\u019d\u0003",
    "\u0002\u0002\u0002\u0d9d\u0d9e\u0007\u00ab\u0002\u0002\u0d9e\u0d9f\u0007",
    "*\u0002\u0002\u0d9f\u0da4\u0005\u01a0\u00d1\u0002\u0da0\u0da1\u0007",
    "\u0227\u0002\u0002\u0da1\u0da3\u0005\u01a0\u00d1\u0002\u0da2\u0da0\u0003",
    "\u0002\u0002\u0002\u0da3\u0da6\u0003\u0002\u0002\u0002\u0da4\u0da2\u0003",
    "\u0002\u0002\u0002\u0da4\u0da5\u0003\u0002\u0002\u0002\u0da5\u0da8\u0003",
    "\u0002\u0002\u0002\u0da6\u0da4\u0003\u0002\u0002\u0002\u0da7\u0da9\u0005",
    "\u01a8\u00d5\u0002\u0da8\u0da7\u0003\u0002\u0002\u0002\u0da8\u0da9\u0003",
    "\u0002\u0002\u0002\u0da9\u0db8\u0003\u0002\u0002\u0002\u0daa\u0db5\u0005",
    "\u01a8\u00d5\u0002\u0dab\u0dac\u0007\u00ab\u0002\u0002\u0dac\u0dad\u0007",
    "*\u0002\u0002\u0dad\u0db2\u0005\u01a0\u00d1\u0002\u0dae\u0daf\u0007",
    "\u0227\u0002\u0002\u0daf\u0db1\u0005\u01a0\u00d1\u0002\u0db0\u0dae\u0003",
    "\u0002\u0002\u0002\u0db1\u0db4\u0003\u0002\u0002\u0002\u0db2\u0db0\u0003",
    "\u0002\u0002\u0002\u0db2\u0db3\u0003\u0002\u0002\u0002\u0db3\u0db6\u0003",
    "\u0002\u0002\u0002\u0db4\u0db2\u0003\u0002\u0002\u0002\u0db5\u0dab\u0003",
    "\u0002\u0002\u0002\u0db5\u0db6\u0003\u0002\u0002\u0002\u0db6\u0db8\u0003",
    "\u0002\u0002\u0002\u0db7\u0d9d\u0003\u0002\u0002\u0002\u0db7\u0daa\u0003",
    "\u0002\u0002\u0002\u0db8\u019f\u0003\u0002\u0002\u0002\u0db9\u0dbd\u0005",
    "\u01a4\u00d3\u0002\u0dba\u0dbd\u0005\u01a2\u00d2\u0002\u0dbb\u0dbd\u0005",
    "\u0218\u010d\u0002\u0dbc\u0db9\u0003\u0002\u0002\u0002\u0dbc\u0dba\u0003",
    "\u0002\u0002\u0002\u0dbc\u0dbb\u0003\u0002\u0002\u0002\u0dbd\u01a1\u0003",
    "\u0002\u0002\u0002\u0dbe\u0dbf\t,\u0002\u0002\u0dbf\u0dc0\u0007\u0221",
    "\u0002\u0002\u0dc0\u0dc5\u0005\u01a6\u00d4\u0002\u0dc1\u0dc2\u0007\u0227",
    "\u0002\u0002\u0dc2\u0dc4\u0005\u01a6\u00d4\u0002\u0dc3\u0dc1\u0003\u0002",
    "\u0002\u0002\u0dc4\u0dc7\u0003\u0002\u0002\u0002\u0dc5\u0dc3\u0003\u0002",
    "\u0002\u0002\u0dc5\u0dc6\u0003\u0002\u0002\u0002\u0dc6\u0dc8\u0003\u0002",
    "\u0002\u0002\u0dc7\u0dc5\u0003\u0002\u0002\u0002\u0dc8\u0dc9\u0007\u0222",
    "\u0002\u0002\u0dc9\u01a3\u0003\u0002\u0002\u0002\u0dca\u0dcb\u0007\u00ac",
    "\u0002\u0002\u0dcb\u0dcc\u0007\u0183\u0002\u0002\u0dcc\u0dcd\u0007\u0221",
    "\u0002\u0002\u0dcd\u0dd2\u0005\u01a6\u00d4\u0002\u0dce\u0dcf\u0007\u0227",
    "\u0002\u0002\u0dcf\u0dd1\u0005\u01a6\u00d4\u0002\u0dd0\u0dce\u0003\u0002",
    "\u0002\u0002\u0dd1\u0dd4\u0003\u0002\u0002\u0002\u0dd2\u0dd0\u0003\u0002",
    "\u0002\u0002\u0dd2\u0dd3\u0003\u0002\u0002\u0002\u0dd3\u0dd5\u0003\u0002",
    "\u0002\u0002\u0dd4\u0dd2\u0003\u0002\u0002\u0002\u0dd5\u0dd6\u0007\u0222",
    "\u0002\u0002\u0dd6\u01a5\u0003\u0002\u0002\u0002\u0dd7\u0ddf\u0005\u01a2",
    "\u00d2\u0002\u0dd8\u0dda\u0007\u0221\u0002\u0002\u0dd9\u0ddb\u0005\u0216",
    "\u010c\u0002\u0dda\u0dd9\u0003\u0002\u0002\u0002\u0dda\u0ddb\u0003\u0002",
    "\u0002\u0002\u0ddb\u0ddc\u0003\u0002\u0002\u0002\u0ddc\u0ddf\u0007\u0222",
    "\u0002\u0002\u0ddd\u0ddf\u0005\u0218\u010d\u0002\u0dde\u0dd7\u0003\u0002",
    "\u0002\u0002\u0dde\u0dd8\u0003\u0002\u0002\u0002\u0dde\u0ddd\u0003\u0002",
    "\u0002\u0002\u0ddf\u01a7\u0003\u0002\u0002\u0002\u0de0\u0de1\u0007\u00af",
    "\u0002\u0002\u0de1\u0de2\u0005\u0214\u010b\u0002\u0de2\u01a9\u0003\u0002",
    "\u0002\u0002\u0de3\u0de7\u0007\u00f8\u0002\u0002\u0de4\u0de6\u0005\u01ac",
    "\u00d7\u0002\u0de5\u0de4\u0003\u0002\u0002\u0002\u0de6\u0de9\u0003\u0002",
    "\u0002\u0002\u0de7\u0de5\u0003\u0002\u0002\u0002\u0de7\u0de8\u0003\u0002",
    "\u0002\u0002\u0de8\u0deb\u0003\u0002\u0002\u0002\u0de9\u0de7\u0003\u0002",
    "\u0002\u0002\u0dea\u0dec\u0005\u01ae\u00d8\u0002\u0deb\u0dea\u0003\u0002",
    "\u0002\u0002\u0deb\u0dec\u0003\u0002\u0002\u0002\u0dec\u0df0\u0003\u0002",
    "\u0002\u0002\u0ded\u0def\u0005\u01b0\u00d9\u0002\u0dee\u0ded\u0003\u0002",
    "\u0002\u0002\u0def\u0df2\u0003\u0002\u0002\u0002\u0df0\u0dee\u0003\u0002",
    "\u0002\u0002\u0df0\u0df1\u0003\u0002\u0002\u0002\u0df1\u0df3\u0003\u0002",
    "\u0002\u0002\u0df2\u0df0\u0003\u0002\u0002\u0002\u0df3\u0df4\u0005\u01b2",
    "\u00da\u0002\u0df4\u01ab\u0003\u0002\u0002\u0002\u0df5\u0df6\t-\u0002",
    "\u0002\u0df6\u0dfe\u0007\u0101\u0002\u0002\u0df7\u0dfb\u0007\u01be\u0002",
    "\u0002\u0df8\u0dfc\u0007s\u0002\u0002\u0df9\u0dfa\u0007\u018b\u0002",
    "\u0002\u0dfa\u0dfc\u0007\u0158\u0002\u0002\u0dfb\u0df8\u0003\u0002\u0002",
    "\u0002\u0dfb\u0df9\u0003\u0002\u0002\u0002\u0dfc\u0dfe\u0003\u0002\u0002",
    "\u0002\u0dfd\u0df5\u0003\u0002\u0002\u0002\u0dfd\u0df7\u0003\u0002\u0002",
    "\u0002\u0dfe\u01ad\u0003\u0002\u0002\u0002\u0dff\u0e00\u0007\u0165\u0002",
    "\u0002\u0e00\u0e01\t.\u0002\u0002\u0e01\u0e02\u0007\u016e\u0002\u0002",
    "\u0e02\u01af\u0003\u0002\u0002\u0002\u0e03\u0e04\u0007\u0158\u0002\u0002",
    "\u0e04\u0e05\u0005\u02a6\u0154\u0002\u0e05\u0e06\u0007\u0123\u0002\u0002",
    "\u0e06\u0e07\u0007\u0221\u0002\u0002\u0e07\u0e08\u0005\u0166\u00b4\u0002",
    "\u0e08\u0e09\u0007\u0222\u0002\u0002\u0e09\u0e0d\u0005\u01b4\u00db\u0002",
    "\u0e0a\u0e0c\u0005\u01ac\u00d7\u0002\u0e0b\u0e0a\u0003\u0002\u0002\u0002",
    "\u0e0c\u0e0f\u0003\u0002\u0002\u0002\u0e0d\u0e0b\u0003\u0002\u0002\u0002",
    "\u0e0d\u0e0e\u0003\u0002\u0002\u0002\u0e0e\u01b1\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e0d\u0003\u0002\u0002\u0002\u0e10\u0e11\u0007\u00ec\u0002\u0002",
    "\u0e11\u0e13\u0005\u02a8\u0155\u0002\u0e12\u0e10\u0003\u0002\u0002\u0002",
    "\u0e12\u0e13\u0003\u0002\u0002\u0002\u0e13\u0e14\u0003\u0002\u0002\u0002",
    "\u0e14\u0e18\u0005\u01b4\u00db\u0002\u0e15\u0e17\u0005\u01ac\u00d7\u0002",
    "\u0e16\u0e15\u0003\u0002\u0002\u0002\u0e17\u0e1a\u0003\u0002\u0002\u0002",
    "\u0e18\u0e16\u0003\u0002\u0002\u0002\u0e18\u0e19\u0003\u0002\u0002\u0002",
    "\u0e19\u0e1b\u0003\u0002\u0002\u0002\u0e1a\u0e18\u0003\u0002\u0002\u0002",
    "\u0e1b\u0e1c\u0005\u01bc\u00df\u0002\u0e1c\u01b3\u0003\u0002\u0002\u0002",
    "\u0e1d\u0e1f\u0005\u01b6\u00dc\u0002\u0e1e\u0e1d\u0003\u0002\u0002\u0002",
    "\u0e1e\u0e1f\u0003\u0002\u0002\u0002\u0e1f\u0e20\u0003\u0002\u0002\u0002",
    "\u0e20\u0e21\u0007s\u0002\u0002\u0e21\u0e22\u0007*\u0002\u0002\u0e22",
    "\u0e23\u0005\u01b8\u00dd\u0002\u0e23\u0e24\u0007\u00f0\u0002\u0002\u0e24",
    "\u0e25\u0005\u01b8\u00dd\u0002\u0e25\u01b5\u0003\u0002\u0002\u0002\u0e26",
    "\u0e27\u0007\u0134\u0002\u0002\u0e27\u0e28\u0007*\u0002\u0002\u0e28",
    "\u0e29\u0005\u01b8\u00dd\u0002\u0e29\u01b7\u0003\u0002\u0002\u0002\u0e2a",
    "\u0e2b\u0007\u0221\u0002\u0002\u0e2b\u0e30\u0005\u01ba\u00de\u0002\u0e2c",
    "\u0e2d\u0007\u0227\u0002\u0002\u0e2d\u0e2f\u0005\u01ba\u00de\u0002\u0e2e",
    "\u0e2c\u0003\u0002\u0002\u0002\u0e2f\u0e32\u0003\u0002\u0002\u0002\u0e30",
    "\u0e2e\u0003\u0002\u0002\u0002\u0e30\u0e31\u0003\u0002\u0002\u0002\u0e31",
    "\u0e33\u0003\u0002\u0002\u0002\u0e32\u0e30\u0003\u0002\u0002\u0002\u0e33",
    "\u0e34\u0007\u0222\u0002\u0002\u0e34\u01b9\u0003\u0002\u0002\u0002\u0e35",
    "\u0e38\u0005\u0218\u010d\u0002\u0e36\u0e38\u0005\u016c\u00b7\u0002\u0e37",
    "\u0e35\u0003\u0002\u0002\u0002\u0e37\u0e36\u0003\u0002\u0002\u0002\u0e38",
    "\u0e3a\u0003\u0002\u0002\u0002\u0e39\u0e3b\u0005\u0288\u0145\u0002\u0e3a",
    "\u0e39\u0003\u0002\u0002\u0002\u0e3a\u0e3b\u0003\u0002\u0002\u0002\u0e3b",
    "\u01bb\u0003\u0002\u0002\u0002\u0e3c\u0e3e\u0005\u01be\u00e0\u0002\u0e3d",
    "\u0e3c\u0003\u0002\u0002\u0002\u0e3d\u0e3e\u0003\u0002\u0002\u0002\u0e3e",
    "\u0e3f\u0003\u0002\u0002\u0002\u0e3f\u0e48\u0007\u0221\u0002\u0002\u0e40",
    "\u0e45\u0005\u01c0\u00e1\u0002\u0e41\u0e42\u0007\u0227\u0002\u0002\u0e42",
    "\u0e44\u0005\u01c0\u00e1\u0002\u0e43\u0e41\u0003\u0002\u0002\u0002\u0e44",
    "\u0e47\u0003\u0002\u0002\u0002\u0e45\u0e43\u0003\u0002\u0002\u0002\u0e45",
    "\u0e46\u0003\u0002\u0002\u0002\u0e46\u0e49\u0003\u0002\u0002\u0002\u0e47",
    "\u0e45\u0003\u0002\u0002\u0002\u0e48\u0e40\u0003\u0002\u0002\u0002\u0e48",
    "\u0e49\u0003\u0002\u0002\u0002\u0e49\u0e4a\u0003\u0002\u0002\u0002\u0e4a",
    "\u0e4b\u0007\u0222\u0002\u0002\u0e4b\u01bd\u0003\u0002\u0002\u0002\u0e4c",
    "\u0e52\u0007\u016f\u0002\u0002\u0e4d\u0e53\u0007\u01c3\u0002\u0002\u0e4e",
    "\u0e50\u0007\u01c4\u0002\u0002\u0e4f\u0e51\u0007\b\u0002\u0002\u0e50",
    "\u0e4f\u0003\u0002\u0002\u0002\u0e50\u0e51\u0003\u0002\u0002\u0002\u0e51",
    "\u0e53\u0003\u0002\u0002\u0002\u0e52\u0e4d\u0003\u0002\u0002\u0002\u0e52",
    "\u0e4e\u0003\u0002\u0002\u0002\u0e52\u0e53\u0003\u0002\u0002\u0002\u0e53",
    "\u0e56\u0003\u0002\u0002\u0002\u0e54\u0e55\t/\u0002\u0002\u0e55\u0e57",
    "\u0007\u0128\u0002\u0002\u0e56\u0e54\u0003\u0002\u0002\u0002\u0e56\u0e57",
    "\u0003\u0002\u0002\u0002\u0e57\u0e59\u0003\u0002\u0002\u0002\u0e58\u0e5a",
    "\u0005\u01c4\u00e3\u0002\u0e59\u0e58\u0003\u0002\u0002\u0002\u0e59\u0e5a",
    "\u0003\u0002\u0002\u0002\u0e5a\u01bf\u0003\u0002\u0002\u0002\u0e5b\u0e61",
    "\u0007\u01c3\u0002\u0002\u0e5c\u0e5e\u0007\u01c4\u0002\u0002\u0e5d\u0e5f",
    "\u0007\b\u0002\u0002\u0e5e\u0e5d\u0003\u0002\u0002\u0002\u0e5e\u0e5f",
    "\u0003\u0002\u0002\u0002\u0e5f\u0e61\u0003\u0002\u0002\u0002\u0e60\u0e5b",
    "\u0003\u0002\u0002\u0002\u0e60\u0e5c\u0003\u0002\u0002\u0002\u0e60\u0e61",
    "\u0003\u0002\u0002\u0002\u0e61\u0e62\u0003\u0002\u0002\u0002\u0e62\u0e64",
    "\u0005\u01c2\u00e2\u0002\u0e63\u0e65\u0005\u01c8\u00e5\u0002\u0e64\u0e63",
    "\u0003\u0002\u0002\u0002\u0e64\u0e65\u0003\u0002\u0002\u0002\u0e65\u0e66",
    "\u0003\u0002\u0002\u0002\u0e66\u0e67\u0007\u0235\u0002\u0002\u0e67\u0e68",
    "\u0005\u0218\u010d\u0002\u0e68\u01c1\u0003\u0002\u0002\u0002\u0e69\u0e6a",
    "\u0005\u022e\u0118\u0002\u0e6a\u01c3\u0003\u0002\u0002\u0002\u0e6b\u0e6c",
    "\u0007\u00d0\u0002\u0002\u0e6c\u0e6d\u0007\u0221\u0002\u0002\u0e6d\u0e6e",
    "\u0005\u0218\u010d\u0002\u0e6e\u0e70\u0007\u0222\u0002\u0002\u0e6f\u0e71",
    "\u0005\u01c6\u00e4\u0002\u0e70\u0e6f\u0003\u0002\u0002\u0002\u0e70\u0e71",
    "\u0003\u0002\u0002\u0002\u0e71\u01c5\u0003\u0002\u0002\u0002\u0e72\u0e73",
    "\u0007\u01c1\u0002\u0002\u0e73\u0e74\u0007\u0221\u0002\u0002\u0e74\u0e75",
    "\u0005\u0214\u010b\u0002\u0e75\u0e76\u0007\u0222\u0002\u0002\u0e76\u01c7",
    "\u0003\u0002\u0002\u0002\u0e77\u0e79\u0007\u0128\u0002\u0002\u0e78\u0e7a",
    "\u0007\u0188\u0002\u0002\u0e79\u0e78\u0003\u0002\u0002\u0002\u0e79\u0e7a",
    "\u0003\u0002\u0002\u0002\u0e7a\u0e7b\u0003\u0002\u0002\u0002\u0e7b\u0e7c",
    "\u0007*\u0002\u0002\u0e7c\u0e81\u0005\u01ca\u00e6\u0002\u0e7d\u0e7e",
    "\u0007\u0227\u0002\u0002\u0e7e\u0e80\u0005\u01ca\u00e6\u0002\u0e7f\u0e7d",
    "\u0003\u0002\u0002\u0002\u0e80\u0e83\u0003\u0002\u0002\u0002\u0e81\u0e7f",
    "\u0003\u0002\u0002\u0002\u0e81\u0e82\u0003\u0002\u0002\u0002\u0e82\u01c9",
    "\u0003\u0002\u0002\u0002\u0e83\u0e81\u0003\u0002\u0002\u0002\u0e84\u0e86",
    "\u0005\u0218\u010d\u0002\u0e85\u0e87\t0\u0002\u0002\u0e86\u0e85\u0003",
    "\u0002\u0002\u0002\u0e86\u0e87\u0003\u0002\u0002\u0002\u0e87\u0e8a\u0003",
    "\u0002\u0002\u0002\u0e88\u0e89\u0007\u0118\u0002\u0002\u0e89\u0e8b\t",
    "1\u0002\u0002\u0e8a\u0e88\u0003\u0002\u0002\u0002\u0e8a\u0e8b\u0003",
    "\u0002\u0002\u0002\u0e8b\u01cb\u0003\u0002\u0002\u0002\u0e8c\u0e8d\u0007",
    "\u00a2\u0002\u0002\u0e8d\u0e8f\u0007\u01c3\u0002\u0002\u0e8e\u0e90\u0005",
    "\u01ce\u00e8\u0002\u0e8f\u0e8e\u0003\u0002\u0002\u0002\u0e8f\u0e90\u0003",
    "\u0002\u0002\u0002\u0e90\u0e92\u0003\u0002\u0002\u0002\u0e91\u0e93\u0005",
    "\u01d0\u00e9\u0002\u0e92\u0e91\u0003\u0002\u0002\u0002\u0e92\u0e93\u0003",
    "\u0002\u0002\u0002\u0e93\u01cd\u0003\u0002\u0002\u0002\u0e94\u0e95\u0007",
    "\u011e\u0002\u0002\u0e95\u0e9a\u0005\u02ca\u0166\u0002\u0e96\u0e97\u0007",
    "\u0227\u0002\u0002\u0e97\u0e99\u0005\u02ca\u0166\u0002\u0e98\u0e96\u0003",
    "\u0002\u0002\u0002\u0e99\u0e9c\u0003\u0002\u0002\u0002\u0e9a\u0e98\u0003",
    "\u0002\u0002\u0002\u0e9a\u0e9b\u0003\u0002\u0002\u0002\u0e9b\u01cf\u0003",
    "\u0002\u0002\u0002\u0e9c\u0e9a\u0003\u0002\u0002\u0002\u0e9d\u0e9e\u0007",
    "\u018d\u0002\u0002\u0e9e\u0ea3\u0007\u00e3\u0002\u0002\u0e9f\u0ea3\u0007",
    "\u0116\u0002\u0002\u0ea0\u0ea1\u0007\u01d2\u0002\u0002\u0ea1\u0ea3\u0005",
    "\u0218\u010d\u0002\u0ea2\u0e9d\u0003\u0002\u0002\u0002\u0ea2\u0e9f\u0003",
    "\u0002\u0002\u0002\u0ea2\u0ea0\u0003\u0002\u0002\u0002\u0ea3\u01d1\u0003",
    "\u0002\u0002\u0002\u0ea4\u0ea5\u0007\u01c3\u0002\u0002\u0ea5\u0ea6\u0005",
    "\u0200\u0101\u0002\u0ea6\u0ea8\u0005\u01d4\u00eb\u0002\u0ea7\u0ea9\u0005",
    "\u028c\u0147\u0002\u0ea8\u0ea7\u0003\u0002\u0002\u0002\u0ea8\u0ea9\u0003",
    "\u0002\u0002\u0002\u0ea9\u0eab\u0003\u0002\u0002\u0002\u0eaa\u0eac\u0005",
    "\u0202\u0102\u0002\u0eab\u0eaa\u0003\u0002\u0002\u0002\u0eab\u0eac\u0003",
    "\u0002\u0002\u0002\u0eac\u0eae\u0003\u0002\u0002\u0002\u0ead\u0eaf\u0005",
    "\u0204\u0103\u0002\u0eae\u0ead\u0003\u0002\u0002\u0002\u0eae\u0eaf\u0003",
    "\u0002\u0002\u0002\u0eaf\u01d3\u0003\u0002\u0002\u0002\u0eb0\u0ec0\u0007",
    "\u0182\u0002\u0002\u0eb1\u0eb6\u0005\u01d6\u00ec\u0002\u0eb2\u0eb3\u0007",
    "\u0227\u0002\u0002\u0eb3\u0eb5\u0005\u01d6\u00ec\u0002\u0eb4\u0eb2\u0003",
    "\u0002\u0002\u0002\u0eb5\u0eb8\u0003\u0002\u0002\u0002\u0eb6\u0eb4\u0003",
    "\u0002\u0002\u0002\u0eb6\u0eb7\u0003\u0002\u0002\u0002\u0eb7\u0ec1\u0003",
    "\u0002\u0002\u0002\u0eb8\u0eb6\u0003\u0002\u0002\u0002\u0eb9\u0eba\u0007",
    "\u01ca\u0002\u0002\u0eba\u0ebb\u0007\u0221\u0002\u0002\u0ebb\u0ebc\u0005",
    "\u02f8\u017d\u0002\u0ebc\u0ebd\u0007\u0222\u0002\u0002\u0ebd\u0ebe\u0007",
    "\u0235\u0002\u0002\u0ebe\u0ebf\u0005\u0218\u010d\u0002\u0ebf\u0ec1\u0003",
    "\u0002\u0002\u0002\u0ec0\u0eb1\u0003\u0002\u0002\u0002\u0ec0\u0eb9\u0003",
    "\u0002\u0002\u0002\u0ec1\u01d5\u0003\u0002\u0002\u0002\u0ec2\u0ec3\u0005",
    "\u02ca\u0166\u0002\u0ec3\u0ec4\u0007\u0235\u0002\u0002\u0ec4\u0ec5\u0005",
    "\u0218\u010d\u0002\u0ec5\u0ed4\u0003\u0002\u0002\u0002\u0ec6\u0ec7\u0007",
    "\u0221\u0002\u0002\u0ec7\u0ecc\u0005\u02ca\u0166\u0002\u0ec8\u0ec9\u0007",
    "\u0227\u0002\u0002\u0ec9\u0ecb\u0005\u02ca\u0166\u0002\u0eca\u0ec8\u0003",
    "\u0002\u0002\u0002\u0ecb\u0ece\u0003\u0002\u0002\u0002\u0ecc\u0eca\u0003",
    "\u0002\u0002\u0002\u0ecc\u0ecd\u0003\u0002\u0002\u0002\u0ecd\u0ecf\u0003",
    "\u0002\u0002\u0002\u0ece\u0ecc\u0003\u0002\u0002\u0002\u0ecf\u0ed0\u0007",
    "\u0222\u0002\u0002\u0ed0\u0ed1\u0007\u0235\u0002\u0002\u0ed1\u0ed2\u0005",
    "\u0166\u00b4\u0002\u0ed2\u0ed4\u0003\u0002\u0002\u0002\u0ed3\u0ec2\u0003",
    "\u0002\u0002\u0002\u0ed3\u0ec6\u0003\u0002\u0002\u0002\u0ed4\u01d7\u0003",
    "\u0002\u0002\u0002\u0ed5\u0ed7\u0007o\u0002\u0002\u0ed6\u0ed8\u0007",
    "\u00a5\u0002\u0002\u0ed7\u0ed6\u0003\u0002\u0002\u0002\u0ed7\u0ed8\u0003",
    "\u0002\u0002\u0002\u0ed8\u0ed9\u0003\u0002\u0002\u0002\u0ed9\u0edb\u0005",
    "\u0200\u0101\u0002\u0eda\u0edc\u0005\u028c\u0147\u0002\u0edb\u0eda\u0003",
    "\u0002\u0002\u0002\u0edb\u0edc\u0003\u0002\u0002\u0002\u0edc\u0ede\u0003",
    "\u0002\u0002\u0002\u0edd\u0edf\u0005\u0202\u0102\u0002\u0ede\u0edd\u0003",
    "\u0002\u0002\u0002\u0ede\u0edf\u0003\u0002\u0002\u0002\u0edf\u0ee1\u0003",
    "\u0002\u0002\u0002\u0ee0\u0ee2\u0005\u0204\u0103\u0002\u0ee1\u0ee0\u0003",
    "\u0002\u0002\u0002\u0ee1\u0ee2\u0003\u0002\u0002\u0002\u0ee2\u01d9\u0003",
    "\u0002\u0002\u0002\u0ee3\u0ee6\u0007\u00c5\u0002\u0002\u0ee4\u0ee7\u0005",
    "\u01dc\u00ef\u0002\u0ee5\u0ee7\u0005\u01de\u00f0\u0002\u0ee6\u0ee4\u0003",
    "\u0002\u0002\u0002\u0ee6\u0ee5\u0003\u0002\u0002\u0002\u0ee7\u01db\u0003",
    "\u0002\u0002\u0002\u0ee8\u0eee\u0005\u01e8\u00f5\u0002\u0ee9\u0eeb\u0005",
    "\u01ea\u00f6\u0002\u0eea\u0eec\u0005\u0202\u0102\u0002\u0eeb\u0eea\u0003",
    "\u0002\u0002\u0002\u0eeb\u0eec\u0003\u0002\u0002\u0002\u0eec\u0eef\u0003",
    "\u0002\u0002\u0002\u0eed\u0eef\u0005\u015c\u00af\u0002\u0eee\u0ee9\u0003",
    "\u0002\u0002\u0002\u0eee\u0eed\u0003\u0002\u0002\u0002\u0eef\u0ef1\u0003",
    "\u0002\u0002\u0002\u0ef0\u0ef2\u0005\u0204\u0103\u0002\u0ef1\u0ef0\u0003",
    "\u0002\u0002\u0002\u0ef1\u0ef2\u0003\u0002\u0002\u0002\u0ef2\u01dd\u0003",
    "\u0002\u0002\u0002\u0ef3\u0ef5\u0007\b\u0002\u0002\u0ef4\u0ef6\u0005",
    "\u01e0\u00f1\u0002\u0ef5\u0ef4\u0003\u0002\u0002\u0002\u0ef6\u0ef7\u0003",
    "\u0002\u0002\u0002\u0ef7\u0ef5\u0003\u0002\u0002\u0002\u0ef7\u0ef8\u0003",
    "\u0002\u0002\u0002\u0ef8\u0efb\u0003\u0002\u0002\u0002\u0ef9\u0efb\u0005",
    "\u01e2\u00f2\u0002\u0efa\u0ef3\u0003\u0002\u0002\u0002\u0efa\u0ef9\u0003",
    "\u0002\u0002\u0002\u0efb\u0efc\u0003\u0002\u0002\u0002\u0efc\u0efd\u0005",
    "\u015c\u00af\u0002\u0efd\u01df\u0003\u0002\u0002\u0002\u0efe\u0f00\u0005",
    "\u01e8\u00f5\u0002\u0eff\u0f01\u0005\u01ea\u00f6\u0002\u0f00\u0eff\u0003",
    "\u0002\u0002\u0002\u0f00\u0f01\u0003\u0002\u0002\u0002\u0f01\u0f03\u0003",
    "\u0002\u0002\u0002\u0f02\u0f04\u0005\u0204\u0103\u0002\u0f03\u0f02\u0003",
    "\u0002\u0002\u0002\u0f03\u0f04\u0003\u0002\u0002\u0002\u0f04\u01e1\u0003",
    "\u0002\u0002\u0002\u0f05\u0f07\t2\u0002\u0002\u0f06\u0f05\u0003\u0002",
    "\u0002\u0002\u0f06\u0f07\u0003\u0002\u0002\u0002\u0f07\u0f09\u0003\u0002",
    "\u0002\u0002\u0f08\u0f0a\u0005\u01e4\u00f3\u0002\u0f09\u0f08\u0003\u0002",
    "\u0002\u0002\u0f0a\u0f0b\u0003\u0002\u0002\u0002\u0f0b\u0f09\u0003\u0002",
    "\u0002\u0002\u0f0b\u0f0c\u0003\u0002\u0002\u0002\u0f0c\u0f0e\u0003\u0002",
    "\u0002\u0002\u0f0d\u0f0f\u0005\u01e6\u00f4\u0002\u0f0e\u0f0d\u0003\u0002",
    "\u0002\u0002\u0f0e\u0f0f\u0003\u0002\u0002\u0002\u0f0f\u01e3\u0003\u0002",
    "\u0002\u0002\u0f10\u0f11\u0007\u01d6\u0002\u0002\u0f11\u0f12\u0005\u0214",
    "\u010b\u0002\u0f12\u0f14\u0007\u01a7\u0002\u0002\u0f13\u0f15\u0005\u01e0",
    "\u00f1\u0002\u0f14\u0f13\u0003\u0002\u0002\u0002\u0f15\u0f16\u0003\u0002",
    "\u0002\u0002\u0f16\u0f14\u0003\u0002\u0002\u0002\u0f16\u0f17\u0003\u0002",
    "\u0002\u0002\u0f17\u01e5\u0003\u0002\u0002\u0002\u0f18\u0f1a\u0007}",
    "\u0002\u0002\u0f19\u0f1b\u0005\u01e0\u00f1\u0002\u0f1a\u0f19\u0003\u0002",
    "\u0002\u0002\u0f1b\u0f1c\u0003\u0002\u0002\u0002\u0f1c\u0f1a\u0003\u0002",
    "\u0002\u0002\u0f1c\u0f1d\u0003\u0002\u0002\u0002\u0f1d\u01e7\u0003\u0002",
    "\u0002\u0002\u0f1e\u0f1f\u0007\u00cc\u0002\u0002\u0f1f\u0f2b\u0005\u0200",
    "\u0101\u0002\u0f20\u0f21\u0007\u0221\u0002\u0002\u0f21\u0f26\u0005\u02ca",
    "\u0166\u0002\u0f22\u0f23\u0007\u0227\u0002\u0002\u0f23\u0f25\u0005\u02ca",
    "\u0166\u0002\u0f24\u0f22\u0003\u0002\u0002\u0002\u0f25\u0f28\u0003\u0002",
    "\u0002\u0002\u0f26\u0f24\u0003\u0002\u0002\u0002\u0f26\u0f27\u0003\u0002",
    "\u0002\u0002\u0f27\u0f29\u0003\u0002\u0002\u0002\u0f28\u0f26\u0003\u0002",
    "\u0002\u0002\u0f29\u0f2a\u0007\u0222\u0002\u0002\u0f2a\u0f2c\u0003\u0002",
    "\u0002\u0002\u0f2b\u0f20\u0003\u0002\u0002\u0002\u0f2b\u0f2c\u0003\u0002",
    "\u0002\u0002\u0f2c\u01e9\u0003\u0002\u0002\u0002\u0f2d\u0f2e\u0007\u01c9",
    "\u0002\u0002\u0f2e\u0f30\u0007\u0221\u0002\u0002\u0f2f\u0f31\u0005\u0216",
    "\u010c\u0002\u0f30\u0f2f\u0003\u0002\u0002\u0002\u0f30\u0f31\u0003\u0002",
    "\u0002\u0002\u0f31\u0f32\u0003\u0002\u0002\u0002\u0f32\u0f33\u0007\u0222",
    "\u0002\u0002\u0f33\u01eb\u0003\u0002\u0002\u0002\u0f34\u0f35\u0007\u00f2",
    "\u0002\u0002\u0f35\u0f36\u0007\u00cc\u0002\u0002\u0f36\u0f38\u0005\u02cc",
    "\u0167\u0002\u0f37\u0f39\u0005\u028a\u0146\u0002\u0f38\u0f37\u0003\u0002",
    "\u0002\u0002\u0f38\u0f39\u0003\u0002\u0002\u0002\u0f39\u0f3a\u0003\u0002",
    "\u0002\u0002\u0f3a\u0f3b\u0007\u01c7\u0002\u0002\u0f3b\u0f3c\u0005\u01f6",
    "\u00fc\u0002\u0f3c\u0f3d\u0007\u0123\u0002\u0002\u0f3d\u0f3e\u0007\u0221",
    "\u0002\u0002\u0f3e\u0f3f\u0005\u0214\u010b\u0002\u0f3f\u0f48\u0007\u0222",
    "\u0002\u0002\u0f40\u0f42\u0005\u01ee\u00f8\u0002\u0f41\u0f43\u0005\u01f4",
    "\u00fb\u0002\u0f42\u0f41\u0003\u0002\u0002\u0002\u0f42\u0f43\u0003\u0002",
    "\u0002\u0002\u0f43\u0f49\u0003\u0002\u0002\u0002\u0f44\u0f46\u0005\u01f4",
    "\u00fb\u0002\u0f45\u0f47\u0005\u01ee\u00f8\u0002\u0f46\u0f45\u0003\u0002",
    "\u0002\u0002\u0f46\u0f47\u0003\u0002\u0002\u0002\u0f47\u0f49\u0003\u0002",
    "\u0002\u0002\u0f48\u0f40\u0003\u0002\u0002\u0002\u0f48\u0f44\u0003\u0002",
    "\u0002\u0002\u0f48\u0f49\u0003\u0002\u0002\u0002\u0f49\u0f4b\u0003\u0002",
    "\u0002\u0002\u0f4a\u0f4c\u0005\u0204\u0103\u0002\u0f4b\u0f4a\u0003\u0002",
    "\u0002\u0002\u0f4b\u0f4c\u0003\u0002\u0002\u0002\u0f4c\u01ed\u0003\u0002",
    "\u0002\u0002\u0f4d\u0f4e\u0007\u01d6\u0002\u0002\u0f4e\u0f4f\u0007\u00ee",
    "\u0002\u0002\u0f4f\u0f50\u0007\u01a7\u0002\u0002\u0f50\u0f51\u0007\u01c3",
    "\u0002\u0002\u0f51\u0f52\u0007\u0182\u0002\u0002\u0f52\u0f57\u0005\u01f0",
    "\u00f9\u0002\u0f53\u0f54\u0007\u0227\u0002\u0002\u0f54\u0f56\u0005\u01f0",
    "\u00f9\u0002\u0f55\u0f53\u0003\u0002\u0002\u0002\u0f56\u0f59\u0003\u0002",
    "\u0002\u0002\u0f57\u0f55\u0003\u0002\u0002\u0002\u0f57\u0f58\u0003\u0002",
    "\u0002\u0002\u0f58\u0f5b\u0003\u0002\u0002\u0002\u0f59\u0f57\u0003\u0002",
    "\u0002\u0002\u0f5a\u0f5c\u0005\u028c\u0147\u0002\u0f5b\u0f5a\u0003\u0002",
    "\u0002\u0002\u0f5b\u0f5c\u0003\u0002\u0002\u0002\u0f5c\u0f5e\u0003\u0002",
    "\u0002\u0002\u0f5d\u0f5f\u0005\u01f2\u00fa\u0002\u0f5e\u0f5d\u0003\u0002",
    "\u0002\u0002\u0f5e\u0f5f\u0003\u0002\u0002\u0002\u0f5f\u01ef\u0003\u0002",
    "\u0002\u0002\u0f60\u0f61\u0005\u02ca\u0166\u0002\u0f61\u0f62\u0007\u0235",
    "\u0002\u0002\u0f62\u0f63\u0005\u0218\u010d\u0002\u0f63\u01f1\u0003\u0002",
    "\u0002\u0002\u0f64\u0f65\u0007o\u0002\u0002\u0f65\u0f66\u0005\u028c",
    "\u0147\u0002\u0f66\u01f3\u0003\u0002\u0002\u0002\u0f67\u0f68\u0007\u01d6",
    "\u0002\u0002\u0f68\u0f69\u0007\u0115\u0002\u0002\u0f69\u0f6a\u0007\u00ee",
    "\u0002\u0002\u0f6a\u0f6b\u0007\u01a7\u0002\u0002\u0f6b\u0f77\u0007\u00c5",
    "\u0002\u0002\u0f6c\u0f6d\u0007\u0221\u0002\u0002\u0f6d\u0f72\u0005\u02ca",
    "\u0166\u0002\u0f6e\u0f6f\u0007\u0227\u0002\u0002\u0f6f\u0f71\u0005\u02ca",
    "\u0166\u0002\u0f70\u0f6e\u0003\u0002\u0002\u0002\u0f71\u0f74\u0003\u0002",
    "\u0002\u0002\u0f72\u0f70\u0003\u0002\u0002\u0002\u0f72\u0f73\u0003\u0002",
    "\u0002\u0002\u0f73\u0f75\u0003\u0002\u0002\u0002\u0f74\u0f72\u0003\u0002",
    "\u0002\u0002\u0f75\u0f76\u0007\u0222\u0002\u0002\u0f76\u0f78\u0003\u0002",
    "\u0002\u0002\u0f77\u0f6c\u0003\u0002\u0002\u0002\u0f77\u0f78\u0003\u0002",
    "\u0002\u0002\u0f78\u0f79\u0003\u0002\u0002\u0002\u0f79\u0f7a\u0007\u01c9",
    "\u0002\u0002\u0f7a\u0f7c\u0007\u0221\u0002\u0002\u0f7b\u0f7d\u0005\u0216",
    "\u010c\u0002\u0f7c\u0f7b\u0003\u0002\u0002\u0002\u0f7c\u0f7d\u0003\u0002",
    "\u0002\u0002\u0f7d\u0f7e\u0003\u0002\u0002\u0002\u0f7e\u0f80\u0007\u0222",
    "\u0002\u0002\u0f7f\u0f81\u0005\u028c\u0147\u0002\u0f80\u0f7f\u0003\u0002",
    "\u0002\u0002\u0f80\u0f81\u0003\u0002\u0002\u0002\u0f81\u01f5\u0003\u0002",
    "\u0002\u0002\u0f82\u0f88\u0005\u02cc\u0167\u0002\u0f83\u0f84\u0007\u0221",
    "\u0002\u0002\u0f84\u0f85\u0005\u015c\u00af\u0002\u0f85\u0f86\u0007\u0222",
    "\u0002\u0002\u0f86\u0f88\u0003\u0002\u0002\u0002\u0f87\u0f82\u0003\u0002",
    "\u0002\u0002\u0f87\u0f83\u0003\u0002\u0002\u0002\u0f88\u0f8a\u0003\u0002",
    "\u0002\u0002\u0f89\u0f8b\u0005\u028a\u0146\u0002\u0f8a\u0f89\u0003\u0002",
    "\u0002\u0002\u0f8a\u0f8b\u0003\u0002\u0002\u0002\u0f8b\u01f7\u0003\u0002",
    "\u0002\u0002\u0f8c\u0f8d\u0007\u00e4\u0002\u0002\u0f8d\u0f8e\u0007\u01a5",
    "\u0002\u0002\u0f8e\u0f93\u0005\u01fc\u00ff\u0002\u0f8f\u0f90\u0007\u0227",
    "\u0002\u0002\u0f90\u0f92\u0005\u01fc\u00ff\u0002\u0f91\u0f8f\u0003\u0002",
    "\u0002\u0002\u0f92\u0f95\u0003\u0002\u0002\u0002\u0f93\u0f91\u0003\u0002",
    "\u0002\u0002\u0f93\u0f94\u0003\u0002\u0002\u0002\u0f94\u0f96\u0003\u0002",
    "\u0002\u0002\u0f95\u0f93\u0003\u0002\u0002\u0002\u0f96\u0f97\u0007\u00bf",
    "\u0002\u0002\u0f97\u0f98\u0005\u01fe\u0100\u0002\u0f98\u0f9a\u0007\u00f9",
    "\u0002\u0002\u0f99\u0f9b\u0005\u01fa\u00fe\u0002\u0f9a\u0f99\u0003\u0002",
    "\u0002\u0002\u0f9a\u0f9b\u0003\u0002\u0002\u0002\u0f9b\u01f9\u0003\u0002",
    "\u0002\u0002\u0f9c\u0f9d\u0007\u01d2\u0002\u0002\u0f9d\u0fa0\u0005\u0218",
    "\u010d\u0002\u0f9e\u0fa0\u0007\u0116\u0002\u0002\u0f9f\u0f9c\u0003\u0002",
    "\u0002\u0002\u0f9f\u0f9e\u0003\u0002\u0002\u0002\u0fa0\u01fb\u0003\u0002",
    "\u0002\u0002\u0fa1\u0fa3\u0005\u02cc\u0167\u0002\u0fa2\u0fa4\u0005\u0286",
    "\u0144\u0002\u0fa3\u0fa2\u0003\u0002\u0002\u0002\u0fa3\u0fa4\u0003\u0002",
    "\u0002\u0002\u0fa4\u01fd\u0003\u0002\u0002\u0002\u0fa5\u0fa6\u0007\u016d",
    "\u0002\u0002\u0fa6\u0fb2\u0007\u0185\u0002\u0002\u0fa7\u0fa8\u0007\u016d",
    "\u0002\u0002\u0fa8\u0fb2\u0007\u008d\u0002\u0002\u0fa9\u0fab\u0007\u0185",
    "\u0002\u0002\u0faa\u0fac\u0007\u01c3\u0002\u0002\u0fab\u0faa\u0003\u0002",
    "\u0002\u0002\u0fab\u0fac\u0003\u0002\u0002\u0002\u0fac\u0fb2\u0003\u0002",
    "\u0002\u0002\u0fad\u0fae\u0007\u0185\u0002\u0002\u0fae\u0faf\u0007\u016d",
    "\u0002\u0002\u0faf\u0fb2\u0007\u008d\u0002\u0002\u0fb0\u0fb2\u0007\u008d",
    "\u0002\u0002\u0fb1\u0fa5\u0003\u0002\u0002\u0002\u0fb1\u0fa7\u0003\u0002",
    "\u0002\u0002\u0fb1\u0fa9\u0003\u0002\u0002\u0002\u0fb1\u0fad\u0003\u0002",
    "\u0002\u0002\u0fb1\u0fb0\u0003\u0002\u0002\u0002\u0fb2\u01ff\u0003\u0002",
    "\u0002\u0002\u0fb3\u0fba\u0005\u020a\u0106\u0002\u0fb4\u0fb5\u0007\u0122",
    "\u0002\u0002\u0fb5\u0fb6\u0007\u0221\u0002\u0002\u0fb6\u0fb7\u0005\u020a",
    "\u0106\u0002\u0fb7\u0fb8\u0007\u0222\u0002\u0002\u0fb8\u0fba\u0003\u0002",
    "\u0002\u0002\u0fb9\u0fb3\u0003\u0002\u0002\u0002\u0fb9\u0fb4\u0003\u0002",
    "\u0002\u0002\u0fba\u0fbc\u0003\u0002\u0002\u0002\u0fbb\u0fbd\u0005\u028a",
    "\u0146\u0002\u0fbc\u0fbb\u0003\u0002\u0002\u0002\u0fbc\u0fbd\u0003\u0002",
    "\u0002\u0002\u0fbd\u0201\u0003\u0002\u0002\u0002\u0fbe\u0fbf\t \u0002",
    "\u0002\u0fbf\u0fc0\u0005\u0216\u010c\u0002\u0fc0\u0fc1\u0005\u028e\u0148",
    "\u0002\u0fc1\u0203\u0003\u0002\u0002\u0002\u0fc2\u0fc3\u0007\u00e6\u0002",
    "\u0002\u0fc3\u0fc5\u0007\u0086\u0002\u0002\u0fc4\u0fc6\u0005\u0206\u0104",
    "\u0002\u0fc5\u0fc4\u0003\u0002\u0002\u0002\u0fc5\u0fc6\u0003\u0002\u0002",
    "\u0002\u0fc6\u0fc8\u0003\u0002\u0002\u0002\u0fc7\u0fc9\u0005\u0218\u010d",
    "\u0002\u0fc8\u0fc7\u0003\u0002\u0002\u0002\u0fc8\u0fc9\u0003\u0002\u0002",
    "\u0002\u0fc9\u0fcb\u0003\u0002\u0002\u0002\u0fca\u0fcc\u0005\u0208\u0105",
    "\u0002\u0fcb\u0fca\u0003\u0002\u0002\u0002\u0fcb\u0fcc\u0003\u0002\u0002",
    "\u0002\u0fcc\u0205\u0003\u0002\u0002\u0002\u0fcd\u0fce\u0007\u00cc\u0002",
    "\u0002\u0fce\u0fcf\u0005\u02cc\u0167\u0002\u0fcf\u0207\u0003\u0002\u0002",
    "\u0002\u0fd0\u0fd1\u0007\u015c\u0002\u0002\u0fd1\u0fd4\u0007\u00e0\u0002",
    "\u0002\u0fd2\u0fd5\u0007\u01bf\u0002\u0002\u0fd3\u0fd5\u0005\u0218\u010d",
    "\u0002\u0fd4\u0fd2\u0003\u0002\u0002\u0002\u0fd4\u0fd3\u0003\u0002\u0002",
    "\u0002\u0fd5\u0209\u0003\u0002\u0002\u0002\u0fd6\u0fe3\u0005\u020c\u0107",
    "\u0002\u0fd7\u0fd8\u0007\u0221\u0002\u0002\u0fd8\u0fda\u0005\u015c\u00af",
    "\u0002\u0fd9\u0fdb\u0005\u020e\u0108\u0002\u0fda\u0fd9\u0003\u0002\u0002",
    "\u0002\u0fda\u0fdb\u0003\u0002\u0002\u0002\u0fdb\u0fdc\u0003\u0002\u0002",
    "\u0002\u0fdc\u0fdd\u0007\u0222\u0002\u0002\u0fdd\u0fe3\u0003\u0002\u0002",
    "\u0002\u0fde\u0fe0\u0005\u02cc\u0167\u0002\u0fdf\u0fe1\u0005\u0210\u0109",
    "\u0002\u0fe0\u0fdf\u0003\u0002\u0002\u0002\u0fe0\u0fe1\u0003\u0002\u0002",
    "\u0002\u0fe1\u0fe3\u0003\u0002\u0002\u0002\u0fe2\u0fd6\u0003\u0002\u0002",
    "\u0002\u0fe2\u0fd7\u0003\u0002\u0002\u0002\u0fe2\u0fde\u0003\u0002\u0002",
    "\u0002\u0fe3\u020b\u0003\u0002\u0002\u0002\u0fe4\u0ff1\t3\u0002\u0002",
    "\u0fe5\u0fe6\u0007\u0221\u0002\u0002\u0fe6\u0fe7\u0005\u0166\u00b4\u0002",
    "\u0fe7\u0fe8\u0007\u0222\u0002\u0002\u0fe8\u0ff2\u0003\u0002\u0002\u0002",
    "\u0fe9\u0fea\u0007\u0221\u0002\u0002\u0fea\u0feb\u0005\u0218\u010d\u0002",
    "\u0feb\u0fef\u0007\u0222\u0002\u0002\u0fec\u0fed\u0007\u0221\u0002\u0002",
    "\u0fed\u0fee\u0007\u0225\u0002\u0002\u0fee\u0ff0\u0007\u0222\u0002\u0002",
    "\u0fef\u0fec\u0003\u0002\u0002\u0002\u0fef\u0ff0\u0003\u0002\u0002\u0002",
    "\u0ff0\u0ff2\u0003\u0002\u0002\u0002\u0ff1\u0fe5\u0003\u0002\u0002\u0002",
    "\u0ff1\u0fe9\u0003\u0002\u0002\u0002\u0ff2\u020d\u0003\u0002\u0002\u0002",
    "\u0ff3\u0ffc\u0007\u01da\u0002\u0002\u0ff4\u0ff5\u0007\u0154\u0002\u0002",
    "\u0ff5\u0ffd\u0007\u0122\u0002\u0002\u0ff6\u0ff7\u00075\u0002\u0002",
    "\u0ff7\u0ffa\u0007\u0126\u0002\u0002\u0ff8\u0ff9\u0007J\u0002\u0002",
    "\u0ff9\u0ffb\u0005\u02ae\u0158\u0002\u0ffa\u0ff8\u0003\u0002\u0002\u0002",
    "\u0ffa\u0ffb\u0003\u0002\u0002\u0002\u0ffb\u0ffd\u0003\u0002\u0002\u0002",
    "\u0ffc\u0ff4\u0003\u0002\u0002\u0002\u0ffc\u0ff6\u0003\u0002\u0002\u0002",
    "\u0ffd\u020f\u0003\u0002\u0002\u0002\u0ffe\u1000\u0007\u0170\u0002\u0002",
    "\u0fff\u1001\u0007#\u0002\u0002\u1000\u0fff\u0003\u0002\u0002\u0002",
    "\u1000\u1001\u0003\u0002\u0002\u0002\u1001\u1002\u0003\u0002\u0002\u0002",
    "\u1002\u1003\u0007\u0221\u0002\u0002\u1003\u1006\u0005\u0218\u010d\u0002",
    "\u1004\u1005\u0007\u0227\u0002\u0002\u1005\u1007\u0005\u0218\u010d\u0002",
    "\u1006\u1004\u0003\u0002\u0002\u0002\u1006\u1007\u0003\u0002\u0002\u0002",
    "\u1007\u1008\u0003\u0002\u0002\u0002\u1008\u100a\u0007\u0222\u0002\u0002",
    "\u1009\u100b\u0005\u0212\u010a\u0002\u100a\u1009\u0003\u0002\u0002\u0002",
    "\u100a\u100b\u0003\u0002\u0002\u0002\u100b\u0211\u0003\u0002\u0002\u0002",
    "\u100c\u100d\u0007\u0178\u0002\u0002\u100d\u100e\u0007\u0221\u0002\u0002",
    "\u100e\u100f\u0005\u0218\u010d\u0002\u100f\u1010\u0007\u0222\u0002\u0002",
    "\u1010\u0213\u0003\u0002\u0002\u0002\u1011\u1012\u0005\u0218\u010d\u0002",
    "\u1012\u0215\u0003\u0002\u0002\u0002\u1013\u1018\u0005\u0218\u010d\u0002",
    "\u1014\u1015\u0007\u0227\u0002\u0002\u1015\u1017\u0005\u0218\u010d\u0002",
    "\u1016\u1014\u0003\u0002\u0002\u0002\u1017\u101a\u0003\u0002\u0002\u0002",
    "\u1018\u1016\u0003\u0002\u0002\u0002\u1018\u1019\u0003\u0002\u0002\u0002",
    "\u1019\u0217\u0003\u0002\u0002\u0002\u101a\u1018\u0003\u0002\u0002\u0002",
    "\u101b\u101e\u0005\u021a\u010e\u0002\u101c\u101e\u0005\u021c\u010f\u0002",
    "\u101d\u101b\u0003\u0002\u0002\u0002\u101d\u101c\u0003\u0002\u0002\u0002",
    "\u101e\u0219\u0003\u0002\u0002\u0002\u101f\u1020\u0007[\u0002\u0002",
    "\u1020\u1021\u0007\u0221\u0002\u0002\u1021\u1022\u0005\u0166\u00b4\u0002",
    "\u1022\u1023\u0007\u0222\u0002\u0002\u1023\u021b\u0003\u0002\u0002\u0002",
    "\u1024\u1025\b\u010f\u0001\u0002\u1025\u1047\u0005\u021e\u0110\u0002",
    "\u1026\u1028\u0007\u00ce\u0002\u0002\u1027\u1029\u0007\u0115\u0002\u0002",
    "\u1028\u1027\u0003\u0002\u0002\u0002\u1028\u1029\u0003\u0002\u0002\u0002",
    "\u1029\u1043\u0003\u0002\u0002\u0002\u102a\u1044\u0007\u0117\u0002\u0002",
    "\u102b\u1044\u0007\u00fe\u0002\u0002\u102c\u1044\u0007\u014a\u0002\u0002",
    "\u102d\u1044\u0007\u00be\u0002\u0002\u102e\u102f\u0007\u0007\u0002\u0002",
    "\u102f\u1044\u0007\u0182\u0002\u0002\u1030\u1044\u0007\u007f\u0002\u0002",
    "\u1031\u1033\u0007\u011e\u0002\u0002\u1032\u1034\u0007\u01ba\u0002\u0002",
    "\u1033\u1032\u0003\u0002\u0002\u0002\u1033\u1034\u0003\u0002\u0002\u0002",
    "\u1034\u1035\u0003\u0002\u0002\u0002\u1035\u1037\u0007\u0221\u0002\u0002",
    "\u1036\u1038\u0007\u0122\u0002\u0002\u1037\u1036\u0003\u0002\u0002\u0002",
    "\u1037\u1038\u0003\u0002\u0002\u0002\u1038\u1039\u0003\u0002\u0002\u0002",
    "\u1039\u103e\u0005\u02e0\u0171\u0002\u103a\u103b\u0007\u0227\u0002\u0002",
    "\u103b\u103d\u0005\u02e0\u0171\u0002\u103c\u103a\u0003\u0002\u0002\u0002",
    "\u103d\u1040\u0003\u0002\u0002\u0002\u103e\u103c\u0003\u0002\u0002\u0002",
    "\u103e\u103f\u0003\u0002\u0002\u0002\u103f\u1041\u0003\u0002\u0002\u0002",
    "\u1040\u103e\u0003\u0002\u0002\u0002\u1041\u1042\u0007\u0222\u0002\u0002",
    "\u1042\u1044\u0003\u0002\u0002\u0002\u1043\u102a\u0003\u0002\u0002\u0002",
    "\u1043\u102b\u0003\u0002\u0002\u0002\u1043\u102c\u0003\u0002\u0002\u0002",
    "\u1043\u102d\u0003\u0002\u0002\u0002\u1043\u102e\u0003\u0002\u0002\u0002",
    "\u1043\u1030\u0003\u0002\u0002\u0002\u1043\u1031\u0003\u0002\u0002\u0002",
    "\u1044\u1046\u0003\u0002\u0002\u0002\u1045\u1026\u0003\u0002\u0002\u0002",
    "\u1046\u1049\u0003\u0002\u0002\u0002\u1047\u1045\u0003\u0002\u0002\u0002",
    "\u1047\u1048\u0003\u0002\u0002\u0002\u1048\u104d\u0003\u0002\u0002\u0002",
    "\u1049\u1047\u0003\u0002\u0002\u0002\u104a\u104b\u0007\u0115\u0002\u0002",
    "\u104b\u104d\u0005\u021c\u010f\u0005\u104c\u1024\u0003\u0002\u0002\u0002",
    "\u104c\u104a\u0003\u0002\u0002\u0002\u104d\u1056\u0003\u0002\u0002\u0002",
    "\u104e\u104f\f\u0004\u0002\u0002\u104f\u1050\u0007\u000b\u0002\u0002",
    "\u1050\u1055\u0005\u021c\u010f\u0005\u1051\u1052\f\u0003\u0002\u0002",
    "\u1052\u1053\u0007\u012a\u0002\u0002\u1053\u1055\u0005\u021c\u010f\u0004",
    "\u1054\u104e\u0003\u0002\u0002\u0002\u1054\u1051\u0003\u0002\u0002\u0002",
    "\u1055\u1058\u0003\u0002\u0002\u0002\u1056\u1054\u0003\u0002\u0002\u0002",
    "\u1056\u1057\u0003\u0002\u0002\u0002\u1057\u021d\u0003\u0002\u0002\u0002",
    "\u1058\u1056\u0003\u0002\u0002\u0002\u1059\u105f\u0005\u0220\u0111\u0002",
    "\u105a\u105c\t4\u0002\u0002\u105b\u105d\u0007\u011e\u0002\u0002\u105c",
    "\u105b\u0003\u0002\u0002\u0002\u105c\u105d\u0003\u0002\u0002\u0002\u105d",
    "\u105e\u0003\u0002\u0002\u0002\u105e\u1060\u0005\u022a\u0116\u0002\u105f",
    "\u105a\u0003\u0002\u0002\u0002\u105f\u1060\u0003\u0002\u0002\u0002\u1060",
    "\u021f\u0003\u0002\u0002\u0002\u1061\u1062\b\u0111\u0001\u0002\u1062",
    "\u1063\u0005\u0222\u0112\u0002\u1063\u106a\u0003\u0002\u0002\u0002\u1064",
    "\u1065\f\u0004\u0002\u0002\u1065\u1066\u0005\u0224\u0113\u0002\u1066",
    "\u1067\u0005\u0220\u0111\u0005\u1067\u1069\u0003\u0002\u0002\u0002\u1068",
    "\u1064\u0003\u0002\u0002\u0002\u1069\u106c\u0003\u0002\u0002\u0002\u106a",
    "\u1068\u0003\u0002\u0002\u0002\u106a\u106b\u0003\u0002\u0002\u0002\u106b",
    "\u0221\u0003\u0002\u0002\u0002\u106c\u106a\u0003\u0002\u0002\u0002\u106d",
    "\u107d\u0005\u022a\u0116\u0002\u106e\u1070\u0007\u0115\u0002\u0002\u106f",
    "\u106e\u0003\u0002\u0002\u0002\u106f\u1070\u0003\u0002\u0002\u0002\u1070",
    "\u107b\u0003\u0002\u0002\u0002\u1071\u1072\u0007\u00bf\u0002\u0002\u1072",
    "\u107c\u0005\u0226\u0114\u0002\u1073\u1074\u0007\u001d\u0002\u0002\u1074",
    "\u107c\u0005\u0228\u0115\u0002\u1075\u1076\t5\u0002\u0002\u1076\u1079",
    "\u0005\u022a\u0116\u0002\u1077\u1078\u0007\u0087\u0002\u0002\u1078\u107a",
    "\u0005\u022a\u0116\u0002\u1079\u1077\u0003\u0002\u0002\u0002\u1079\u107a",
    "\u0003\u0002\u0002\u0002\u107a\u107c\u0003\u0002\u0002\u0002\u107b\u1071",
    "\u0003\u0002\u0002\u0002\u107b\u1073\u0003\u0002\u0002\u0002\u107b\u1075",
    "\u0003\u0002\u0002\u0002\u107c\u107e\u0003\u0002\u0002\u0002\u107d\u106f",
    "\u0003\u0002\u0002\u0002\u107d\u107e\u0003\u0002\u0002\u0002\u107e\u0223",
    "\u0003\u0002\u0002\u0002\u107f\u108e\u0007\u0235\u0002\u0002\u1080\u1088",
    "\u0007\u022c\u0002\u0002\u1081\u1082\u0007\u0231\u0002\u0002\u1082\u1088",
    "\u0007\u0230\u0002\u0002\u1083\u1084\u0007\u022f\u0002\u0002\u1084\u1088",
    "\u0007\u0235\u0002\u0002\u1085\u1086\u0007\u022d\u0002\u0002\u1086\u1088",
    "\u0007\u0235\u0002\u0002\u1087\u1080\u0003\u0002\u0002\u0002\u1087\u1081",
    "\u0003\u0002\u0002\u0002\u1087\u1083\u0003\u0002\u0002\u0002\u1087\u1085",
    "\u0003\u0002\u0002\u0002\u1088\u108e\u0003\u0002\u0002\u0002\u1089\u108b",
    "\t6\u0002\u0002\u108a\u108c\u0007\u0235\u0002\u0002\u108b\u108a\u0003",
    "\u0002\u0002\u0002\u108b\u108c\u0003\u0002\u0002\u0002\u108c\u108e\u0003",
    "\u0002\u0002\u0002\u108d\u107f\u0003\u0002\u0002\u0002\u108d\u1087\u0003",
    "\u0002\u0002\u0002\u108d\u1089\u0003\u0002\u0002\u0002\u108e\u0225\u0003",
    "\u0002\u0002\u0002\u108f\u1090\u0007\u0221\u0002\u0002\u1090\u1091\u0005",
    "\u0166\u00b4\u0002\u1091\u1092\u0007\u0222\u0002\u0002\u1092\u10a2\u0003",
    "\u0002\u0002\u0002\u1093\u1094\u0007\u0221\u0002\u0002\u1094\u1099\u0005",
    "\u022a\u0116\u0002\u1095\u1096\u0007\u0227\u0002\u0002\u1096\u1098\u0005",
    "\u022a\u0116\u0002\u1097\u1095\u0003\u0002\u0002\u0002\u1098\u109b\u0003",
    "\u0002\u0002\u0002\u1099\u1097\u0003\u0002\u0002\u0002\u1099\u109a\u0003",
    "\u0002\u0002\u0002\u109a\u109c\u0003\u0002\u0002\u0002\u109b\u1099\u0003",
    "\u0002\u0002\u0002\u109c\u109d\u0007\u0222\u0002\u0002\u109d\u10a2\u0003",
    "\u0002\u0002\u0002\u109e\u10a2\u0005\u02f0\u0179\u0002\u109f\u10a2\u0005",
    "\u02e8\u0175\u0002\u10a0\u10a2\u0005\u02ea\u0176\u0002\u10a1\u108f\u0003",
    "\u0002\u0002\u0002\u10a1\u1093\u0003\u0002\u0002\u0002\u10a1\u109e\u0003",
    "\u0002\u0002\u0002\u10a1\u109f\u0003\u0002\u0002\u0002\u10a1\u10a0\u0003",
    "\u0002\u0002\u0002\u10a2\u0227\u0003\u0002\u0002\u0002\u10a3\u10a4\u0005",
    "\u022a\u0116\u0002\u10a4\u10a5\u0007\u000b\u0002\u0002\u10a5\u10a6\u0005",
    "\u022a\u0116\u0002\u10a6\u0229\u0003\u0002\u0002\u0002\u10a7\u10a8\b",
    "\u0116\u0001\u0002\u10a8\u10b1\u0005\u022e\u0118\u0002\u10a9\u10ae\u0007",
    "\u0012\u0002\u0002\u10aa\u10af\u0007\u00e2\u0002\u0002\u10ab\u10ac\u0007",
    "\u01ad\u0002\u0002\u10ac\u10ad\u0007\u01ef\u0002\u0002\u10ad\u10af\u0005",
    "\u022a\u0116\u0002\u10ae\u10aa\u0003\u0002\u0002\u0002\u10ae\u10ab\u0003",
    "\u0002\u0002\u0002\u10af\u10b2\u0003\u0002\u0002\u0002\u10b0\u10b2\u0005",
    "\u022c\u0117\u0002\u10b1\u10a9\u0003\u0002\u0002\u0002\u10b1\u10b0\u0003",
    "\u0002\u0002\u0002\u10b1\u10b2\u0003\u0002\u0002\u0002\u10b2\u10bf\u0003",
    "\u0002\u0002\u0002\u10b3\u10b4\f\u0005\u0002\u0002\u10b4\u10b5\t7\u0002",
    "\u0002\u10b5\u10be\u0005\u022a\u0116\u0006\u10b6\u10b7\f\u0004\u0002",
    "\u0002\u10b7\u10b8\t8\u0002\u0002\u10b8\u10be\u0005\u022a\u0116\u0005",
    "\u10b9\u10ba\f\u0003\u0002\u0002\u10ba\u10bb\u0007\u0234\u0002\u0002",
    "\u10bb\u10bc\u0007\u0234\u0002\u0002\u10bc\u10be\u0005\u022a\u0116\u0004",
    "\u10bd\u10b3\u0003\u0002\u0002\u0002\u10bd\u10b6\u0003\u0002\u0002\u0002",
    "\u10bd\u10b9\u0003\u0002\u0002\u0002\u10be\u10c1\u0003\u0002\u0002\u0002",
    "\u10bf\u10bd\u0003\u0002\u0002\u0002\u10bf\u10c0\u0003\u0002\u0002\u0002",
    "\u10c0\u022b\u0003\u0002\u0002\u0002\u10c1\u10bf\u0003\u0002\u0002\u0002",
    "\u10c2\u10c7\u0007a\u0002\u0002\u10c3\u10c4\u0007\u0221\u0002\u0002",
    "\u10c4\u10c5\u0005\u022a\u0116\u0002\u10c5\u10c6\u0007\u0222\u0002\u0002",
    "\u10c6\u10c8\u0003\u0002\u0002\u0002\u10c7\u10c3\u0003\u0002\u0002\u0002",
    "\u10c7\u10c8\u0003\u0002\u0002\u0002\u10c8\u10c9\u0003\u0002\u0002\u0002",
    "\u10c9\u10ca\u0007\u01b2\u0002\u0002\u10ca\u10cf\u0007\u0177\u0002\u0002",
    "\u10cb\u10cc\u0007\u0221\u0002\u0002\u10cc\u10cd\u0005\u022a\u0116\u0002",
    "\u10cd\u10ce\u0007\u0222\u0002\u0002\u10ce\u10d0\u0003\u0002\u0002\u0002",
    "\u10cf\u10cb\u0003\u0002\u0002\u0002\u10cf\u10d0\u0003\u0002\u0002\u0002",
    "\u10d0\u10db\u0003\u0002\u0002\u0002\u10d1\u10d6\u0007\u01ec\u0002\u0002",
    "\u10d2\u10d3\u0007\u0221\u0002\u0002\u10d3\u10d4\u0005\u022a\u0116\u0002",
    "\u10d4\u10d5\u0007\u0222\u0002\u0002\u10d5\u10d7\u0003\u0002\u0002\u0002",
    "\u10d6\u10d2\u0003\u0002\u0002\u0002\u10d6\u10d7\u0003\u0002\u0002\u0002",
    "\u10d7\u10d8\u0003\u0002\u0002\u0002\u10d8\u10d9\u0007\u01b2\u0002\u0002",
    "\u10d9\u10db\u0007\u00fb\u0002\u0002\u10da\u10c2\u0003\u0002\u0002\u0002",
    "\u10da\u10d1\u0003\u0002\u0002\u0002\u10db\u022d\u0003\u0002\u0002\u0002",
    "\u10dc\u10e1\u0005\u0236\u011c\u0002\u10dd\u10de\u0007\u0236\u0002\u0002",
    "\u10de\u10df\u0005\u0230\u0119\u0002\u10df\u10e0\u0007\u0237\u0002\u0002",
    "\u10e0\u10e2\u0003\u0002\u0002\u0002\u10e1\u10dd\u0003\u0002\u0002\u0002",
    "\u10e1\u10e2\u0003\u0002\u0002\u0002\u10e2\u022f\u0003\u0002\u0002\u0002",
    "\u10e3\u10e6\u0007\f\u0002\u0002\u10e4\u10e6\u0005\u0218\u010d\u0002",
    "\u10e5\u10e3\u0003\u0002\u0002\u0002\u10e5\u10e4\u0003\u0002\u0002\u0002",
    "\u10e6\u10ee\u0003\u0002\u0002\u0002\u10e7\u10ea\u0007\u0227\u0002\u0002",
    "\u10e8\u10eb\u0007\f\u0002\u0002\u10e9\u10eb\u0005\u0218\u010d\u0002",
    "\u10ea\u10e8\u0003\u0002\u0002\u0002\u10ea\u10e9\u0003\u0002\u0002\u0002",
    "\u10eb\u10ed\u0003\u0002\u0002\u0002\u10ec\u10e7\u0003\u0002\u0002\u0002",
    "\u10ed\u10f0\u0003\u0002\u0002\u0002\u10ee\u10ec\u0003\u0002\u0002\u0002",
    "\u10ee\u10ef\u0003\u0002\u0002\u0002\u10ef\u10fb\u0003\u0002\u0002\u0002",
    "\u10f0\u10ee\u0003\u0002\u0002\u0002\u10f1\u10f6\u0005\u0232\u011a\u0002",
    "\u10f2\u10f3\u0007\u0227\u0002\u0002\u10f3\u10f5\u0005\u0232\u011a\u0002",
    "\u10f4\u10f2\u0003\u0002\u0002\u0002\u10f5\u10f8\u0003\u0002\u0002\u0002",
    "\u10f6\u10f4\u0003\u0002\u0002\u0002\u10f6\u10f7\u0003\u0002\u0002\u0002",
    "\u10f7\u10fb\u0003\u0002\u0002\u0002\u10f8\u10f6\u0003\u0002\u0002\u0002",
    "\u10f9\u10fb\u0005\u0234\u011b\u0002\u10fa\u10e5\u0003\u0002\u0002\u0002",
    "\u10fa\u10f1\u0003\u0002\u0002\u0002\u10fa\u10f9\u0003\u0002\u0002\u0002",
    "\u10fb\u0231\u0003\u0002\u0002\u0002\u10fc\u10fd\u0007\u00a2\u0002\u0002",
    "\u10fd\u110f\u0005\u02ca\u0166\u0002\u10fe\u10ff\u0007\u00bf\u0002\u0002",
    "\u10ff\u1101\u0007\u0221\u0002\u0002\u1100\u1102\u0005\u0216\u010c\u0002",
    "\u1101\u1100\u0003\u0002\u0002\u0002\u1101\u1102\u0003\u0002\u0002\u0002",
    "\u1102\u1103\u0003\u0002\u0002\u0002\u1103\u1110\u0007\u0222\u0002\u0002",
    "\u1104\u1105\u0007\u00df\u0002\u0002\u1105\u1107\u0005\u0218\u010d\u0002",
    "\u1106\u1104\u0003\u0002\u0002\u0002\u1106\u1107\u0003\u0002\u0002\u0002",
    "\u1107\u1108\u0003\u0002\u0002\u0002\u1108\u1109\u0007\u00a5\u0002\u0002",
    "\u1109\u110a\u0005\u0218\u010d\u0002\u110a\u110b\u0007\u01b2\u0002\u0002",
    "\u110b\u110c\u0005\u0218\u010d\u0002\u110c\u110d\t9\u0002\u0002\u110d",
    "\u110e\u0005\u0218\u010d\u0002\u110e\u1110\u0003\u0002\u0002\u0002\u110f",
    "\u10fe\u0003\u0002\u0002\u0002\u110f\u1106\u0003\u0002\u0002\u0002\u1110",
    "\u0233\u0003\u0002\u0002\u0002\u1111\u1112\u0007\u00a2\u0002\u0002\u1112",
    "\u1113\u0007\u0221\u0002\u0002\u1113\u1118\u0005\u02ca\u0166\u0002\u1114",
    "\u1115\u0007\u0227\u0002\u0002\u1115\u1117\u0005\u02ca\u0166\u0002\u1116",
    "\u1114\u0003\u0002\u0002\u0002\u1117\u111a\u0003\u0002\u0002\u0002\u1118",
    "\u1116\u0003\u0002\u0002\u0002\u1118\u1119\u0003\u0002\u0002\u0002\u1119",
    "\u111b\u0003\u0002\u0002\u0002\u111a\u1118\u0003\u0002\u0002\u0002\u111b",
    "\u111c\u0007\u0222\u0002\u0002\u111c\u111d\u0007\u00bf\u0002\u0002\u111d",
    "\u1124\u0007\u0221\u0002\u0002\u111e\u1125\u0005\u0166\u00b4\u0002\u111f",
    "\u1121\u0007\u0221\u0002\u0002\u1120\u1122\u0005\u0216\u010c\u0002\u1121",
    "\u1120\u0003\u0002\u0002\u0002\u1121\u1122\u0003\u0002\u0002\u0002\u1122",
    "\u1123\u0003\u0002\u0002\u0002\u1123\u1125\u0007\u0222\u0002\u0002\u1124",
    "\u111e\u0003\u0002\u0002\u0002\u1124\u111f\u0003\u0002\u0002\u0002\u1125",
    "\u1126\u0003\u0002\u0002\u0002\u1126\u1127\u0007\u0222\u0002\u0002\u1127",
    "\u0235\u0003\u0002\u0002\u0002\u1128\u1129\t8\u0002\u0002\u1129\u1139",
    "\u0005\u0236\u011c\u0002\u112a\u112b\u0007\u014d\u0002\u0002\u112b\u1139",
    "\u0005\u0236\u011c\u0002\u112c\u112d\u0007G\u0002\u0002\u112d\u1139",
    "\u0005\u0236\u011c\u0002\u112e\u112f\u0007\u0106\u0002\u0002\u112f\u1139",
    "\u0005\u0236\u011c\u0002\u1130\u1131\u0007v\u0002\u0002\u1131\u1139",
    "\u0005\u0236\u011c\u0002\u1132\u1133\u0007\b\u0002\u0002\u1133\u1139",
    "\u0005\u0236\u011c\u0002\u1134\u1139\u0005\u0238\u011d\u0002\u1135\u1139",
    "\u0005\u0246\u0124\u0002\u1136\u1139\u0005\u024a\u0126\u0002\u1137\u1139",
    "\u0005\u0244\u0123\u0002\u1138\u1128\u0003\u0002\u0002\u0002\u1138\u112a",
    "\u0003\u0002\u0002\u0002\u1138\u112c\u0003\u0002\u0002\u0002\u1138\u112e",
    "\u0003\u0002\u0002\u0002\u1138\u1130\u0003\u0002\u0002\u0002\u1138\u1132",
    "\u0003\u0002\u0002\u0002\u1138\u1134\u0003\u0002\u0002\u0002\u1138\u1135",
    "\u0003\u0002\u0002\u0002\u1138\u1136\u0003\u0002\u0002\u0002\u1138\u1137",
    "\u0003\u0002\u0002\u0002\u1139\u0237\u0003\u0002\u0002\u0002\u113a\u113d",
    "\u0005\u023e\u0120\u0002\u113b\u113d\u0005\u023a\u011e\u0002\u113c\u113a",
    "\u0003\u0002\u0002\u0002\u113c\u113b\u0003\u0002\u0002\u0002\u113d\u0239",
    "\u0003\u0002\u0002\u0002\u113e\u1140\u0005\u02b0\u0159\u0002\u113f\u113e",
    "\u0003\u0002\u0002\u0002\u113f\u1140\u0003\u0002\u0002\u0002\u1140\u1141",
    "\u0003\u0002\u0002\u0002\u1141\u1142\u00070\u0002\u0002\u1142\u1144",
    "\u0005\u0218\u010d\u0002\u1143\u1145\u0005\u023c\u011f\u0002\u1144\u1143",
    "\u0003\u0002\u0002\u0002\u1145\u1146\u0003\u0002\u0002\u0002\u1146\u1144",
    "\u0003\u0002\u0002\u0002\u1146\u1147\u0003\u0002\u0002\u0002\u1147\u1149",
    "\u0003\u0002\u0002\u0002\u1148\u114a\u0005\u0242\u0122\u0002\u1149\u1148",
    "\u0003\u0002\u0002\u0002\u1149\u114a\u0003\u0002\u0002\u0002\u114a\u114b",
    "\u0003\u0002\u0002\u0002\u114b\u114d\u0007\u0083\u0002\u0002\u114c\u114e",
    "\u00070\u0002\u0002\u114d\u114c\u0003\u0002\u0002\u0002\u114d\u114e",
    "\u0003\u0002\u0002\u0002\u114e\u1150\u0003\u0002\u0002\u0002\u114f\u1151",
    "\u0005\u02b0\u0159\u0002\u1150\u114f\u0003\u0002\u0002\u0002\u1150\u1151",
    "\u0003\u0002\u0002\u0002\u1151\u023b\u0003\u0002\u0002\u0002\u1152\u1153",
    "\u0007\u01d6\u0002\u0002\u1153\u1154\u0005\u0218\u010d\u0002\u1154\u1157",
    "\u0007\u01a7\u0002\u0002\u1155\u1158\u0005\u0104\u0083\u0002\u1156\u1158",
    "\u0005\u0218\u010d\u0002\u1157\u1155\u0003\u0002\u0002\u0002\u1157\u1156",
    "\u0003\u0002\u0002\u0002\u1158\u023d\u0003\u0002\u0002\u0002\u1159\u115b",
    "\u0005\u02b0\u0159\u0002\u115a\u1159\u0003\u0002\u0002\u0002\u115a\u115b",
    "\u0003\u0002\u0002\u0002\u115b\u115c\u0003\u0002\u0002\u0002\u115c\u115e",
    "\u00070\u0002\u0002\u115d\u115f\u0005\u0240\u0121\u0002\u115e\u115d",
    "\u0003\u0002\u0002\u0002\u115f\u1160\u0003\u0002\u0002\u0002\u1160\u115e",
    "\u0003\u0002\u0002\u0002\u1160\u1161\u0003\u0002\u0002\u0002\u1161\u1163",
    "\u0003\u0002\u0002\u0002\u1162\u1164\u0005\u0242\u0122\u0002\u1163\u1162",
    "\u0003\u0002\u0002\u0002\u1163\u1164\u0003\u0002\u0002\u0002\u1164\u1165",
    "\u0003\u0002\u0002\u0002\u1165\u1167\u0007\u0083\u0002\u0002\u1166\u1168",
    "\u00070\u0002\u0002\u1167\u1166\u0003\u0002\u0002\u0002\u1167\u1168",
    "\u0003\u0002\u0002\u0002\u1168\u116a\u0003\u0002\u0002\u0002\u1169\u116b",
    "\u0005\u02b0\u0159\u0002\u116a\u1169\u0003\u0002\u0002\u0002\u116a\u116b",
    "\u0003\u0002\u0002\u0002\u116b\u023f\u0003\u0002\u0002\u0002\u116c\u116d",
    "\u0007\u01d6\u0002\u0002\u116d\u116e\u0005\u0218\u010d\u0002\u116e\u1171",
    "\u0007\u01a7\u0002\u0002\u116f\u1172\u0005\u0104\u0083\u0002\u1170\u1172",
    "\u0005\u0218\u010d\u0002\u1171\u116f\u0003\u0002\u0002\u0002\u1171\u1170",
    "\u0003\u0002\u0002\u0002\u1172\u0241\u0003\u0002\u0002\u0002\u1173\u1176",
    "\u0007}\u0002\u0002\u1174\u1177\u0005\u0104\u0083\u0002\u1175\u1177",
    "\u0005\u0218\u010d\u0002\u1176\u1174\u0003\u0002\u0002\u0002\u1176\u1175",
    "\u0003\u0002\u0002\u0002\u1177\u0243\u0003\u0002\u0002\u0002\u1178\u1179",
    "\u0005\u02ee\u0178\u0002\u1179\u117a\u0005\u02fc\u017f\u0002\u117a\u118c",
    "\u0003\u0002\u0002\u0002\u117b\u118c\u0005\u02e8\u0175\u0002\u117c\u118c",
    "\u0005\u02f0\u0179\u0002\u117d\u118c\u0005\u02ea\u0176\u0002\u117e\u117f",
    "\u0007\u0221\u0002\u0002\u117f\u1180\u0005\u0166\u00b4\u0002\u1180\u1184",
    "\u0007\u0222\u0002\u0002\u1181\u1183\u0005\u016a\u00b6\u0002\u1182\u1181",
    "\u0003\u0002\u0002\u0002\u1183\u1186\u0003\u0002\u0002\u0002\u1184\u1182",
    "\u0003\u0002\u0002\u0002\u1184\u1185\u0003\u0002\u0002\u0002\u1185\u118c",
    "\u0003\u0002\u0002\u0002\u1186\u1184\u0003\u0002\u0002\u0002\u1187\u1188",
    "\u0007\u0221\u0002\u0002\u1188\u1189\u0005\u0216\u010c\u0002\u1189\u118a",
    "\u0007\u0222\u0002\u0002\u118a\u118c\u0003\u0002\u0002\u0002\u118b\u1178",
    "\u0003\u0002\u0002\u0002\u118b\u117b\u0003\u0002\u0002\u0002\u118b\u117c",
    "\u0003\u0002\u0002\u0002\u118b\u117d\u0003\u0002\u0002\u0002\u118b\u117e",
    "\u0003\u0002\u0002\u0002\u118b\u1187\u0003\u0002\u0002\u0002\u118c\u0245",
    "\u0003\u0002\u0002\u0002\u118d\u1196\t:\u0002\u0002\u118e\u118f\u0007",
    "\u0221\u0002\u0002\u118f\u1190\u0005\u0166\u00b4\u0002\u1190\u1191\u0007",
    "\u0222\u0002\u0002\u1191\u1197\u0003\u0002\u0002\u0002\u1192\u1193\u0007",
    "\u0221\u0002\u0002\u1193\u1194\u0005\u0218\u010d\u0002\u1194\u1195\u0007",
    "\u0222\u0002\u0002\u1195\u1197\u0003\u0002\u0002\u0002\u1196\u118e\u0003",
    "\u0002\u0002\u0002\u1196\u1192\u0003\u0002\u0002\u0002\u1197\u0247\u0003",
    "\u0002\u0002\u0002\u1198\u1199\u0007\u020c\u0002\u0002\u1199\u119a\u0007",
    "\u0221\u0002\u0002\u119a\u119b\u0005\u0218\u010d\u0002\u119b\u119c\u0007",
    "\u0227\u0002\u0002\u119c\u119f\u0005\u0218\u010d\u0002\u119d\u119e\u0007",
    "\u0227\u0002\u0002\u119e\u11a0\u0005\u0218\u010d\u0002\u119f\u119d\u0003",
    "\u0002\u0002\u0002\u119f\u11a0\u0003\u0002\u0002\u0002\u11a0\u11a1\u0003",
    "\u0002\u0002\u0002\u11a1\u11a2\u0007\u0222\u0002\u0002\u11a2\u11df\u0003",
    "\u0002\u0002\u0002\u11a3\u11a4\u0007\u020d\u0002\u0002\u11a4\u11a8\u0007",
    "\u0221\u0002\u0002\u11a5\u11a9\u0005\u02ee\u0178\u0002\u11a6\u11a9\u0005",
    "\u024a\u0126\u0002\u11a7\u11a9\u0005\u0218\u010d\u0002\u11a8\u11a5\u0003",
    "\u0002\u0002\u0002\u11a8\u11a6\u0003\u0002\u0002\u0002\u11a8\u11a7\u0003",
    "\u0002\u0002\u0002\u11a9\u11ac\u0003\u0002\u0002\u0002\u11aa\u11ab\u0007",
    "\u0227\u0002\u0002\u11ab\u11ad\u0005\u02f6\u017c\u0002\u11ac\u11aa\u0003",
    "\u0002\u0002\u0002\u11ac\u11ad\u0003\u0002\u0002\u0002\u11ad\u11b0\u0003",
    "\u0002\u0002\u0002\u11ae\u11af\u0007\u0227\u0002\u0002\u11af\u11b1\u0005",
    "\u02f6\u017c\u0002\u11b0\u11ae\u0003\u0002\u0002\u0002\u11b0\u11b1\u0003",
    "\u0002\u0002\u0002\u11b1\u11b2\u0003\u0002\u0002\u0002\u11b2\u11b3\u0007",
    "\u0222\u0002\u0002\u11b3\u11df\u0003\u0002\u0002\u0002\u11b4\u11b5\u0007",
    "\u0200\u0002\u0002\u11b5\u11b6\u0007\u0221\u0002\u0002\u11b6\u11b7\u0005",
    "\u0216\u010c\u0002\u11b7\u11b8\u0007\u0222\u0002\u0002\u11b8\u11df\u0003",
    "\u0002\u0002\u0002\u11b9\u11ba\u00076\u0002\u0002\u11ba\u11bb\u0007",
    "\u0221\u0002\u0002\u11bb\u11bc\u0005\u022a\u0116\u0002\u11bc\u11bd\u0007",
    "\u01c7\u0002\u0002\u11bd\u11be\u0007\u0102\u0002\u0002\u11be\u11bf\u0007",
    "\u0222\u0002\u0002\u11bf\u11df\u0003\u0002\u0002\u0002\u11c0\u11c1\u0007",
    "\u0207\u0002\u0002\u11c1\u11c2\u0007\u0221\u0002\u0002\u11c2\u11c3\u0005",
    "\u0218\u010d\u0002\u11c3\u11c4\u0007\u0227\u0002\u0002\u11c4\u11c5\u0005",
    "\u0218\u010d\u0002\u11c5\u11c6\u0007\u0222\u0002\u0002\u11c6\u11df\u0003",
    "\u0002\u0002\u0002\u11c7\u11c8\u0007\u020e\u0002\u0002\u11c8\u11d0\u0007",
    "\u0221\u0002\u0002\u11c9\u11cb\t;\u0002\u0002\u11ca\u11c9\u0003\u0002",
    "\u0002\u0002\u11ca\u11cb\u0003\u0002\u0002\u0002\u11cb\u11cd\u0003\u0002",
    "\u0002\u0002\u11cc\u11ce\u0005\u02f6\u017c\u0002\u11cd\u11cc\u0003\u0002",
    "\u0002\u0002\u11cd\u11ce\u0003\u0002\u0002\u0002\u11ce\u11cf\u0003\u0002",
    "\u0002\u0002\u11cf\u11d1\u0007\u00a5\u0002\u0002\u11d0\u11ca\u0003\u0002",
    "\u0002\u0002\u11d0\u11d1\u0003\u0002\u0002\u0002\u11d1\u11d2\u0003\u0002",
    "\u0002\u0002\u11d2\u11d3\u0005\u022a\u0116\u0002\u11d3\u11d4\u0007\u0222",
    "\u0002\u0002\u11d4\u11df\u0003\u0002\u0002\u0002\u11d5\u11d6\u0007\u0215",
    "\u0002\u0002\u11d6\u11d7\u0007\u0221\u0002\u0002\u11d7\u11da\u0005\u0218",
    "\u010d\u0002\u11d8\u11d9\u0007\u0227\u0002\u0002\u11d9\u11db\u0005\u02f6",
    "\u017c\u0002\u11da\u11d8\u0003\u0002\u0002\u0002\u11da\u11db\u0003\u0002",
    "\u0002\u0002\u11db\u11dc\u0003\u0002\u0002\u0002\u11dc\u11dd\u0007\u0222",
    "\u0002\u0002\u11dd\u11df\u0003\u0002\u0002\u0002\u11de\u1198\u0003\u0002",
    "\u0002\u0002\u11de\u11a3\u0003\u0002\u0002\u0002\u11de\u11b4\u0003\u0002",
    "\u0002\u0002\u11de\u11b9\u0003\u0002\u0002\u0002\u11de\u11c0\u0003\u0002",
    "\u0002\u0002\u11de\u11c7\u0003\u0002\u0002\u0002\u11de\u11d5\u0003\u0002",
    "\u0002\u0002\u11df\u0249\u0003\u0002\u0002\u0002\u11e0\u11e4\u0005\u0248",
    "\u0125\u0002\u11e1\u11e4\u0005\u024c\u0127\u0002\u11e2\u11e4\u0005\u0250",
    "\u0129\u0002\u11e3\u11e0\u0003\u0002\u0002\u0002\u11e3\u11e1\u0003\u0002",
    "\u0002\u0002\u11e3\u11e2\u0003\u0002\u0002\u0002\u11e4\u024b\u0003\u0002",
    "\u0002\u0002\u11e5\u11e8\u0005\u024e\u0128\u0002\u11e6\u11e9\u0005\u0232",
    "\u011a\u0002\u11e7\u11e9\u0005\u0234\u011b\u0002\u11e8\u11e6\u0003\u0002",
    "\u0002\u0002\u11e8\u11e7\u0003\u0002\u0002\u0002\u11e8\u11e9\u0003\u0002",
    "\u0002\u0002\u11e9\u024d\u0003\u0002\u0002\u0002\u11ea\u11eb\u0007\u020f",
    "\u0002\u0002\u11eb\u11ed\u0007\u0221\u0002\u0002\u11ec\u11ee\t<\u0002",
    "\u0002\u11ed\u11ec\u0003\u0002\u0002\u0002\u11ed\u11ee\u0003\u0002\u0002",
    "\u0002\u11ee\u11ef\u0003\u0002\u0002\u0002\u11ef\u11f0\u0005\u0218\u010d",
    "\u0002\u11f0\u11f1\u0007\u0222\u0002\u0002\u11f1\u1225\u0003\u0002\u0002",
    "\u0002\u11f2\u11f3\u0007T\u0002\u0002\u11f3\u11fb\u0007\u0221\u0002",
    "\u0002\u11f4\u11fc\u0007\u0224\u0002\u0002\u11f5\u11f7\t&\u0002\u0002",
    "\u11f6\u11f5\u0003\u0002\u0002\u0002\u11f6\u11f7\u0003\u0002\u0002\u0002",
    "\u11f7\u11f8\u0003\u0002\u0002\u0002\u11f8\u11fa\u0005\u022a\u0116\u0002",
    "\u11f9\u11f6\u0003\u0002\u0002\u0002\u11f9\u11fa\u0003\u0002\u0002\u0002",
    "\u11fa\u11fc\u0003\u0002\u0002\u0002\u11fb\u11f4\u0003\u0002\u0002\u0002",
    "\u11fb\u11f9\u0003\u0002\u0002\u0002\u11fc\u11fd\u0003\u0002\u0002\u0002",
    "\u11fd\u11ff\u0007\u0222\u0002\u0002\u11fe\u1200\u0005\u0258\u012d\u0002",
    "\u11ff\u11fe\u0003\u0002\u0002\u0002\u11ff\u1200\u0003\u0002\u0002\u0002",
    "\u1200\u1225\u0003\u0002\u0002\u0002\u1201\u1202\u0007\u020a\u0002\u0002",
    "\u1202\u1203\u0007\u0221\u0002\u0002\u1203\u1206\u0005\u0218\u010d\u0002",
    "\u1204\u1205\u0007\u0227\u0002\u0002\u1205\u1207\u0007\u021b\u0002\u0002",
    "\u1206\u1204\u0003\u0002\u0002\u0002\u1206\u1207\u0003\u0002\u0002\u0002",
    "\u1207\u1208\u0003\u0002\u0002\u0002\u1208\u1209\u0007\u0222\u0002\u0002",
    "\u1209\u1225\u0003\u0002\u0002\u0002\u120a\u120b\u0007\u01fd\u0002\u0002",
    "\u120b\u120d\u0007\u0221\u0002\u0002\u120c\u120e\t<\u0002\u0002\u120d",
    "\u120c\u0003\u0002\u0002\u0002\u120d\u120e\u0003\u0002\u0002\u0002\u120e",
    "\u120f\u0003\u0002\u0002\u0002\u120f\u1210\u0005\u0218\u010d\u0002\u1210",
    "\u1211\u0007\u0222\u0002\u0002\u1211\u1225\u0003\u0002\u0002\u0002\u1212",
    "\u1213\u0007\u0203\u0002\u0002\u1213\u1215\u0007\u0221\u0002\u0002\u1214",
    "\u1216\t<\u0002\u0002\u1215\u1214\u0003\u0002\u0002\u0002\u1215\u1216",
    "\u0003\u0002\u0002\u0002\u1216\u1217\u0003\u0002\u0002\u0002\u1217\u1218",
    "\u0005\u0218\u010d\u0002\u1218\u1219\u0007\u0222\u0002\u0002\u1219\u1225",
    "\u0003\u0002\u0002\u0002\u121a\u121b\u0007\u0213\u0002\u0002\u121b\u121c",
    "\u0007\u0221\u0002\u0002\u121c\u121d\u0005\u0216\u010c\u0002\u121d\u121e",
    "\u0007\u0222\u0002\u0002\u121e\u1225\u0003\u0002\u0002\u0002\u121f\u1220",
    "\u0007\u0214\u0002\u0002\u1220\u1221\u0007\u0221\u0002\u0002\u1221\u1222",
    "\u0005\u0216\u010c\u0002\u1222\u1223\u0007\u0222\u0002\u0002\u1223\u1225",
    "\u0003\u0002\u0002\u0002\u1224\u11ea\u0003\u0002\u0002\u0002\u1224\u11f2",
    "\u0003\u0002\u0002\u0002\u1224\u1201\u0003\u0002\u0002\u0002\u1224\u120a",
    "\u0003\u0002\u0002\u0002\u1224\u1212\u0003\u0002\u0002\u0002\u1224\u121a",
    "\u0003\u0002\u0002\u0002\u1224\u121f\u0003\u0002\u0002\u0002\u1225\u024f",
    "\u0003\u0002\u0002\u0002\u1226\u1227\u0005\u0252\u012a\u0002\u1227\u1229",
    "\u0005\u02d8\u016d\u0002\u1228\u122a\u0005\u0258\u012d\u0002\u1229\u1228",
    "\u0003\u0002\u0002\u0002\u1229\u122a\u0003\u0002\u0002\u0002\u122a\u1362",
    "\u0003\u0002\u0002\u0002\u122b\u122c\u0005\u02fe\u0180\u0002\u122c\u122e",
    "\u0005\u02da\u016e\u0002\u122d\u122f\u0005\u0260\u0131\u0002\u122e\u122d",
    "\u0003\u0002\u0002\u0002\u122e\u122f\u0003\u0002\u0002\u0002\u122f\u1362",
    "\u0003\u0002\u0002\u0002\u1230\u1231\u0007T\u0002\u0002\u1231\u1237",
    "\u0007\u0221\u0002\u0002\u1232\u1238\u0007\u0224\u0002\u0002\u1233\u1235",
    "\t&\u0002\u0002\u1234\u1233\u0003\u0002\u0002\u0002\u1234\u1235\u0003",
    "\u0002\u0002\u0002\u1235\u1236\u0003\u0002\u0002\u0002\u1236\u1238\u0005",
    "\u022a\u0116\u0002\u1237\u1232\u0003\u0002\u0002\u0002\u1237\u1234\u0003",
    "\u0002\u0002\u0002\u1238\u1239\u0003\u0002\u0002\u0002\u1239\u123b\u0007",
    "\u0222\u0002\u0002\u123a\u123c\u0005\u0258\u012d\u0002\u123b\u123a\u0003",
    "\u0002\u0002\u0002\u123b\u123c\u0003\u0002\u0002\u0002\u123c\u1362\u0003",
    "\u0002\u0002\u0002\u123d\u123e\t=\u0002\u0002\u123e\u1245\u0007\u0221",
    "\u0002\u0002\u123f\u1240\u0007\u00fc\u0002\u0002\u1240\u1241\u0007\u0221",
    "\u0002\u0002\u1241\u1242\u0005\u0166\u00b4\u0002\u1242\u1243\u0007\u0222",
    "\u0002\u0002\u1243\u1246\u0003\u0002\u0002\u0002\u1244\u1246\u0005\u022a",
    "\u0116\u0002\u1245\u123f\u0003\u0002\u0002\u0002\u1245\u1244\u0003\u0002",
    "\u0002\u0002\u1246\u1247\u0003\u0002\u0002\u0002\u1247\u1248\u0007\u000f",
    "\u0002\u0002\u1248\u1249\u0005\u02e0\u0171\u0002\u1249\u124a\u0007\u0222",
    "\u0002\u0002\u124a\u1362\u0003\u0002\u0002\u0002\u124b\u124c\u0007;",
    "\u0002\u0002\u124c\u124d\u0007\u0221\u0002\u0002\u124d\u1253\u0005\u02ee",
    "\u0178\u0002\u124e\u1251\u0007\u0227\u0002\u0002\u124f\u1252\u0005\u02f2",
    "\u017a\u0002\u1250\u1252\u0005\u02f6\u017c\u0002\u1251\u124f\u0003\u0002",
    "\u0002\u0002\u1251\u1250\u0003\u0002\u0002\u0002\u1252\u1254\u0003\u0002",
    "\u0002\u0002\u1253\u124e\u0003\u0002\u0002\u0002\u1253\u1254\u0003\u0002",
    "\u0002\u0002\u1254\u1255\u0003\u0002\u0002\u0002\u1255\u1256\u0007\u0222",
    "\u0002\u0002\u1256\u1362\u0003\u0002\u0002\u0002\u1257\u1258\u0007<",
    "\u0002\u0002\u1258\u125a\u0007\u0221\u0002\u0002\u1259\u125b\t>\u0002",
    "\u0002\u125a\u1259\u0003\u0002\u0002\u0002\u125a\u125b\u0003\u0002\u0002",
    "\u0002\u125b\u125c\u0003\u0002\u0002\u0002\u125c\u125e\u0005\u022a\u0116",
    "\u0002\u125d\u125f\u0005\u0264\u0133\u0002\u125e\u125d\u0003\u0002\u0002",
    "\u0002\u125e\u125f\u0003\u0002\u0002\u0002\u125f\u1260\u0003\u0002\u0002",
    "\u0002\u1260\u1261\u0007\u0222\u0002\u0002\u1261\u1362\u0003\u0002\u0002",
    "\u0002\u1262\u1263\u0005\u0254\u012b\u0002\u1263\u1265\u0005\u02d6\u016c",
    "\u0002\u1264\u1266\u0005\u0266\u0134\u0002\u1265\u1264\u0003\u0002\u0002",
    "\u0002\u1266\u1267\u0003\u0002\u0002\u0002\u1267\u1265\u0003\u0002\u0002",
    "\u0002\u1267\u1268\u0003\u0002\u0002\u0002\u1268\u1362\u0003\u0002\u0002",
    "\u0002\u1269\u126a\u0005\u02c2\u0162\u0002\u126a\u126b\t?\u0002\u0002",
    "\u126b\u1362\u0003\u0002\u0002\u0002\u126c\u126d\u0007i\u0002\u0002",
    "\u126d\u126e\u0007\u0221\u0002\u0002\u126e\u1270\u0005\u022a\u0116\u0002",
    "\u126f\u1271\t@\u0002\u0002\u1270\u126f\u0003\u0002\u0002\u0002\u1270",
    "\u1271\u0003\u0002\u0002\u0002\u1271\u1272\u0003\u0002\u0002\u0002\u1272",
    "\u1273\u0007\u0222\u0002\u0002\u1273\u1362\u0003\u0002\u0002\u0002\u1274",
    "\u1275\u0007\u0093\u0002\u0002\u1275\u1276\u0007\u0221\u0002\u0002\u1276",
    "\u1277\u0005\u02fe\u0180\u0002\u1277\u1278\u0007\u00a5\u0002\u0002\u1278",
    "\u1279\u0005\u022a\u0116\u0002\u1279\u127a\u0007\u0222\u0002\u0002\u127a",
    "\u1362\u0003\u0002\u0002\u0002\u127b\u127c\tA\u0002\u0002\u127c\u127e",
    "\u0005\u02d8\u016d\u0002\u127d\u127f\u0005\u02dc\u016f\u0002\u127e\u127d",
    "\u0003\u0002\u0002\u0002\u127e\u127f\u0003\u0002\u0002\u0002\u127f\u1280",
    "\u0003\u0002\u0002\u0002\u1280\u1281\u0005\u0258\u012d\u0002\u1281\u1362",
    "\u0003\u0002\u0002\u0002\u1282\u1283\u0005\u0256\u012c\u0002\u1283\u1284",
    "\u0007\u0221\u0002\u0002\u1284\u1286\u0005\u0216\u010c\u0002\u1285\u1287",
    "\u0005\u0268\u0135\u0002\u1286\u1285\u0003\u0002\u0002\u0002\u1286\u1287",
    "\u0003\u0002\u0002\u0002\u1287\u1289\u0003\u0002\u0002\u0002\u1288\u128a",
    "\u0005\u0260\u0131\u0002\u1289\u1288\u0003\u0002\u0002\u0002\u1289\u128a",
    "\u0003\u0002\u0002\u0002\u128a\u128b\u0003\u0002\u0002\u0002\u128b\u128c",
    "\u0007\u0222\u0002\u0002\u128c\u1362\u0003\u0002\u0002\u0002\u128d\u128e",
    "\u0007\u01b5\u0002\u0002\u128e\u128f\u0007\u0221\u0002\u0002\u128f\u1292",
    "\u0005\u0218\u010d\u0002\u1290\u1291\u0007\u01c7\u0002\u0002\u1291\u1293",
    "\tB\u0002\u0002\u1292\u1290\u0003\u0002\u0002\u0002\u1292\u1293\u0003",
    "\u0002\u0002\u0002\u1293\u1298\u0003\u0002\u0002\u0002\u1294\u1295\u0007",
    "\u0227\u0002\u0002\u1295\u1297\u0005\u0218\u010d\u0002\u1296\u1294\u0003",
    "\u0002\u0002\u0002\u1297\u129a\u0003\u0002\u0002\u0002\u1298\u1296\u0003",
    "\u0002\u0002\u0002\u1298\u1299\u0003\u0002\u0002\u0002\u1299\u129b\u0003",
    "\u0002\u0002\u0002\u129a\u1298\u0003\u0002\u0002\u0002\u129b\u129c\u0007",
    "\u0222\u0002\u0002\u129c\u1362\u0003\u0002\u0002\u0002\u129d\u129e\u0007",
    "\u01b6\u0002\u0002\u129e\u129f\u0007\u0221\u0002\u0002\u129f\u12a0\u0005",
    "\u0218\u010d\u0002\u12a0\u12a2\u0007\u000f\u0002\u0002\u12a1\u12a3\u0007",
    "\u015b\u0002\u0002\u12a2\u12a1\u0003\u0002\u0002\u0002\u12a2\u12a3\u0003",
    "\u0002\u0002\u0002\u12a3\u12a4\u0003\u0002\u0002\u0002\u12a4\u12a5\u0005",
    "\u02e0\u0171\u0002\u12a5\u12a6\u0007\u0222\u0002\u0002\u12a6\u1362\u0003",
    "\u0002\u0002\u0002\u12a7\u12a8\u0007\u020e\u0002\u0002\u12a8\u12b0\u0007",
    "\u0221\u0002\u0002\u12a9\u12ab\t;\u0002\u0002\u12aa\u12a9\u0003\u0002",
    "\u0002\u0002\u12aa\u12ab\u0003\u0002\u0002\u0002\u12ab\u12ad\u0003\u0002",
    "\u0002\u0002\u12ac\u12ae\u0005\u02f6\u017c\u0002\u12ad\u12ac\u0003\u0002",
    "\u0002\u0002\u12ad\u12ae\u0003\u0002\u0002\u0002\u12ae\u12af\u0003\u0002",
    "\u0002\u0002\u12af\u12b1\u0007\u00a5\u0002\u0002\u12b0\u12aa\u0003\u0002",
    "\u0002\u0002\u12b0\u12b1\u0003\u0002\u0002\u0002\u12b1\u12b2\u0003\u0002",
    "\u0002\u0002\u12b2\u12b3\u0005\u022a\u0116\u0002\u12b3\u12b4\u0007\u0222",
    "\u0002\u0002\u12b4\u1362\u0003\u0002\u0002\u0002\u12b5\u12b6\u0007\u01dd",
    "\u0002\u0002\u12b6\u12b7\u0007\u0221\u0002\u0002\u12b7\u12b9\u0005\u0218",
    "\u010d\u0002\u12b8\u12ba\u0005\u01c8\u00e5\u0002\u12b9\u12b8\u0003\u0002",
    "\u0002\u0002\u12b9\u12ba\u0003\u0002\u0002\u0002\u12ba\u12bb\u0003\u0002",
    "\u0002\u0002\u12bb\u12be\u0007\u0222\u0002\u0002\u12bc\u12bd\u0007\u021a",
    "\u0002\u0002\u12bd\u12bf\u0005\u02ec\u0177\u0002\u12be\u12bc\u0003\u0002",
    "\u0002\u0002\u12be\u12bf\u0003\u0002\u0002\u0002\u12bf\u1362\u0003\u0002",
    "\u0002\u0002\u12c0\u12c1\tC\u0002\u0002\u12c1\u12c2\u0007\u0221\u0002",
    "\u0002\u12c2\u12c7\u0005\u0274\u013b\u0002\u12c3\u12c4\u0007\u0227\u0002",
    "\u0002\u12c4\u12c6\u0005\u0274\u013b\u0002\u12c5\u12c3\u0003\u0002\u0002",
    "\u0002\u12c6\u12c9\u0003\u0002\u0002\u0002\u12c7\u12c5\u0003\u0002\u0002",
    "\u0002\u12c7\u12c8\u0003\u0002\u0002\u0002\u12c8\u12ca\u0003\u0002\u0002",
    "\u0002\u12c9\u12c7\u0003\u0002\u0002\u0002\u12ca\u12cd\u0007\u0222\u0002",
    "\u0002\u12cb\u12cc\u0007\u021a\u0002\u0002\u12cc\u12ce\u0005\u02ec\u0177",
    "\u0002\u12cd\u12cb\u0003\u0002\u0002\u0002\u12cd\u12ce\u0003\u0002\u0002",
    "\u0002\u12ce\u1362\u0003\u0002\u0002\u0002\u12cf\u12d0\u0007\u01e1\u0002",
    "\u0002\u12d0\u12d2\u0007\u0221\u0002\u0002\u12d1\u12d3\tD\u0002\u0002",
    "\u12d2\u12d1\u0003\u0002\u0002\u0002\u12d2\u12d3\u0003\u0002\u0002\u0002",
    "\u12d3\u12d5\u0003\u0002\u0002\u0002\u12d4\u12d6\tE\u0002\u0002\u12d5",
    "\u12d4\u0003\u0002\u0002\u0002\u12d5\u12d6\u0003\u0002\u0002\u0002\u12d6",
    "\u12d7\u0003\u0002\u0002\u0002\u12d7\u12da\u0005\u0218\u010d\u0002\u12d8",
    "\u12d9\u0007\u0227\u0002\u0002\u12d9\u12db\u0005\u026c\u0137\u0002\u12da",
    "\u12d8\u0003\u0002\u0002\u0002\u12da\u12db\u0003\u0002\u0002\u0002\u12db",
    "\u12e3\u0003\u0002\u0002\u0002\u12dc\u12dd\u0007\u0227\u0002\u0002\u12dd",
    "\u12df\u0005\u0218\u010d\u0002\u12de\u12e0\u0005\u0288\u0145\u0002\u12df",
    "\u12de\u0003\u0002\u0002\u0002\u12df\u12e0\u0003\u0002\u0002\u0002\u12e0",
    "\u12e2\u0003\u0002\u0002\u0002\u12e1\u12dc\u0003\u0002\u0002\u0002\u12e2",
    "\u12e5\u0003\u0002\u0002\u0002\u12e3\u12e1\u0003\u0002\u0002\u0002\u12e3",
    "\u12e4\u0003\u0002\u0002\u0002\u12e4\u12e6\u0003\u0002\u0002\u0002\u12e5",
    "\u12e3\u0003\u0002\u0002\u0002\u12e6\u12e9\u0007\u0222\u0002\u0002\u12e7",
    "\u12e8\u0007\u021a\u0002\u0002\u12e8\u12ea\u0005\u02ec\u0177\u0002\u12e9",
    "\u12e7\u0003\u0002\u0002\u0002\u12e9\u12ea\u0003\u0002\u0002\u0002\u12ea",
    "\u1362\u0003\u0002\u0002\u0002\u12eb\u12ec\u0007\u01e2\u0002\u0002\u12ec",
    "\u12ed\u0007\u0221\u0002\u0002\u12ed\u12ef\u0005\u0218\u010d\u0002\u12ee",
    "\u12f0\u0005\u026a\u0136\u0002\u12ef\u12ee\u0003\u0002\u0002\u0002\u12ef",
    "\u12f0\u0003\u0002\u0002\u0002\u12f0\u12f1\u0003\u0002\u0002\u0002\u12f1",
    "\u12f2\u0007\u0222\u0002\u0002\u12f2\u1362\u0003\u0002\u0002\u0002\u12f3",
    "\u12f4\u0007\u01e5\u0002\u0002\u12f4\u12f5\u0007\u0221\u0002\u0002\u12f5",
    "\u12f6\tF\u0002\u0002\u12f6\u12f8\u0005\u022a\u0116\u0002\u12f7\u12f9",
    "\u0007\u01d4\u0002\u0002\u12f8\u12f7\u0003\u0002\u0002\u0002\u12f8\u12f9",
    "\u0003\u0002\u0002\u0002\u12f9\u12fa\u0003\u0002\u0002\u0002\u12fa\u12fd",
    "\u0007\u0222\u0002\u0002\u12fb\u12fc\u0007\u021a\u0002\u0002\u12fc\u12fe",
    "\u0005\u02ec\u0177\u0002\u12fd\u12fb\u0003\u0002\u0002\u0002\u12fd\u12fe",
    "\u0003\u0002\u0002\u0002\u12fe\u1362\u0003\u0002\u0002\u0002\u12ff\u1300",
    "\u0007\u01e6\u0002\u0002\u1300\u1305\u0007\u0221\u0002\u0002\u1301\u1302",
    "\u0007\u00fd\u0002\u0002\u1302\u1306\u0005\u02f8\u017d\u0002\u1303\u1304",
    "\u0007\u0088\u0002\u0002\u1304\u1306\u0005\u022a\u0116\u0002\u1305\u1301",
    "\u0003\u0002\u0002\u0002\u1305\u1303\u0003\u0002\u0002\u0002\u1306\u1309",
    "\u0003\u0002\u0002\u0002\u1307\u1308\u0007\u0227\u0002\u0002\u1308\u130a",
    "\u0005\u022a\u0116\u0002\u1309\u1307\u0003\u0002\u0002\u0002\u1309\u130a",
    "\u0003\u0002\u0002\u0002\u130a\u130b\u0003\u0002\u0002\u0002\u130b\u130e",
    "\u0007\u0222\u0002\u0002\u130c\u130d\u0007\u021a\u0002\u0002\u130d\u130f",
    "\u0005\u02ec\u0177\u0002\u130e\u130c\u0003\u0002\u0002\u0002\u130e\u130f",
    "\u0003\u0002\u0002\u0002\u130f\u1362\u0003\u0002\u0002\u0002\u1310\u1311",
    "\u0007\u01e7\u0002\u0002\u1311\u1312\u0007\u0221\u0002\u0002\u1312\u1314",
    "\u0005\u022a\u0116\u0002\u1313\u1315\u0005\u026a\u0136\u0002\u1314\u1313",
    "\u0003\u0002\u0002\u0002\u1314\u1315\u0003\u0002\u0002\u0002\u1315\u1316",
    "\u0003\u0002\u0002\u0002\u1316\u1317\u0007\u0164\u0002\u0002\u1317\u131b",
    "\u0007M\u0002\u0002\u1318\u1319\u0007\u0117\u0002\u0002\u1319\u131a",
    "\u0007\u0123\u0002\u0002\u131a\u131c\u0007\u007f\u0002\u0002\u131b\u1318",
    "\u0003\u0002\u0002\u0002\u131b\u131c\u0003\u0002\u0002\u0002\u131c\u131d",
    "\u0003\u0002\u0002\u0002\u131d\u1320\u0007\u0222\u0002\u0002\u131e\u131f",
    "\u0007\u021a\u0002\u0002\u131f\u1321\u0005\u02ec\u0177\u0002\u1320\u131e",
    "\u0003\u0002\u0002\u0002\u1320\u1321\u0003\u0002\u0002\u0002\u1321\u1362",
    "\u0003\u0002\u0002\u0002\u1322\u1323\u0007\u01e8\u0002\u0002\u1323\u1324",
    "\u0007\u0221\u0002\u0002\u1324\u1327\u0005\u022a\u0116\u0002\u1325\u1326",
    "\u0007\u0227\u0002\u0002\u1326\u1328\u0005\u0276\u013c\u0002\u1327\u1325",
    "\u0003\u0002\u0002\u0002\u1327\u1328\u0003\u0002\u0002\u0002\u1328\u132b",
    "\u0003\u0002\u0002\u0002\u1329\u132a\u0007\u0227\u0002\u0002\u132a\u132c",
    "\u0005\u0278\u013d\u0002\u132b\u1329\u0003\u0002\u0002\u0002\u132b\u132c",
    "\u0003\u0002\u0002\u0002\u132c\u132d\u0003\u0002\u0002\u0002\u132d\u1330",
    "\u0007\u0222\u0002\u0002\u132e\u132f\u0007\u021a\u0002\u0002\u132f\u1331",
    "\u0005\u02ec\u0177\u0002\u1330\u132e\u0003\u0002\u0002\u0002\u1330\u1331",
    "\u0003\u0002\u0002\u0002\u1331\u1362\u0003\u0002\u0002\u0002\u1332\u1333",
    "\u0007\u01e9\u0002\u0002\u1333\u1334\u0007\u0221\u0002\u0002\u1334\u1335",
    "\tF\u0002\u0002\u1335\u1338\u0005\u022a\u0116\u0002\u1336\u1337\u0007",
    "\u000f\u0002\u0002\u1337\u1339\u0005\u02e0\u0171\u0002\u1338\u1336\u0003",
    "\u0002\u0002\u0002\u1338\u1339\u0003\u0002\u0002\u0002\u1339\u133b\u0003",
    "\u0002\u0002\u0002\u133a\u133c\u0005\u027a\u013e\u0002\u133b\u133a\u0003",
    "\u0002\u0002\u0002\u133b\u133c\u0003\u0002\u0002\u0002\u133c\u133e\u0003",
    "\u0002\u0002\u0002\u133d\u133f\u0005\u027c\u013f\u0002\u133e\u133d\u0003",
    "\u0002\u0002\u0002\u133e\u133f\u0003\u0002\u0002\u0002\u133f\u1341\u0003",
    "\u0002\u0002\u0002\u1340\u1342\u0005\u027e\u0140\u0002\u1341\u1340\u0003",
    "\u0002\u0002\u0002\u1341\u1342\u0003\u0002\u0002\u0002\u1342\u1345\u0003",
    "\u0002\u0002\u0002\u1343\u1344\tG\u0002\u0002\u1344\u1346\u0007l\u0002",
    "\u0002\u1345\u1343\u0003\u0002\u0002\u0002\u1345\u1346\u0003\u0002\u0002",
    "\u0002\u1346\u1347\u0003\u0002\u0002\u0002\u1347\u134a\u0007\u0222\u0002",
    "\u0002\u1348\u1349\u0007\u021a\u0002\u0002\u1349\u134b\u0005\u02ec\u0177",
    "\u0002\u134a\u1348\u0003\u0002\u0002\u0002\u134a\u134b\u0003\u0002\u0002",
    "\u0002\u134b\u1362\u0003\u0002\u0002\u0002\u134c\u134d\u0007\u01ea\u0002",
    "\u0002\u134d\u134f\u0007\u0221\u0002\u0002\u134e\u1350\u0005\u026e\u0138",
    "\u0002\u134f\u134e\u0003\u0002\u0002\u0002\u134f\u1350\u0003\u0002\u0002",
    "\u0002\u1350\u1351\u0003\u0002\u0002\u0002\u1351\u1353\u0005\u022a\u0116",
    "\u0002\u1352\u1354\u0005\u026a\u0136\u0002\u1353\u1352\u0003\u0002\u0002",
    "\u0002\u1353\u1354\u0003\u0002\u0002\u0002\u1354\u135a\u0003\u0002\u0002",
    "\u0002\u1355\u1356\u0007>\u0002\u0002\u1356\u1357\u0005\u0270\u0139",
    "\u0002\u1357\u1358\u0007\u0227\u0002\u0002\u1358\u1359\u0005\u0270\u0139",
    "\u0002\u1359\u135b\u0003\u0002\u0002\u0002\u135a\u1355\u0003\u0002\u0002",
    "\u0002\u135a\u135b\u0003\u0002\u0002\u0002\u135b\u135c\u0003\u0002\u0002",
    "\u0002\u135c\u135f\u0007\u0222\u0002\u0002\u135d\u135e\u0007\u021a\u0002",
    "\u0002\u135e\u1360\u0005\u02ec\u0177\u0002\u135f\u135d\u0003\u0002\u0002",
    "\u0002\u135f\u1360\u0003\u0002\u0002\u0002\u1360\u1362\u0003\u0002\u0002",
    "\u0002\u1361\u1226\u0003\u0002\u0002\u0002\u1361\u122b\u0003\u0002\u0002",
    "\u0002\u1361\u1230\u0003\u0002\u0002\u0002\u1361\u123d\u0003\u0002\u0002",
    "\u0002\u1361\u124b\u0003\u0002\u0002\u0002\u1361\u1257\u0003\u0002\u0002",
    "\u0002\u1361\u1262\u0003\u0002\u0002\u0002\u1361\u1269\u0003\u0002\u0002",
    "\u0002\u1361\u126c\u0003\u0002\u0002\u0002\u1361\u1274\u0003\u0002\u0002",
    "\u0002\u1361\u127b\u0003\u0002\u0002\u0002\u1361\u1282\u0003\u0002\u0002",
    "\u0002\u1361\u128d\u0003\u0002\u0002\u0002\u1361\u129d\u0003\u0002\u0002",
    "\u0002\u1361\u12a7\u0003\u0002\u0002\u0002\u1361\u12b5\u0003\u0002\u0002",
    "\u0002\u1361\u12c0\u0003\u0002\u0002\u0002\u1361\u12cf\u0003\u0002\u0002",
    "\u0002\u1361\u12eb\u0003\u0002\u0002\u0002\u1361\u12f3\u0003\u0002\u0002",
    "\u0002\u1361\u12ff\u0003\u0002\u0002\u0002\u1361\u1310\u0003\u0002\u0002",
    "\u0002\u1361\u1322\u0003\u0002\u0002\u0002\u1361\u1332\u0003\u0002\u0002",
    "\u0002\u1361\u134c\u0003\u0002\u0002\u0002\u1362\u0251\u0003\u0002\u0002",
    "\u0002\u1363\u1364\tH\u0002\u0002\u1364\u0253\u0003\u0002\u0002\u0002",
    "\u1365\u1366\tI\u0002\u0002\u1366\u0255\u0003\u0002\u0002\u0002\u1367",
    "\u1368\tJ\u0002\u0002\u1368\u0257\u0003\u0002\u0002\u0002\u1369\u136a",
    "\u0007\u012e\u0002\u0002\u136a\u136c\u0007\u0221\u0002\u0002\u136b\u136d",
    "\u0005\u0184\u00c3\u0002\u136c\u136b\u0003\u0002\u0002\u0002\u136c\u136d",
    "\u0003\u0002\u0002\u0002\u136d\u1372\u0003\u0002\u0002\u0002\u136e\u1370",
    "\u0005\u01c8\u00e5\u0002\u136f\u1371\u0005\u025a\u012e\u0002\u1370\u136f",
    "\u0003\u0002\u0002\u0002\u1370\u1371\u0003\u0002\u0002\u0002\u1371\u1373",
    "\u0003\u0002\u0002\u0002\u1372\u136e\u0003\u0002\u0002\u0002\u1372\u1373",
    "\u0003\u0002\u0002\u0002\u1373\u1374\u0003\u0002\u0002\u0002\u1374\u1375",
    "\u0007\u0222\u0002\u0002\u1375\u0259\u0003\u0002\u0002\u0002\u1376\u137d",
    "\u0005\u025c\u012f\u0002\u1377\u1378\u0007\u001d\u0002\u0002\u1378\u1379",
    "\u0005\u025e\u0130\u0002\u1379\u137a\u0007\u000b\u0002\u0002\u137a\u137b",
    "\u0005\u025e\u0130\u0002\u137b\u137e\u0003\u0002\u0002\u0002\u137c\u137e",
    "\u0005\u025e\u0130\u0002\u137d\u1377\u0003\u0002\u0002\u0002\u137d\u137c",
    "\u0003\u0002\u0002\u0002\u137e\u025b\u0003\u0002\u0002\u0002\u137f\u1380",
    "\tK\u0002\u0002\u1380\u025d\u0003\u0002\u0002\u0002\u1381\u1382\u0007",
    "\u01bb\u0002\u0002\u1382\u1389\u0007\u0148\u0002\u0002\u1383\u1384\u0007",
    "Y\u0002\u0002\u1384\u1389\u0007\u016d\u0002\u0002\u1385\u1386\u0005",
    "\u022a\u0116\u0002\u1386\u1387\tL\u0002\u0002\u1387\u1389\u0003\u0002",
    "\u0002\u0002\u1388\u1381\u0003\u0002\u0002\u0002\u1388\u1383\u0003\u0002",
    "\u0002\u0002\u1388\u1385\u0003\u0002\u0002\u0002\u1389\u025f\u0003\u0002",
    "\u0002\u0002\u138a\u1394\u0007\u01c7\u0002\u0002\u138b\u1395\u0007\u0224",
    "\u0002\u0002\u138c\u1391\u0005\u0262\u0132\u0002\u138d\u138e\u0007\u0227",
    "\u0002\u0002\u138e\u1390\u0005\u0262\u0132\u0002\u138f\u138d\u0003\u0002",
    "\u0002\u0002\u1390\u1393\u0003\u0002\u0002\u0002\u1391\u138f\u0003\u0002",
    "\u0002\u0002\u1391\u1392\u0003\u0002\u0002\u0002\u1392\u1395\u0003\u0002",
    "\u0002\u0002\u1393\u1391\u0003\u0002\u0002\u0002\u1394\u138b\u0003\u0002",
    "\u0002\u0002\u1394\u138c\u0003\u0002\u0002\u0002\u1395\u0261\u0003\u0002",
    "\u0002\u0002\u1396\u1398\u0007\u00bf\u0002\u0002\u1397\u1399\u0007\u012d",
    "\u0002\u0002\u1398\u1397\u0003\u0002\u0002\u0002\u1398\u1399\u0003\u0002",
    "\u0002\u0002\u1399\u139c\u0003\u0002\u0002\u0002\u139a\u139c\u0007\u012d",
    "\u0002\u0002\u139b\u1396\u0003\u0002\u0002\u0002\u139b\u139a\u0003\u0002",
    "\u0002\u0002\u139b\u139c\u0003\u0002\u0002\u0002\u139c\u139d\u0003\u0002",
    "\u0002\u0002\u139d\u139f\u0005\u0172\u00ba\u0002\u139e\u13a0\u0005\u0288",
    "\u0145\u0002\u139f\u139e\u0003\u0002\u0002\u0002\u139f\u13a0\u0003\u0002",
    "\u0002\u0002\u13a0\u0263\u0003\u0002\u0002\u0002\u13a1\u13a2\u0007\u0128",
    "\u0002\u0002\u13a2\u13a3\u0007*\u0002\u0002\u13a3\u13a4\u0005\u022a",
    "\u0116\u0002\u13a4\u0265\u0003\u0002\u0002\u0002\u13a5\u13a6\u0007\u01d9",
    "\u0002\u0002\u13a6\u13a7\u0007\u00ab\u0002\u0002\u13a7\u13a8\u0007\u0221",
    "\u0002\u0002\u13a8\u13a9\u0005\u01c8\u00e5\u0002\u13a9\u13aa\u0007\u0222",
    "\u0002\u0002\u13aa\u13ad\u0003\u0002\u0002\u0002\u13ab\u13ad\u0005\u0258",
    "\u012d\u0002\u13ac\u13a5\u0003\u0002\u0002\u0002\u13ac\u13ab\u0003\u0002",
    "\u0002\u0002\u13ad\u0267\u0003\u0002\u0002\u0002\u13ae\u13c4\u0007S",
    "\u0002\u0002\u13af\u13b1\u0007\u00f8\u0002\u0002\u13b0\u13b2\u0007\u0016",
    "\u0002\u0002\u13b1\u13b0\u0003\u0002\u0002\u0002\u13b1\u13b2\u0003\u0002",
    "\u0002\u0002\u13b2\u13c5\u0003\u0002\u0002\u0002\u13b3\u13b4\u0007\u0221",
    "\u0002\u0002\u13b4\u13b9\u0005\u0292\u014a\u0002\u13b5\u13b6\u0007\u0227",
    "\u0002\u0002\u13b6\u13b8\u0005\u0292\u014a\u0002\u13b7\u13b5\u0003\u0002",
    "\u0002\u0002\u13b8\u13bb\u0003\u0002\u0002\u0002\u13b9\u13b7\u0003\u0002",
    "\u0002\u0002\u13b9\u13ba\u0003\u0002\u0002\u0002\u13ba\u13bc\u0003\u0002",
    "\u0002\u0002\u13bb\u13b9\u0003\u0002\u0002\u0002\u13bc\u13bd\u0007\u0222",
    "\u0002\u0002\u13bd\u13be\u0007\u01c9\u0002\u0002\u13be\u13c0\u0007\u0221",
    "\u0002\u0002\u13bf\u13c1\u0005\u0216\u010c\u0002\u13c0\u13bf\u0003\u0002",
    "\u0002\u0002\u13c0\u13c1\u0003\u0002\u0002\u0002\u13c1\u13c2\u0003\u0002",
    "\u0002\u0002\u13c2\u13c3\u0007\u0222\u0002\u0002\u13c3\u13c5\u0003\u0002",
    "\u0002\u0002\u13c4\u13af\u0003\u0002\u0002\u0002\u13c4\u13b3\u0003\u0002",
    "\u0002\u0002\u13c5\u0269\u0003\u0002\u0002\u0002\u13c6\u13c9\u0007\u0135",
    "\u0002\u0002\u13c7\u13c8\u0007*\u0002\u0002\u13c8\u13ca\u0007\u01ca",
    "\u0002\u0002\u13c9\u13c7\u0003\u0002\u0002\u0002\u13c9\u13ca\u0003\u0002",
    "\u0002\u0002\u13ca\u13cb\u0003\u0002\u0002\u0002\u13cb\u13cd\u0005\u0218",
    "\u010d\u0002\u13cc\u13ce\u0005\u0288\u0145\u0002\u13cd\u13cc\u0003\u0002",
    "\u0002\u0002\u13cd\u13ce\u0003\u0002\u0002\u0002\u13ce\u13cf\u0003\u0002",
    "\u0002\u0002\u13cf\u13d0\u0007\u0227\u0002\u0002\u13d0\u13d2\u0005\u0218",
    "\u010d\u0002\u13d1\u13d3\u0005\u0288\u0145\u0002\u13d2\u13d1\u0003\u0002",
    "\u0002\u0002\u13d2\u13d3\u0003\u0002\u0002\u0002\u13d3\u026b\u0003\u0002",
    "\u0002\u0002\u13d4\u13d5\u0007\u01de\u0002\u0002\u13d5\u13d7\u0007\u0221",
    "\u0002\u0002\u13d6\u13d8\tD\u0002\u0002\u13d7\u13d6\u0003\u0002\u0002",
    "\u0002\u13d7\u13d8\u0003\u0002\u0002\u0002\u13d8\u13da\u0003\u0002\u0002",
    "\u0002\u13d9\u13db\tM\u0002\u0002\u13da\u13d9\u0003\u0002\u0002\u0002",
    "\u13da\u13db\u0003\u0002\u0002\u0002\u13db\u13dc\u0003\u0002\u0002\u0002",
    "\u13dc\u13e1\u0005\u0274\u013b\u0002\u13dd\u13de\u0007\u0227\u0002\u0002",
    "\u13de\u13e0\u0005\u0274\u013b\u0002\u13df\u13dd\u0003\u0002\u0002\u0002",
    "\u13e0\u13e3\u0003\u0002\u0002\u0002\u13e1\u13df\u0003\u0002\u0002\u0002",
    "\u13e1\u13e2\u0003\u0002\u0002\u0002\u13e2\u13e4\u0003\u0002\u0002\u0002",
    "\u13e3\u13e1\u0003\u0002\u0002\u0002\u13e4\u13e5\u0007\u0222\u0002\u0002",
    "\u13e5\u026d\u0003\u0002\u0002\u0002\u13e6\u13e7\u0007\u01e4\u0002\u0002",
    "\u13e7\u13eb\u0007\u0221\u0002\u0002\u13e8\u13e9\u0005\u022a\u0116\u0002",
    "\u13e9\u13ea\u0005\u0288\u0145\u0002\u13ea\u13ec\u0003\u0002\u0002\u0002",
    "\u13eb\u13e8\u0003\u0002\u0002\u0002\u13eb\u13ec\u0003\u0002\u0002\u0002",
    "\u13ec\u13f3\u0003\u0002\u0002\u0002\u13ed\u13ee\u0007\u0227\u0002\u0002",
    "\u13ee\u13ef\u0005\u022a\u0116\u0002\u13ef\u13f0\u0005\u0288\u0145\u0002",
    "\u13f0\u13f2\u0003\u0002\u0002\u0002\u13f1\u13ed\u0003\u0002\u0002\u0002",
    "\u13f2\u13f5\u0003\u0002\u0002\u0002\u13f3\u13f1\u0003\u0002\u0002\u0002",
    "\u13f3\u13f4\u0003\u0002\u0002\u0002\u13f4\u13f7\u0003\u0002\u0002\u0002",
    "\u13f5\u13f3\u0003\u0002\u0002\u0002\u13f6\u13f8\u0005\u0272\u013a\u0002",
    "\u13f7\u13f6\u0003\u0002\u0002\u0002\u13f7\u13f8\u0003\u0002\u0002\u0002",
    "\u13f8\u13f9\u0003\u0002\u0002\u0002\u13f9\u13fa\u0007\u0222\u0002\u0002",
    "\u13fa\u026f\u0003\u0002\u0002\u0002\u13fb\u1406\u0005\u0290\u0149\u0002",
    "\u13fc\u13fd\u0007\u00a2\u0002\u0002\u13fd\u1407\u0007\u0129\u0002\u0002",
    "\u13fe\u1401\u0005\u02e0\u0171\u0002\u13ff\u1400\u0007\u0136\u0002\u0002",
    "\u1400\u1402\u0005\u022a\u0116\u0002\u1401\u13ff\u0003\u0002\u0002\u0002",
    "\u1401\u1402\u0003\u0002\u0002\u0002\u1402\u1404\u0003\u0002\u0002\u0002",
    "\u1403\u1405\u0005\u0272\u013a\u0002\u1404\u1403\u0003\u0002\u0002\u0002",
    "\u1404\u1405\u0003\u0002\u0002\u0002\u1405\u1407\u0003\u0002\u0002\u0002",
    "\u1406\u13fc\u0003\u0002\u0002\u0002\u1406\u13fe\u0003\u0002\u0002\u0002",
    "\u1407\u0271\u0003\u0002\u0002\u0002\u1408\u1409\u0007k\u0002\u0002",
    "\u1409\u140a\u0005\u022a\u0116\u0002\u140a\u0273\u0003\u0002\u0002\u0002",
    "\u140b\u1412\u0005\u0218\u010d\u0002\u140c\u1410\u0007\u000f\u0002\u0002",
    "\u140d\u1411\u0005\u02fa\u017e\u0002\u140e\u140f\u0007\u0088\u0002\u0002",
    "\u140f\u1411\u0005\u022a\u0116\u0002\u1410\u140d\u0003\u0002\u0002\u0002",
    "\u1410\u140e\u0003\u0002\u0002\u0002\u1411\u1413\u0003\u0002\u0002\u0002",
    "\u1412\u140c\u0003\u0002\u0002\u0002\u1412\u1413\u0003\u0002\u0002\u0002",
    "\u1413\u0275\u0003\u0002\u0002\u0002\u1414\u1418\u0007\u01d1\u0002\u0002",
    "\u1415\u1416\u0007\u0112\u0002\u0002\u1416\u1419\u0007\u01ca\u0002\u0002",
    "\u1417\u1419\u0005\u0218\u010d\u0002\u1418\u1415\u0003\u0002\u0002\u0002",
    "\u1418\u1417\u0003\u0002\u0002\u0002\u1419\u0277\u0003\u0002\u0002\u0002",
    "\u141a\u1420\u0007\u0194\u0002\u0002\u141b\u1421\u0007\u01ed\u0002\u0002",
    "\u141c\u141e\u0007\u0112\u0002\u0002\u141d\u141f\u0007\u01ca\u0002\u0002",
    "\u141e\u141d\u0003\u0002\u0002\u0002\u141e\u141f\u0003\u0002\u0002\u0002",
    "\u141f\u1421\u0003\u0002\u0002\u0002\u1420\u141b\u0003\u0002\u0002\u0002",
    "\u1420\u141c\u0003\u0002\u0002\u0002\u1421\u0279\u0003\u0002\u0002\u0002",
    "\u1422\u1423\u0007\u0081\u0002\u0002\u1423\u1424\u0005\u022a\u0116\u0002",
    "\u1424\u027b\u0003\u0002\u0002\u0002\u1425\u1426\u0007\u01d1\u0002\u0002",
    "\u1426\u1427\u0005\u022a\u0116\u0002\u1427\u027d\u0003\u0002\u0002\u0002",
    "\u1428\u1429\u0007\u0112\u0002\u0002\u1429\u1431\u0007\u00b9\u0002\u0002",
    "\u142a\u142e\u0007\u00b9\u0002\u0002\u142b\u142c\u0007\u018c\u0002\u0002",
    "\u142c\u142d\u0007\u0235\u0002\u0002\u142d\u142f\u0005\u022a\u0116\u0002",
    "\u142e\u142b\u0003\u0002\u0002\u0002\u142e\u142f\u0003\u0002\u0002\u0002",
    "\u142f\u1431\u0003\u0002\u0002\u0002\u1430\u1428\u0003\u0002\u0002\u0002",
    "\u1430\u142a\u0003\u0002\u0002\u0002\u1431\u027f\u0003\u0002\u0002\u0002",
    "\u1432\u143b\u0007\u0228\u0002\u0002\u1433\u143b\u0007\u0090\u0002\u0002",
    "\u1434\u143b\u0007\u023c\u0002\u0002\u1435\u1436\u0007\u0186\u0002\u0002",
    "\u1436\u143b\tN\u0002\u0002\u1437\u143b\u0007\u023d\u0002\u0002\u1438",
    "\u143b\u0005\u0282\u0142\u0002\u1439\u143b\u0005\u0284\u0143\u0002\u143a",
    "\u1432\u0003\u0002\u0002\u0002\u143a\u1433\u0003\u0002\u0002\u0002\u143a",
    "\u1434\u0003\u0002\u0002\u0002\u143a\u1435\u0003\u0002\u0002\u0002\u143a",
    "\u1437\u0003\u0002\u0002\u0002\u143a\u1438\u0003\u0002\u0002\u0002\u143a",
    "\u1439\u0003\u0002\u0002\u0002\u143b\u0281\u0003\u0002\u0002\u0002\u143c",
    "\u143d\u0007\u01d5\u0002\u0002\u143d\u1443\tO\u0002\u0002\u143e\u143f",
    "\u0007\u0090\u0002\u0002\u143f\u1440\tP\u0002\u0002\u1440\u1444\tQ\u0002",
    "\u0002\u1441\u1442\u0007O\u0002\u0002\u1442\u1444\tR\u0002\u0002\u1443",
    "\u143e\u0003\u0002\u0002\u0002\u1443\u1441\u0003\u0002\u0002\u0002\u1444",
    "\u0283\u0003\u0002\u0002\u0002\u1445\u1446\u0007\u0182\u0002\u0002\u1446",
    "\u144c\u0005\u02fe\u0180\u0002\u1447\u144d\u0007\u021d\u0002\u0002\u1448",
    "\u144d\u0007\u0123\u0002\u0002\u1449\u144d\u0007\u011d\u0002\u0002\u144a",
    "\u144d\u0005\u02f2\u017a\u0002\u144b\u144d\u0005\u02fe\u0180\u0002\u144c",
    "\u1447\u0003\u0002\u0002\u0002\u144c\u1448\u0003\u0002\u0002\u0002\u144c",
    "\u1449\u0003\u0002\u0002\u0002\u144c\u144a\u0003\u0002\u0002\u0002\u144c",
    "\u144b\u0003\u0002\u0002\u0002\u144d\u0285\u0003\u0002\u0002\u0002\u144e",
    "\u1450\tS\u0002\u0002\u144f\u1451\u0007\u00a2\u0002\u0002\u1450\u144f",
    "\u0003\u0002\u0002\u0002\u1450\u1451\u0003\u0002\u0002\u0002\u1451\u1452",
    "\u0003\u0002\u0002\u0002\u1452\u1454\u0007\u0221\u0002\u0002\u1453\u1455",
    "\u0005\u0216\u010c\u0002\u1454\u1453\u0003\u0002\u0002\u0002\u1454\u1455",
    "\u0003\u0002\u0002\u0002\u1455\u1456\u0003\u0002\u0002\u0002\u1456\u1457",
    "\u0007\u0222\u0002\u0002\u1457\u0287\u0003\u0002\u0002\u0002\u1458\u145a",
    "\u0007\u000f\u0002\u0002\u1459\u1458\u0003\u0002\u0002\u0002\u1459\u145a",
    "\u0003\u0002\u0002\u0002\u145a\u145d\u0003\u0002\u0002\u0002\u145b\u145e",
    "\u0005\u02f8\u017d\u0002\u145c\u145e\u0005\u02f6\u017c\u0002\u145d\u145b",
    "\u0003\u0002\u0002\u0002\u145d\u145c\u0003\u0002\u0002\u0002\u145e\u1461",
    "\u0003\u0002\u0002\u0002\u145f\u1461\u0007\u000f\u0002\u0002\u1460\u1459",
    "\u0003\u0002\u0002\u0002\u1460\u145f\u0003\u0002\u0002\u0002\u1461\u0289",
    "\u0003\u0002\u0002\u0002\u1462\u1465\u0005\u02f8\u017d\u0002\u1463\u1465",
    "\u0005\u02f6\u017c\u0002\u1464\u1462\u0003\u0002\u0002\u0002\u1464\u1463",
    "\u0003\u0002\u0002\u0002\u1465\u028b\u0003\u0002\u0002\u0002\u1466\u146b",
    "\u0007\u01d7\u0002\u0002\u1467\u1468\u0007Y\u0002\u0002\u1468\u1469",
    "\u0007\u011e\u0002\u0002\u1469\u146c\u0005\u02c2\u0162\u0002\u146a\u146c",
    "\u0005\u0218\u010d\u0002\u146b\u1467\u0003\u0002\u0002\u0002\u146b\u146a",
    "\u0003\u0002\u0002\u0002\u146c\u028d\u0003\u0002\u0002\u0002\u146d\u146e",
    "\u0007)\u0002\u0002\u146e\u1470\u0007<\u0002\u0002\u146f\u146d\u0003",
    "\u0002\u0002\u0002\u146f\u1470\u0003\u0002\u0002\u0002\u1470\u1471\u0003",
    "\u0002\u0002\u0002\u1471\u1472\u0007\u00cc\u0002\u0002\u1472\u1477\u0005",
    "\u02be\u0160\u0002\u1473\u1474\u0007\u0227\u0002\u0002\u1474\u1476\u0005",
    "\u02be\u0160\u0002\u1475\u1473\u0003\u0002\u0002\u0002\u1476\u1479\u0003",
    "\u0002\u0002\u0002\u1477\u1475\u0003\u0002\u0002\u0002\u1477\u1478\u0003",
    "\u0002\u0002\u0002\u1478\u028f\u0003\u0002\u0002\u0002\u1479\u1477\u0003",
    "\u0002\u0002\u0002\u147a\u147d\u0005\u02f8\u017d\u0002\u147b\u147d\u0005",
    "\u02f6\u017c\u0002\u147c\u147a\u0003\u0002\u0002\u0002\u147c\u147b\u0003",
    "\u0002\u0002\u0002\u147d\u0291\u0003\u0002\u0002\u0002\u147e\u147f\u0005",
    "\u02f8\u017d\u0002\u147f\u0293\u0003\u0002\u0002\u0002\u1480\u1481\u0005",
    "\u02f8\u017d\u0002\u1481\u0295\u0003\u0002\u0002\u0002\u1482\u1483\u0005",
    "\u02f8\u017d\u0002\u1483\u0297\u0003\u0002\u0002\u0002\u1484\u1485\u0005",
    "\u02f8\u017d\u0002\u1485\u0299\u0003\u0002\u0002\u0002\u1486\u1487\u0005",
    "\u02f8\u017d\u0002\u1487\u029b\u0003\u0002\u0002\u0002\u1488\u1489\u0005",
    "\u02f8\u017d\u0002\u1489\u029d\u0003\u0002\u0002\u0002\u148a\u148f\u0005",
    "\u02f8\u017d\u0002\u148b\u148c\u0007\u021a\u0002\u0002\u148c\u148e\u0005",
    "\u02fa\u017e\u0002\u148d\u148b\u0003\u0002\u0002\u0002\u148e\u1491\u0003",
    "\u0002\u0002\u0002\u148f\u148d\u0003\u0002\u0002\u0002\u148f\u1490\u0003",
    "\u0002\u0002\u0002\u1490\u1494\u0003\u0002\u0002\u0002\u1491\u148f\u0003",
    "\u0002\u0002\u0002\u1492\u1493\u0007\u0229\u0002\u0002\u1493\u1495\u0005",
    "\u02c8\u0165\u0002\u1494\u1492\u0003\u0002\u0002\u0002\u1494\u1495\u0003",
    "\u0002\u0002\u0002\u1495\u029f\u0003\u0002\u0002\u0002\u1496\u1497\u0005",
    "\u02f8\u017d\u0002\u1497\u02a1\u0003\u0002\u0002\u0002\u1498\u149b\u0005",
    "\u02f8\u017d\u0002\u1499\u149a\u0007\u021a\u0002\u0002\u149a\u149c\u0005",
    "\u02fa\u017e\u0002\u149b\u1499\u0003\u0002\u0002\u0002\u149b\u149c\u0003",
    "\u0002\u0002\u0002\u149c\u02a3\u0003\u0002\u0002\u0002\u149d\u149e\u0005",
    "\u02f8\u017d\u0002\u149e\u02a5\u0003\u0002\u0002\u0002\u149f\u14a0\u0005",
    "\u02f8\u017d\u0002\u14a0\u02a7\u0003\u0002\u0002\u0002\u14a1\u14a2\u0005",
    "\u02f8\u017d\u0002\u14a2\u02a9\u0003\u0002\u0002\u0002\u14a3\u14a8\u0005",
    "\u02f8\u017d\u0002\u14a4\u14a5\u0007\u021a\u0002\u0002\u14a5\u14a7\u0005",
    "\u02fa\u017e\u0002\u14a6\u14a4\u0003\u0002\u0002\u0002\u14a7\u14aa\u0003",
    "\u0002\u0002\u0002\u14a8\u14a6\u0003\u0002\u0002\u0002\u14a8\u14a9\u0003",
    "\u0002\u0002\u0002\u14a9\u02ab\u0003\u0002\u0002\u0002\u14aa\u14a8\u0003",
    "\u0002\u0002\u0002\u14ab\u14ac\u0005\u02f8\u017d\u0002\u14ac\u02ad\u0003",
    "\u0002\u0002\u0002\u14ad\u14b2\u0005\u02f8\u017d\u0002\u14ae\u14af\u0007",
    "\u021a\u0002\u0002\u14af\u14b1\u0005\u02fa\u017e\u0002\u14b0\u14ae\u0003",
    "\u0002\u0002\u0002\u14b1\u14b4\u0003\u0002\u0002\u0002\u14b2\u14b0\u0003",
    "\u0002\u0002\u0002\u14b2\u14b3\u0003\u0002\u0002\u0002\u14b3\u14b7\u0003",
    "\u0002\u0002\u0002\u14b4\u14b2\u0003\u0002\u0002\u0002\u14b5\u14b6\u0007",
    "\u0229\u0002\u0002\u14b6\u14b8\u0005\u02c8\u0165\u0002\u14b7\u14b5\u0003",
    "\u0002\u0002\u0002\u14b7\u14b8\u0003\u0002\u0002\u0002\u14b8\u02af\u0003",
    "\u0002\u0002\u0002\u14b9\u14ba\u0005\u02fa\u017e\u0002\u14ba\u02b1\u0003",
    "\u0002\u0002\u0002\u14bb\u14c0\u0005\u02fa\u017e\u0002\u14bc\u14bd\u0007",
    "\u021a\u0002\u0002\u14bd\u14bf\u0005\u02fa\u017e\u0002\u14be\u14bc\u0003",
    "\u0002\u0002\u0002\u14bf\u14c2\u0003\u0002\u0002\u0002\u14c0\u14be\u0003",
    "\u0002\u0002\u0002\u14c0\u14c1\u0003\u0002\u0002\u0002\u14c1\u02b3\u0003",
    "\u0002\u0002\u0002\u14c2\u14c0\u0003\u0002\u0002\u0002\u14c3\u14c8\u0005",
    "\u02fa\u017e\u0002\u14c4\u14c5\u0007\u021a\u0002\u0002\u14c5\u14c7\u0005",
    "\u02fa\u017e\u0002\u14c6\u14c4\u0003\u0002\u0002\u0002\u14c7\u14ca\u0003",
    "\u0002\u0002\u0002\u14c8\u14c6\u0003\u0002\u0002\u0002\u14c8\u14c9\u0003",
    "\u0002\u0002\u0002\u14c9\u02b5\u0003\u0002\u0002\u0002\u14ca\u14c8\u0003",
    "\u0002\u0002\u0002\u14cb\u14d0\u0005\u02f8\u017d\u0002\u14cc\u14cd\u0007",
    "\u021a\u0002\u0002\u14cd\u14cf\u0005\u02fa\u017e\u0002\u14ce\u14cc\u0003",
    "\u0002\u0002\u0002\u14cf\u14d2\u0003\u0002\u0002\u0002\u14d0\u14ce\u0003",
    "\u0002\u0002\u0002\u14d0\u14d1\u0003\u0002\u0002\u0002\u14d1\u02b7\u0003",
    "\u0002\u0002\u0002\u14d2\u14d0\u0003\u0002\u0002\u0002\u14d3\u14d6\u0005",
    "\u02f8\u017d\u0002\u14d4\u14d5\u0007\u021a\u0002\u0002\u14d5\u14d7\u0005",
    "\u02fa\u017e\u0002\u14d6\u14d4\u0003\u0002\u0002\u0002\u14d6\u14d7\u0003",
    "\u0002\u0002\u0002\u14d7\u02b9\u0003\u0002\u0002\u0002\u14d8\u14db\u0005",
    "\u02f8\u017d\u0002\u14d9\u14da\u0007\u021a\u0002\u0002\u14da\u14dc\u0005",
    "\u02fa\u017e\u0002\u14db\u14d9\u0003\u0002\u0002\u0002\u14db\u14dc\u0003",
    "\u0002\u0002\u0002\u14dc\u02bb\u0003\u0002\u0002\u0002\u14dd\u14e0\u0005",
    "\u02f8\u017d\u0002\u14de\u14df\u0007\u021a\u0002\u0002\u14df\u14e1\u0005",
    "\u02fa\u017e\u0002\u14e0\u14de\u0003\u0002\u0002\u0002\u14e0\u14e1\u0003",
    "\u0002\u0002\u0002\u14e1\u02bd\u0003\u0002\u0002\u0002\u14e2\u14e3\u0007",
    "\u0238\u0002\u0002\u14e3\u14e5\u0005\u02ce\u0168\u0002\u14e4\u14e2\u0003",
    "\u0002\u0002\u0002\u14e4\u14e5\u0003\u0002\u0002\u0002\u14e5\u14e6\u0003",
    "\u0002\u0002\u0002\u14e6\u14e9\u0005\u02fa\u017e\u0002\u14e7\u14e8\u0007",
    "\u021a\u0002\u0002\u14e8\u14ea\u0005\u02fa\u017e\u0002\u14e9\u14e7\u0003",
    "\u0002\u0002\u0002\u14e9\u14ea\u0003\u0002\u0002\u0002\u14ea\u14ed\u0003",
    "\u0002\u0002\u0002\u14eb\u14ed\u0005\u02e8\u0175\u0002\u14ec\u14e4\u0003",
    "\u0002\u0002\u0002\u14ec\u14eb\u0003\u0002\u0002\u0002\u14ed\u02bf\u0003",
    "\u0002\u0002\u0002\u14ee\u14ef\u0005\u02f8\u017d\u0002\u14ef\u02c1\u0003",
    "\u0002\u0002\u0002\u14f0\u14f3\u0005\u02f8\u017d\u0002\u14f1\u14f3\u0005",
    "\u02e8\u0175\u0002\u14f2\u14f0\u0003\u0002\u0002\u0002\u14f2\u14f1\u0003",
    "\u0002\u0002\u0002\u14f3\u02c3\u0003\u0002\u0002\u0002\u14f4\u14f7\u0005",
    "\u02f8\u017d\u0002\u14f5\u14f7\u0005\u02e8\u0175\u0002\u14f6\u14f4\u0003",
    "\u0002\u0002\u0002\u14f6\u14f5\u0003\u0002\u0002\u0002\u14f7\u02c5\u0003",
    "\u0002\u0002\u0002\u14f8\u14fb\u0005\u02f8\u017d\u0002\u14f9\u14fa\u0007",
    "\u021a\u0002\u0002\u14fa\u14fc\u0005\u02fa\u017e\u0002\u14fb\u14f9\u0003",
    "\u0002\u0002\u0002\u14fb\u14fc\u0003\u0002\u0002\u0002\u14fc\u02c7\u0003",
    "\u0002\u0002\u0002\u14fd\u14fe\u0005\u02f8\u017d\u0002\u14fe\u02c9\u0003",
    "\u0002\u0002\u0002\u14ff\u1504\u0005\u02f8\u017d\u0002\u1500\u1501\u0007",
    "\u021a\u0002\u0002\u1501\u1503\u0005\u02fa\u017e\u0002\u1502\u1500\u0003",
    "\u0002\u0002\u0002\u1503\u1506\u0003\u0002\u0002\u0002\u1504\u1502\u0003",
    "\u0002\u0002\u0002\u1504\u1505\u0003\u0002\u0002\u0002\u1505\u02cb\u0003",
    "\u0002\u0002\u0002\u1506\u1504\u0003\u0002\u0002\u0002\u1507\u150a\u0005",
    "\u02f8\u017d\u0002\u1508\u1509\u0007\u021a\u0002\u0002\u1509\u150b\u0005",
    "\u02fa\u017e\u0002\u150a\u1508\u0003\u0002\u0002\u0002\u150a\u150b\u0003",
    "\u0002\u0002\u0002\u150b\u150f\u0003\u0002\u0002\u0002\u150c\u150d\u0007",
    "\u0229\u0002\u0002\u150d\u1510\u0005\u02c8\u0165\u0002\u150e\u1510\u0005",
    "\u0286\u0144\u0002\u150f\u150c\u0003\u0002\u0002\u0002\u150f\u150e\u0003",
    "\u0002\u0002\u0002\u150f\u1510\u0003\u0002\u0002\u0002\u1510\u02cd\u0003",
    "\u0002\u0002\u0002\u1511\u1516\u0005\u02fa\u017e\u0002\u1512\u1513\u0007",
    "\u021a\u0002\u0002\u1513\u1515\u0005\u02fa\u017e\u0002\u1514\u1512\u0003",
    "\u0002\u0002\u0002\u1515\u1518\u0003\u0002\u0002\u0002\u1516\u1514\u0003",
    "\u0002\u0002\u0002\u1516\u1517\u0003\u0002\u0002\u0002\u1517\u02cf\u0003",
    "\u0002\u0002\u0002\u1518\u1516\u0003\u0002\u0002\u0002\u1519\u151a\u0005",
    "\u02f8\u017d\u0002\u151a\u02d1\u0003\u0002\u0002\u0002\u151b\u151c\u0005",
    "\u02fa\u017e\u0002\u151c\u02d3\u0003\u0002\u0002\u0002\u151d\u151e\u0007",
    "\u00d3\u0002\u0002\u151e\u151f\u0007\u0221\u0002\u0002\u151f\u1520\u0007",
    "\u01f7\u0002\u0002\u1520\u1521\t1\u0002\u0002\u1521\u1522\u0005\u01c8",
    "\u00e5\u0002\u1522\u1524\u0007\u0222\u0002\u0002\u1523\u1525\u0005\u0258",
    "\u012d\u0002\u1524\u1523\u0003\u0002\u0002\u0002\u1524\u1525\u0003\u0002",
    "\u0002\u0002\u1525\u02d5\u0003\u0002\u0002\u0002\u1526\u1528\u0007\u0221",
    "\u0002\u0002\u1527\u1529\u0005\u02de\u0170\u0002\u1528\u1527\u0003\u0002",
    "\u0002\u0002\u1528\u1529\u0003\u0002\u0002\u0002\u1529\u152e\u0003\u0002",
    "\u0002\u0002\u152a\u152b\u0007\u0227\u0002\u0002\u152b\u152d\u0005\u02de",
    "\u0170\u0002\u152c\u152a\u0003\u0002\u0002\u0002\u152d\u1530\u0003\u0002",
    "\u0002\u0002\u152e\u152c\u0003\u0002\u0002\u0002\u152e\u152f\u0003\u0002",
    "\u0002\u0002\u152f\u1531\u0003\u0002\u0002\u0002\u1530\u152e\u0003\u0002",
    "\u0002\u0002\u1531\u1533\u0007\u0222\u0002\u0002\u1532\u1534\u0005\u02d4",
    "\u016b\u0002\u1533\u1532\u0003\u0002\u0002\u0002\u1533\u1534\u0003\u0002",
    "\u0002\u0002\u1534\u02d7\u0003\u0002\u0002\u0002\u1535\u153a\u0007\u0221",
    "\u0002\u0002\u1536\u1538\u0005\u02de\u0170\u0002\u1537\u1539\u0005\u02dc",
    "\u016f\u0002\u1538\u1537\u0003\u0002\u0002\u0002\u1538\u1539\u0003\u0002",
    "\u0002\u0002\u1539\u153b\u0003\u0002\u0002\u0002\u153a\u1536\u0003\u0002",
    "\u0002\u0002\u153a\u153b\u0003\u0002\u0002\u0002\u153b\u1543\u0003\u0002",
    "\u0002\u0002\u153c\u153d\u0007\u0227\u0002\u0002\u153d\u153f\u0005\u02de",
    "\u0170\u0002\u153e\u1540\u0005\u02dc\u016f\u0002\u153f\u153e\u0003\u0002",
    "\u0002\u0002\u153f\u1540\u0003\u0002\u0002\u0002\u1540\u1542\u0003\u0002",
    "\u0002\u0002\u1541\u153c\u0003\u0002\u0002\u0002\u1542\u1545\u0003\u0002",
    "\u0002\u0002\u1543\u1541\u0003\u0002\u0002\u0002\u1543\u1544\u0003\u0002",
    "\u0002\u0002\u1544\u1546\u0003\u0002\u0002\u0002\u1545\u1543\u0003\u0002",
    "\u0002\u0002\u1546\u1548\u0007\u0222\u0002\u0002\u1547\u1549\u0005\u02d4",
    "\u016b\u0002\u1548\u1547\u0003\u0002\u0002\u0002\u1548\u1549\u0003\u0002",
    "\u0002\u0002\u1549\u02d9\u0003\u0002\u0002\u0002\u154a\u154b\u0007\u0221",
    "\u0002\u0002\u154b\u1558\u0005\u02ca\u0166\u0002\u154c\u154f\u0007\u0227",
    "\u0002\u0002\u154d\u1550\u0005\u02f2\u017a\u0002\u154e\u1550\u0007\u0117",
    "\u0002\u0002\u154f\u154d\u0003\u0002\u0002\u0002\u154f\u154e\u0003\u0002",
    "\u0002\u0002\u1550\u1556\u0003\u0002\u0002\u0002\u1551\u1554\u0007\u0227",
    "\u0002\u0002\u1552\u1555\u0005\u02f2\u017a\u0002\u1553\u1555\u0007\u0117",
    "\u0002\u0002\u1554\u1552\u0003\u0002\u0002\u0002\u1554\u1553\u0003\u0002",
    "\u0002\u0002\u1555\u1557\u0003\u0002\u0002\u0002\u1556\u1551\u0003\u0002",
    "\u0002\u0002\u1556\u1557\u0003\u0002\u0002\u0002\u1557\u1559\u0003\u0002",
    "\u0002\u0002\u1558\u154c\u0003\u0002\u0002\u0002\u1558\u1559\u0003\u0002",
    "\u0002\u0002\u1559\u155a\u0003\u0002\u0002\u0002\u155a\u156e\u0007\u01c7",
    "\u0002\u0002\u155b\u155c\u0005\u02cc\u0167\u0002\u155c\u155d\u0007\u021a",
    "\u0002\u0002\u155d\u155e\u0007\u0224\u0002\u0002\u155e\u156f\u0003\u0002",
    "\u0002\u0002\u155f\u156f\u0007\u0224\u0002\u0002\u1560\u1562\u0005\u0218",
    "\u010d\u0002\u1561\u1563\u0005\u0288\u0145\u0002\u1562\u1561\u0003\u0002",
    "\u0002\u0002\u1562\u1563\u0003\u0002\u0002\u0002\u1563\u156b\u0003\u0002",
    "\u0002\u0002\u1564\u1565\u0007\u0227\u0002\u0002\u1565\u1567\u0005\u0218",
    "\u010d\u0002\u1566\u1568\u0005\u0288\u0145\u0002\u1567\u1566\u0003\u0002",
    "\u0002\u0002\u1567\u1568\u0003\u0002\u0002\u0002\u1568\u156a\u0003\u0002",
    "\u0002\u0002\u1569\u1564\u0003\u0002\u0002\u0002\u156a\u156d\u0003\u0002",
    "\u0002\u0002\u156b\u1569\u0003\u0002\u0002\u0002\u156b\u156c\u0003\u0002",
    "\u0002\u0002\u156c\u156f\u0003\u0002\u0002\u0002\u156d\u156b\u0003\u0002",
    "\u0002\u0002\u156e\u155b\u0003\u0002\u0002\u0002\u156e\u155f\u0003\u0002",
    "\u0002\u0002\u156e\u1560\u0003\u0002\u0002\u0002\u156f\u1570\u0003\u0002",
    "\u0002\u0002\u1570\u1572\u0007\u0222\u0002\u0002\u1571\u1573\u0005\u02d4",
    "\u016b\u0002\u1572\u1571\u0003\u0002\u0002\u0002\u1572\u1573\u0003\u0002",
    "\u0002\u0002\u1573\u02db\u0003\u0002\u0002\u0002\u1574\u1575\tT\u0002",
    "\u0002\u1575\u1576\u0007\u0118\u0002\u0002\u1576\u02dd\u0003\u0002\u0002",
    "\u0002\u1577\u1578\u0005\u02f8\u017d\u0002\u1578\u1579\u0007\u0235\u0002",
    "\u0002\u1579\u157a\u0007\u0230\u0002\u0002\u157a\u157c\u0003\u0002\u0002",
    "\u0002\u157b\u1577\u0003\u0002\u0002\u0002\u157b\u157c\u0003\u0002\u0002",
    "\u0002\u157c\u157d\u0003\u0002\u0002\u0002\u157d\u157e\u0005\u0218\u010d",
    "\u0002\u157e\u02df\u0003\u0002\u0002\u0002\u157f\u1588\u0005\u02e2\u0172",
    "\u0002\u1580\u1582\u0007\u015b\u0002\u0002\u1581\u1580\u0003\u0002\u0002",
    "\u0002\u1581\u1582\u0003\u0002\u0002\u0002\u1582\u1583\u0003\u0002\u0002",
    "\u0002\u1583\u1585\u0005\u02b2\u015a\u0002\u1584\u1586\tU\u0002\u0002",
    "\u1585\u1584\u0003\u0002\u0002\u0002\u1585\u1586\u0003\u0002\u0002\u0002",
    "\u1586\u1588\u0003\u0002\u0002\u0002\u1587\u157f\u0003\u0002\u0002\u0002",
    "\u1587\u1581\u0003\u0002\u0002\u0002\u1588\u02e1\u0003\u0002\u0002\u0002",
    "\u1589\u158b\u0005\u02e6\u0174\u0002\u158a\u158c\u0005\u02e4\u0173\u0002",
    "\u158b\u158a\u0003\u0002\u0002\u0002\u158b\u158c\u0003\u0002\u0002\u0002",
    "\u158c\u1596\u0003\u0002\u0002\u0002\u158d\u158f\u0007\u01da\u0002\u0002",
    "\u158e\u1590\u0007\u00e2\u0002\u0002\u158f\u158e\u0003\u0002\u0002\u0002",
    "\u158f\u1590\u0003\u0002\u0002\u0002\u1590\u1591\u0003\u0002\u0002\u0002",
    "\u1591\u1592\u0007\u01ad\u0002\u0002\u1592\u1597\u0007\u01ef\u0002\u0002",
    "\u1593\u1594\u00072\u0002\u0002\u1594\u1595\u0007\u0182\u0002\u0002",
    "\u1595\u1597\u0005\u02ce\u0168\u0002\u1596\u158d\u0003\u0002\u0002\u0002",
    "\u1596\u1593\u0003\u0002\u0002\u0002\u1596\u1597\u0003\u0002\u0002\u0002",
    "\u1597\u15a9\u0003\u0002\u0002\u0002\u1598\u1599\u0007\u00ca\u0002\u0002",
    "\u1599\u159e\tV\u0002\u0002\u159a\u159b\u0007\u0221\u0002\u0002\u159b",
    "\u159c\u0005\u0218\u010d\u0002\u159c\u159d\u0007\u0222\u0002\u0002\u159d",
    "\u159f\u0003\u0002\u0002\u0002\u159e\u159a\u0003\u0002\u0002\u0002\u159e",
    "\u159f\u0003\u0002\u0002\u0002\u159f\u15a0\u0003\u0002\u0002\u0002\u15a0",
    "\u15a1\u0007\u01b2\u0002\u0002\u15a1\u15a6\tW\u0002\u0002\u15a2\u15a3",
    "\u0007\u0221\u0002\u0002\u15a3\u15a4\u0005\u0218\u010d\u0002\u15a4\u15a5",
    "\u0007\u0222\u0002\u0002\u15a5\u15a7\u0003\u0002\u0002\u0002\u15a6\u15a2",
    "\u0003\u0002\u0002\u0002\u15a6\u15a7\u0003\u0002\u0002\u0002\u15a7\u15a9",
    "\u0003\u0002\u0002\u0002\u15a8\u1589\u0003\u0002\u0002\u0002\u15a8\u1598",
    "\u0003\u0002\u0002\u0002\u15a9\u02e3\u0003\u0002\u0002\u0002\u15aa\u15ab",
    "\u0007\u0221\u0002\u0002\u15ab\u15ae\u0005\u02f2\u017a\u0002\u15ac\u15ad",
    "\u0007\u0227\u0002\u0002\u15ad\u15af\u0005\u02f2\u017a\u0002\u15ae\u15ac",
    "\u0003\u0002\u0002\u0002\u15ae\u15af\u0003\u0002\u0002\u0002\u15af\u15b1",
    "\u0003\u0002\u0002\u0002\u15b0\u15b2\tX\u0002\u0002\u15b1\u15b0\u0003",
    "\u0002\u0002\u0002\u15b1\u15b2\u0003\u0002\u0002\u0002\u15b2\u15b3\u0003",
    "\u0002\u0002\u0002\u15b3\u15b4\u0007\u0222\u0002\u0002\u15b4\u02e5\u0003",
    "\u0002\u0002\u0002\u15b5\u15f2\u0007!\u0002\u0002\u15b6\u15f2\u0007",
    "\u0144\u0002\u0002\u15b7\u15f2\u0007\u00ff\u0002\u0002\u15b8\u15f2\u0007",
    " \u0002\u0002\u15b9\u15f2\u0007\u001f\u0002\u0002\u15ba\u15f2\u0007",
    "\u0100\u0002\u0002\u15bb\u15f2\u0007\u0146\u0002\u0002\u15bc\u15f2\u0007",
    "\u0145\u0002\u0002\u15bd\u15f2\u0007\u0189\u0002\u0002\u15be\u15f2\u0007",
    "\u018a\u0002\u0002\u15bf\u15f2\u0007\u011b\u0002\u0002\u15c0\u15f2\u0007",
    "f\u0002\u0002\u15c1\u15f2\u0007\u00c8\u0002\u0002\u15c2\u15f2\u0007",
    "\u00cb\u0002\u0002\u15c3\u15f2\u0007\u011a\u0002\u0002\u15c4\u15f2\u0007",
    "\u018e\u0002\u0002\u15c5\u15f2\u0007\u0119\u0002\u0002\u15c6\u15f2\u0007",
    "g\u0002\u0002\u15c7\u15c9\u0007x\u0002\u0002\u15c8\u15ca\u0007\u0149",
    "\u0002\u0002\u15c9\u15c8\u0003\u0002\u0002\u0002\u15c9\u15ca\u0003\u0002",
    "\u0002\u0002\u15ca\u15f2\u0003\u0002\u0002\u0002\u15cb\u15f2\u0007\u009c",
    "\u0002\u0002\u15cc\u15f2\u0007\u0155\u0002\u0002\u15cd\u15f2\u0007\u0103",
    "\u0002\u0002\u15ce\u15d0\u0007\u00e9\u0002\u0002\u15cf\u15d1\u0007\u0153",
    "\u0002\u0002\u15d0\u15cf\u0003\u0002\u0002\u0002\u15d0\u15d1\u0003\u0002",
    "\u0002\u0002\u15d1\u15f2\u0003\u0002\u0002\u0002\u15d2\u15f2\u00073",
    "\u0002\u0002\u15d3\u15f2\u00072\u0002\u0002\u15d4\u15f2\u0007\u01cb",
    "\u0002\u0002\u15d5\u15f2\u0007\u01cc\u0002\u0002\u15d6\u15f2\u0007\u019c",
    "\u0002\u0002\u15d7\u15f2\u0007\u0153\u0002\u0002\u15d8\u15f2\u0007%",
    "\u0002\u0002\u15d9\u15f2\u0007`\u0002\u0002\u15da\u15f2\u0007\u016c",
    "\u0002\u0002\u15db\u15f2\u0007\u01c5\u0002\u0002\u15dc\u15f2\u0007\u01ec",
    "\u0002\u0002\u15dd\u15f2\u0007\u00fb\u0002\u0002\u15de\u15f2\u0007a",
    "\u0002\u0002\u15df\u15f2\u0007\u00b2\u0002\u0002\u15e0\u15f2\u0007\u00f5",
    "\u0002\u0002\u15e1\u15f2\u0007\u0177\u0002\u0002\u15e2\u15f2\u0007\u01af",
    "\u0002\u0002\u15e3\u15f2\u0007\u01b0\u0002\u0002\u15e4\u15f2\u0007\u01b1",
    "\u0002\u0002\u15e5\u15f2\u0007\u01ae\u0002\u0002\u15e6\u15f2\u0007\u01aa",
    "\u0002\u0002\u15e7\u15f2\u0007\u01ac\u0002\u0002\u15e8\u15f2\u0007\u01ab",
    "\u0002\u0002\u15e9\u15f2\u0007\u01a9\u0002\u0002\u15ea\u15f2\u0007\u01ee",
    "\u0002\u0002\u15eb\u15f2\u0007z\u0002\u0002\u15ec\u15f2\u0007\u001e",
    "\u0002\u0002\u15ed\u15f2\u0007\"\u0002\u0002\u15ee\u15f2\u00078\u0002",
    "\u0002\u15ef\u15f2\u0007\u0104\u0002\u0002\u15f0\u15f2\u0007\u00f7\u0002",
    "\u0002\u15f1\u15b5\u0003\u0002\u0002\u0002\u15f1\u15b6\u0003\u0002\u0002",
    "\u0002\u15f1\u15b7\u0003\u0002\u0002\u0002\u15f1\u15b8\u0003\u0002\u0002",
    "\u0002\u15f1\u15b9\u0003\u0002\u0002\u0002\u15f1\u15ba\u0003\u0002\u0002",
    "\u0002\u15f1\u15bb\u0003\u0002\u0002\u0002\u15f1\u15bc\u0003\u0002\u0002",
    "\u0002\u15f1\u15bd\u0003\u0002\u0002\u0002\u15f1\u15be\u0003\u0002\u0002",
    "\u0002\u15f1\u15bf\u0003\u0002\u0002\u0002\u15f1\u15c0\u0003\u0002\u0002",
    "\u0002\u15f1\u15c1\u0003\u0002\u0002\u0002\u15f1\u15c2\u0003\u0002\u0002",
    "\u0002\u15f1\u15c3\u0003\u0002\u0002\u0002\u15f1\u15c4\u0003\u0002\u0002",
    "\u0002\u15f1\u15c5\u0003\u0002\u0002\u0002\u15f1\u15c6\u0003\u0002\u0002",
    "\u0002\u15f1\u15c7\u0003\u0002\u0002\u0002\u15f1\u15cb\u0003\u0002\u0002",
    "\u0002\u15f1\u15cc\u0003\u0002\u0002\u0002\u15f1\u15cd\u0003\u0002\u0002",
    "\u0002\u15f1\u15ce\u0003\u0002\u0002\u0002\u15f1\u15d2\u0003\u0002\u0002",
    "\u0002\u15f1\u15d3\u0003\u0002\u0002\u0002\u15f1\u15d4\u0003\u0002\u0002",
    "\u0002\u15f1\u15d5\u0003\u0002\u0002\u0002\u15f1\u15d6\u0003\u0002\u0002",
    "\u0002\u15f1\u15d7\u0003\u0002\u0002\u0002\u15f1\u15d8\u0003\u0002\u0002",
    "\u0002\u15f1\u15d9\u0003\u0002\u0002\u0002\u15f1\u15da\u0003\u0002\u0002",
    "\u0002\u15f1\u15db\u0003\u0002\u0002\u0002\u15f1\u15dc\u0003\u0002\u0002",
    "\u0002\u15f1\u15dd\u0003\u0002\u0002\u0002\u15f1\u15de\u0003\u0002\u0002",
    "\u0002\u15f1\u15df\u0003\u0002\u0002\u0002\u15f1\u15e0\u0003\u0002\u0002",
    "\u0002\u15f1\u15e1\u0003\u0002\u0002\u0002\u15f1\u15e2\u0003\u0002\u0002",
    "\u0002\u15f1\u15e3\u0003\u0002\u0002\u0002\u15f1\u15e4\u0003\u0002\u0002",
    "\u0002\u15f1\u15e5\u0003\u0002\u0002\u0002\u15f1\u15e6\u0003\u0002\u0002",
    "\u0002\u15f1\u15e7\u0003\u0002\u0002\u0002\u15f1\u15e8\u0003\u0002\u0002",
    "\u0002\u15f1\u15e9\u0003\u0002\u0002\u0002\u15f1\u15ea\u0003\u0002\u0002",
    "\u0002\u15f1\u15eb\u0003\u0002\u0002\u0002\u15f1\u15ec\u0003\u0002\u0002",
    "\u0002\u15f1\u15ed\u0003\u0002\u0002\u0002\u15f1\u15ee\u0003\u0002\u0002",
    "\u0002\u15f1\u15ef\u0003\u0002\u0002\u0002\u15f1\u15f0\u0003\u0002\u0002",
    "\u0002\u15f2\u02e7\u0003\u0002\u0002\u0002\u15f3\u15f7\u0007\u022b\u0002",
    "\u0002\u15f4\u15f5\u0007\u0232\u0002\u0002\u15f5\u15f7\u0007\u021b\u0002",
    "\u0002\u15f6\u15f3\u0003\u0002\u0002\u0002\u15f6\u15f4\u0003\u0002\u0002",
    "\u0002\u15f7\u1600\u0003\u0002\u0002\u0002\u15f8\u15fa\u0007\u00bc\u0002",
    "\u0002\u15f9\u15f8\u0003\u0002\u0002\u0002\u15f9\u15fa\u0003\u0002\u0002",
    "\u0002\u15fa\u15fe\u0003\u0002\u0002\u0002\u15fb\u15ff\u0007\u022b\u0002",
    "\u0002\u15fc\u15fd\u0007\u0232\u0002\u0002\u15fd\u15ff\u0007\u021b\u0002",
    "\u0002\u15fe\u15fb\u0003\u0002\u0002\u0002\u15fe\u15fc\u0003\u0002\u0002",
    "\u0002\u15ff\u1601\u0003\u0002\u0002\u0002\u1600\u15f9\u0003\u0002\u0002",
    "\u0002\u1600\u1601\u0003\u0002\u0002\u0002\u1601\u1606\u0003\u0002\u0002",
    "\u0002\u1602\u1603\u0007\u021a\u0002\u0002\u1603\u1605\u0005\u02ec\u0177",
    "\u0002\u1604\u1602\u0003\u0002\u0002\u0002\u1605\u1608\u0003\u0002\u0002",
    "\u0002\u1606\u1604\u0003\u0002\u0002\u0002\u1606\u1607\u0003\u0002\u0002",
    "\u0002\u1607\u02e9\u0003\u0002\u0002\u0002\u1608\u1606\u0003\u0002\u0002",
    "\u0002\u1609\u160e\u0005\u02ec\u0177\u0002\u160a\u160b\u0007\u021a\u0002",
    "\u0002\u160b\u160d\u0005\u02ec\u0177\u0002\u160c\u160a\u0003\u0002\u0002",
    "\u0002\u160d\u1610\u0003\u0002\u0002\u0002\u160e\u160c\u0003\u0002\u0002",
    "\u0002\u160e\u160f\u0003\u0002\u0002\u0002\u160f\u02eb\u0003\u0002\u0002",
    "\u0002\u1610\u160e\u0003\u0002\u0002\u0002\u1611\u1612\u0007\u0238\u0002",
    "\u0002\u1612\u1614\u0005\u02ce\u0168\u0002\u1613\u1611\u0003\u0002\u0002",
    "\u0002\u1613\u1614\u0003\u0002\u0002\u0002\u1614\u1615\u0003\u0002\u0002",
    "\u0002\u1615\u161a\u0005\u02fa\u017e\u0002\u1616\u1617\u0007\u021a\u0002",
    "\u0002\u1617\u1619\u0005\u02fa\u017e\u0002\u1618\u1616\u0003\u0002\u0002",
    "\u0002\u1619\u161c\u0003\u0002\u0002\u0002\u161a\u1618\u0003\u0002\u0002",
    "\u0002\u161a\u161b\u0003\u0002\u0002\u0002\u161b\u161f\u0003\u0002\u0002",
    "\u0002\u161c\u161a\u0003\u0002\u0002\u0002\u161d\u161e\u0007\u0229\u0002",
    "\u0002\u161e\u1620\u0005\u02c8\u0165\u0002\u161f\u161d\u0003\u0002\u0002",
    "\u0002\u161f\u1620\u0003\u0002\u0002\u0002\u1620\u1622\u0003\u0002\u0002",
    "\u0002\u1621\u1623\u0005\u02d6\u016c\u0002\u1622\u1621\u0003\u0002\u0002",
    "\u0002\u1622\u1623\u0003\u0002\u0002\u0002\u1623\u02ed\u0003\u0002\u0002",
    "\u0002\u1624\u1625\u0007\u0238\u0002\u0002\u1625\u1627\u0005\u02ce\u0168",
    "\u0002\u1626\u1624\u0003\u0002\u0002\u0002\u1626\u1627\u0003\u0002\u0002",
    "\u0002\u1627\u1628\u0003\u0002\u0002\u0002\u1628\u162d\u0005\u02fa\u017e",
    "\u0002\u1629\u162a\u0007\u021a\u0002\u0002\u162a\u162c\u0005\u02fa\u017e",
    "\u0002\u162b\u1629\u0003\u0002\u0002\u0002\u162c\u162f\u0003\u0002\u0002",
    "\u0002\u162d\u162b\u0003\u0002\u0002\u0002\u162d\u162e\u0003\u0002\u0002",
    "\u0002\u162e\u02ef\u0003\u0002\u0002\u0002\u162f\u162d\u0003\u0002\u0002",
    "\u0002\u1630\u1633\u0007\u01aa\u0002\u0002\u1631\u1634\u0005\u02f6\u017c",
    "\u0002\u1632\u1634\u0005\u02e8\u0175\u0002\u1633\u1631\u0003\u0002\u0002",
    "\u0002\u1633\u1632\u0003\u0002\u0002\u0002\u1634\u1639\u0003\u0002\u0002",
    "\u0002\u1635\u1636\u0007\u0012\u0002\u0002\u1636\u1637\u0007\u01ad\u0002",
    "\u0002\u1637\u1638\u0007\u01ef\u0002\u0002\u1638\u163a\u0005\u02f6\u017c",
    "\u0002\u1639\u1635\u0003\u0002\u0002\u0002\u1639\u163a\u0003\u0002\u0002",
    "\u0002\u163a\u166f\u0003\u0002\u0002\u0002\u163b\u163f\u0007\u00ca\u0002",
    "\u0002\u163c\u1640\u0005\u02f6\u017c\u0002\u163d\u1640\u0005\u02e8\u0175",
    "\u0002\u163e\u1640\u0005\u02ec\u0177\u0002\u163f\u163c\u0003\u0002\u0002",
    "\u0002\u163f\u163d\u0003\u0002\u0002\u0002\u163f\u163e\u0003\u0002\u0002",
    "\u0002\u1640\u1641\u0003\u0002\u0002\u0002\u1641\u164f\tY\u0002\u0002",
    "\u1642\u1645\u0007\u0221\u0002\u0002\u1643\u1646\u0007\u021b\u0002\u0002",
    "\u1644\u1646\u0005\u02e8\u0175\u0002\u1645\u1643\u0003\u0002\u0002\u0002",
    "\u1645\u1644\u0003\u0002\u0002\u0002\u1646\u164c\u0003\u0002\u0002\u0002",
    "\u1647\u164a\u0007\u0227\u0002\u0002\u1648\u164b\u0007\u021b\u0002\u0002",
    "\u1649\u164b\u0005\u02e8\u0175\u0002\u164a\u1648\u0003\u0002\u0002\u0002",
    "\u164a\u1649\u0003\u0002\u0002\u0002\u164b\u164d\u0003\u0002\u0002\u0002",
    "\u164c\u1647\u0003\u0002\u0002\u0002\u164c\u164d\u0003\u0002\u0002\u0002",
    "\u164d\u164e\u0003\u0002\u0002\u0002\u164e\u1650\u0007\u0222\u0002\u0002",
    "\u164f\u1642\u0003\u0002\u0002\u0002\u164f\u1650\u0003\u0002\u0002\u0002",
    "\u1650\u1660\u0003\u0002\u0002\u0002\u1651\u165e\u0007\u01b2\u0002\u0002",
    "\u1652\u165f\u0007a\u0002\u0002\u1653\u165f\u0007\u00b2\u0002\u0002",
    "\u1654\u165f\u0007\u00f5\u0002\u0002\u1655\u165c\u0007\u0177\u0002\u0002",
    "\u1656\u1659\u0007\u0221\u0002\u0002\u1657\u165a\u0007\u021b\u0002\u0002",
    "\u1658\u165a\u0005\u02e8\u0175\u0002\u1659\u1657\u0003\u0002\u0002\u0002",
    "\u1659\u1658\u0003\u0002\u0002\u0002\u165a\u165b\u0003\u0002\u0002\u0002",
    "\u165b\u165d\u0007\u0222\u0002\u0002\u165c\u1656\u0003\u0002\u0002\u0002",
    "\u165c\u165d\u0003\u0002\u0002\u0002\u165d\u165f\u0003\u0002\u0002\u0002",
    "\u165e\u1652\u0003\u0002\u0002\u0002\u165e\u1653\u0003\u0002\u0002\u0002",
    "\u165e\u1654\u0003\u0002\u0002\u0002\u165e\u1655\u0003\u0002\u0002\u0002",
    "\u165f\u1661\u0003\u0002\u0002\u0002\u1660\u1651\u0003\u0002\u0002\u0002",
    "\u1660\u1661\u0003\u0002\u0002\u0002\u1661\u166f\u0003\u0002\u0002\u0002",
    "\u1662\u166f\u0005\u02f2\u017a\u0002\u1663\u1664\u0007`\u0002\u0002",
    "\u1664\u166f\u0005\u02f6\u017c\u0002\u1665\u166f\u0005\u02f6\u017c\u0002",
    "\u1666\u166f\u0007\u0117\u0002\u0002\u1667\u166f\u0007\u01b8\u0002\u0002",
    "\u1668\u166f\u0007\u0095\u0002\u0002\u1669\u166f\u0007c\u0002\u0002",
    "\u166a\u166f\u0007\u0181\u0002\u0002\u166b\u166f\u0007\u00f6\u0002\u0002",
    "\u166c\u166f\u0007\u00ef\u0002\u0002\u166d\u166f\u0007k\u0002\u0002",
    "\u166e\u1630\u0003\u0002\u0002\u0002\u166e\u163b\u0003\u0002\u0002\u0002",
    "\u166e\u1662\u0003\u0002\u0002\u0002\u166e\u1663\u0003\u0002\u0002\u0002",
    "\u166e\u1665\u0003\u0002\u0002\u0002\u166e\u1666\u0003\u0002\u0002\u0002",
    "\u166e\u1667\u0003\u0002\u0002\u0002\u166e\u1668\u0003\u0002\u0002\u0002",
    "\u166e\u1669\u0003\u0002\u0002\u0002\u166e\u166a\u0003\u0002\u0002\u0002",
    "\u166e\u166b\u0003\u0002\u0002\u0002\u166e\u166c\u0003\u0002\u0002\u0002",
    "\u166e\u166d\u0003\u0002\u0002\u0002\u166f\u02f1\u0003\u0002\u0002\u0002",
    "\u1670\u1671\tZ\u0002\u0002\u1671\u02f3\u0003\u0002\u0002\u0002\u1672",
    "\u1673\u0007\u0226\u0002\u0002\u1673\u1674\u0005\u02f2\u017a\u0002\u1674",
    "\u02f5\u0003\u0002\u0002\u0002\u1675\u1676\t[\u0002\u0002\u1676\u02f7",
    "\u0003\u0002\u0002\u0002\u1677\u1678\u0007\u0238\u0002\u0002\u1678\u167a",
    "\u0005\u02ce\u0168\u0002\u1679\u1677\u0003\u0002\u0002\u0002\u1679\u167a",
    "\u0003\u0002\u0002\u0002\u167a\u167b\u0003\u0002\u0002\u0002\u167b\u167c",
    "\u0005\u02fa\u017e\u0002\u167c\u02f9\u0003\u0002\u0002\u0002\u167d\u1680",
    "\u0005\u02fe\u0180\u0002\u167e\u1680\u0007\u021e\u0002\u0002\u167f\u167d",
    "\u0003\u0002\u0002\u0002\u167f\u167e\u0003\u0002\u0002\u0002\u1680\u02fb",
    "\u0003\u0002\u0002\u0002\u1681\u1682\u0007\u0221\u0002\u0002\u1682\u1683",
    "\u0007\u0225\u0002\u0002\u1683\u1684\u0007\u0222\u0002\u0002\u1684\u02fd",
    "\u0003\u0002\u0002\u0002\u1685\u1686\t\\\u0002\u0002\u1686\u02ff\u0003",
    "\u0002\u0002\u0002\u1687\u1688\t]\u0002\u0002\u1688\u0301\u0003\u0002",
    "\u0002\u0002\u1689\u168a\t^\u0002\u0002\u168a\u0303\u0003\u0002\u0002",
    "\u0002\u02fe\u0306\u0309\u030d\u0330\u033c\u0341\u0346\u034d\u0357\u035c",
    "\u0364\u0366\u036a\u036e\u0373\u0378\u037d\u0383\u0391\u0396\u0399\u039f",
    "\u03a8\u03b6\u03be\u03c3\u03cd\u03d0\u03d5\u03da\u03e1\u03e7\u03eb\u03f1",
    "\u03f6\u03fd\u0404\u040b\u0412\u0414\u0420\u042a\u042f\u043b\u0440\u0445",
    "\u0448\u0455\u0461\u0466\u046b\u0477\u047c\u0484\u0486\u048a\u048e\u0493",
    "\u0498\u049d\u04a9\u04ae\u04b2\u04b7\u04bd\u04c4\u04ce\u04d3\u04d6\u04da",
    "\u04df\u04e5\u04f7\u04fc\u0501\u0503\u050a\u0511\u0514\u0517\u051a\u0525",
    "\u0531\u0535\u0538\u0541\u0549\u0551\u0554\u055b\u055f\u0566\u056c\u0595",
    "\u05b1\u05b8\u05bd\u05c8\u05cb\u05d6\u05de\u05e2\u05ee\u05f1\u05f7\u05fa",
    "\u05ff\u0604\u0608\u0612\u061c\u0622\u062d\u0632\u0636\u063e\u0646\u064b",
    "\u064e\u0650\u0653\u065c\u0661\u0668\u066b\u066e\u0672\u0675\u067d\u0682",
    "\u0687\u068e\u0698\u06a8\u06ae\u06b8\u06c2\u06c9\u06ce\u06d4\u06de\u06e3",
    "\u06ea\u06ef\u06f5\u06f8\u06fb\u070c\u0711\u071a\u071f\u0725\u0728\u072f",
    "\u0732\u0739\u073e\u0742\u0747\u074c\u0756\u075c\u0766\u076b\u0772\u0778",
    "\u077c\u077f\u0782\u0793\u0798\u07a0\u07ae\u07b5\u07c5\u07ce\u07d0\u07e5",
    "\u07ed\u07f9\u07ff\u0813\u0820\u0828\u082d\u0835\u0837\u084c\u0853\u0855",
    "\u0858\u085c\u085f\u0867\u0869\u086b\u086e\u0886\u088f\u0894\u0899\u089f",
    "\u08a6\u08ab\u08ad\u08bd\u08c2\u08c8\u08cf\u08e5\u08eb\u08f5\u08ff\u0908",
    "\u0915\u0929\u0932\u0937\u093b\u093e\u094c\u0954\u0958\u095b\u096a\u096e",
    "\u0973\u0976\u0983\u0987\u0993\u0998\u099c\u09a0\u09a6\u09a9\u09ac\u09c7",
    "\u09cd\u09d1\u09dc\u09e3\u09e7\u09ea\u09f0\u09f9\u0a01\u0a05\u0a09\u0a11",
    "\u0a1a\u0a20\u0a22\u0a30\u0a45\u0a4a\u0a4e\u0a55\u0a59\u0a5d\u0a61\u0a6d",
    "\u0a71\u0a7f\u0a85\u0a8c\u0a91\u0a9c\u0a9f\u0aa5\u0aa7\u0ab0\u0aba\u0abf",
    "\u0ace\u0ad2\u0ad5\u0ad9\u0ae7\u0ae9\u0aed\u0af5\u0afc\u0b01\u0b03\u0b08",
    "\u0b0d\u0b15\u0b1c\u0b20\u0b23\u0b2f\u0b35\u0b3e\u0b41\u0b4b\u0b56\u0b59",
    "\u0b60\u0b63\u0b6a\u0b75\u0b7b\u0b7f\u0b89\u0b8c\u0b92\u0b9d\u0b9f\u0ba1",
    "\u0ba4\u0ba8\u0bab\u0baf\u0bb3\u0bb8\u0bc3\u0bc7\u0bcf\u0bd2\u0bd7\u0bd9",
    "\u0be2\u0bec\u0bf1\u0bf7\u0bfb\u0bfe\u0c06\u0c09\u0c0d\u0c11\u0c16\u0c19",
    "\u0c1d\u0c21\u0c25\u0c31\u0c3f\u0c47\u0c4b\u0c4f\u0c55\u0c5d\u0c60\u0c63",
    "\u0c67\u0c6a\u0c6d\u0c70\u0c74\u0c80\u0c83\u0c8a\u0c91\u0c96\u0c9c\u0ca0",
    "\u0ca5\u0cac\u0cb2\u0cb9\u0cbc\u0cbf\u0cc3\u0cc8\u0ccc\u0cce\u0cdb\u0ce2",
    "\u0ce9\u0ced\u0cf7\u0cfb\u0d03\u0d0f\u0d19\u0d1e\u0d28\u0d30\u0d33\u0d39",
    "\u0d3e\u0d41\u0d46\u0d50\u0d55\u0d62\u0d6e\u0d73\u0d7d\u0d82\u0d84\u0d89",
    "\u0d8d\u0d93\u0d97\u0da4\u0da8\u0db2\u0db5\u0db7\u0dbc\u0dc5\u0dd2\u0dda",
    "\u0dde\u0de7\u0deb\u0df0\u0dfb\u0dfd\u0e0d\u0e12\u0e18\u0e1e\u0e30\u0e37",
    "\u0e3a\u0e3d\u0e45\u0e48\u0e50\u0e52\u0e56\u0e59\u0e5e\u0e60\u0e64\u0e70",
    "\u0e79\u0e81\u0e86\u0e8a\u0e8f\u0e92\u0e9a\u0ea2\u0ea8\u0eab\u0eae\u0eb6",
    "\u0ec0\u0ecc\u0ed3\u0ed7\u0edb\u0ede\u0ee1\u0ee6\u0eeb\u0eee\u0ef1\u0ef7",
    "\u0efa\u0f00\u0f03\u0f06\u0f0b\u0f0e\u0f16\u0f1c\u0f26\u0f2b\u0f30\u0f38",
    "\u0f42\u0f46\u0f48\u0f4b\u0f57\u0f5b\u0f5e\u0f72\u0f77\u0f7c\u0f80\u0f87",
    "\u0f8a\u0f93\u0f9a\u0f9f\u0fa3\u0fab\u0fb1\u0fb9\u0fbc\u0fc5\u0fc8\u0fcb",
    "\u0fd4\u0fda\u0fe0\u0fe2\u0fef\u0ff1\u0ffa\u0ffc\u1000\u1006\u100a\u1018",
    "\u101d\u1028\u1033\u1037\u103e\u1043\u1047\u104c\u1054\u1056\u105c\u105f",
    "\u106a\u106f\u1079\u107b\u107d\u1087\u108b\u108d\u1099\u10a1\u10ae\u10b1",
    "\u10bd\u10bf\u10c7\u10cf\u10d6\u10da\u10e1\u10e5\u10ea\u10ee\u10f6\u10fa",
    "\u1101\u1106\u110f\u1118\u1121\u1124\u1138\u113c\u113f\u1146\u1149\u114d",
    "\u1150\u1157\u115a\u1160\u1163\u1167\u116a\u1171\u1176\u1184\u118b\u1196",
    "\u119f\u11a8\u11ac\u11b0\u11ca\u11cd\u11d0\u11da\u11de\u11e3\u11e8\u11ed",
    "\u11f6\u11f9\u11fb\u11ff\u1206\u120d\u1215\u1224\u1229\u122e\u1234\u1237",
    "\u123b\u1245\u1251\u1253\u125a\u125e\u1267\u1270\u127e\u1286\u1289\u1292",
    "\u1298\u12a2\u12aa\u12ad\u12b0\u12b9\u12be\u12c7\u12cd\u12d2\u12d5\u12da",
    "\u12df\u12e3\u12e9\u12ef\u12f8\u12fd\u1305\u1309\u130e\u1314\u131b\u1320",
    "\u1327\u132b\u1330\u1338\u133b\u133e\u1341\u1345\u134a\u134f\u1353\u135a",
    "\u135f\u1361\u136c\u1370\u1372\u137d\u1388\u1391\u1394\u1398\u139b\u139f",
    "\u13ac\u13b1\u13b9\u13c0\u13c4\u13c9\u13cd\u13d2\u13d7\u13da\u13e1\u13eb",
    "\u13f3\u13f7\u1401\u1404\u1406\u1410\u1412\u1418\u141e\u1420\u142e\u1430",
    "\u143a\u1443\u144c\u1450\u1454\u1459\u145d\u1460\u1464\u146b\u146f\u1477",
    "\u147c\u148f\u1494\u149b\u14a8\u14b2\u14b7\u14c0\u14c8\u14d0\u14d6\u14db",
    "\u14e0\u14e4\u14e9\u14ec\u14f2\u14f6\u14fb\u1504\u150a\u150f\u1516\u1524",
    "\u1528\u152e\u1533\u1538\u153a\u153f\u1543\u1548\u154f\u1554\u1556\u1558",
    "\u1562\u1567\u156b\u156e\u1572\u157b\u1581\u1585\u1587\u158b\u158f\u1596",
    "\u159e\u15a6\u15a8\u15ae\u15b1\u15c9\u15d0\u15f1\u15f6\u15f9\u15fe\u1600",
    "\u1606\u160e\u1613\u161a\u161f\u1622\u1626\u162d\u1633\u1639\u163f\u1645",
    "\u164a\u164c\u164f\u1659\u165c\u165e\u1660\u166e\u1679\u167f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'ADD'", "'AFTER'", "'AGENT'", "'AGGREGATE'", 
                     "'A'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", 
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", 
                     "'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHID'", "'AUTO'", 
                     "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BASIC'", 
                     "'BATCH'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BFILE'", 
                     "'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", 
                     "'BLOB'", "'BLOCK'", "'BODY'", "'BOOLEAN'", "'BOTH'", 
                     "'BREADTH'", "'BUFFER_POOL'", "'BULK'", "'BY'", "'BYTE'", 
                     "'CACHE'", "'CALL'", "'CANONICAL'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHARACTER'", "'CHAR'", "'CHAR_CS'", "'CHECK'", 
                     "'CHR'", "'C'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'COALESCE'", 
                     "'COLLECT'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                     "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", 
                     "'COMPOUND'", "'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", 
                     "'CONNECT'", "'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", 
                     "'CONSTRUCTOR'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", 
                     "'CONVERT'", "'CORRUPT_XID_ALL'", "'CORRUPT_XID'", 
                     "'COST'", "'COUNT'", "'CREATE'", "'CREATION'", "'CROSS'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
                     "'CUSTOMDATUM'", "'CYCLE'", "'DATABASE'", "'DATA'", 
                     "'DATE'", "'DAY'", "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", 
                     "'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", "'DECLARE'", 
                     "'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", 
                     "'DEFERRED'", "'DEFINER'", "'DELETE'", "'DEPTH'", "'DESC'", 
                     "'DETERMINISTIC'", "'DIMENSION'", "'DISABLE'", "'DISASSOCIATE'", 
                     "'DISTINCT'", "'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", 
                     "'EACH'", "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", 
                     "'ENABLE'", "'ENCODING'", "'ENCRYPT'", "'END'", "'ENTITYESCAPING'", 
                     "'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPTION'", 
                     "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
                     "'EXECUTE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FAILURE'", "'FALSE'", "'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", 
                     "'FINAL'", "'FIRST'", "'FIRST_VALUE'", "'FLASH_CACHE'", 
                     "'FLOAT'", "'FOLLOWING'", "'FOLLOWS'", "'FORALL'", 
                     "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", "'FREELISTS'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'GLOBAL'", "'GOTO'", 
                     "'GRANT'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HASH'", 
                     "'HAVING'", "'HIDE'", "'HIGH'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INDENT'", "'INDEXED'", "'INDEX'", "'INDICATOR'", 
                     "'INDICES'", "'INFINITE'", "'IN'", "'INITIAL'", "'INITRANS'", 
                     "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", "'INSTANTIABLE'", 
                     "'INSTEAD'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", 
                     "'INT'", "'INTO'", "'INVALIDATE'", "'IS'", "'ISOLATION'", 
                     "'ITERATE'", "'JAVA'", "'JOIN'", "'KEEP'", "'KEY'", 
                     "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEADING'", 
                     "'LEFT'", "'LEVEL'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", 
                     "'LIKEC'", "'LIKE'", "'LIMIT'", "'LIST'", "'LOCAL'", 
                     "'LOCKED'", "'LOCK'", "'LOGGING'", "'LOG'", "'LOGOFF'", 
                     "'LOGON'", "'LONG'", "'LOOP'", "'LOW'", "'MAIN'", "'MAP'", 
                     "'MATCHED'", "'MAXVALUE'", "'MEASURES'", "'MEMBER'", 
                     "'MERGE'", "'MINEXTENTS'", "'MINUS'", "'MINUTE'", "'MINVALUE'", 
                     "'MLSLABEL'", "'MODEL'", "'MODE'", "'MODIFY'", "'MONTH'", 
                     "'MULTISET'", "'NAME'", "'NAN'", "'NATURAL'", "'NATURALN'", 
                     "'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCLOB'", "'NESTED'", 
                     "'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", 
                     "'NOCOPY'", "'NOCYCLE'", "'NOENTITYESCAPING'", "'NOLOGGING'", 
                     "'NOMAXVALUE'", "'NOMINVALUE'", "'NONE'", "'NO'", "'NOORDER'", 
                     "'NOSCHEMACHECK'", "'NOT'", "'NOWAIT'", "'NULL'", "'NULLS'", 
                     "'NUMBER'", "'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", 
                     "'OFF'", "'OF'", "'OID'", "'OLD'", "'OLTP'", "'ONLY'", 
                     "'ON'", "'OPEN'", "'OPTIMAL'", "'OPTION'", "'ORADATA'", 
                     "'ORDER'", "'ORDINALITY'", "'OR'", "'OSERROR'", "'OUTER'", 
                     "'OUT'", "'OVER'", "'OVERRIDING'", "'PACKAGE'", "'PARALLEL_ENABLE'", 
                     "'PARAMETERS'", "'PARENT'", "'PARTITION'", "'PASSING'", 
                     "'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTUSED'", 
                     "'%FOUND'", "'%ISOPEN'", "'%NOTFOUND'", "'%ROWCOUNT'", 
                     "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", "'PIPE'", "'PIVOT'", 
                     "'PLAN'", "'PLS_INTEGER'", "'POSITIVEN'", "'POSITIVE'", 
                     "'PRAGMA'", "'PRECEDING'", "'PRECISION'", "'PRESENT'", 
                     "'PRESERVE'", "'PRIMARY'", "'PRIOR'", "'PROCEDURE'", 
                     "'PUBLIC'", "'QUERY'", "'RAISE'", "'RANGE'", "'RAW'", 
                     "'READ'", "'REAL'", "'RECORD'", "'RECYCLE'", "'REFERENCE'", 
                     "'REFERENCES'", "'REFERENCING'", "'REF'", "'REJECT'", 
                     "'RELIES_ON'", "'RENAME'", "'REPLACE'", "'RESPECT'", 
                     "'RESTRICT_REFERENCES'", "'RESULT_CACHE'", "'RESULT'", 
                     "'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", 
                     "'REVOKE'", "'RIGHT'", "'ROLLBACK'", "'ROLLUP'", "'ROWID'", 
                     "'ROW'", "'ROWS'", "'RULES'", "'SAMPLE'", "'SAVEPOINT'", 
                     "'SAVE'", "'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SEARCH'", 
                     "'SECOND'", "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", 
                     "'SEQUENCE'", "'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", 
                     "'SERVERERROR'", "'SESSIONTIMEZONE'", "'SET'", "'SETS'", 
                     "'SETTINGS'", "'SHARE'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", 
                     "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SIZE'", 
                     "'SKIP'", "'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SPECIFICATION'", 
                     "'SQLDATA'", "'SQLERROR'", "'STANDALONE'", "'START'", 
                     "'STARTUP'", "'STATEMENT_ID'", "'STATEMENT'", "'STATIC'", 
                     "'STATISTICS'", "'STORAGE'", "'STRING'", "'SUBMULTISET'", 
                     "'SUBPARTITION'", "'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", 
                     "'SUSPEND'", "'SYNONYM'", "'TABLESPACE'", "'TABLE'", 
                     "'TEMPORARY'", "'THEN'", "'THE'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", 
                     "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", 
                     "'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", 
                     "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
                     "'TRANSLATE'", "'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", 
                     "'TYPE'", "'UNBOUNDED'", "'UNDER'", "'UNION'", "'UNIQUE'", 
                     "'UNLIMITED'", "'UNPIVOT'", "'UNTIL'", "'UPDATED'", 
                     "'UPDATE'", "'UPSERT'", "'UROWID'", "'USE'", "'USING'", 
                     "'VALIDATE'", "'VALUES'", "'VALUE'", "'VARCHAR2'", 
                     "'VARCHAR'", "'VARIABLE'", "'VARRAY'", "'VARYING'", 
                     "'VERSIONS'", "'VERSION'", "'WAIT'", "'WARNING'", "'WELLFORMED'", 
                     "'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITHIN'", 
                     "'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", 
                     "'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", 
                     "'XMLFOREST'", "'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", 
                     "'XMLQUERY'", "'XMLROOT'", "'XMLSERIALIZE'", "'XMLTABLE'", 
                     "'XML'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
                     "'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
                     "'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", 
                     "'PREDICTION_SET'", "'CUME_DIST'", "'DENSE_RANK'", 
                     "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", 
                     "'DECODE'", "'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", 
                     "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", "'REGR_'", 
                     "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", 
                     "'TRIM'", "'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", 
                     "'LEAST'", "'GREATEST'", "'TO_DATE'", null, null, null, 
                     "'..'", "'.'", null, null, null, null, "'%'", "'&'", 
                     "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
                     "'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", 
                     "'<'", "':'", "';'", "'|'", "'='", "'['", "']'", "'_'", 
                     null, null, null, null, null, null, "'@!'" ];

var symbolicNames = [ null, "ADD", "AFTER", "AGENT", "AGGREGATE", "A_LETTER", 
                      "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARCHIVE", 
                      "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BASIC", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", 
                      "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
                      "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", 
                      "BUFFER_POOL", "BULK", "BY", "BYTE", "CACHE", "CALL", 
                      "CANONICAL", "CASCADE", "CASE", "CAST", "CHARACTER", 
                      "CHAR", "CHAR_CS", "CHECK", "CHR", "C_LETTER", "CLOB", 
                      "CLOSE", "CLUSTER", "COALESCE", "COLLECT", "COLUMN", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
                      "COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", 
                      "CONNECT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
                      "CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", 
                      "CORRUPT_XID_ALL", "CORRUPT_XID", "COST", "COUNT", 
                      "CREATE", "CREATION", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", 
                      "DATABASE", "DATA", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "ENCRYPT", "END", "ENTITYESCAPING", "ERR", 
                      "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
                      "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
                      "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", 
                      "FIRST", "FIRST_VALUE", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
                      "FOLLOWS", "FORALL", "FORCE", "FOREIGN", "FOR", "FREELIST", 
                      "FREELISTS", "FROM", "FULL", "FUNCTION", "GLOBAL", 
                      "GOTO", "GRANT", "GROUP", "GROUPING", "GROUPS", "HASH", 
                      "HAVING", "HIDE", "HIGH", "HOUR", "IF", "IGNORE", 
                      "IMMEDIATE", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INDENT", "INDEXED", "INDEX", "INDICATOR", "INDICES", 
                      "INFINITE", "IN", "INITIAL", "INITRANS", "INLINE", 
                      "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
                      "INTEGER", "INTERSECT", "INTERVAL", "INT", "INTO", 
                      "INVALIDATE", "IS", "ISOLATION", "ITERATE", "JAVA", 
                      "JOIN", "KEEP", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
                      "LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE2", "LIKE4", 
                      "LIKEC", "LIKE", "LIMIT", "LIST", "LOCAL", "LOCKED", 
                      "LOCK", "LOGGING", "LOG", "LOGOFF", "LOGON", "LONG", 
                      "LOOP", "LOW", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINEXTENTS", "MINUS", 
                      "MINUTE", "MINVALUE", "MLSLABEL", "MODEL", "MODE", 
                      "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", 
                      "NATURALN", "NAV", "NCHAR_CS", "NCHAR", "NCLOB", "NESTED", 
                      "NEW", "NEXT", "NOAUDIT", "NOCACHE", "NOCOMPRESS", 
                      "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NO", "NOORDER", 
                      "NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", "NULLS", 
                      "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OFF", 
                      "OF", "OID", "OLD", "OLTP", "ONLY", "ON", "OPEN", 
                      "OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", 
                      "OR", "OSERROR", "OUTER", "OUT", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PCTFREE", "PCTINCREASE", 
                      "PCTUSED", "PERCENT_FOUND", "PERCENT_ISOPEN", "PERCENT_NOTFOUND", 
                      "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
                      "PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", 
                      "POSITIVEN", "POSITIVE", "PRAGMA", "PRECEDING", "PRECISION", 
                      "PRESENT", "PRESERVE", "PRIMARY", "PRIOR", "PROCEDURE", 
                      "PUBLIC", "QUERY", "RAISE", "RANGE", "RAW", "READ", 
                      "REAL", "RECORD", "RECYCLE", "REFERENCE", "REFERENCES", 
                      "REFERENCING", "REF", "REJECT", "RELIES_ON", "RENAME", 
                      "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT_CACHE", 
                      "RESULT", "RETURNING", "RETURN", "REUSE", "REVERSE", 
                      "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROWID", 
                      "ROW", "ROWS", "RULES", "SAMPLE", "SAVEPOINT", "SAVE", 
                      "SCHEMACHECK", "SCHEMA", "SCN", "SEARCH", "SECOND", 
                      "SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT_ID", "STATEMENT", "STATIC", 
                      "STATISTICS", "STORAGE", "STRING", "SUBMULTISET", 
                      "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
                      "SUSPEND", "SYNONYM", "TABLESPACE", "TABLE", "TEMPORARY", 
                      "THEN", "THE", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP", 
                      "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
                      "TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
                      "TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", 
                      "TRANSLATE", "TREAT", "TRIGGER", "TRUE", "TRUNCATE", 
                      "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
                      "UNPIVOT", "UNTIL", "UPDATED", "UPDATE", "UPSERT", 
                      "UROWID", "USE", "USING", "VALIDATE", "VALUES", "VALUE", 
                      "VARCHAR2", "VARCHAR", "VARIABLE", "VARRAY", "VARYING", 
                      "VERSIONS", "VERSION", "WAIT", "WARNING", "WELLFORMED", 
                      "WHENEVER", "WHEN", "WHERE", "WHILE", "WITHIN", "WITH", 
                      "WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", 
                      "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
                      "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", 
                      "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "XML", "YEAR", 
                      "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", 
                      "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
                      "PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", 
                      "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
                      "PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", 
                      "DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", 
                      "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", "ROW_NUMBER", 
                      "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", 
                      "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", 
                      "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
                      "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
                      "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", 
                      "BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
                      "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "START_CMD", "REGULAR_ID", "ZV" ];

var ruleNames =  [ "sql_script", "unit_statement", "drop_function", "alter_function", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "result_cache_clause", "relies_on_part", "streaming_clause", 
                   "drop_package", "alter_package", "create_package", "create_package_body", 
                   "package_obj_spec", "procedure_spec", "function_spec", 
                   "package_obj_body", "drop_procedure", "alter_procedure", 
                   "function_body", "procedure_body", "create_procedure_body", 
                   "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
                   "trigger_when_clause", "simple_dml_trigger", "for_each_row", 
                   "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
                   "routine_clause", "compound_trigger_block", "timing_point_section", 
                   "non_dml_event", "dml_event_clause", "dml_event_element", 
                   "dml_event_nested_clause", "referencing_clause", "referencing_element", 
                   "drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
                   "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
                   "attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
                   "dependent_exceptions_part", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "modifier_clause", "object_member_spec", "sqlj_object_type_attr", 
                   "element_spec", "element_spec_options", "subprogram_spec", 
                   "type_procedure_spec", "type_function_spec", "constructor_spec", 
                   "map_order_function_spec", "pragma_clause", "pragma_elements", 
                   "type_elements_parameter", "drop_sequence", "alter_sequence", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "create_index", "alter_index", "drop_index", "create_table", 
                   "size_clause", "drop_table", "comment_on_column", "create_synonym", 
                   "comment_on_table", "alter_table", "add_constraint", 
                   "check_constraint", "drop_constraint", "enable_constraint", 
                   "disable_constraint", "foreign_key_clause", "references_clause", 
                   "on_delete_clause", "unique_key_clause", "primary_key_clause", 
                   "anonymous_block", "invoker_rights_clause", "compiler_parameters_clause", 
                   "call_spec", "java_spec", "c_spec", "c_agent_in_clause", 
                   "c_parameters_clause", "parameter", "default_value_part", 
                   "declare_spec", "variable_declaration", "subtype_declaration", 
                   "cursor_declaration", "parameter_spec", "exception_declaration", 
                   "pragma_declaration", "record_type_def", "field_spec", 
                   "ref_cursor_type_def", "type_declaration", "table_type_def", 
                   "table_indexed_by_part", "varray_type_def", "seq_of_statements", 
                   "label_declaration", "statement", "swallow_to_semi", 
                   "assignment_statement", "continue_statement", "exit_statement", 
                   "goto_statement", "if_statement", "elsif_part", "else_part", 
                   "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "pipe_row_statement", "body", "exception_handler", 
                   "trigger_block", "block", "sql_statement", "execute_immediate", 
                   "dynamic_returning_clause", "data_manipulation_language_statements", 
                   "cursor_manipulation_statements", "close_statement", 
                   "open_statement", "fetch_statement", "open_for_statement", 
                   "transaction_control_statements", "set_transaction_command", 
                   "set_constraint_command", "commit_statement", "write_clause", 
                   "rollback_statement", "savepoint_statement", "explain_statement", 
                   "select_statement", "subquery_factoring_clause", "factoring_element", 
                   "search_clause", "cycle_clause", "subquery", "subquery_basic_elements", 
                   "subquery_operation_part", "query_block", "selected_element", 
                   "from_clause", "select_list_elements", "table_ref_list", 
                   "table_ref", "table_ref_aux", "table_ref_aux_internal", 
                   "join_clause", "join_on_part", "join_using_part", "outer_join_type", 
                   "query_partition_clause", "flashback_query_clause", "pivot_clause", 
                   "pivot_element", "pivot_for_clause", "pivot_in_clause", 
                   "pivot_in_clause_element", "pivot_in_clause_elements", 
                   "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", 
                   "hierarchical_query_clause", "start_part", "group_by_clause", 
                   "group_by_elements", "rollup_cube_clause", "grouping_sets_clause", 
                   "grouping_sets_elements", "having_clause", "model_clause", 
                   "cell_reference_options", "return_rows_clause", "reference_model", 
                   "main_model", "model_column_clauses", "model_column_partition_part", 
                   "model_column_list", "model_column", "model_rules_clause", 
                   "model_rules_part", "model_rules_element", "cell_assignment", 
                   "model_iterate_clause", "until_part", "order_by_clause", 
                   "order_by_elements", "for_update_clause", "for_update_of_part", 
                   "for_update_options", "update_statement", "update_set_clause", 
                   "column_based_update_set_clause", "delete_statement", 
                   "insert_statement", "single_table_insert", "multi_table_insert", 
                   "multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
                   "conditional_insert_else_part", "insert_into_clause", 
                   "values_clause", "merge_statement", "merge_update_clause", 
                   "merge_element", "merge_update_delete_part", "merge_insert_clause", 
                   "selected_tableview", "lock_table_statement", "wait_nowait_part", 
                   "lock_table_element", "lock_mode", "general_table_ref", 
                   "static_returning_clause", "error_logging_clause", "error_logging_into_part", 
                   "error_logging_reject_part", "dml_table_expression_clause", 
                   "table_collection_expression", "subquery_restriction_clause", 
                   "sample_clause", "seed_part", "condition", "expressions", 
                   "expression", "cursor_expression", "logical_expression", 
                   "multiset_expression", "relational_expression", "compound_expression", 
                   "relational_operator", "in_elements", "between_elements", 
                   "concatenation", "interval_expression", "model_expression", 
                   "model_expression_element", "single_column_for_loop", 
                   "multi_column_for_loop", "unary_expression", "case_statement", 
                   "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
                   "searched_case_when_part", "case_else_part", "atom", 
                   "quantified_expression", "string_function", "standard_function", 
                   "numeric_function_wrapper", "numeric_function", "other_function", 
                   "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "where_clause", "into_clause", 
                   "xml_column_name", "cost_class_name", "attribute_name", 
                   "savepoint_name", "rollback_segment_name", "table_var_name", 
                   "schema_name", "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "function_name", "procedure_name", "trigger_name", "variable_name", 
                   "index_name", "cursor_name", "record_name", "collection_name", 
                   "link_name", "column_name", "tableview_name", "char_set_name", 
                   "synonym_name", "schema_object_name", "keep_clause", 
                   "function_argument", "function_argument_analytic", "function_argument_modeling", 
                   "respect_or_ignore_nulls", "argument", "type_spec", "datatype", 
                   "precision_part", "native_datatype_element", "bind_variable", 
                   "general_element", "general_element_part", "table_element", 
                   "constant", "numeric", "numeric_negative", "quoted_string", 
                   "identifier", "id_expression", "outer_join_sign", "regular_id", 
                   "string_function_name", "numeric_function_name" ];

function PlSqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PlSqlParser.prototype = Object.create(antlr4.Parser.prototype);
PlSqlParser.prototype.constructor = PlSqlParser;

Object.defineProperty(PlSqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PlSqlParser.EOF = antlr4.Token.EOF;
PlSqlParser.ADD = 1;
PlSqlParser.AFTER = 2;
PlSqlParser.AGENT = 3;
PlSqlParser.AGGREGATE = 4;
PlSqlParser.A_LETTER = 5;
PlSqlParser.ALL = 6;
PlSqlParser.ALTER = 7;
PlSqlParser.ANALYZE = 8;
PlSqlParser.AND = 9;
PlSqlParser.ANY = 10;
PlSqlParser.ARCHIVE = 11;
PlSqlParser.ARRAY = 12;
PlSqlParser.AS = 13;
PlSqlParser.ASC = 14;
PlSqlParser.ASSOCIATE = 15;
PlSqlParser.AT = 16;
PlSqlParser.ATTRIBUTE = 17;
PlSqlParser.AUDIT = 18;
PlSqlParser.AUTHID = 19;
PlSqlParser.AUTO = 20;
PlSqlParser.AUTOMATIC = 21;
PlSqlParser.AUTONOMOUS_TRANSACTION = 22;
PlSqlParser.BASIC = 23;
PlSqlParser.BATCH = 24;
PlSqlParser.BEFORE = 25;
PlSqlParser.BEGIN = 26;
PlSqlParser.BETWEEN = 27;
PlSqlParser.BFILE = 28;
PlSqlParser.BINARY_DOUBLE = 29;
PlSqlParser.BINARY_FLOAT = 30;
PlSqlParser.BINARY_INTEGER = 31;
PlSqlParser.BLOB = 32;
PlSqlParser.BLOCK = 33;
PlSqlParser.BODY = 34;
PlSqlParser.BOOLEAN = 35;
PlSqlParser.BOTH = 36;
PlSqlParser.BREADTH = 37;
PlSqlParser.BUFFER_POOL = 38;
PlSqlParser.BULK = 39;
PlSqlParser.BY = 40;
PlSqlParser.BYTE = 41;
PlSqlParser.CACHE = 42;
PlSqlParser.CALL = 43;
PlSqlParser.CANONICAL = 44;
PlSqlParser.CASCADE = 45;
PlSqlParser.CASE = 46;
PlSqlParser.CAST = 47;
PlSqlParser.CHARACTER = 48;
PlSqlParser.CHAR = 49;
PlSqlParser.CHAR_CS = 50;
PlSqlParser.CHECK = 51;
PlSqlParser.CHR = 52;
PlSqlParser.C_LETTER = 53;
PlSqlParser.CLOB = 54;
PlSqlParser.CLOSE = 55;
PlSqlParser.CLUSTER = 56;
PlSqlParser.COALESCE = 57;
PlSqlParser.COLLECT = 58;
PlSqlParser.COLUMN = 59;
PlSqlParser.COLUMNS = 60;
PlSqlParser.COMMENT = 61;
PlSqlParser.COMMIT = 62;
PlSqlParser.COMMITTED = 63;
PlSqlParser.COMPATIBILITY = 64;
PlSqlParser.COMPILE = 65;
PlSqlParser.COMPOUND = 66;
PlSqlParser.COMPRESS = 67;
PlSqlParser.COMPUTE = 68;
PlSqlParser.CONNECT_BY_ROOT = 69;
PlSqlParser.CONNECT = 70;
PlSqlParser.CONSTANT = 71;
PlSqlParser.CONSTRAINT = 72;
PlSqlParser.CONSTRAINTS = 73;
PlSqlParser.CONSTRUCTOR = 74;
PlSqlParser.CONTENT = 75;
PlSqlParser.CONTEXT = 76;
PlSqlParser.CONTINUE = 77;
PlSqlParser.CONVERT = 78;
PlSqlParser.CORRUPT_XID_ALL = 79;
PlSqlParser.CORRUPT_XID = 80;
PlSqlParser.COST = 81;
PlSqlParser.COUNT = 82;
PlSqlParser.CREATE = 83;
PlSqlParser.CREATION = 84;
PlSqlParser.CROSS = 85;
PlSqlParser.CUBE = 86;
PlSqlParser.CURRENT = 87;
PlSqlParser.CURRENT_USER = 88;
PlSqlParser.CURSOR = 89;
PlSqlParser.CUSTOMDATUM = 90;
PlSqlParser.CYCLE = 91;
PlSqlParser.DATABASE = 92;
PlSqlParser.DATA = 93;
PlSqlParser.DATE = 94;
PlSqlParser.DAY = 95;
PlSqlParser.DB_ROLE_CHANGE = 96;
PlSqlParser.DBTIMEZONE = 97;
PlSqlParser.DDL = 98;
PlSqlParser.DEBUG = 99;
PlSqlParser.DEC = 100;
PlSqlParser.DECIMAL = 101;
PlSqlParser.DECLARE = 102;
PlSqlParser.DECOMPOSE = 103;
PlSqlParser.DECREMENT = 104;
PlSqlParser.DEFAULT = 105;
PlSqlParser.DEFAULTS = 106;
PlSqlParser.DEFERRED = 107;
PlSqlParser.DEFINER = 108;
PlSqlParser.DELETE = 109;
PlSqlParser.DEPTH = 110;
PlSqlParser.DESC = 111;
PlSqlParser.DETERMINISTIC = 112;
PlSqlParser.DIMENSION = 113;
PlSqlParser.DISABLE = 114;
PlSqlParser.DISASSOCIATE = 115;
PlSqlParser.DISTINCT = 116;
PlSqlParser.DOCUMENT = 117;
PlSqlParser.DOUBLE = 118;
PlSqlParser.DROP = 119;
PlSqlParser.DSINTERVAL_UNCONSTRAINED = 120;
PlSqlParser.EACH = 121;
PlSqlParser.ELEMENT = 122;
PlSqlParser.ELSE = 123;
PlSqlParser.ELSIF = 124;
PlSqlParser.EMPTY = 125;
PlSqlParser.ENABLE = 126;
PlSqlParser.ENCODING = 127;
PlSqlParser.ENCRYPT = 128;
PlSqlParser.END = 129;
PlSqlParser.ENTITYESCAPING = 130;
PlSqlParser.ERR = 131;
PlSqlParser.ERRORS = 132;
PlSqlParser.ESCAPE = 133;
PlSqlParser.EVALNAME = 134;
PlSqlParser.EXCEPTION = 135;
PlSqlParser.EXCEPTION_INIT = 136;
PlSqlParser.EXCEPTIONS = 137;
PlSqlParser.EXCLUDE = 138;
PlSqlParser.EXCLUSIVE = 139;
PlSqlParser.EXECUTE = 140;
PlSqlParser.EXISTS = 141;
PlSqlParser.EXIT = 142;
PlSqlParser.EXPLAIN = 143;
PlSqlParser.EXTERNAL = 144;
PlSqlParser.EXTRACT = 145;
PlSqlParser.FAILURE = 146;
PlSqlParser.FALSE = 147;
PlSqlParser.FETCH = 148;
PlSqlParser.FILESYSTEM_LIKE_LOGGING = 149;
PlSqlParser.FINAL = 150;
PlSqlParser.FIRST = 151;
PlSqlParser.FIRST_VALUE = 152;
PlSqlParser.FLASH_CACHE = 153;
PlSqlParser.FLOAT = 154;
PlSqlParser.FOLLOWING = 155;
PlSqlParser.FOLLOWS = 156;
PlSqlParser.FORALL = 157;
PlSqlParser.FORCE = 158;
PlSqlParser.FOREIGN = 159;
PlSqlParser.FOR = 160;
PlSqlParser.FREELIST = 161;
PlSqlParser.FREELISTS = 162;
PlSqlParser.FROM = 163;
PlSqlParser.FULL = 164;
PlSqlParser.FUNCTION = 165;
PlSqlParser.GLOBAL = 166;
PlSqlParser.GOTO = 167;
PlSqlParser.GRANT = 168;
PlSqlParser.GROUP = 169;
PlSqlParser.GROUPING = 170;
PlSqlParser.GROUPS = 171;
PlSqlParser.HASH = 172;
PlSqlParser.HAVING = 173;
PlSqlParser.HIDE = 174;
PlSqlParser.HIGH = 175;
PlSqlParser.HOUR = 176;
PlSqlParser.IF = 177;
PlSqlParser.IGNORE = 178;
PlSqlParser.IMMEDIATE = 179;
PlSqlParser.INCLUDE = 180;
PlSqlParser.INCLUDING = 181;
PlSqlParser.INCREMENT = 182;
PlSqlParser.INDENT = 183;
PlSqlParser.INDEXED = 184;
PlSqlParser.INDEX = 185;
PlSqlParser.INDICATOR = 186;
PlSqlParser.INDICES = 187;
PlSqlParser.INFINITE = 188;
PlSqlParser.IN = 189;
PlSqlParser.INITIAL = 190;
PlSqlParser.INITRANS = 191;
PlSqlParser.INLINE = 192;
PlSqlParser.INNER = 193;
PlSqlParser.INOUT = 194;
PlSqlParser.INSERT = 195;
PlSqlParser.INSTANTIABLE = 196;
PlSqlParser.INSTEAD = 197;
PlSqlParser.INTEGER = 198;
PlSqlParser.INTERSECT = 199;
PlSqlParser.INTERVAL = 200;
PlSqlParser.INT = 201;
PlSqlParser.INTO = 202;
PlSqlParser.INVALIDATE = 203;
PlSqlParser.IS = 204;
PlSqlParser.ISOLATION = 205;
PlSqlParser.ITERATE = 206;
PlSqlParser.JAVA = 207;
PlSqlParser.JOIN = 208;
PlSqlParser.KEEP = 209;
PlSqlParser.KEY = 210;
PlSqlParser.LANGUAGE = 211;
PlSqlParser.LAST = 212;
PlSqlParser.LAST_VALUE = 213;
PlSqlParser.LEADING = 214;
PlSqlParser.LEFT = 215;
PlSqlParser.LEVEL = 216;
PlSqlParser.LIBRARY = 217;
PlSqlParser.LIKE2 = 218;
PlSqlParser.LIKE4 = 219;
PlSqlParser.LIKEC = 220;
PlSqlParser.LIKE = 221;
PlSqlParser.LIMIT = 222;
PlSqlParser.LIST = 223;
PlSqlParser.LOCAL = 224;
PlSqlParser.LOCKED = 225;
PlSqlParser.LOCK = 226;
PlSqlParser.LOGGING = 227;
PlSqlParser.LOG = 228;
PlSqlParser.LOGOFF = 229;
PlSqlParser.LOGON = 230;
PlSqlParser.LONG = 231;
PlSqlParser.LOOP = 232;
PlSqlParser.LOW = 233;
PlSqlParser.MAIN = 234;
PlSqlParser.MAP = 235;
PlSqlParser.MATCHED = 236;
PlSqlParser.MAXVALUE = 237;
PlSqlParser.MEASURES = 238;
PlSqlParser.MEMBER = 239;
PlSqlParser.MERGE = 240;
PlSqlParser.MINEXTENTS = 241;
PlSqlParser.MINUS = 242;
PlSqlParser.MINUTE = 243;
PlSqlParser.MINVALUE = 244;
PlSqlParser.MLSLABEL = 245;
PlSqlParser.MODEL = 246;
PlSqlParser.MODE = 247;
PlSqlParser.MODIFY = 248;
PlSqlParser.MONTH = 249;
PlSqlParser.MULTISET = 250;
PlSqlParser.NAME = 251;
PlSqlParser.NAN = 252;
PlSqlParser.NATURAL = 253;
PlSqlParser.NATURALN = 254;
PlSqlParser.NAV = 255;
PlSqlParser.NCHAR_CS = 256;
PlSqlParser.NCHAR = 257;
PlSqlParser.NCLOB = 258;
PlSqlParser.NESTED = 259;
PlSqlParser.NEW = 260;
PlSqlParser.NEXT = 261;
PlSqlParser.NOAUDIT = 262;
PlSqlParser.NOCACHE = 263;
PlSqlParser.NOCOMPRESS = 264;
PlSqlParser.NOCOPY = 265;
PlSqlParser.NOCYCLE = 266;
PlSqlParser.NOENTITYESCAPING = 267;
PlSqlParser.NOLOGGING = 268;
PlSqlParser.NOMAXVALUE = 269;
PlSqlParser.NOMINVALUE = 270;
PlSqlParser.NONE = 271;
PlSqlParser.NO = 272;
PlSqlParser.NOORDER = 273;
PlSqlParser.NOSCHEMACHECK = 274;
PlSqlParser.NOT = 275;
PlSqlParser.NOWAIT = 276;
PlSqlParser.NULL = 277;
PlSqlParser.NULLS = 278;
PlSqlParser.NUMBER = 279;
PlSqlParser.NUMERIC = 280;
PlSqlParser.NVARCHAR2 = 281;
PlSqlParser.OBJECT = 282;
PlSqlParser.OFF = 283;
PlSqlParser.OF = 284;
PlSqlParser.OID = 285;
PlSqlParser.OLD = 286;
PlSqlParser.OLTP = 287;
PlSqlParser.ONLY = 288;
PlSqlParser.ON = 289;
PlSqlParser.OPEN = 290;
PlSqlParser.OPTIMAL = 291;
PlSqlParser.OPTION = 292;
PlSqlParser.ORADATA = 293;
PlSqlParser.ORDER = 294;
PlSqlParser.ORDINALITY = 295;
PlSqlParser.OR = 296;
PlSqlParser.OSERROR = 297;
PlSqlParser.OUTER = 298;
PlSqlParser.OUT = 299;
PlSqlParser.OVER = 300;
PlSqlParser.OVERRIDING = 301;
PlSqlParser.PACKAGE = 302;
PlSqlParser.PARALLEL_ENABLE = 303;
PlSqlParser.PARAMETERS = 304;
PlSqlParser.PARENT = 305;
PlSqlParser.PARTITION = 306;
PlSqlParser.PASSING = 307;
PlSqlParser.PATH = 308;
PlSqlParser.PCTFREE = 309;
PlSqlParser.PCTINCREASE = 310;
PlSqlParser.PCTUSED = 311;
PlSqlParser.PERCENT_FOUND = 312;
PlSqlParser.PERCENT_ISOPEN = 313;
PlSqlParser.PERCENT_NOTFOUND = 314;
PlSqlParser.PERCENT_ROWCOUNT = 315;
PlSqlParser.PERCENT_ROWTYPE = 316;
PlSqlParser.PERCENT_TYPE = 317;
PlSqlParser.PIPELINED = 318;
PlSqlParser.PIPE = 319;
PlSqlParser.PIVOT = 320;
PlSqlParser.PLAN = 321;
PlSqlParser.PLS_INTEGER = 322;
PlSqlParser.POSITIVEN = 323;
PlSqlParser.POSITIVE = 324;
PlSqlParser.PRAGMA = 325;
PlSqlParser.PRECEDING = 326;
PlSqlParser.PRECISION = 327;
PlSqlParser.PRESENT = 328;
PlSqlParser.PRESERVE = 329;
PlSqlParser.PRIMARY = 330;
PlSqlParser.PRIOR = 331;
PlSqlParser.PROCEDURE = 332;
PlSqlParser.PUBLIC = 333;
PlSqlParser.QUERY = 334;
PlSqlParser.RAISE = 335;
PlSqlParser.RANGE = 336;
PlSqlParser.RAW = 337;
PlSqlParser.READ = 338;
PlSqlParser.REAL = 339;
PlSqlParser.RECORD = 340;
PlSqlParser.RECYCLE = 341;
PlSqlParser.REFERENCE = 342;
PlSqlParser.REFERENCES = 343;
PlSqlParser.REFERENCING = 344;
PlSqlParser.REF = 345;
PlSqlParser.REJECT = 346;
PlSqlParser.RELIES_ON = 347;
PlSqlParser.RENAME = 348;
PlSqlParser.REPLACE = 349;
PlSqlParser.RESPECT = 350;
PlSqlParser.RESTRICT_REFERENCES = 351;
PlSqlParser.RESULT_CACHE = 352;
PlSqlParser.RESULT = 353;
PlSqlParser.RETURNING = 354;
PlSqlParser.RETURN = 355;
PlSqlParser.REUSE = 356;
PlSqlParser.REVERSE = 357;
PlSqlParser.REVOKE = 358;
PlSqlParser.RIGHT = 359;
PlSqlParser.ROLLBACK = 360;
PlSqlParser.ROLLUP = 361;
PlSqlParser.ROWID = 362;
PlSqlParser.ROW = 363;
PlSqlParser.ROWS = 364;
PlSqlParser.RULES = 365;
PlSqlParser.SAMPLE = 366;
PlSqlParser.SAVEPOINT = 367;
PlSqlParser.SAVE = 368;
PlSqlParser.SCHEMACHECK = 369;
PlSqlParser.SCHEMA = 370;
PlSqlParser.SCN = 371;
PlSqlParser.SEARCH = 372;
PlSqlParser.SECOND = 373;
PlSqlParser.SEED = 374;
PlSqlParser.SEGMENT = 375;
PlSqlParser.SELECT = 376;
PlSqlParser.SELF = 377;
PlSqlParser.SEQUENCE = 378;
PlSqlParser.SEQUENTIAL = 379;
PlSqlParser.SERIALIZABLE = 380;
PlSqlParser.SERIALLY_REUSABLE = 381;
PlSqlParser.SERVERERROR = 382;
PlSqlParser.SESSIONTIMEZONE = 383;
PlSqlParser.SET = 384;
PlSqlParser.SETS = 385;
PlSqlParser.SETTINGS = 386;
PlSqlParser.SHARE = 387;
PlSqlParser.SHOW = 388;
PlSqlParser.SHUTDOWN = 389;
PlSqlParser.SIBLINGS = 390;
PlSqlParser.SIGNTYPE = 391;
PlSqlParser.SIMPLE_INTEGER = 392;
PlSqlParser.SINGLE = 393;
PlSqlParser.SIZE = 394;
PlSqlParser.SKIP_ = 395;
PlSqlParser.SMALLINT = 396;
PlSqlParser.SNAPSHOT = 397;
PlSqlParser.SOME = 398;
PlSqlParser.SPECIFICATION = 399;
PlSqlParser.SQLDATA = 400;
PlSqlParser.SQLERROR = 401;
PlSqlParser.STANDALONE = 402;
PlSqlParser.START = 403;
PlSqlParser.STARTUP = 404;
PlSqlParser.STATEMENT_ID = 405;
PlSqlParser.STATEMENT = 406;
PlSqlParser.STATIC = 407;
PlSqlParser.STATISTICS = 408;
PlSqlParser.STORAGE = 409;
PlSqlParser.STRING = 410;
PlSqlParser.SUBMULTISET = 411;
PlSqlParser.SUBPARTITION = 412;
PlSqlParser.SUBSTITUTABLE = 413;
PlSqlParser.SUBTYPE = 414;
PlSqlParser.SUCCESS = 415;
PlSqlParser.SUSPEND = 416;
PlSqlParser.SYNONYM = 417;
PlSqlParser.TABLESPACE = 418;
PlSqlParser.TABLE = 419;
PlSqlParser.TEMPORARY = 420;
PlSqlParser.THEN = 421;
PlSqlParser.THE = 422;
PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED = 423;
PlSqlParser.TIMESTAMP = 424;
PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED = 425;
PlSqlParser.TIMESTAMP_UNCONSTRAINED = 426;
PlSqlParser.TIME = 427;
PlSqlParser.TIMEZONE_ABBR = 428;
PlSqlParser.TIMEZONE_HOUR = 429;
PlSqlParser.TIMEZONE_MINUTE = 430;
PlSqlParser.TIMEZONE_REGION = 431;
PlSqlParser.TO = 432;
PlSqlParser.TRAILING = 433;
PlSqlParser.TRANSACTION = 434;
PlSqlParser.TRANSLATE = 435;
PlSqlParser.TREAT = 436;
PlSqlParser.TRIGGER = 437;
PlSqlParser.TRUE = 438;
PlSqlParser.TRUNCATE = 439;
PlSqlParser.TYPE = 440;
PlSqlParser.UNBOUNDED = 441;
PlSqlParser.UNDER = 442;
PlSqlParser.UNION = 443;
PlSqlParser.UNIQUE = 444;
PlSqlParser.UNLIMITED = 445;
PlSqlParser.UNPIVOT = 446;
PlSqlParser.UNTIL = 447;
PlSqlParser.UPDATED = 448;
PlSqlParser.UPDATE = 449;
PlSqlParser.UPSERT = 450;
PlSqlParser.UROWID = 451;
PlSqlParser.USE = 452;
PlSqlParser.USING = 453;
PlSqlParser.VALIDATE = 454;
PlSqlParser.VALUES = 455;
PlSqlParser.VALUE = 456;
PlSqlParser.VARCHAR2 = 457;
PlSqlParser.VARCHAR = 458;
PlSqlParser.VARIABLE = 459;
PlSqlParser.VARRAY = 460;
PlSqlParser.VARYING = 461;
PlSqlParser.VERSIONS = 462;
PlSqlParser.VERSION = 463;
PlSqlParser.WAIT = 464;
PlSqlParser.WARNING = 465;
PlSqlParser.WELLFORMED = 466;
PlSqlParser.WHENEVER = 467;
PlSqlParser.WHEN = 468;
PlSqlParser.WHERE = 469;
PlSqlParser.WHILE = 470;
PlSqlParser.WITHIN = 471;
PlSqlParser.WITH = 472;
PlSqlParser.WORK = 473;
PlSqlParser.WRITE = 474;
PlSqlParser.XMLAGG = 475;
PlSqlParser.XMLATTRIBUTES = 476;
PlSqlParser.XMLCAST = 477;
PlSqlParser.XMLCOLATTVAL = 478;
PlSqlParser.XMLELEMENT = 479;
PlSqlParser.XMLEXISTS = 480;
PlSqlParser.XMLFOREST = 481;
PlSqlParser.XMLNAMESPACES = 482;
PlSqlParser.XMLPARSE = 483;
PlSqlParser.XMLPI = 484;
PlSqlParser.XMLQUERY = 485;
PlSqlParser.XMLROOT = 486;
PlSqlParser.XMLSERIALIZE = 487;
PlSqlParser.XMLTABLE = 488;
PlSqlParser.XML = 489;
PlSqlParser.YEAR = 490;
PlSqlParser.YES = 491;
PlSqlParser.YMINTERVAL_UNCONSTRAINED = 492;
PlSqlParser.ZONE = 493;
PlSqlParser.PREDICTION = 494;
PlSqlParser.PREDICTION_BOUNDS = 495;
PlSqlParser.PREDICTION_COST = 496;
PlSqlParser.PREDICTION_DETAILS = 497;
PlSqlParser.PREDICTION_PROBABILITY = 498;
PlSqlParser.PREDICTION_SET = 499;
PlSqlParser.CUME_DIST = 500;
PlSqlParser.DENSE_RANK = 501;
PlSqlParser.LISTAGG = 502;
PlSqlParser.PERCENT_RANK = 503;
PlSqlParser.PERCENTILE_CONT = 504;
PlSqlParser.PERCENTILE_DISC = 505;
PlSqlParser.RANK = 506;
PlSqlParser.AVG = 507;
PlSqlParser.CORR = 508;
PlSqlParser.COVAR_ = 509;
PlSqlParser.DECODE = 510;
PlSqlParser.LAG = 511;
PlSqlParser.LEAD = 512;
PlSqlParser.MAX = 513;
PlSqlParser.MEDIAN = 514;
PlSqlParser.MIN = 515;
PlSqlParser.NTILE = 516;
PlSqlParser.NVL = 517;
PlSqlParser.RATIO_TO_REPORT = 518;
PlSqlParser.REGR_ = 519;
PlSqlParser.ROUND = 520;
PlSqlParser.ROW_NUMBER = 521;
PlSqlParser.SUBSTR = 522;
PlSqlParser.TO_CHAR = 523;
PlSqlParser.TRIM = 524;
PlSqlParser.SUM = 525;
PlSqlParser.STDDEV = 526;
PlSqlParser.VAR_ = 527;
PlSqlParser.VARIANCE = 528;
PlSqlParser.LEAST = 529;
PlSqlParser.GREATEST = 530;
PlSqlParser.TO_DATE = 531;
PlSqlParser.NATIONAL_CHAR_STRING_LIT = 532;
PlSqlParser.BIT_STRING_LIT = 533;
PlSqlParser.HEX_STRING_LIT = 534;
PlSqlParser.DOUBLE_PERIOD = 535;
PlSqlParser.PERIOD = 536;
PlSqlParser.UNSIGNED_INTEGER = 537;
PlSqlParser.APPROXIMATE_NUM_LIT = 538;
PlSqlParser.CHAR_STRING = 539;
PlSqlParser.DELIMITED_ID = 540;
PlSqlParser.PERCENT = 541;
PlSqlParser.AMPERSAND = 542;
PlSqlParser.LEFT_PAREN = 543;
PlSqlParser.RIGHT_PAREN = 544;
PlSqlParser.DOUBLE_ASTERISK = 545;
PlSqlParser.ASTERISK = 546;
PlSqlParser.PLUS_SIGN = 547;
PlSqlParser.MINUS_SIGN = 548;
PlSqlParser.COMMA = 549;
PlSqlParser.SOLIDUS = 550;
PlSqlParser.AT_SIGN = 551;
PlSqlParser.ASSIGN_OP = 552;
PlSqlParser.BINDVAR = 553;
PlSqlParser.NOT_EQUAL_OP = 554;
PlSqlParser.CARRET_OPERATOR_PART = 555;
PlSqlParser.TILDE_OPERATOR_PART = 556;
PlSqlParser.EXCLAMATION_OPERATOR_PART = 557;
PlSqlParser.GREATER_THAN_OP = 558;
PlSqlParser.LESS_THAN_OP = 559;
PlSqlParser.COLON = 560;
PlSqlParser.SEMICOLON = 561;
PlSqlParser.BAR = 562;
PlSqlParser.EQUALS_OP = 563;
PlSqlParser.LEFT_BRACKET = 564;
PlSqlParser.RIGHT_BRACKET = 565;
PlSqlParser.INTRODUCER = 566;
PlSqlParser.SPACES = 567;
PlSqlParser.SINGLE_LINE_COMMENT = 568;
PlSqlParser.MULTI_LINE_COMMENT = 569;
PlSqlParser.PROMPT = 570;
PlSqlParser.START_CMD = 571;
PlSqlParser.REGULAR_ID = 572;
PlSqlParser.ZV = 573;

PlSqlParser.RULE_sql_script = 0;
PlSqlParser.RULE_unit_statement = 1;
PlSqlParser.RULE_drop_function = 2;
PlSqlParser.RULE_alter_function = 3;
PlSqlParser.RULE_create_function_body = 4;
PlSqlParser.RULE_parallel_enable_clause = 5;
PlSqlParser.RULE_partition_by_clause = 6;
PlSqlParser.RULE_result_cache_clause = 7;
PlSqlParser.RULE_relies_on_part = 8;
PlSqlParser.RULE_streaming_clause = 9;
PlSqlParser.RULE_drop_package = 10;
PlSqlParser.RULE_alter_package = 11;
PlSqlParser.RULE_create_package = 12;
PlSqlParser.RULE_create_package_body = 13;
PlSqlParser.RULE_package_obj_spec = 14;
PlSqlParser.RULE_procedure_spec = 15;
PlSqlParser.RULE_function_spec = 16;
PlSqlParser.RULE_package_obj_body = 17;
PlSqlParser.RULE_drop_procedure = 18;
PlSqlParser.RULE_alter_procedure = 19;
PlSqlParser.RULE_function_body = 20;
PlSqlParser.RULE_procedure_body = 21;
PlSqlParser.RULE_create_procedure_body = 22;
PlSqlParser.RULE_drop_trigger = 23;
PlSqlParser.RULE_alter_trigger = 24;
PlSqlParser.RULE_create_trigger = 25;
PlSqlParser.RULE_trigger_follows_clause = 26;
PlSqlParser.RULE_trigger_when_clause = 27;
PlSqlParser.RULE_simple_dml_trigger = 28;
PlSqlParser.RULE_for_each_row = 29;
PlSqlParser.RULE_compound_dml_trigger = 30;
PlSqlParser.RULE_non_dml_trigger = 31;
PlSqlParser.RULE_trigger_body = 32;
PlSqlParser.RULE_routine_clause = 33;
PlSqlParser.RULE_compound_trigger_block = 34;
PlSqlParser.RULE_timing_point_section = 35;
PlSqlParser.RULE_non_dml_event = 36;
PlSqlParser.RULE_dml_event_clause = 37;
PlSqlParser.RULE_dml_event_element = 38;
PlSqlParser.RULE_dml_event_nested_clause = 39;
PlSqlParser.RULE_referencing_clause = 40;
PlSqlParser.RULE_referencing_element = 41;
PlSqlParser.RULE_drop_type = 42;
PlSqlParser.RULE_alter_type = 43;
PlSqlParser.RULE_compile_type_clause = 44;
PlSqlParser.RULE_replace_type_clause = 45;
PlSqlParser.RULE_alter_method_spec = 46;
PlSqlParser.RULE_alter_method_element = 47;
PlSqlParser.RULE_alter_attribute_definition = 48;
PlSqlParser.RULE_attribute_definition = 49;
PlSqlParser.RULE_alter_collection_clauses = 50;
PlSqlParser.RULE_dependent_handling_clause = 51;
PlSqlParser.RULE_dependent_exceptions_part = 52;
PlSqlParser.RULE_create_type = 53;
PlSqlParser.RULE_type_definition = 54;
PlSqlParser.RULE_object_type_def = 55;
PlSqlParser.RULE_object_as_part = 56;
PlSqlParser.RULE_object_under_part = 57;
PlSqlParser.RULE_nested_table_type_def = 58;
PlSqlParser.RULE_sqlj_object_type = 59;
PlSqlParser.RULE_type_body = 60;
PlSqlParser.RULE_type_body_elements = 61;
PlSqlParser.RULE_map_order_func_declaration = 62;
PlSqlParser.RULE_subprog_decl_in_type = 63;
PlSqlParser.RULE_proc_decl_in_type = 64;
PlSqlParser.RULE_func_decl_in_type = 65;
PlSqlParser.RULE_constructor_declaration = 66;
PlSqlParser.RULE_modifier_clause = 67;
PlSqlParser.RULE_object_member_spec = 68;
PlSqlParser.RULE_sqlj_object_type_attr = 69;
PlSqlParser.RULE_element_spec = 70;
PlSqlParser.RULE_element_spec_options = 71;
PlSqlParser.RULE_subprogram_spec = 72;
PlSqlParser.RULE_type_procedure_spec = 73;
PlSqlParser.RULE_type_function_spec = 74;
PlSqlParser.RULE_constructor_spec = 75;
PlSqlParser.RULE_map_order_function_spec = 76;
PlSqlParser.RULE_pragma_clause = 77;
PlSqlParser.RULE_pragma_elements = 78;
PlSqlParser.RULE_type_elements_parameter = 79;
PlSqlParser.RULE_drop_sequence = 80;
PlSqlParser.RULE_alter_sequence = 81;
PlSqlParser.RULE_create_sequence = 82;
PlSqlParser.RULE_sequence_spec = 83;
PlSqlParser.RULE_sequence_start_clause = 84;
PlSqlParser.RULE_create_index = 85;
PlSqlParser.RULE_alter_index = 86;
PlSqlParser.RULE_drop_index = 87;
PlSqlParser.RULE_create_table = 88;
PlSqlParser.RULE_size_clause = 89;
PlSqlParser.RULE_drop_table = 90;
PlSqlParser.RULE_comment_on_column = 91;
PlSqlParser.RULE_create_synonym = 92;
PlSqlParser.RULE_comment_on_table = 93;
PlSqlParser.RULE_alter_table = 94;
PlSqlParser.RULE_add_constraint = 95;
PlSqlParser.RULE_check_constraint = 96;
PlSqlParser.RULE_drop_constraint = 97;
PlSqlParser.RULE_enable_constraint = 98;
PlSqlParser.RULE_disable_constraint = 99;
PlSqlParser.RULE_foreign_key_clause = 100;
PlSqlParser.RULE_references_clause = 101;
PlSqlParser.RULE_on_delete_clause = 102;
PlSqlParser.RULE_unique_key_clause = 103;
PlSqlParser.RULE_primary_key_clause = 104;
PlSqlParser.RULE_anonymous_block = 105;
PlSqlParser.RULE_invoker_rights_clause = 106;
PlSqlParser.RULE_compiler_parameters_clause = 107;
PlSqlParser.RULE_call_spec = 108;
PlSqlParser.RULE_java_spec = 109;
PlSqlParser.RULE_c_spec = 110;
PlSqlParser.RULE_c_agent_in_clause = 111;
PlSqlParser.RULE_c_parameters_clause = 112;
PlSqlParser.RULE_parameter = 113;
PlSqlParser.RULE_default_value_part = 114;
PlSqlParser.RULE_declare_spec = 115;
PlSqlParser.RULE_variable_declaration = 116;
PlSqlParser.RULE_subtype_declaration = 117;
PlSqlParser.RULE_cursor_declaration = 118;
PlSqlParser.RULE_parameter_spec = 119;
PlSqlParser.RULE_exception_declaration = 120;
PlSqlParser.RULE_pragma_declaration = 121;
PlSqlParser.RULE_record_type_def = 122;
PlSqlParser.RULE_field_spec = 123;
PlSqlParser.RULE_ref_cursor_type_def = 124;
PlSqlParser.RULE_type_declaration = 125;
PlSqlParser.RULE_table_type_def = 126;
PlSqlParser.RULE_table_indexed_by_part = 127;
PlSqlParser.RULE_varray_type_def = 128;
PlSqlParser.RULE_seq_of_statements = 129;
PlSqlParser.RULE_label_declaration = 130;
PlSqlParser.RULE_statement = 131;
PlSqlParser.RULE_swallow_to_semi = 132;
PlSqlParser.RULE_assignment_statement = 133;
PlSqlParser.RULE_continue_statement = 134;
PlSqlParser.RULE_exit_statement = 135;
PlSqlParser.RULE_goto_statement = 136;
PlSqlParser.RULE_if_statement = 137;
PlSqlParser.RULE_elsif_part = 138;
PlSqlParser.RULE_else_part = 139;
PlSqlParser.RULE_loop_statement = 140;
PlSqlParser.RULE_cursor_loop_param = 141;
PlSqlParser.RULE_forall_statement = 142;
PlSqlParser.RULE_bounds_clause = 143;
PlSqlParser.RULE_between_bound = 144;
PlSqlParser.RULE_lower_bound = 145;
PlSqlParser.RULE_upper_bound = 146;
PlSqlParser.RULE_null_statement = 147;
PlSqlParser.RULE_raise_statement = 148;
PlSqlParser.RULE_return_statement = 149;
PlSqlParser.RULE_function_call = 150;
PlSqlParser.RULE_pipe_row_statement = 151;
PlSqlParser.RULE_body = 152;
PlSqlParser.RULE_exception_handler = 153;
PlSqlParser.RULE_trigger_block = 154;
PlSqlParser.RULE_block = 155;
PlSqlParser.RULE_sql_statement = 156;
PlSqlParser.RULE_execute_immediate = 157;
PlSqlParser.RULE_dynamic_returning_clause = 158;
PlSqlParser.RULE_data_manipulation_language_statements = 159;
PlSqlParser.RULE_cursor_manipulation_statements = 160;
PlSqlParser.RULE_close_statement = 161;
PlSqlParser.RULE_open_statement = 162;
PlSqlParser.RULE_fetch_statement = 163;
PlSqlParser.RULE_open_for_statement = 164;
PlSqlParser.RULE_transaction_control_statements = 165;
PlSqlParser.RULE_set_transaction_command = 166;
PlSqlParser.RULE_set_constraint_command = 167;
PlSqlParser.RULE_commit_statement = 168;
PlSqlParser.RULE_write_clause = 169;
PlSqlParser.RULE_rollback_statement = 170;
PlSqlParser.RULE_savepoint_statement = 171;
PlSqlParser.RULE_explain_statement = 172;
PlSqlParser.RULE_select_statement = 173;
PlSqlParser.RULE_subquery_factoring_clause = 174;
PlSqlParser.RULE_factoring_element = 175;
PlSqlParser.RULE_search_clause = 176;
PlSqlParser.RULE_cycle_clause = 177;
PlSqlParser.RULE_subquery = 178;
PlSqlParser.RULE_subquery_basic_elements = 179;
PlSqlParser.RULE_subquery_operation_part = 180;
PlSqlParser.RULE_query_block = 181;
PlSqlParser.RULE_selected_element = 182;
PlSqlParser.RULE_from_clause = 183;
PlSqlParser.RULE_select_list_elements = 184;
PlSqlParser.RULE_table_ref_list = 185;
PlSqlParser.RULE_table_ref = 186;
PlSqlParser.RULE_table_ref_aux = 187;
PlSqlParser.RULE_table_ref_aux_internal = 188;
PlSqlParser.RULE_join_clause = 189;
PlSqlParser.RULE_join_on_part = 190;
PlSqlParser.RULE_join_using_part = 191;
PlSqlParser.RULE_outer_join_type = 192;
PlSqlParser.RULE_query_partition_clause = 193;
PlSqlParser.RULE_flashback_query_clause = 194;
PlSqlParser.RULE_pivot_clause = 195;
PlSqlParser.RULE_pivot_element = 196;
PlSqlParser.RULE_pivot_for_clause = 197;
PlSqlParser.RULE_pivot_in_clause = 198;
PlSqlParser.RULE_pivot_in_clause_element = 199;
PlSqlParser.RULE_pivot_in_clause_elements = 200;
PlSqlParser.RULE_unpivot_clause = 201;
PlSqlParser.RULE_unpivot_in_clause = 202;
PlSqlParser.RULE_unpivot_in_elements = 203;
PlSqlParser.RULE_hierarchical_query_clause = 204;
PlSqlParser.RULE_start_part = 205;
PlSqlParser.RULE_group_by_clause = 206;
PlSqlParser.RULE_group_by_elements = 207;
PlSqlParser.RULE_rollup_cube_clause = 208;
PlSqlParser.RULE_grouping_sets_clause = 209;
PlSqlParser.RULE_grouping_sets_elements = 210;
PlSqlParser.RULE_having_clause = 211;
PlSqlParser.RULE_model_clause = 212;
PlSqlParser.RULE_cell_reference_options = 213;
PlSqlParser.RULE_return_rows_clause = 214;
PlSqlParser.RULE_reference_model = 215;
PlSqlParser.RULE_main_model = 216;
PlSqlParser.RULE_model_column_clauses = 217;
PlSqlParser.RULE_model_column_partition_part = 218;
PlSqlParser.RULE_model_column_list = 219;
PlSqlParser.RULE_model_column = 220;
PlSqlParser.RULE_model_rules_clause = 221;
PlSqlParser.RULE_model_rules_part = 222;
PlSqlParser.RULE_model_rules_element = 223;
PlSqlParser.RULE_cell_assignment = 224;
PlSqlParser.RULE_model_iterate_clause = 225;
PlSqlParser.RULE_until_part = 226;
PlSqlParser.RULE_order_by_clause = 227;
PlSqlParser.RULE_order_by_elements = 228;
PlSqlParser.RULE_for_update_clause = 229;
PlSqlParser.RULE_for_update_of_part = 230;
PlSqlParser.RULE_for_update_options = 231;
PlSqlParser.RULE_update_statement = 232;
PlSqlParser.RULE_update_set_clause = 233;
PlSqlParser.RULE_column_based_update_set_clause = 234;
PlSqlParser.RULE_delete_statement = 235;
PlSqlParser.RULE_insert_statement = 236;
PlSqlParser.RULE_single_table_insert = 237;
PlSqlParser.RULE_multi_table_insert = 238;
PlSqlParser.RULE_multi_table_element = 239;
PlSqlParser.RULE_conditional_insert_clause = 240;
PlSqlParser.RULE_conditional_insert_when_part = 241;
PlSqlParser.RULE_conditional_insert_else_part = 242;
PlSqlParser.RULE_insert_into_clause = 243;
PlSqlParser.RULE_values_clause = 244;
PlSqlParser.RULE_merge_statement = 245;
PlSqlParser.RULE_merge_update_clause = 246;
PlSqlParser.RULE_merge_element = 247;
PlSqlParser.RULE_merge_update_delete_part = 248;
PlSqlParser.RULE_merge_insert_clause = 249;
PlSqlParser.RULE_selected_tableview = 250;
PlSqlParser.RULE_lock_table_statement = 251;
PlSqlParser.RULE_wait_nowait_part = 252;
PlSqlParser.RULE_lock_table_element = 253;
PlSqlParser.RULE_lock_mode = 254;
PlSqlParser.RULE_general_table_ref = 255;
PlSqlParser.RULE_static_returning_clause = 256;
PlSqlParser.RULE_error_logging_clause = 257;
PlSqlParser.RULE_error_logging_into_part = 258;
PlSqlParser.RULE_error_logging_reject_part = 259;
PlSqlParser.RULE_dml_table_expression_clause = 260;
PlSqlParser.RULE_table_collection_expression = 261;
PlSqlParser.RULE_subquery_restriction_clause = 262;
PlSqlParser.RULE_sample_clause = 263;
PlSqlParser.RULE_seed_part = 264;
PlSqlParser.RULE_condition = 265;
PlSqlParser.RULE_expressions = 266;
PlSqlParser.RULE_expression = 267;
PlSqlParser.RULE_cursor_expression = 268;
PlSqlParser.RULE_logical_expression = 269;
PlSqlParser.RULE_multiset_expression = 270;
PlSqlParser.RULE_relational_expression = 271;
PlSqlParser.RULE_compound_expression = 272;
PlSqlParser.RULE_relational_operator = 273;
PlSqlParser.RULE_in_elements = 274;
PlSqlParser.RULE_between_elements = 275;
PlSqlParser.RULE_concatenation = 276;
PlSqlParser.RULE_interval_expression = 277;
PlSqlParser.RULE_model_expression = 278;
PlSqlParser.RULE_model_expression_element = 279;
PlSqlParser.RULE_single_column_for_loop = 280;
PlSqlParser.RULE_multi_column_for_loop = 281;
PlSqlParser.RULE_unary_expression = 282;
PlSqlParser.RULE_case_statement = 283;
PlSqlParser.RULE_simple_case_statement = 284;
PlSqlParser.RULE_simple_case_when_part = 285;
PlSqlParser.RULE_searched_case_statement = 286;
PlSqlParser.RULE_searched_case_when_part = 287;
PlSqlParser.RULE_case_else_part = 288;
PlSqlParser.RULE_atom = 289;
PlSqlParser.RULE_quantified_expression = 290;
PlSqlParser.RULE_string_function = 291;
PlSqlParser.RULE_standard_function = 292;
PlSqlParser.RULE_numeric_function_wrapper = 293;
PlSqlParser.RULE_numeric_function = 294;
PlSqlParser.RULE_other_function = 295;
PlSqlParser.RULE_over_clause_keyword = 296;
PlSqlParser.RULE_within_or_over_clause_keyword = 297;
PlSqlParser.RULE_standard_prediction_function_keyword = 298;
PlSqlParser.RULE_over_clause = 299;
PlSqlParser.RULE_windowing_clause = 300;
PlSqlParser.RULE_windowing_type = 301;
PlSqlParser.RULE_windowing_elements = 302;
PlSqlParser.RULE_using_clause = 303;
PlSqlParser.RULE_using_element = 304;
PlSqlParser.RULE_collect_order_by_part = 305;
PlSqlParser.RULE_within_or_over_part = 306;
PlSqlParser.RULE_cost_matrix_clause = 307;
PlSqlParser.RULE_xml_passing_clause = 308;
PlSqlParser.RULE_xml_attributes_clause = 309;
PlSqlParser.RULE_xml_namespaces_clause = 310;
PlSqlParser.RULE_xml_table_column = 311;
PlSqlParser.RULE_xml_general_default_part = 312;
PlSqlParser.RULE_xml_multiuse_expression_element = 313;
PlSqlParser.RULE_xmlroot_param_version_part = 314;
PlSqlParser.RULE_xmlroot_param_standalone_part = 315;
PlSqlParser.RULE_xmlserialize_param_enconding_part = 316;
PlSqlParser.RULE_xmlserialize_param_version_part = 317;
PlSqlParser.RULE_xmlserialize_param_ident_part = 318;
PlSqlParser.RULE_sql_plus_command = 319;
PlSqlParser.RULE_whenever_command = 320;
PlSqlParser.RULE_set_command = 321;
PlSqlParser.RULE_partition_extension_clause = 322;
PlSqlParser.RULE_column_alias = 323;
PlSqlParser.RULE_table_alias = 324;
PlSqlParser.RULE_where_clause = 325;
PlSqlParser.RULE_into_clause = 326;
PlSqlParser.RULE_xml_column_name = 327;
PlSqlParser.RULE_cost_class_name = 328;
PlSqlParser.RULE_attribute_name = 329;
PlSqlParser.RULE_savepoint_name = 330;
PlSqlParser.RULE_rollback_segment_name = 331;
PlSqlParser.RULE_table_var_name = 332;
PlSqlParser.RULE_schema_name = 333;
PlSqlParser.RULE_routine_name = 334;
PlSqlParser.RULE_package_name = 335;
PlSqlParser.RULE_implementation_type_name = 336;
PlSqlParser.RULE_parameter_name = 337;
PlSqlParser.RULE_reference_model_name = 338;
PlSqlParser.RULE_main_model_name = 339;
PlSqlParser.RULE_aggregate_function_name = 340;
PlSqlParser.RULE_query_name = 341;
PlSqlParser.RULE_constraint_name = 342;
PlSqlParser.RULE_label_name = 343;
PlSqlParser.RULE_type_name = 344;
PlSqlParser.RULE_sequence_name = 345;
PlSqlParser.RULE_exception_name = 346;
PlSqlParser.RULE_function_name = 347;
PlSqlParser.RULE_procedure_name = 348;
PlSqlParser.RULE_trigger_name = 349;
PlSqlParser.RULE_variable_name = 350;
PlSqlParser.RULE_index_name = 351;
PlSqlParser.RULE_cursor_name = 352;
PlSqlParser.RULE_record_name = 353;
PlSqlParser.RULE_collection_name = 354;
PlSqlParser.RULE_link_name = 355;
PlSqlParser.RULE_column_name = 356;
PlSqlParser.RULE_tableview_name = 357;
PlSqlParser.RULE_char_set_name = 358;
PlSqlParser.RULE_synonym_name = 359;
PlSqlParser.RULE_schema_object_name = 360;
PlSqlParser.RULE_keep_clause = 361;
PlSqlParser.RULE_function_argument = 362;
PlSqlParser.RULE_function_argument_analytic = 363;
PlSqlParser.RULE_function_argument_modeling = 364;
PlSqlParser.RULE_respect_or_ignore_nulls = 365;
PlSqlParser.RULE_argument = 366;
PlSqlParser.RULE_type_spec = 367;
PlSqlParser.RULE_datatype = 368;
PlSqlParser.RULE_precision_part = 369;
PlSqlParser.RULE_native_datatype_element = 370;
PlSqlParser.RULE_bind_variable = 371;
PlSqlParser.RULE_general_element = 372;
PlSqlParser.RULE_general_element_part = 373;
PlSqlParser.RULE_table_element = 374;
PlSqlParser.RULE_constant = 375;
PlSqlParser.RULE_numeric = 376;
PlSqlParser.RULE_numeric_negative = 377;
PlSqlParser.RULE_quoted_string = 378;
PlSqlParser.RULE_identifier = 379;
PlSqlParser.RULE_id_expression = 380;
PlSqlParser.RULE_outer_join_sign = 381;
PlSqlParser.RULE_regular_id = 382;
PlSqlParser.RULE_string_function_name = 383;
PlSqlParser.RULE_numeric_function_name = 384;

function Sql_scriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sql_script;
    return this;
}

Sql_scriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_scriptContext.prototype.constructor = Sql_scriptContext;

Sql_scriptContext.prototype.EOF = function() {
    return this.getToken(PlSqlParser.EOF, 0);
};

Sql_scriptContext.prototype.unit_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unit_statementContext);
    } else {
        return this.getTypedRuleContext(Unit_statementContext,i);
    }
};

Sql_scriptContext.prototype.sql_plus_command = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_plus_commandContext);
    } else {
        return this.getTypedRuleContext(Sql_plus_commandContext,i);
    }
};

Sql_scriptContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.SEMICOLON);
    } else {
        return this.getToken(PlSqlParser.SEMICOLON, i);
    }
};


Sql_scriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSql_script(this);
	}
};

Sql_scriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSql_script(this);
	}
};




PlSqlParser.Sql_scriptContext = Sql_scriptContext;

PlSqlParser.prototype.sql_script = function() {

    var localctx = new Sql_scriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PlSqlParser.RULE_sql_script);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.ALTER || _la===PlSqlParser.BEGIN || _la===PlSqlParser.COMMENT || _la===PlSqlParser.CREATE || _la===PlSqlParser.DELETE || _la===PlSqlParser.DROP || _la===PlSqlParser.EXIT || _la===PlSqlParser.EXPLAIN || _la===PlSqlParser.INSERT || _la===PlSqlParser.LOCK || _la===PlSqlParser.MERGE || ((((_la - 376)) & ~0x1f) == 0 && ((1 << (_la - 376)) & ((1 << (PlSqlParser.SELECT - 376)) | (1 << (PlSqlParser.SET - 376)) | (1 << (PlSqlParser.SHOW - 376)))) !== 0) || ((((_la - 449)) & ~0x1f) == 0 && ((1 << (_la - 449)) & ((1 << (PlSqlParser.UPDATE - 449)) | (1 << (PlSqlParser.WHENEVER - 449)) | (1 << (PlSqlParser.WITH - 449)))) !== 0) || ((((_la - 543)) & ~0x1f) == 0 && ((1 << (_la - 543)) & ((1 << (PlSqlParser.LEFT_PAREN - 543)) | (1 << (PlSqlParser.SOLIDUS - 543)) | (1 << (PlSqlParser.PROMPT - 543)) | (1 << (PlSqlParser.START_CMD - 543)))) !== 0)) {
            this.state = 772;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ALTER:
            case PlSqlParser.BEGIN:
            case PlSqlParser.COMMENT:
            case PlSqlParser.CREATE:
            case PlSqlParser.DELETE:
            case PlSqlParser.DROP:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.INSERT:
            case PlSqlParser.LOCK:
            case PlSqlParser.MERGE:
            case PlSqlParser.SELECT:
            case PlSqlParser.UPDATE:
            case PlSqlParser.WITH:
            case PlSqlParser.LEFT_PAREN:
                this.state = 770;
                this.unit_statement();
                break;
            case PlSqlParser.EXIT:
            case PlSqlParser.SET:
            case PlSqlParser.SHOW:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.SOLIDUS:
            case PlSqlParser.PROMPT:
            case PlSqlParser.START_CMD:
                this.state = 771;
                this.sql_plus_command();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.SEMICOLON) {
                this.state = 774;
                this.match(PlSqlParser.SEMICOLON);
            }

            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 782;
        this.match(PlSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unit_statement;
    return this;
}

Unit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unit_statementContext.prototype.constructor = Unit_statementContext;

Unit_statementContext.prototype.alter_function = function() {
    return this.getTypedRuleContext(Alter_functionContext,0);
};

Unit_statementContext.prototype.alter_package = function() {
    return this.getTypedRuleContext(Alter_packageContext,0);
};

Unit_statementContext.prototype.alter_procedure = function() {
    return this.getTypedRuleContext(Alter_procedureContext,0);
};

Unit_statementContext.prototype.alter_sequence = function() {
    return this.getTypedRuleContext(Alter_sequenceContext,0);
};

Unit_statementContext.prototype.alter_trigger = function() {
    return this.getTypedRuleContext(Alter_triggerContext,0);
};

Unit_statementContext.prototype.alter_type = function() {
    return this.getTypedRuleContext(Alter_typeContext,0);
};

Unit_statementContext.prototype.alter_table = function() {
    return this.getTypedRuleContext(Alter_tableContext,0);
};

Unit_statementContext.prototype.alter_index = function() {
    return this.getTypedRuleContext(Alter_indexContext,0);
};

Unit_statementContext.prototype.create_function_body = function() {
    return this.getTypedRuleContext(Create_function_bodyContext,0);
};

Unit_statementContext.prototype.create_procedure_body = function() {
    return this.getTypedRuleContext(Create_procedure_bodyContext,0);
};

Unit_statementContext.prototype.create_package = function() {
    return this.getTypedRuleContext(Create_packageContext,0);
};

Unit_statementContext.prototype.create_package_body = function() {
    return this.getTypedRuleContext(Create_package_bodyContext,0);
};

Unit_statementContext.prototype.create_index = function() {
    return this.getTypedRuleContext(Create_indexContext,0);
};

Unit_statementContext.prototype.create_table = function() {
    return this.getTypedRuleContext(Create_tableContext,0);
};

Unit_statementContext.prototype.create_sequence = function() {
    return this.getTypedRuleContext(Create_sequenceContext,0);
};

Unit_statementContext.prototype.create_trigger = function() {
    return this.getTypedRuleContext(Create_triggerContext,0);
};

Unit_statementContext.prototype.create_type = function() {
    return this.getTypedRuleContext(Create_typeContext,0);
};

Unit_statementContext.prototype.create_synonym = function() {
    return this.getTypedRuleContext(Create_synonymContext,0);
};

Unit_statementContext.prototype.drop_function = function() {
    return this.getTypedRuleContext(Drop_functionContext,0);
};

Unit_statementContext.prototype.drop_package = function() {
    return this.getTypedRuleContext(Drop_packageContext,0);
};

Unit_statementContext.prototype.drop_procedure = function() {
    return this.getTypedRuleContext(Drop_procedureContext,0);
};

Unit_statementContext.prototype.drop_sequence = function() {
    return this.getTypedRuleContext(Drop_sequenceContext,0);
};

Unit_statementContext.prototype.drop_trigger = function() {
    return this.getTypedRuleContext(Drop_triggerContext,0);
};

Unit_statementContext.prototype.drop_type = function() {
    return this.getTypedRuleContext(Drop_typeContext,0);
};

Unit_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Unit_statementContext.prototype.drop_table = function() {
    return this.getTypedRuleContext(Drop_tableContext,0);
};

Unit_statementContext.prototype.drop_index = function() {
    return this.getTypedRuleContext(Drop_indexContext,0);
};

Unit_statementContext.prototype.comment_on_column = function() {
    return this.getTypedRuleContext(Comment_on_columnContext,0);
};

Unit_statementContext.prototype.comment_on_table = function() {
    return this.getTypedRuleContext(Comment_on_tableContext,0);
};

Unit_statementContext.prototype.anonymous_block = function() {
    return this.getTypedRuleContext(Anonymous_blockContext,0);
};

Unit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnit_statement(this);
	}
};

Unit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnit_statement(this);
	}
};




PlSqlParser.Unit_statementContext = Unit_statementContext;

PlSqlParser.prototype.unit_statement = function() {

    var localctx = new Unit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PlSqlParser.RULE_unit_statement);
    try {
        this.state = 814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 784;
            this.alter_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 785;
            this.alter_package();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 786;
            this.alter_procedure();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 787;
            this.alter_sequence();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 788;
            this.alter_trigger();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 789;
            this.alter_type();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 790;
            this.alter_table();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 791;
            this.alter_index();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 792;
            this.create_function_body();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 793;
            this.create_procedure_body();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 794;
            this.create_package();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 795;
            this.create_package_body();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 796;
            this.create_index();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 797;
            this.create_table();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 798;
            this.create_sequence();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 799;
            this.create_trigger();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 800;
            this.create_type();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 801;
            this.create_synonym();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 802;
            this.drop_function();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 803;
            this.drop_package();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 804;
            this.drop_procedure();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 805;
            this.drop_sequence();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 806;
            this.drop_trigger();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 807;
            this.drop_type();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 808;
            this.data_manipulation_language_statements();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 809;
            this.drop_table();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 810;
            this.drop_index();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 811;
            this.comment_on_column();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 812;
            this.comment_on_table();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 813;
            this.anonymous_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_function;
    return this;
}

Drop_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_functionContext.prototype.constructor = Drop_functionContext;

Drop_functionContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_functionContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Drop_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Drop_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_function(this);
	}
};

Drop_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_function(this);
	}
};




PlSqlParser.Drop_functionContext = Drop_functionContext;

PlSqlParser.prototype.drop_function = function() {

    var localctx = new Drop_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PlSqlParser.RULE_drop_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.match(PlSqlParser.DROP);
        this.state = 817;
        this.match(PlSqlParser.FUNCTION);
        this.state = 818;
        this.function_name();
        this.state = 819;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_function;
    return this;
}

Alter_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_functionContext.prototype.constructor = Alter_functionContext;

Alter_functionContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_functionContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Alter_functionContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Alter_functionContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Alter_functionContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Alter_functionContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_functionContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Alter_functionContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Alter_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_function(this);
	}
};

Alter_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_function(this);
	}
};




PlSqlParser.Alter_functionContext = Alter_functionContext;

PlSqlParser.prototype.alter_function = function() {

    var localctx = new Alter_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PlSqlParser.RULE_alter_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(PlSqlParser.ALTER);
        this.state = 822;
        this.match(PlSqlParser.FUNCTION);
        this.state = 823;
        this.function_name();
        this.state = 824;
        this.match(PlSqlParser.COMPILE);
        this.state = 826;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        if(la_===1) {
            this.state = 825;
            this.match(PlSqlParser.DEBUG);

        }
        this.state = 831;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 828;
                this.compiler_parameters_clause(); 
            }
            this.state = 833;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

        this.state = 836;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.REUSE) {
            this.state = 834;
            this.match(PlSqlParser.REUSE);
            this.state = 835;
            this.match(PlSqlParser.SETTINGS);
        }

        this.state = 838;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_function_body;
    return this;
}

Create_function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_function_bodyContext.prototype.constructor = Create_function_bodyContext;

Create_function_bodyContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_function_bodyContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Create_function_bodyContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Create_function_bodyContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Create_function_bodyContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Create_function_bodyContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Create_function_bodyContext.prototype.implementation_type_name = function() {
    return this.getTypedRuleContext(Implementation_type_nameContext,0);
};

Create_function_bodyContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_function_bodyContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_function_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_function_bodyContext.prototype.invoker_rights_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Invoker_rights_clauseContext);
    } else {
        return this.getTypedRuleContext(Invoker_rights_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.parallel_enable_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parallel_enable_clauseContext);
    } else {
        return this.getTypedRuleContext(Parallel_enable_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.result_cache_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_cache_clauseContext);
    } else {
        return this.getTypedRuleContext(Result_cache_clauseContext,i);
    }
};

Create_function_bodyContext.prototype.DETERMINISTIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.DETERMINISTIC);
    } else {
        return this.getToken(PlSqlParser.DETERMINISTIC, i);
    }
};


Create_function_bodyContext.prototype.PIPELINED = function() {
    return this.getToken(PlSqlParser.PIPELINED, 0);
};

Create_function_bodyContext.prototype.AGGREGATE = function() {
    return this.getToken(PlSqlParser.AGGREGATE, 0);
};

Create_function_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Create_function_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Create_function_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_function_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_function_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Create_function_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_function_body(this);
	}
};

Create_function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_function_body(this);
	}
};




PlSqlParser.Create_function_bodyContext = Create_function_bodyContext;

PlSqlParser.prototype.create_function_body = function() {

    var localctx = new Create_function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PlSqlParser.RULE_create_function_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.match(PlSqlParser.CREATE);
        this.state = 843;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 841;
            this.match(PlSqlParser.OR);
            this.state = 842;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 845;
        this.match(PlSqlParser.FUNCTION);
        this.state = 846;
        this.function_name();
        this.state = 858;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 847;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 848;
            this.parameter();
            this.state = 853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 849;
                this.match(PlSqlParser.COMMA);
                this.state = 850;
                this.parameter();
                this.state = 855;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 856;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 860;
        this.match(PlSqlParser.RETURN);
        this.state = 861;
        this.type_spec();
        this.state = 868;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.AUTHID || _la===PlSqlParser.DETERMINISTIC || _la===PlSqlParser.PARALLEL_ENABLE || _la===PlSqlParser.RESULT_CACHE) {
            this.state = 866;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.AUTHID:
                this.state = 862;
                this.invoker_rights_clause();
                break;
            case PlSqlParser.PARALLEL_ENABLE:
                this.state = 863;
                this.parallel_enable_clause();
                break;
            case PlSqlParser.RESULT_CACHE:
                this.state = 864;
                this.result_cache_clause();
                break;
            case PlSqlParser.DETERMINISTIC:
                this.state = 865;
                this.match(PlSqlParser.DETERMINISTIC);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 891;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PIPELINED) {
                this.state = 871;
                this.match(PlSqlParser.PIPELINED);
            }

            this.state = 874;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 886;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            switch(la_) {
            case 1:
                this.state = 876;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.DECLARE) {
                    this.state = 875;
                    this.match(PlSqlParser.DECLARE);
                }

                this.state = 881;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                    this.state = 878;
                    this.declare_spec();
                    this.state = 883;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 884;
                this.body();
                break;

            case 2:
                this.state = 885;
                this.call_spec();
                break;

            }
            break;

        case 2:
            this.state = 888;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AGGREGATE || _la===PlSqlParser.PIPELINED)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 889;
            this.match(PlSqlParser.USING);
            this.state = 890;
            this.implementation_type_name();
            break;

        }
        this.state = 893;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parallel_enable_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_parallel_enable_clause;
    return this;
}

Parallel_enable_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parallel_enable_clauseContext.prototype.constructor = Parallel_enable_clauseContext;

Parallel_enable_clauseContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(PlSqlParser.PARALLEL_ENABLE, 0);
};

Parallel_enable_clauseContext.prototype.partition_by_clause = function() {
    return this.getTypedRuleContext(Partition_by_clauseContext,0);
};

Parallel_enable_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterParallel_enable_clause(this);
	}
};

Parallel_enable_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitParallel_enable_clause(this);
	}
};




PlSqlParser.Parallel_enable_clauseContext = Parallel_enable_clauseContext;

PlSqlParser.prototype.parallel_enable_clause = function() {

    var localctx = new Parallel_enable_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PlSqlParser.RULE_parallel_enable_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        this.match(PlSqlParser.PARALLEL_ENABLE);
        this.state = 897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 896;
            this.partition_by_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_partition_by_clause;
    return this;
}

Partition_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_by_clauseContext.prototype.constructor = Partition_by_clauseContext;

Partition_by_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PlSqlParser.PARTITION, 0);
};

Partition_by_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Partition_by_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Partition_by_clauseContext.prototype.ANY = function() {
    return this.getToken(PlSqlParser.ANY, 0);
};

Partition_by_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Partition_by_clauseContext.prototype.HASH = function() {
    return this.getToken(PlSqlParser.HASH, 0);
};

Partition_by_clauseContext.prototype.RANGE = function() {
    return this.getToken(PlSqlParser.RANGE, 0);
};

Partition_by_clauseContext.prototype.LIST = function() {
    return this.getToken(PlSqlParser.LIST, 0);
};

Partition_by_clauseContext.prototype.streaming_clause = function() {
    return this.getTypedRuleContext(Streaming_clauseContext,0);
};

Partition_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPartition_by_clause(this);
	}
};

Partition_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPartition_by_clause(this);
	}
};




PlSqlParser.Partition_by_clauseContext = Partition_by_clauseContext;

PlSqlParser.prototype.partition_by_clause = function() {

    var localctx = new Partition_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PlSqlParser.RULE_partition_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 900;
        this.match(PlSqlParser.PARTITION);
        this.state = 901;
        this.expression();
        this.state = 902;
        this.match(PlSqlParser.BY);
        this.state = 916;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ANY:
            this.state = 903;
            this.match(PlSqlParser.ANY);
            break;
        case PlSqlParser.HASH:
        case PlSqlParser.LIST:
        case PlSqlParser.RANGE:
            this.state = 904;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.HASH || _la===PlSqlParser.LIST || _la===PlSqlParser.RANGE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 905;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 906;
            this.column_name();
            this.state = 911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 907;
                this.match(PlSqlParser.COMMA);
                this.state = 908;
                this.column_name();
                this.state = 913;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 914;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.CLUSTER || _la===PlSqlParser.ORDER) {
            this.state = 918;
            this.streaming_clause();
        }

        this.state = 921;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Result_cache_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_result_cache_clause;
    return this;
}

Result_cache_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Result_cache_clauseContext.prototype.constructor = Result_cache_clauseContext;

Result_cache_clauseContext.prototype.RESULT_CACHE = function() {
    return this.getToken(PlSqlParser.RESULT_CACHE, 0);
};

Result_cache_clauseContext.prototype.relies_on_part = function() {
    return this.getTypedRuleContext(Relies_on_partContext,0);
};

Result_cache_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterResult_cache_clause(this);
	}
};

Result_cache_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitResult_cache_clause(this);
	}
};




PlSqlParser.Result_cache_clauseContext = Result_cache_clauseContext;

PlSqlParser.prototype.result_cache_clause = function() {

    var localctx = new Result_cache_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PlSqlParser.RULE_result_cache_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.match(PlSqlParser.RESULT_CACHE);
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RELIES_ON) {
            this.state = 924;
            this.relies_on_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relies_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_relies_on_part;
    return this;
}

Relies_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relies_on_partContext.prototype.constructor = Relies_on_partContext;

Relies_on_partContext.prototype.RELIES_ON = function() {
    return this.getToken(PlSqlParser.RELIES_ON, 0);
};

Relies_on_partContext.prototype.tableview_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tableview_nameContext);
    } else {
        return this.getTypedRuleContext(Tableview_nameContext,i);
    }
};

Relies_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRelies_on_part(this);
	}
};

Relies_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRelies_on_part(this);
	}
};




PlSqlParser.Relies_on_partContext = Relies_on_partContext;

PlSqlParser.prototype.relies_on_part = function() {

    var localctx = new Relies_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PlSqlParser.RULE_relies_on_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 927;
        this.match(PlSqlParser.RELIES_ON);
        this.state = 928;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 929;
        this.tableview_name();
        this.state = 934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 930;
            this.match(PlSqlParser.COMMA);
            this.state = 931;
            this.tableview_name();
            this.state = 936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 937;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Streaming_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_streaming_clause;
    return this;
}

Streaming_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Streaming_clauseContext.prototype.constructor = Streaming_clauseContext;

Streaming_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Streaming_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Streaming_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Streaming_clauseContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Streaming_clauseContext.prototype.CLUSTER = function() {
    return this.getToken(PlSqlParser.CLUSTER, 0);
};

Streaming_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStreaming_clause(this);
	}
};

Streaming_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStreaming_clause(this);
	}
};




PlSqlParser.Streaming_clauseContext = Streaming_clauseContext;

PlSqlParser.prototype.streaming_clause = function() {

    var localctx = new Streaming_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PlSqlParser.RULE_streaming_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CLUSTER || _la===PlSqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 940;
        this.expression();
        this.state = 941;
        this.match(PlSqlParser.BY);
        this.state = 942;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 943;
        this.column_name();
        this.state = 948;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 944;
            this.match(PlSqlParser.COMMA);
            this.state = 945;
            this.column_name();
            this.state = 950;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 951;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_package;
    return this;
}

Drop_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_packageContext.prototype.constructor = Drop_packageContext;

Drop_packageContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_packageContext.prototype.PACKAGE = function() {
    return this.getToken(PlSqlParser.PACKAGE, 0);
};

Drop_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Drop_packageContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Drop_packageContext.prototype.schema_object_name = function() {
    return this.getTypedRuleContext(Schema_object_nameContext,0);
};

Drop_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_package(this);
	}
};

Drop_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_package(this);
	}
};




PlSqlParser.Drop_packageContext = Drop_packageContext;

PlSqlParser.prototype.drop_package = function() {

    var localctx = new Drop_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PlSqlParser.RULE_drop_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        this.match(PlSqlParser.DROP);
        this.state = 954;
        this.match(PlSqlParser.PACKAGE);
        this.state = 956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 955;
            this.match(PlSqlParser.BODY);

        }
        this.state = 961;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 958;
            this.schema_object_name();
            this.state = 959;
            this.match(PlSqlParser.PERIOD);

        }
        this.state = 963;
        this.package_name();
        this.state = 964;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_package;
    return this;
}

Alter_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_packageContext.prototype.constructor = Alter_packageContext;

Alter_packageContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_packageContext.prototype.PACKAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PACKAGE);
    } else {
        return this.getToken(PlSqlParser.PACKAGE, i);
    }
};


Alter_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Alter_packageContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Alter_packageContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Alter_packageContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_packageContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Alter_packageContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Alter_packageContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Alter_packageContext.prototype.SPECIFICATION = function() {
    return this.getToken(PlSqlParser.SPECIFICATION, 0);
};

Alter_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_package(this);
	}
};

Alter_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_package(this);
	}
};




PlSqlParser.Alter_packageContext = Alter_packageContext;

PlSqlParser.prototype.alter_package = function() {

    var localctx = new Alter_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PlSqlParser.RULE_alter_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        this.match(PlSqlParser.ALTER);
        this.state = 967;
        this.match(PlSqlParser.PACKAGE);
        this.state = 968;
        this.package_name();
        this.state = 969;
        this.match(PlSqlParser.COMPILE);
        this.state = 971;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 970;
            this.match(PlSqlParser.DEBUG);

        }
        this.state = 974;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 973;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.BODY || _la===PlSqlParser.PACKAGE || _la===PlSqlParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 979;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 976;
                this.compiler_parameters_clause(); 
            }
            this.state = 981;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 984;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.REUSE) {
            this.state = 982;
            this.match(PlSqlParser.REUSE);
            this.state = 983;
            this.match(PlSqlParser.SETTINGS);
        }

        this.state = 986;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_package;
    return this;
}

Create_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_packageContext.prototype.constructor = Create_packageContext;

Create_packageContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_packageContext.prototype.PACKAGE = function() {
    return this.getToken(PlSqlParser.PACKAGE, 0);
};

Create_packageContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Create_packageContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Create_packageContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Create_packageContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Create_packageContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_packageContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_packageContext.prototype.schema_object_name = function() {
    return this.getTypedRuleContext(Schema_object_nameContext,0);
};

Create_packageContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Create_packageContext.prototype.package_obj_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_specContext);
    } else {
        return this.getTypedRuleContext(Package_obj_specContext,i);
    }
};

Create_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_package(this);
	}
};

Create_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_package(this);
	}
};




PlSqlParser.Create_packageContext = Create_packageContext;

PlSqlParser.prototype.create_package = function() {

    var localctx = new Create_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PlSqlParser.RULE_create_package);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        this.match(PlSqlParser.CREATE);
        this.state = 991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 989;
            this.match(PlSqlParser.OR);
            this.state = 990;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 993;
        this.match(PlSqlParser.PACKAGE);
        this.state = 997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 994;
            this.schema_object_name();
            this.state = 995;
            this.match(PlSqlParser.PERIOD);

        }
        this.state = 999;
        this.package_name();
        this.state = 1001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AUTHID) {
            this.state = 1000;
            this.invoker_rights_clause();
        }

        this.state = 1003;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 1004;
            this.package_obj_spec();
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1010;
        this.match(PlSqlParser.END);
        this.state = 1012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 1011;
            this.package_name();
        }

        this.state = 1014;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_package_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_package_body;
    return this;
}

Create_package_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_package_bodyContext.prototype.constructor = Create_package_bodyContext;

Create_package_bodyContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_package_bodyContext.prototype.PACKAGE = function() {
    return this.getToken(PlSqlParser.PACKAGE, 0);
};

Create_package_bodyContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Create_package_bodyContext.prototype.package_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_nameContext);
    } else {
        return this.getTypedRuleContext(Package_nameContext,i);
    }
};

Create_package_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Create_package_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Create_package_bodyContext.prototype.BEGIN = function() {
    return this.getToken(PlSqlParser.BEGIN, 0);
};

Create_package_bodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Create_package_bodyContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Create_package_bodyContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_package_bodyContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_package_bodyContext.prototype.schema_object_name = function() {
    return this.getTypedRuleContext(Schema_object_nameContext,0);
};

Create_package_bodyContext.prototype.package_obj_body = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_obj_bodyContext);
    } else {
        return this.getTypedRuleContext(Package_obj_bodyContext,i);
    }
};

Create_package_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_package_body(this);
	}
};

Create_package_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_package_body(this);
	}
};




PlSqlParser.Create_package_bodyContext = Create_package_bodyContext;

PlSqlParser.prototype.create_package_body = function() {

    var localctx = new Create_package_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PlSqlParser.RULE_create_package_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        this.match(PlSqlParser.CREATE);
        this.state = 1019;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 1017;
            this.match(PlSqlParser.OR);
            this.state = 1018;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 1021;
        this.match(PlSqlParser.PACKAGE);
        this.state = 1022;
        this.match(PlSqlParser.BODY);
        this.state = 1026;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 1023;
            this.schema_object_name();
            this.state = 1024;
            this.match(PlSqlParser.PERIOD);

        }
        this.state = 1028;
        this.package_name();
        this.state = 1029;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1033;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 1030;
            this.package_obj_body();
            this.state = 1035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1042;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BEGIN:
            this.state = 1036;
            this.match(PlSqlParser.BEGIN);
            this.state = 1037;
            this.seq_of_statements();
            break;
        case PlSqlParser.END:
            this.state = 1038;
            this.match(PlSqlParser.END);
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1039;
                this.package_name();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1044;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_package_obj_spec;
    return this;
}

Package_obj_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_specContext.prototype.constructor = Package_obj_specContext;

Package_obj_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_specContext.prototype.pragma_declaration = function() {
    return this.getTypedRuleContext(Pragma_declarationContext,0);
};

Package_obj_specContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Package_obj_specContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Package_obj_specContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Package_obj_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPackage_obj_spec(this);
	}
};

Package_obj_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPackage_obj_spec(this);
	}
};




PlSqlParser.Package_obj_specContext = Package_obj_specContext;

PlSqlParser.prototype.package_obj_spec = function() {

    var localctx = new Package_obj_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PlSqlParser.RULE_package_obj_spec);
    try {
        this.state = 1054;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1046;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1047;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1048;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1049;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1050;
            this.pragma_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1051;
            this.type_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1052;
            this.procedure_spec();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1053;
            this.function_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_procedure_spec;
    return this;
}

Procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specContext.prototype.constructor = Procedure_specContext;

Procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Procedure_specContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Procedure_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterProcedure_spec(this);
	}
};

Procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitProcedure_spec(this);
	}
};




PlSqlParser.Procedure_specContext = Procedure_specContext;

PlSqlParser.prototype.procedure_spec = function() {

    var localctx = new Procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PlSqlParser.RULE_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1056;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1057;
        this.identifier();
        this.state = 1069;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1058;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1059;
            this.parameter();
            this.state = 1064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1060;
                this.match(PlSqlParser.COMMA);
                this.state = 1061;
                this.parameter();
                this.state = 1066;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1067;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1071;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_spec;
    return this;
}

Function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_specContext.prototype.constructor = Function_specContext;

Function_specContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Function_specContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_specContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Function_specContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Function_specContext.prototype.DETERMINISTIC = function() {
    return this.getToken(PlSqlParser.DETERMINISTIC, 0);
};

Function_specContext.prototype.RESULT_CACHE = function() {
    return this.getToken(PlSqlParser.RESULT_CACHE, 0);
};

Function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_spec(this);
	}
};

Function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_spec(this);
	}
};




PlSqlParser.Function_specContext = Function_specContext;

PlSqlParser.prototype.function_spec = function() {

    var localctx = new Function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PlSqlParser.RULE_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1074;
        this.identifier();
        this.state = 1086;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1075;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1076;
            this.parameter();
            this.state = 1081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1077;
                this.match(PlSqlParser.COMMA);
                this.state = 1078;
                this.parameter();
                this.state = 1083;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1084;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1088;
        this.match(PlSqlParser.RETURN);
        this.state = 1089;
        this.type_spec();
        this.state = 1091;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DETERMINISTIC) {
            this.state = 1090;
            this.match(PlSqlParser.DETERMINISTIC);
        }

        this.state = 1094;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RESULT_CACHE) {
            this.state = 1093;
            this.match(PlSqlParser.RESULT_CACHE);
        }

        this.state = 1096;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_obj_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_package_obj_body;
    return this;
}

Package_obj_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_obj_bodyContext.prototype.constructor = Package_obj_bodyContext;

Package_obj_bodyContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_obj_bodyContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_obj_bodyContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Package_obj_bodyContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Package_obj_bodyContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Package_obj_bodyContext.prototype.procedure_body = function() {
    return this.getTypedRuleContext(Procedure_bodyContext,0);
};

Package_obj_bodyContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Package_obj_bodyContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Package_obj_bodyContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Package_obj_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPackage_obj_body(this);
	}
};

Package_obj_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPackage_obj_body(this);
	}
};




PlSqlParser.Package_obj_bodyContext = Package_obj_bodyContext;

PlSqlParser.prototype.package_obj_body = function() {

    var localctx = new Package_obj_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PlSqlParser.RULE_package_obj_body);
    try {
        this.state = 1107;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1098;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1099;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1100;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1101;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1102;
            this.type_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1103;
            this.procedure_body();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1104;
            this.function_body();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1105;
            this.procedure_spec();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1106;
            this.function_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_procedure;
    return this;
}

Drop_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_procedureContext.prototype.constructor = Drop_procedureContext;

Drop_procedureContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Drop_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Drop_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_procedure(this);
	}
};

Drop_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_procedure(this);
	}
};




PlSqlParser.Drop_procedureContext = Drop_procedureContext;

PlSqlParser.prototype.drop_procedure = function() {

    var localctx = new Drop_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PlSqlParser.RULE_drop_procedure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        this.match(PlSqlParser.DROP);
        this.state = 1110;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1111;
        this.procedure_name();
        this.state = 1112;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_procedure;
    return this;
}

Alter_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_procedureContext.prototype.constructor = Alter_procedureContext;

Alter_procedureContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Alter_procedureContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Alter_procedureContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Alter_procedureContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Alter_procedureContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_procedureContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Alter_procedureContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Alter_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_procedure(this);
	}
};

Alter_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_procedure(this);
	}
};




PlSqlParser.Alter_procedureContext = Alter_procedureContext;

PlSqlParser.prototype.alter_procedure = function() {

    var localctx = new Alter_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PlSqlParser.RULE_alter_procedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1114;
        this.match(PlSqlParser.ALTER);
        this.state = 1115;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1116;
        this.procedure_name();
        this.state = 1117;
        this.match(PlSqlParser.COMPILE);
        this.state = 1119;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 1118;
            this.match(PlSqlParser.DEBUG);

        }
        this.state = 1124;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1121;
                this.compiler_parameters_clause(); 
            }
            this.state = 1126;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

        this.state = 1129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.REUSE) {
            this.state = 1127;
            this.match(PlSqlParser.REUSE);
            this.state = 1128;
            this.match(PlSqlParser.SETTINGS);
        }

        this.state = 1131;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_body;
    return this;
}

Function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_bodyContext.prototype.constructor = Function_bodyContext;

Function_bodyContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Function_bodyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_bodyContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Function_bodyContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Function_bodyContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Function_bodyContext.prototype.implementation_type_name = function() {
    return this.getTypedRuleContext(Implementation_type_nameContext,0);
};

Function_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Function_bodyContext.prototype.invoker_rights_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Invoker_rights_clauseContext);
    } else {
        return this.getTypedRuleContext(Invoker_rights_clauseContext,i);
    }
};

Function_bodyContext.prototype.parallel_enable_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parallel_enable_clauseContext);
    } else {
        return this.getTypedRuleContext(Parallel_enable_clauseContext,i);
    }
};

Function_bodyContext.prototype.result_cache_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_cache_clauseContext);
    } else {
        return this.getTypedRuleContext(Result_cache_clauseContext,i);
    }
};

Function_bodyContext.prototype.DETERMINISTIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.DETERMINISTIC);
    } else {
        return this.getToken(PlSqlParser.DETERMINISTIC, i);
    }
};


Function_bodyContext.prototype.PIPELINED = function() {
    return this.getToken(PlSqlParser.PIPELINED, 0);
};

Function_bodyContext.prototype.AGGREGATE = function() {
    return this.getToken(PlSqlParser.AGGREGATE, 0);
};

Function_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Function_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Function_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Function_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Function_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Function_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_body(this);
	}
};

Function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_body(this);
	}
};




PlSqlParser.Function_bodyContext = Function_bodyContext;

PlSqlParser.prototype.function_body = function() {

    var localctx = new Function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PlSqlParser.RULE_function_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1133;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1134;
        this.identifier();
        this.state = 1146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1135;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1136;
            this.parameter();
            this.state = 1141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1137;
                this.match(PlSqlParser.COMMA);
                this.state = 1138;
                this.parameter();
                this.state = 1143;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1144;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1148;
        this.match(PlSqlParser.RETURN);
        this.state = 1149;
        this.type_spec();
        this.state = 1156;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.AUTHID || _la===PlSqlParser.DETERMINISTIC || _la===PlSqlParser.PARALLEL_ENABLE || _la===PlSqlParser.RESULT_CACHE) {
            this.state = 1154;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.AUTHID:
                this.state = 1150;
                this.invoker_rights_clause();
                break;
            case PlSqlParser.PARALLEL_ENABLE:
                this.state = 1151;
                this.parallel_enable_clause();
                break;
            case PlSqlParser.RESULT_CACHE:
                this.state = 1152;
                this.result_cache_clause();
                break;
            case PlSqlParser.DETERMINISTIC:
                this.state = 1153;
                this.match(PlSqlParser.DETERMINISTIC);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PIPELINED) {
                this.state = 1159;
                this.match(PlSqlParser.PIPELINED);
            }

            this.state = 1162;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1174;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1164;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.DECLARE) {
                    this.state = 1163;
                    this.match(PlSqlParser.DECLARE);
                }

                this.state = 1169;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                    this.state = 1166;
                    this.declare_spec();
                    this.state = 1171;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1172;
                this.body();
                break;

            case 2:
                this.state = 1173;
                this.call_spec();
                break;

            }
            break;

        case 2:
            this.state = 1176;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AGGREGATE || _la===PlSqlParser.PIPELINED)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1177;
            this.match(PlSqlParser.USING);
            this.state = 1178;
            this.implementation_type_name();
            break;

        }
        this.state = 1181;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_procedure_body;
    return this;
}

Procedure_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_bodyContext.prototype.constructor = Procedure_bodyContext;

Procedure_bodyContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Procedure_bodyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Procedure_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Procedure_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Procedure_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Procedure_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Procedure_bodyContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Procedure_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Procedure_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Procedure_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Procedure_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterProcedure_body(this);
	}
};

Procedure_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitProcedure_body(this);
	}
};




PlSqlParser.Procedure_bodyContext = Procedure_bodyContext;

PlSqlParser.prototype.procedure_body = function() {

    var localctx = new Procedure_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PlSqlParser.RULE_procedure_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1183;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1184;
        this.identifier();
        this.state = 1196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1185;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1186;
            this.parameter();
            this.state = 1191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1187;
                this.match(PlSqlParser.COMMA);
                this.state = 1188;
                this.parameter();
                this.state = 1193;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1194;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1198;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1211;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 1199;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 1205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1202;
                this.declare_spec();
                this.state = 1207;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1208;
            this.body();
            break;

        case 2:
            this.state = 1209;
            this.call_spec();
            break;

        case 3:
            this.state = 1210;
            this.match(PlSqlParser.EXTERNAL);
            break;

        }
        this.state = 1213;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_procedure_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_procedure_body;
    return this;
}

Create_procedure_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_procedure_bodyContext.prototype.constructor = Create_procedure_bodyContext;

Create_procedure_bodyContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_procedure_bodyContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Create_procedure_bodyContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Create_procedure_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Create_procedure_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Create_procedure_bodyContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Create_procedure_bodyContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Create_procedure_bodyContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Create_procedure_bodyContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_procedure_bodyContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_procedure_bodyContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Create_procedure_bodyContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Create_procedure_bodyContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Create_procedure_bodyContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Create_procedure_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_procedure_body(this);
	}
};

Create_procedure_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_procedure_body(this);
	}
};




PlSqlParser.Create_procedure_bodyContext = Create_procedure_bodyContext;

PlSqlParser.prototype.create_procedure_body = function() {

    var localctx = new Create_procedure_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PlSqlParser.RULE_create_procedure_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.match(PlSqlParser.CREATE);
        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 1216;
            this.match(PlSqlParser.OR);
            this.state = 1217;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 1220;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1221;
        this.procedure_name();
        this.state = 1233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1222;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1223;
            this.parameter();
            this.state = 1228;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1224;
                this.match(PlSqlParser.COMMA);
                this.state = 1225;
                this.parameter();
                this.state = 1230;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1231;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AUTHID) {
            this.state = 1235;
            this.invoker_rights_clause();
        }

        this.state = 1238;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1240;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 1239;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 1245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1242;
                this.declare_spec();
                this.state = 1247;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1248;
            this.body();
            break;

        case 2:
            this.state = 1249;
            this.call_spec();
            break;

        case 3:
            this.state = 1250;
            this.match(PlSqlParser.EXTERNAL);
            break;

        }
        this.state = 1253;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_trigger;
    return this;
}

Drop_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_triggerContext.prototype.constructor = Drop_triggerContext;

Drop_triggerContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Drop_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Drop_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_trigger(this);
	}
};

Drop_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_trigger(this);
	}
};




PlSqlParser.Drop_triggerContext = Drop_triggerContext;

PlSqlParser.prototype.drop_trigger = function() {

    var localctx = new Drop_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PlSqlParser.RULE_drop_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1255;
        this.match(PlSqlParser.DROP);
        this.state = 1256;
        this.match(PlSqlParser.TRIGGER);
        this.state = 1257;
        this.trigger_name();
        this.state = 1258;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_trigger;
    this.alter_trigger_name = null; // Trigger_nameContext
    this.rename_trigger_name = null; // Trigger_nameContext
    return this;
}

Alter_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_triggerContext.prototype.constructor = Alter_triggerContext;

Alter_triggerContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Alter_triggerContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Alter_triggerContext.prototype.RENAME = function() {
    return this.getToken(PlSqlParser.RENAME, 0);
};

Alter_triggerContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Alter_triggerContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Alter_triggerContext.prototype.ENABLE = function() {
    return this.getToken(PlSqlParser.ENABLE, 0);
};

Alter_triggerContext.prototype.DISABLE = function() {
    return this.getToken(PlSqlParser.DISABLE, 0);
};

Alter_triggerContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Alter_triggerContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Alter_triggerContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Alter_triggerContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Alter_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_trigger(this);
	}
};

Alter_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_trigger(this);
	}
};




PlSqlParser.Alter_triggerContext = Alter_triggerContext;

PlSqlParser.prototype.alter_trigger = function() {

    var localctx = new Alter_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PlSqlParser.RULE_alter_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1260;
        this.match(PlSqlParser.ALTER);
        this.state = 1261;
        this.match(PlSqlParser.TRIGGER);
        this.state = 1262;
        localctx.alter_trigger_name = this.trigger_name();
        this.state = 1281;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.DISABLE:
        case PlSqlParser.ENABLE:
            this.state = 1263;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DISABLE || _la===PlSqlParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case PlSqlParser.RENAME:
            this.state = 1264;
            this.match(PlSqlParser.RENAME);
            this.state = 1265;
            this.match(PlSqlParser.TO);
            this.state = 1266;
            localctx.rename_trigger_name = this.trigger_name();
            break;
        case PlSqlParser.COMPILE:
            this.state = 1267;
            this.match(PlSqlParser.COMPILE);
            this.state = 1269;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
            if(la_===1) {
                this.state = 1268;
                this.match(PlSqlParser.DEBUG);

            }
            this.state = 1274;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1271;
                    this.compiler_parameters_clause(); 
                }
                this.state = 1276;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
            }

            this.state = 1279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.REUSE) {
                this.state = 1277;
                this.match(PlSqlParser.REUSE);
                this.state = 1278;
                this.match(PlSqlParser.SETTINGS);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1283;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_trigger;
    return this;
}

Create_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_triggerContext.prototype.constructor = Create_triggerContext;

Create_triggerContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Create_triggerContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Create_triggerContext.prototype.trigger_body = function() {
    return this.getTypedRuleContext(Trigger_bodyContext,0);
};

Create_triggerContext.prototype.simple_dml_trigger = function() {
    return this.getTypedRuleContext(Simple_dml_triggerContext,0);
};

Create_triggerContext.prototype.compound_dml_trigger = function() {
    return this.getTypedRuleContext(Compound_dml_triggerContext,0);
};

Create_triggerContext.prototype.non_dml_trigger = function() {
    return this.getTypedRuleContext(Non_dml_triggerContext,0);
};

Create_triggerContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_triggerContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_triggerContext.prototype.trigger_follows_clause = function() {
    return this.getTypedRuleContext(Trigger_follows_clauseContext,0);
};

Create_triggerContext.prototype.trigger_when_clause = function() {
    return this.getTypedRuleContext(Trigger_when_clauseContext,0);
};

Create_triggerContext.prototype.ENABLE = function() {
    return this.getToken(PlSqlParser.ENABLE, 0);
};

Create_triggerContext.prototype.DISABLE = function() {
    return this.getToken(PlSqlParser.DISABLE, 0);
};

Create_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_trigger(this);
	}
};

Create_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_trigger(this);
	}
};




PlSqlParser.Create_triggerContext = Create_triggerContext;

PlSqlParser.prototype.create_trigger = function() {

    var localctx = new Create_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PlSqlParser.RULE_create_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1285;
        this.match(PlSqlParser.CREATE);
        this.state = 1288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 1286;
            this.match(PlSqlParser.OR);
            this.state = 1287;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 1290;
        this.match(PlSqlParser.TRIGGER);
        this.state = 1291;
        this.trigger_name();
        this.state = 1295;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1292;
            this.simple_dml_trigger();
            break;

        case 2:
            this.state = 1293;
            this.compound_dml_trigger();
            break;

        case 3:
            this.state = 1294;
            this.non_dml_trigger();
            break;

        }
        this.state = 1298;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 1297;
            this.trigger_follows_clause();

        }
        this.state = 1301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 1300;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DISABLE || _la===PlSqlParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHEN) {
            this.state = 1303;
            this.trigger_when_clause();
        }

        this.state = 1306;
        this.trigger_body();
        this.state = 1307;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_follows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_trigger_follows_clause;
    return this;
}

Trigger_follows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_follows_clauseContext.prototype.constructor = Trigger_follows_clauseContext;

Trigger_follows_clauseContext.prototype.FOLLOWS = function() {
    return this.getToken(PlSqlParser.FOLLOWS, 0);
};

Trigger_follows_clauseContext.prototype.trigger_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_nameContext);
    } else {
        return this.getTypedRuleContext(Trigger_nameContext,i);
    }
};

Trigger_follows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTrigger_follows_clause(this);
	}
};

Trigger_follows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTrigger_follows_clause(this);
	}
};




PlSqlParser.Trigger_follows_clauseContext = Trigger_follows_clauseContext;

PlSqlParser.prototype.trigger_follows_clause = function() {

    var localctx = new Trigger_follows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PlSqlParser.RULE_trigger_follows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1309;
        this.match(PlSqlParser.FOLLOWS);
        this.state = 1310;
        this.trigger_name();
        this.state = 1315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1311;
            this.match(PlSqlParser.COMMA);
            this.state = 1312;
            this.trigger_name();
            this.state = 1317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_when_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_trigger_when_clause;
    return this;
}

Trigger_when_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_when_clauseContext.prototype.constructor = Trigger_when_clauseContext;

Trigger_when_clauseContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Trigger_when_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Trigger_when_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTrigger_when_clause(this);
	}
};

Trigger_when_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTrigger_when_clause(this);
	}
};




PlSqlParser.Trigger_when_clauseContext = Trigger_when_clauseContext;

PlSqlParser.prototype.trigger_when_clause = function() {

    var localctx = new Trigger_when_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PlSqlParser.RULE_trigger_when_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1318;
        this.match(PlSqlParser.WHEN);
        this.state = 1319;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 1320;
        this.condition();
        this.state = 1321;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_simple_dml_trigger;
    return this;
}

Simple_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_dml_triggerContext.prototype.constructor = Simple_dml_triggerContext;

Simple_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Simple_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(PlSqlParser.BEFORE, 0);
};

Simple_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(PlSqlParser.AFTER, 0);
};

Simple_dml_triggerContext.prototype.INSTEAD = function() {
    return this.getToken(PlSqlParser.INSTEAD, 0);
};

Simple_dml_triggerContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Simple_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Simple_dml_triggerContext.prototype.for_each_row = function() {
    return this.getTypedRuleContext(For_each_rowContext,0);
};

Simple_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSimple_dml_trigger(this);
	}
};

Simple_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSimple_dml_trigger(this);
	}
};




PlSqlParser.Simple_dml_triggerContext = Simple_dml_triggerContext;

PlSqlParser.prototype.simple_dml_trigger = function() {

    var localctx = new Simple_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PlSqlParser.RULE_simple_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1327;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BEFORE:
            this.state = 1323;
            this.match(PlSqlParser.BEFORE);
            break;
        case PlSqlParser.AFTER:
            this.state = 1324;
            this.match(PlSqlParser.AFTER);
            break;
        case PlSqlParser.INSTEAD:
            this.state = 1325;
            this.match(PlSqlParser.INSTEAD);
            this.state = 1326;
            this.match(PlSqlParser.OF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1329;
        this.dml_event_clause();
        this.state = 1331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        if(la_===1) {
            this.state = 1330;
            this.referencing_clause();

        }
        this.state = 1334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FOR) {
            this.state = 1333;
            this.for_each_row();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_each_rowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_for_each_row;
    return this;
}

For_each_rowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_each_rowContext.prototype.constructor = For_each_rowContext;

For_each_rowContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

For_each_rowContext.prototype.EACH = function() {
    return this.getToken(PlSqlParser.EACH, 0);
};

For_each_rowContext.prototype.ROW = function() {
    return this.getToken(PlSqlParser.ROW, 0);
};

For_each_rowContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFor_each_row(this);
	}
};

For_each_rowContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFor_each_row(this);
	}
};




PlSqlParser.For_each_rowContext = For_each_rowContext;

PlSqlParser.prototype.for_each_row = function() {

    var localctx = new For_each_rowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PlSqlParser.RULE_for_each_row);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        this.match(PlSqlParser.FOR);
        this.state = 1337;
        this.match(PlSqlParser.EACH);
        this.state = 1338;
        this.match(PlSqlParser.ROW);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_compound_dml_trigger;
    return this;
}

Compound_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_dml_triggerContext.prototype.constructor = Compound_dml_triggerContext;

Compound_dml_triggerContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Compound_dml_triggerContext.prototype.dml_event_clause = function() {
    return this.getTypedRuleContext(Dml_event_clauseContext,0);
};

Compound_dml_triggerContext.prototype.referencing_clause = function() {
    return this.getTypedRuleContext(Referencing_clauseContext,0);
};

Compound_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCompound_dml_trigger(this);
	}
};

Compound_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCompound_dml_trigger(this);
	}
};




PlSqlParser.Compound_dml_triggerContext = Compound_dml_triggerContext;

PlSqlParser.prototype.compound_dml_trigger = function() {

    var localctx = new Compound_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PlSqlParser.RULE_compound_dml_trigger);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1340;
        this.match(PlSqlParser.FOR);
        this.state = 1341;
        this.dml_event_clause();
        this.state = 1343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        if(la_===1) {
            this.state = 1342;
            this.referencing_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_non_dml_trigger;
    return this;
}

Non_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_triggerContext.prototype.constructor = Non_dml_triggerContext;

Non_dml_triggerContext.prototype.non_dml_event = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Non_dml_eventContext);
    } else {
        return this.getTypedRuleContext(Non_dml_eventContext,i);
    }
};

Non_dml_triggerContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Non_dml_triggerContext.prototype.BEFORE = function() {
    return this.getToken(PlSqlParser.BEFORE, 0);
};

Non_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(PlSqlParser.AFTER, 0);
};

Non_dml_triggerContext.prototype.DATABASE = function() {
    return this.getToken(PlSqlParser.DATABASE, 0);
};

Non_dml_triggerContext.prototype.SCHEMA = function() {
    return this.getToken(PlSqlParser.SCHEMA, 0);
};

Non_dml_triggerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OR);
    } else {
        return this.getToken(PlSqlParser.OR, i);
    }
};


Non_dml_triggerContext.prototype.schema_name = function() {
    return this.getTypedRuleContext(Schema_nameContext,0);
};

Non_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNon_dml_trigger(this);
	}
};

Non_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNon_dml_trigger(this);
	}
};




PlSqlParser.Non_dml_triggerContext = Non_dml_triggerContext;

PlSqlParser.prototype.non_dml_trigger = function() {

    var localctx = new Non_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PlSqlParser.RULE_non_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1345;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AFTER || _la===PlSqlParser.BEFORE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1346;
        this.non_dml_event();
        this.state = 1351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.OR) {
            this.state = 1347;
            this.match(PlSqlParser.OR);
            this.state = 1348;
            this.non_dml_event();
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1354;
        this.match(PlSqlParser.ON);
        this.state = 1362;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1355;
            this.match(PlSqlParser.DATABASE);
            break;

        case 2:
            this.state = 1359;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 1356;
                this.schema_name();
                this.state = 1357;
                this.match(PlSqlParser.PERIOD);

            }
            this.state = 1361;
            this.match(PlSqlParser.SCHEMA);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_trigger_body;
    return this;
}

Trigger_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_bodyContext.prototype.constructor = Trigger_bodyContext;

Trigger_bodyContext.prototype.COMPOUND = function() {
    return this.getToken(PlSqlParser.COMPOUND, 0);
};

Trigger_bodyContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Trigger_bodyContext.prototype.CALL = function() {
    return this.getToken(PlSqlParser.CALL, 0);
};

Trigger_bodyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Trigger_bodyContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Trigger_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTrigger_body(this);
	}
};

Trigger_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTrigger_body(this);
	}
};




PlSqlParser.Trigger_bodyContext = Trigger_bodyContext;

PlSqlParser.prototype.trigger_body = function() {

    var localctx = new Trigger_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PlSqlParser.RULE_trigger_body);
    try {
        this.state = 1369;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1364;
            this.match(PlSqlParser.COMPOUND);
            this.state = 1365;
            this.match(PlSqlParser.TRIGGER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1366;
            this.match(PlSqlParser.CALL);
            this.state = 1367;
            this.identifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1368;
            this.trigger_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_routine_clause;
    return this;
}

Routine_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_clauseContext.prototype.constructor = Routine_clauseContext;

Routine_clauseContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Routine_clauseContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Routine_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRoutine_clause(this);
	}
};

Routine_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRoutine_clause(this);
	}
};




PlSqlParser.Routine_clauseContext = Routine_clauseContext;

PlSqlParser.prototype.routine_clause = function() {

    var localctx = new Routine_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PlSqlParser.RULE_routine_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1371;
        this.routine_name();
        this.state = 1373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1372;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_compound_trigger_block;
    return this;
}

Compound_trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_trigger_blockContext.prototype.constructor = Compound_trigger_blockContext;

Compound_trigger_blockContext.prototype.COMPOUND = function() {
    return this.getToken(PlSqlParser.COMPOUND, 0);
};

Compound_trigger_blockContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Compound_trigger_blockContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Compound_trigger_blockContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Compound_trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Compound_trigger_blockContext.prototype.timing_point_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_point_sectionContext);
    } else {
        return this.getTypedRuleContext(Timing_point_sectionContext,i);
    }
};

Compound_trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCompound_trigger_block(this);
	}
};

Compound_trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCompound_trigger_block(this);
	}
};




PlSqlParser.Compound_trigger_blockContext = Compound_trigger_blockContext;

PlSqlParser.prototype.compound_trigger_block = function() {

    var localctx = new Compound_trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PlSqlParser.RULE_compound_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1375;
        this.match(PlSqlParser.COMPOUND);
        this.state = 1376;
        this.match(PlSqlParser.TRIGGER);
        this.state = 1380;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1377;
                this.declare_spec(); 
            }
            this.state = 1382;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

        this.state = 1384; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1383;
            this.timing_point_section();
            this.state = 1386; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.AFTER || _la===PlSqlParser.BEFORE);
        this.state = 1388;
        this.match(PlSqlParser.END);
        this.state = 1389;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Timing_point_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_timing_point_section;
    this.bk = null; // Token
    this.ak = null; // Token
    return this;
}

Timing_point_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_point_sectionContext.prototype.constructor = Timing_point_sectionContext;

Timing_point_sectionContext.prototype.STATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.STATEMENT);
    } else {
        return this.getToken(PlSqlParser.STATEMENT, i);
    }
};


Timing_point_sectionContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Timing_point_sectionContext.prototype.trigger_block = function() {
    return this.getTypedRuleContext(Trigger_blockContext,0);
};

Timing_point_sectionContext.prototype.BEFORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.BEFORE);
    } else {
        return this.getToken(PlSqlParser.BEFORE, i);
    }
};


Timing_point_sectionContext.prototype.EACH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.EACH);
    } else {
        return this.getToken(PlSqlParser.EACH, i);
    }
};


Timing_point_sectionContext.prototype.ROW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ROW);
    } else {
        return this.getToken(PlSqlParser.ROW, i);
    }
};


Timing_point_sectionContext.prototype.AFTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.AFTER);
    } else {
        return this.getToken(PlSqlParser.AFTER, i);
    }
};


Timing_point_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTiming_point_section(this);
	}
};

Timing_point_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTiming_point_section(this);
	}
};




PlSqlParser.Timing_point_sectionContext = Timing_point_sectionContext;

PlSqlParser.prototype.timing_point_section = function() {

    var localctx = new Timing_point_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PlSqlParser.RULE_timing_point_section);
    try {
        this.state = 1427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1391;
            localctx.bk = this.match(PlSqlParser.BEFORE);
            this.state = 1392;
            this.match(PlSqlParser.STATEMENT);
            this.state = 1393;
            this.match(PlSqlParser.IS);
            this.state = 1394;
            this.trigger_block();
            this.state = 1395;
            this.match(PlSqlParser.BEFORE);
            this.state = 1396;
            this.match(PlSqlParser.STATEMENT);
            this.state = 1397;
            this.match(PlSqlParser.SEMICOLON);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1399;
            localctx.bk = this.match(PlSqlParser.BEFORE);
            this.state = 1400;
            this.match(PlSqlParser.EACH);
            this.state = 1401;
            this.match(PlSqlParser.ROW);
            this.state = 1402;
            this.match(PlSqlParser.IS);
            this.state = 1403;
            this.trigger_block();
            this.state = 1404;
            this.match(PlSqlParser.BEFORE);
            this.state = 1405;
            this.match(PlSqlParser.EACH);
            this.state = 1406;
            this.match(PlSqlParser.ROW);
            this.state = 1407;
            this.match(PlSqlParser.SEMICOLON);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1409;
            localctx.ak = this.match(PlSqlParser.AFTER);
            this.state = 1410;
            this.match(PlSqlParser.STATEMENT);
            this.state = 1411;
            this.match(PlSqlParser.IS);
            this.state = 1412;
            this.trigger_block();
            this.state = 1413;
            this.match(PlSqlParser.AFTER);
            this.state = 1414;
            this.match(PlSqlParser.STATEMENT);
            this.state = 1415;
            this.match(PlSqlParser.SEMICOLON);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1417;
            localctx.ak = this.match(PlSqlParser.AFTER);
            this.state = 1418;
            this.match(PlSqlParser.EACH);
            this.state = 1419;
            this.match(PlSqlParser.ROW);
            this.state = 1420;
            this.match(PlSqlParser.IS);
            this.state = 1421;
            this.trigger_block();
            this.state = 1422;
            this.match(PlSqlParser.AFTER);
            this.state = 1423;
            this.match(PlSqlParser.EACH);
            this.state = 1424;
            this.match(PlSqlParser.ROW);
            this.state = 1425;
            this.match(PlSqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_dml_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_non_dml_event;
    return this;
}

Non_dml_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_dml_eventContext.prototype.constructor = Non_dml_eventContext;

Non_dml_eventContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Non_dml_eventContext.prototype.ANALYZE = function() {
    return this.getToken(PlSqlParser.ANALYZE, 0);
};

Non_dml_eventContext.prototype.ASSOCIATE = function() {
    return this.getToken(PlSqlParser.ASSOCIATE, 0);
};

Non_dml_eventContext.prototype.STATISTICS = function() {
    return this.getToken(PlSqlParser.STATISTICS, 0);
};

Non_dml_eventContext.prototype.AUDIT = function() {
    return this.getToken(PlSqlParser.AUDIT, 0);
};

Non_dml_eventContext.prototype.COMMENT = function() {
    return this.getToken(PlSqlParser.COMMENT, 0);
};

Non_dml_eventContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Non_dml_eventContext.prototype.DISASSOCIATE = function() {
    return this.getToken(PlSqlParser.DISASSOCIATE, 0);
};

Non_dml_eventContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Non_dml_eventContext.prototype.GRANT = function() {
    return this.getToken(PlSqlParser.GRANT, 0);
};

Non_dml_eventContext.prototype.NOAUDIT = function() {
    return this.getToken(PlSqlParser.NOAUDIT, 0);
};

Non_dml_eventContext.prototype.RENAME = function() {
    return this.getToken(PlSqlParser.RENAME, 0);
};

Non_dml_eventContext.prototype.REVOKE = function() {
    return this.getToken(PlSqlParser.REVOKE, 0);
};

Non_dml_eventContext.prototype.TRUNCATE = function() {
    return this.getToken(PlSqlParser.TRUNCATE, 0);
};

Non_dml_eventContext.prototype.DDL = function() {
    return this.getToken(PlSqlParser.DDL, 0);
};

Non_dml_eventContext.prototype.STARTUP = function() {
    return this.getToken(PlSqlParser.STARTUP, 0);
};

Non_dml_eventContext.prototype.SHUTDOWN = function() {
    return this.getToken(PlSqlParser.SHUTDOWN, 0);
};

Non_dml_eventContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(PlSqlParser.DB_ROLE_CHANGE, 0);
};

Non_dml_eventContext.prototype.LOGON = function() {
    return this.getToken(PlSqlParser.LOGON, 0);
};

Non_dml_eventContext.prototype.LOGOFF = function() {
    return this.getToken(PlSqlParser.LOGOFF, 0);
};

Non_dml_eventContext.prototype.SERVERERROR = function() {
    return this.getToken(PlSqlParser.SERVERERROR, 0);
};

Non_dml_eventContext.prototype.SUSPEND = function() {
    return this.getToken(PlSqlParser.SUSPEND, 0);
};

Non_dml_eventContext.prototype.DATABASE = function() {
    return this.getToken(PlSqlParser.DATABASE, 0);
};

Non_dml_eventContext.prototype.SCHEMA = function() {
    return this.getToken(PlSqlParser.SCHEMA, 0);
};

Non_dml_eventContext.prototype.FOLLOWS = function() {
    return this.getToken(PlSqlParser.FOLLOWS, 0);
};

Non_dml_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNon_dml_event(this);
	}
};

Non_dml_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNon_dml_event(this);
	}
};




PlSqlParser.Non_dml_eventContext = Non_dml_eventContext;

PlSqlParser.prototype.non_dml_event = function() {

    var localctx = new Non_dml_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PlSqlParser.RULE_non_dml_event);
    try {
        this.state = 1455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ALTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1429;
            this.match(PlSqlParser.ALTER);
            break;
        case PlSqlParser.ANALYZE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.match(PlSqlParser.ANALYZE);
            break;
        case PlSqlParser.ASSOCIATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1431;
            this.match(PlSqlParser.ASSOCIATE);
            this.state = 1432;
            this.match(PlSqlParser.STATISTICS);
            break;
        case PlSqlParser.AUDIT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1433;
            this.match(PlSqlParser.AUDIT);
            break;
        case PlSqlParser.COMMENT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1434;
            this.match(PlSqlParser.COMMENT);
            break;
        case PlSqlParser.CREATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1435;
            this.match(PlSqlParser.CREATE);
            break;
        case PlSqlParser.DISASSOCIATE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1436;
            this.match(PlSqlParser.DISASSOCIATE);
            this.state = 1437;
            this.match(PlSqlParser.STATISTICS);
            break;
        case PlSqlParser.DROP:
            this.enterOuterAlt(localctx, 8);
            this.state = 1438;
            this.match(PlSqlParser.DROP);
            break;
        case PlSqlParser.GRANT:
            this.enterOuterAlt(localctx, 9);
            this.state = 1439;
            this.match(PlSqlParser.GRANT);
            break;
        case PlSqlParser.NOAUDIT:
            this.enterOuterAlt(localctx, 10);
            this.state = 1440;
            this.match(PlSqlParser.NOAUDIT);
            break;
        case PlSqlParser.RENAME:
            this.enterOuterAlt(localctx, 11);
            this.state = 1441;
            this.match(PlSqlParser.RENAME);
            break;
        case PlSqlParser.REVOKE:
            this.enterOuterAlt(localctx, 12);
            this.state = 1442;
            this.match(PlSqlParser.REVOKE);
            break;
        case PlSqlParser.TRUNCATE:
            this.enterOuterAlt(localctx, 13);
            this.state = 1443;
            this.match(PlSqlParser.TRUNCATE);
            break;
        case PlSqlParser.DDL:
            this.enterOuterAlt(localctx, 14);
            this.state = 1444;
            this.match(PlSqlParser.DDL);
            break;
        case PlSqlParser.STARTUP:
            this.enterOuterAlt(localctx, 15);
            this.state = 1445;
            this.match(PlSqlParser.STARTUP);
            break;
        case PlSqlParser.SHUTDOWN:
            this.enterOuterAlt(localctx, 16);
            this.state = 1446;
            this.match(PlSqlParser.SHUTDOWN);
            break;
        case PlSqlParser.DB_ROLE_CHANGE:
            this.enterOuterAlt(localctx, 17);
            this.state = 1447;
            this.match(PlSqlParser.DB_ROLE_CHANGE);
            break;
        case PlSqlParser.LOGON:
            this.enterOuterAlt(localctx, 18);
            this.state = 1448;
            this.match(PlSqlParser.LOGON);
            break;
        case PlSqlParser.LOGOFF:
            this.enterOuterAlt(localctx, 19);
            this.state = 1449;
            this.match(PlSqlParser.LOGOFF);
            break;
        case PlSqlParser.SERVERERROR:
            this.enterOuterAlt(localctx, 20);
            this.state = 1450;
            this.match(PlSqlParser.SERVERERROR);
            break;
        case PlSqlParser.SUSPEND:
            this.enterOuterAlt(localctx, 21);
            this.state = 1451;
            this.match(PlSqlParser.SUSPEND);
            break;
        case PlSqlParser.DATABASE:
            this.enterOuterAlt(localctx, 22);
            this.state = 1452;
            this.match(PlSqlParser.DATABASE);
            break;
        case PlSqlParser.SCHEMA:
            this.enterOuterAlt(localctx, 23);
            this.state = 1453;
            this.match(PlSqlParser.SCHEMA);
            break;
        case PlSqlParser.FOLLOWS:
            this.enterOuterAlt(localctx, 24);
            this.state = 1454;
            this.match(PlSqlParser.FOLLOWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dml_event_clause;
    return this;
}

Dml_event_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_clauseContext.prototype.constructor = Dml_event_clauseContext;

Dml_event_clauseContext.prototype.dml_event_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_event_elementContext);
    } else {
        return this.getTypedRuleContext(Dml_event_elementContext,i);
    }
};

Dml_event_clauseContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Dml_event_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_clauseContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OR);
    } else {
        return this.getToken(PlSqlParser.OR, i);
    }
};


Dml_event_clauseContext.prototype.dml_event_nested_clause = function() {
    return this.getTypedRuleContext(Dml_event_nested_clauseContext,0);
};

Dml_event_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDml_event_clause(this);
	}
};

Dml_event_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDml_event_clause(this);
	}
};




PlSqlParser.Dml_event_clauseContext = Dml_event_clauseContext;

PlSqlParser.prototype.dml_event_clause = function() {

    var localctx = new Dml_event_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PlSqlParser.RULE_dml_event_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1457;
        this.dml_event_element();
        this.state = 1462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.OR) {
            this.state = 1458;
            this.match(PlSqlParser.OR);
            this.state = 1459;
            this.dml_event_element();
            this.state = 1464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1465;
        this.match(PlSqlParser.ON);
        this.state = 1467;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 1466;
            this.dml_event_nested_clause();

        }
        this.state = 1469;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dml_event_element;
    return this;
}

Dml_event_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_elementContext.prototype.constructor = Dml_event_elementContext;

Dml_event_elementContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

Dml_event_elementContext.prototype.INSERT = function() {
    return this.getToken(PlSqlParser.INSERT, 0);
};

Dml_event_elementContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Dml_event_elementContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Dml_event_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Dml_event_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDml_event_element(this);
	}
};

Dml_event_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDml_event_element(this);
	}
};




PlSqlParser.Dml_event_elementContext = Dml_event_elementContext;

PlSqlParser.prototype.dml_event_element = function() {

    var localctx = new Dml_event_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PlSqlParser.RULE_dml_event_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1471;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.DELETE || _la===PlSqlParser.INSERT || _la===PlSqlParser.UPDATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1481;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OF) {
            this.state = 1472;
            this.match(PlSqlParser.OF);
            this.state = 1473;
            this.column_name();
            this.state = 1478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1474;
                this.match(PlSqlParser.COMMA);
                this.state = 1475;
                this.column_name();
                this.state = 1480;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_event_nested_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dml_event_nested_clause;
    return this;
}

Dml_event_nested_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_event_nested_clauseContext.prototype.constructor = Dml_event_nested_clauseContext;

Dml_event_nested_clauseContext.prototype.NESTED = function() {
    return this.getToken(PlSqlParser.NESTED, 0);
};

Dml_event_nested_clauseContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Dml_event_nested_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_event_nested_clauseContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Dml_event_nested_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDml_event_nested_clause(this);
	}
};

Dml_event_nested_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDml_event_nested_clause(this);
	}
};




PlSqlParser.Dml_event_nested_clauseContext = Dml_event_nested_clauseContext;

PlSqlParser.prototype.dml_event_nested_clause = function() {

    var localctx = new Dml_event_nested_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PlSqlParser.RULE_dml_event_nested_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.match(PlSqlParser.NESTED);
        this.state = 1484;
        this.match(PlSqlParser.TABLE);
        this.state = 1485;
        this.tableview_name();
        this.state = 1486;
        this.match(PlSqlParser.OF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_referencing_clause;
    return this;
}

Referencing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_clauseContext.prototype.constructor = Referencing_clauseContext;

Referencing_clauseContext.prototype.REFERENCING = function() {
    return this.getToken(PlSqlParser.REFERENCING, 0);
};

Referencing_clauseContext.prototype.referencing_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Referencing_elementContext);
    } else {
        return this.getTypedRuleContext(Referencing_elementContext,i);
    }
};

Referencing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReferencing_clause(this);
	}
};

Referencing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReferencing_clause(this);
	}
};




PlSqlParser.Referencing_clauseContext = Referencing_clauseContext;

PlSqlParser.prototype.referencing_clause = function() {

    var localctx = new Referencing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PlSqlParser.RULE_referencing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1488;
        this.match(PlSqlParser.REFERENCING);
        this.state = 1490; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1489;
        		this.referencing_element();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1492; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,99, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Referencing_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_referencing_element;
    return this;
}

Referencing_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Referencing_elementContext.prototype.constructor = Referencing_elementContext;

Referencing_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Referencing_elementContext.prototype.NEW = function() {
    return this.getToken(PlSqlParser.NEW, 0);
};

Referencing_elementContext.prototype.OLD = function() {
    return this.getToken(PlSqlParser.OLD, 0);
};

Referencing_elementContext.prototype.PARENT = function() {
    return this.getToken(PlSqlParser.PARENT, 0);
};

Referencing_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReferencing_element(this);
	}
};

Referencing_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReferencing_element(this);
	}
};




PlSqlParser.Referencing_elementContext = Referencing_elementContext;

PlSqlParser.prototype.referencing_element = function() {

    var localctx = new Referencing_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PlSqlParser.RULE_referencing_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1494;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.NEW || _la===PlSqlParser.OLD || _la===PlSqlParser.PARENT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1495;
        this.column_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_type;
    return this;
}

Drop_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_typeContext.prototype.constructor = Drop_typeContext;

Drop_typeContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_typeContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Drop_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Drop_typeContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Drop_typeContext.prototype.FORCE = function() {
    return this.getToken(PlSqlParser.FORCE, 0);
};

Drop_typeContext.prototype.VALIDATE = function() {
    return this.getToken(PlSqlParser.VALIDATE, 0);
};

Drop_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_type(this);
	}
};

Drop_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_type(this);
	}
};




PlSqlParser.Drop_typeContext = Drop_typeContext;

PlSqlParser.prototype.drop_type = function() {

    var localctx = new Drop_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PlSqlParser.RULE_drop_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1497;
        this.match(PlSqlParser.DROP);
        this.state = 1498;
        this.match(PlSqlParser.TYPE);
        this.state = 1500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 1499;
            this.match(PlSqlParser.BODY);

        }
        this.state = 1502;
        this.type_name();
        this.state = 1504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FORCE || _la===PlSqlParser.VALIDATE) {
            this.state = 1503;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FORCE || _la===PlSqlParser.VALIDATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1506;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_type;
    return this;
}

Alter_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_typeContext.prototype.constructor = Alter_typeContext;

Alter_typeContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_typeContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Alter_typeContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Alter_typeContext.prototype.compile_type_clause = function() {
    return this.getTypedRuleContext(Compile_type_clauseContext,0);
};

Alter_typeContext.prototype.replace_type_clause = function() {
    return this.getTypedRuleContext(Replace_type_clauseContext,0);
};

Alter_typeContext.prototype.alter_method_spec = function() {
    return this.getTypedRuleContext(Alter_method_specContext,0);
};

Alter_typeContext.prototype.alter_collection_clauses = function() {
    return this.getTypedRuleContext(Alter_collection_clausesContext,0);
};

Alter_typeContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Alter_typeContext.prototype.dependent_handling_clause = function() {
    return this.getTypedRuleContext(Dependent_handling_clauseContext,0);
};

Alter_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_type(this);
	}
};

Alter_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_type(this);
	}
};




PlSqlParser.Alter_typeContext = Alter_typeContext;

PlSqlParser.prototype.alter_type = function() {

    var localctx = new Alter_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PlSqlParser.RULE_alter_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1508;
        this.match(PlSqlParser.ALTER);
        this.state = 1509;
        this.match(PlSqlParser.TYPE);
        this.state = 1510;
        this.type_name();
        this.state = 1516;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.COMPILE:
            this.state = 1511;
            this.compile_type_clause();
            break;
        case PlSqlParser.REPLACE:
            this.state = 1512;
            this.replace_type_clause();
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.DROP:
            this.state = 1513;
            this.alter_method_spec();
            break;
        case PlSqlParser.MODIFY:
            this.state = 1514;
            this.alter_collection_clauses();
            break;
        case PlSqlParser.FINAL:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.NOT:
        case PlSqlParser.OVERRIDING:
            this.state = 1515;
            this.modifier_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.CASCADE || _la===PlSqlParser.INVALIDATE) {
            this.state = 1518;
            this.dependent_handling_clause();
        }

        this.state = 1521;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compile_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_compile_type_clause;
    return this;
}

Compile_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compile_type_clauseContext.prototype.constructor = Compile_type_clauseContext;

Compile_type_clauseContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Compile_type_clauseContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Compile_type_clauseContext.prototype.compiler_parameters_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compiler_parameters_clauseContext);
    } else {
        return this.getTypedRuleContext(Compiler_parameters_clauseContext,i);
    }
};

Compile_type_clauseContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Compile_type_clauseContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Compile_type_clauseContext.prototype.SPECIFICATION = function() {
    return this.getToken(PlSqlParser.SPECIFICATION, 0);
};

Compile_type_clauseContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Compile_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCompile_type_clause(this);
	}
};

Compile_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCompile_type_clause(this);
	}
};




PlSqlParser.Compile_type_clauseContext = Compile_type_clauseContext;

PlSqlParser.prototype.compile_type_clause = function() {

    var localctx = new Compile_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PlSqlParser.RULE_compile_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        this.match(PlSqlParser.COMPILE);
        this.state = 1525;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        if(la_===1) {
            this.state = 1524;
            this.match(PlSqlParser.DEBUG);

        }
        this.state = 1528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        if(la_===1) {
            this.state = 1527;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.BODY || _la===PlSqlParser.SPECIFICATION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1533;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1530;
                this.compiler_parameters_clause(); 
            }
            this.state = 1535;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

        this.state = 1538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.REUSE) {
            this.state = 1536;
            this.match(PlSqlParser.REUSE);
            this.state = 1537;
            this.match(PlSqlParser.SETTINGS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Replace_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_replace_type_clause;
    return this;
}

Replace_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Replace_type_clauseContext.prototype.constructor = Replace_type_clauseContext;

Replace_type_clauseContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Replace_type_clauseContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Replace_type_clauseContext.prototype.OBJECT = function() {
    return this.getToken(PlSqlParser.OBJECT, 0);
};

Replace_type_clauseContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Replace_type_clauseContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Replace_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReplace_type_clause(this);
	}
};

Replace_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReplace_type_clause(this);
	}
};




PlSqlParser.Replace_type_clauseContext = Replace_type_clauseContext;

PlSqlParser.prototype.replace_type_clause = function() {

    var localctx = new Replace_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PlSqlParser.RULE_replace_type_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1540;
        this.match(PlSqlParser.REPLACE);
        this.state = 1542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AUTHID) {
            this.state = 1541;
            this.invoker_rights_clause();
        }

        this.state = 1544;
        this.match(PlSqlParser.AS);
        this.state = 1545;
        this.match(PlSqlParser.OBJECT);
        this.state = 1546;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 1547;
        this.object_member_spec();
        this.state = 1552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1548;
            this.match(PlSqlParser.COMMA);
            this.state = 1549;
            this.object_member_spec();
            this.state = 1554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1555;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_method_spec;
    return this;
}

Alter_method_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_specContext.prototype.constructor = Alter_method_specContext;

Alter_method_specContext.prototype.alter_method_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Alter_method_elementContext);
    } else {
        return this.getTypedRuleContext(Alter_method_elementContext,i);
    }
};

Alter_method_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_method_spec(this);
	}
};

Alter_method_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_method_spec(this);
	}
};




PlSqlParser.Alter_method_specContext = Alter_method_specContext;

PlSqlParser.prototype.alter_method_spec = function() {

    var localctx = new Alter_method_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PlSqlParser.RULE_alter_method_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1557;
        this.alter_method_element();
        this.state = 1562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1558;
            this.match(PlSqlParser.COMMA);
            this.state = 1559;
            this.alter_method_element();
            this.state = 1564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_method_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_method_element;
    return this;
}

Alter_method_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_method_elementContext.prototype.constructor = Alter_method_elementContext;

Alter_method_elementContext.prototype.ADD = function() {
    return this.getToken(PlSqlParser.ADD, 0);
};

Alter_method_elementContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Alter_method_elementContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Alter_method_elementContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Alter_method_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_method_element(this);
	}
};

Alter_method_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_method_element(this);
	}
};




PlSqlParser.Alter_method_elementContext = Alter_method_elementContext;

PlSqlParser.prototype.alter_method_element = function() {

    var localctx = new Alter_method_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PlSqlParser.RULE_alter_method_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1565;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.ADD || _la===PlSqlParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1568;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.MAP:
        case PlSqlParser.ORDER:
            this.state = 1566;
            this.map_order_function_spec();
            break;
        case PlSqlParser.MEMBER:
        case PlSqlParser.STATIC:
            this.state = 1567;
            this.subprogram_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_attribute_definition;
    return this;
}

Alter_attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_attribute_definitionContext.prototype.constructor = Alter_attribute_definitionContext;

Alter_attribute_definitionContext.prototype.ATTRIBUTE = function() {
    return this.getToken(PlSqlParser.ATTRIBUTE, 0);
};

Alter_attribute_definitionContext.prototype.ADD = function() {
    return this.getToken(PlSqlParser.ADD, 0);
};

Alter_attribute_definitionContext.prototype.MODIFY = function() {
    return this.getToken(PlSqlParser.MODIFY, 0);
};

Alter_attribute_definitionContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Alter_attribute_definitionContext.prototype.attribute_definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_definitionContext);
    } else {
        return this.getTypedRuleContext(Attribute_definitionContext,i);
    }
};

Alter_attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_attribute_definition(this);
	}
};

Alter_attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_attribute_definition(this);
	}
};




PlSqlParser.Alter_attribute_definitionContext = Alter_attribute_definitionContext;

PlSqlParser.prototype.alter_attribute_definition = function() {

    var localctx = new Alter_attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PlSqlParser.RULE_alter_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.ADD || _la===PlSqlParser.DROP || _la===PlSqlParser.MODIFY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1571;
        this.match(PlSqlParser.ATTRIBUTE);
        this.state = 1584;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 1572;
            this.attribute_definition();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 1573;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1574;
            this.attribute_definition();
            this.state = 1579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1575;
                this.match(PlSqlParser.COMMA);
                this.state = 1576;
                this.attribute_definition();
                this.state = 1581;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1582;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_attribute_definition;
    return this;
}

Attribute_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_definitionContext.prototype.constructor = Attribute_definitionContext;

Attribute_definitionContext.prototype.attribute_name = function() {
    return this.getTypedRuleContext(Attribute_nameContext,0);
};

Attribute_definitionContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Attribute_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAttribute_definition(this);
	}
};

Attribute_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAttribute_definition(this);
	}
};




PlSqlParser.Attribute_definitionContext = Attribute_definitionContext;

PlSqlParser.prototype.attribute_definition = function() {

    var localctx = new Attribute_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PlSqlParser.RULE_attribute_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        this.attribute_name();
        this.state = 1588;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 1587;
            this.type_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_collection_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_collection_clauses;
    return this;
}

Alter_collection_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_collection_clausesContext.prototype.constructor = Alter_collection_clausesContext;

Alter_collection_clausesContext.prototype.MODIFY = function() {
    return this.getToken(PlSqlParser.MODIFY, 0);
};

Alter_collection_clausesContext.prototype.LIMIT = function() {
    return this.getToken(PlSqlParser.LIMIT, 0);
};

Alter_collection_clausesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Alter_collection_clausesContext.prototype.ELEMENT = function() {
    return this.getToken(PlSqlParser.ELEMENT, 0);
};

Alter_collection_clausesContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Alter_collection_clausesContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Alter_collection_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_collection_clauses(this);
	}
};

Alter_collection_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_collection_clauses(this);
	}
};




PlSqlParser.Alter_collection_clausesContext = Alter_collection_clausesContext;

PlSqlParser.prototype.alter_collection_clauses = function() {

    var localctx = new Alter_collection_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PlSqlParser.RULE_alter_collection_clauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1590;
        this.match(PlSqlParser.MODIFY);
        this.state = 1596;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.LIMIT:
            this.state = 1591;
            this.match(PlSqlParser.LIMIT);
            this.state = 1592;
            this.expression();
            break;
        case PlSqlParser.ELEMENT:
            this.state = 1593;
            this.match(PlSqlParser.ELEMENT);
            this.state = 1594;
            this.match(PlSqlParser.TYPE);
            this.state = 1595;
            this.type_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_handling_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dependent_handling_clause;
    return this;
}

Dependent_handling_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_handling_clauseContext.prototype.constructor = Dependent_handling_clauseContext;

Dependent_handling_clauseContext.prototype.INVALIDATE = function() {
    return this.getToken(PlSqlParser.INVALIDATE, 0);
};

Dependent_handling_clauseContext.prototype.CASCADE = function() {
    return this.getToken(PlSqlParser.CASCADE, 0);
};

Dependent_handling_clauseContext.prototype.CONVERT = function() {
    return this.getToken(PlSqlParser.CONVERT, 0);
};

Dependent_handling_clauseContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Dependent_handling_clauseContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(PlSqlParser.SUBSTITUTABLE, 0);
};

Dependent_handling_clauseContext.prototype.INCLUDING = function() {
    return this.getToken(PlSqlParser.INCLUDING, 0);
};

Dependent_handling_clauseContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Dependent_handling_clauseContext.prototype.DATA = function() {
    return this.getToken(PlSqlParser.DATA, 0);
};

Dependent_handling_clauseContext.prototype.dependent_exceptions_part = function() {
    return this.getTypedRuleContext(Dependent_exceptions_partContext,0);
};

Dependent_handling_clauseContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Dependent_handling_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDependent_handling_clause(this);
	}
};

Dependent_handling_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDependent_handling_clause(this);
	}
};




PlSqlParser.Dependent_handling_clauseContext = Dependent_handling_clauseContext;

PlSqlParser.prototype.dependent_handling_clause = function() {

    var localctx = new Dependent_handling_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PlSqlParser.RULE_dependent_handling_clause);
    var _la = 0; // Token type
    try {
        this.state = 1614;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.INVALIDATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1598;
            this.match(PlSqlParser.INVALIDATE);
            break;
        case PlSqlParser.CASCADE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1599;
            this.match(PlSqlParser.CASCADE);
            this.state = 1609;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case PlSqlParser.CONVERT:
            	this.state = 1600;
            	this.match(PlSqlParser.CONVERT);
            	this.state = 1601;
            	this.match(PlSqlParser.TO);
            	this.state = 1602;
            	this.match(PlSqlParser.SUBSTITUTABLE);
            	break;
            case PlSqlParser.INCLUDING:
            case PlSqlParser.NOT:
            	this.state = 1604;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===PlSqlParser.NOT) {
            	    this.state = 1603;
            	    this.match(PlSqlParser.NOT);
            	}

            	this.state = 1606;
            	this.match(PlSqlParser.INCLUDING);
            	this.state = 1607;
            	this.match(PlSqlParser.TABLE);
            	this.state = 1608;
            	this.match(PlSqlParser.DATA);
            	break;
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.FORCE:
            case PlSqlParser.SEMICOLON:
            	break;
            default:
            	break;
            }
            this.state = 1612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.EXCEPTIONS || _la===PlSqlParser.FORCE) {
                this.state = 1611;
                this.dependent_exceptions_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dependent_exceptions_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dependent_exceptions_part;
    return this;
}

Dependent_exceptions_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dependent_exceptions_partContext.prototype.constructor = Dependent_exceptions_partContext;

Dependent_exceptions_partContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PlSqlParser.EXCEPTIONS, 0);
};

Dependent_exceptions_partContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Dependent_exceptions_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dependent_exceptions_partContext.prototype.FORCE = function() {
    return this.getToken(PlSqlParser.FORCE, 0);
};

Dependent_exceptions_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDependent_exceptions_part(this);
	}
};

Dependent_exceptions_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDependent_exceptions_part(this);
	}
};




PlSqlParser.Dependent_exceptions_partContext = Dependent_exceptions_partContext;

PlSqlParser.prototype.dependent_exceptions_part = function() {

    var localctx = new Dependent_exceptions_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PlSqlParser.RULE_dependent_exceptions_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1617;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FORCE) {
            this.state = 1616;
            this.match(PlSqlParser.FORCE);
        }

        this.state = 1619;
        this.match(PlSqlParser.EXCEPTIONS);
        this.state = 1620;
        this.match(PlSqlParser.INTO);
        this.state = 1621;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_type;
    return this;
}

Create_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_typeContext.prototype.constructor = Create_typeContext;

Create_typeContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_typeContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Create_typeContext.prototype.type_definition = function() {
    return this.getTypedRuleContext(Type_definitionContext,0);
};

Create_typeContext.prototype.type_body = function() {
    return this.getTypedRuleContext(Type_bodyContext,0);
};

Create_typeContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_typeContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_type(this);
	}
};

Create_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_type(this);
	}
};




PlSqlParser.Create_typeContext = Create_typeContext;

PlSqlParser.prototype.create_type = function() {

    var localctx = new Create_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PlSqlParser.RULE_create_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1623;
        this.match(PlSqlParser.CREATE);
        this.state = 1626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OR) {
            this.state = 1624;
            this.match(PlSqlParser.OR);
            this.state = 1625;
            this.match(PlSqlParser.REPLACE);
        }

        this.state = 1628;
        this.match(PlSqlParser.TYPE);
        this.state = 1631;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1629;
            this.type_definition();
            break;

        case 2:
            this.state = 1630;
            this.type_body();
            break;

        }
        this.state = 1633;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_definition;
    return this;
}

Type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_definitionContext.prototype.constructor = Type_definitionContext;

Type_definitionContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_definitionContext.prototype.OID = function() {
    return this.getToken(PlSqlParser.OID, 0);
};

Type_definitionContext.prototype.CHAR_STRING = function() {
    return this.getToken(PlSqlParser.CHAR_STRING, 0);
};

Type_definitionContext.prototype.object_type_def = function() {
    return this.getTypedRuleContext(Object_type_defContext,0);
};

Type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_definition(this);
	}
};

Type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_definition(this);
	}
};




PlSqlParser.Type_definitionContext = Type_definitionContext;

PlSqlParser.prototype.type_definition = function() {

    var localctx = new Type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PlSqlParser.RULE_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1635;
        this.type_name();
        this.state = 1638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OID) {
            this.state = 1636;
            this.match(PlSqlParser.OID);
            this.state = 1637;
            this.match(PlSqlParser.CHAR_STRING);
        }

        this.state = 1641;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AS || _la===PlSqlParser.AUTHID || _la===PlSqlParser.IS || _la===PlSqlParser.UNDER) {
            this.state = 1640;
            this.object_type_def();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_object_type_def;
    return this;
}

Object_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_type_defContext.prototype.constructor = Object_type_defContext;

Object_type_defContext.prototype.object_as_part = function() {
    return this.getTypedRuleContext(Object_as_partContext,0);
};

Object_type_defContext.prototype.object_under_part = function() {
    return this.getTypedRuleContext(Object_under_partContext,0);
};

Object_type_defContext.prototype.invoker_rights_clause = function() {
    return this.getTypedRuleContext(Invoker_rights_clauseContext,0);
};

Object_type_defContext.prototype.sqlj_object_type = function() {
    return this.getTypedRuleContext(Sqlj_object_typeContext,0);
};

Object_type_defContext.prototype.object_member_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_member_specContext);
    } else {
        return this.getTypedRuleContext(Object_member_specContext,i);
    }
};

Object_type_defContext.prototype.modifier_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Modifier_clauseContext);
    } else {
        return this.getTypedRuleContext(Modifier_clauseContext,i);
    }
};

Object_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterObject_type_def(this);
	}
};

Object_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitObject_type_def(this);
	}
};




PlSqlParser.Object_type_defContext = Object_type_defContext;

PlSqlParser.prototype.object_type_def = function() {

    var localctx = new Object_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PlSqlParser.RULE_object_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AUTHID) {
            this.state = 1643;
            this.invoker_rights_clause();
        }

        this.state = 1648;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.AS:
        case PlSqlParser.IS:
            this.state = 1646;
            this.object_as_part();
            break;
        case PlSqlParser.UNDER:
            this.state = 1647;
            this.object_under_part();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.EXTERNAL) {
            this.state = 1650;
            this.sqlj_object_type();
        }

        this.state = 1664;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1653;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1654;
            this.object_member_spec();
            this.state = 1659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1655;
                this.match(PlSqlParser.COMMA);
                this.state = 1656;
                this.object_member_spec();
                this.state = 1661;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1662;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.FINAL || _la===PlSqlParser.INSTANTIABLE || _la===PlSqlParser.NOT || _la===PlSqlParser.OVERRIDING) {
            this.state = 1666;
            this.modifier_clause();
            this.state = 1671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_as_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_object_as_part;
    return this;
}

Object_as_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_as_partContext.prototype.constructor = Object_as_partContext;

Object_as_partContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Object_as_partContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Object_as_partContext.prototype.OBJECT = function() {
    return this.getToken(PlSqlParser.OBJECT, 0);
};

Object_as_partContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Object_as_partContext.prototype.nested_table_type_def = function() {
    return this.getTypedRuleContext(Nested_table_type_defContext,0);
};

Object_as_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterObject_as_part(this);
	}
};

Object_as_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitObject_as_part(this);
	}
};




PlSqlParser.Object_as_partContext = Object_as_partContext;

PlSqlParser.prototype.object_as_part = function() {

    var localctx = new Object_as_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PlSqlParser.RULE_object_as_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1672;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1676;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.OBJECT:
            this.state = 1673;
            this.match(PlSqlParser.OBJECT);
            break;
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
            this.state = 1674;
            this.varray_type_def();
            break;
        case PlSqlParser.TABLE:
            this.state = 1675;
            this.nested_table_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_under_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_object_under_part;
    return this;
}

Object_under_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_under_partContext.prototype.constructor = Object_under_partContext;

Object_under_partContext.prototype.UNDER = function() {
    return this.getToken(PlSqlParser.UNDER, 0);
};

Object_under_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_under_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterObject_under_part(this);
	}
};

Object_under_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitObject_under_part(this);
	}
};




PlSqlParser.Object_under_partContext = Object_under_partContext;

PlSqlParser.prototype.object_under_part = function() {

    var localctx = new Object_under_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PlSqlParser.RULE_object_under_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this.match(PlSqlParser.UNDER);
        this.state = 1679;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nested_table_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_nested_table_type_def;
    return this;
}

Nested_table_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nested_table_type_defContext.prototype.constructor = Nested_table_type_defContext;

Nested_table_type_defContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Nested_table_type_defContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Nested_table_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Nested_table_type_defContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Nested_table_type_defContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Nested_table_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNested_table_type_def(this);
	}
};

Nested_table_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNested_table_type_def(this);
	}
};




PlSqlParser.Nested_table_type_defContext = Nested_table_type_defContext;

PlSqlParser.prototype.nested_table_type_def = function() {

    var localctx = new Nested_table_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PlSqlParser.RULE_nested_table_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1681;
        this.match(PlSqlParser.TABLE);
        this.state = 1682;
        this.match(PlSqlParser.OF);
        this.state = 1683;
        this.type_spec();
        this.state = 1686;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        if(la_===1) {
            this.state = 1684;
            this.match(PlSqlParser.NOT);
            this.state = 1685;
            this.match(PlSqlParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sqlj_object_type;
    return this;
}

Sqlj_object_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_typeContext.prototype.constructor = Sqlj_object_typeContext;

Sqlj_object_typeContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Sqlj_object_typeContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Sqlj_object_typeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_typeContext.prototype.LANGUAGE = function() {
    return this.getToken(PlSqlParser.LANGUAGE, 0);
};

Sqlj_object_typeContext.prototype.JAVA = function() {
    return this.getToken(PlSqlParser.JAVA, 0);
};

Sqlj_object_typeContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Sqlj_object_typeContext.prototype.SQLDATA = function() {
    return this.getToken(PlSqlParser.SQLDATA, 0);
};

Sqlj_object_typeContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(PlSqlParser.CUSTOMDATUM, 0);
};

Sqlj_object_typeContext.prototype.ORADATA = function() {
    return this.getToken(PlSqlParser.ORADATA, 0);
};

Sqlj_object_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSqlj_object_type(this);
	}
};

Sqlj_object_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSqlj_object_type(this);
	}
};




PlSqlParser.Sqlj_object_typeContext = Sqlj_object_typeContext;

PlSqlParser.prototype.sqlj_object_type = function() {

    var localctx = new Sqlj_object_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PlSqlParser.RULE_sqlj_object_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1688;
        this.match(PlSqlParser.EXTERNAL);
        this.state = 1689;
        this.match(PlSqlParser.NAME);
        this.state = 1690;
        this.expression();
        this.state = 1691;
        this.match(PlSqlParser.LANGUAGE);
        this.state = 1692;
        this.match(PlSqlParser.JAVA);
        this.state = 1693;
        this.match(PlSqlParser.USING);
        this.state = 1694;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CUSTOMDATUM || _la===PlSqlParser.ORADATA || _la===PlSqlParser.SQLDATA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_body;
    return this;
}

Type_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_bodyContext.prototype.constructor = Type_bodyContext;

Type_bodyContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Type_bodyContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_bodyContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Type_bodyContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Type_bodyContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Type_bodyContext.prototype.type_body_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_body_elementsContext);
    } else {
        return this.getTypedRuleContext(Type_body_elementsContext,i);
    }
};

Type_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_body(this);
	}
};

Type_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_body(this);
	}
};




PlSqlParser.Type_bodyContext = Type_bodyContext;

PlSqlParser.prototype.type_body = function() {

    var localctx = new Type_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PlSqlParser.RULE_type_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696;
        this.match(PlSqlParser.BODY);
        this.state = 1697;
        this.type_name();
        this.state = 1698;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1700; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1699;
            this.type_body_elements();
            this.state = 1702; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.MAP || _la===PlSqlParser.MEMBER || _la===PlSqlParser.ORDER || _la===PlSqlParser.STATIC);
        this.state = 1704;
        this.match(PlSqlParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_body_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_body_elements;
    return this;
}

Type_body_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_body_elementsContext.prototype.constructor = Type_body_elementsContext;

Type_body_elementsContext.prototype.map_order_func_declaration = function() {
    return this.getTypedRuleContext(Map_order_func_declarationContext,0);
};

Type_body_elementsContext.prototype.subprog_decl_in_type = function() {
    return this.getTypedRuleContext(Subprog_decl_in_typeContext,0);
};

Type_body_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_body_elements(this);
	}
};

Type_body_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_body_elements(this);
	}
};




PlSqlParser.Type_body_elementsContext = Type_body_elementsContext;

PlSqlParser.prototype.type_body_elements = function() {

    var localctx = new Type_body_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PlSqlParser.RULE_type_body_elements);
    try {
        this.state = 1708;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.MAP:
        case PlSqlParser.ORDER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1706;
            this.map_order_func_declaration();
            break;
        case PlSqlParser.MEMBER:
        case PlSqlParser.STATIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 1707;
            this.subprog_decl_in_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_func_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_map_order_func_declaration;
    return this;
}

Map_order_func_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_func_declarationContext.prototype.constructor = Map_order_func_declarationContext;

Map_order_func_declarationContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Map_order_func_declarationContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Map_order_func_declarationContext.prototype.MAP = function() {
    return this.getToken(PlSqlParser.MAP, 0);
};

Map_order_func_declarationContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Map_order_func_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMap_order_func_declaration(this);
	}
};

Map_order_func_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMap_order_func_declaration(this);
	}
};




PlSqlParser.Map_order_func_declarationContext = Map_order_func_declarationContext;

PlSqlParser.prototype.map_order_func_declaration = function() {

    var localctx = new Map_order_func_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PlSqlParser.RULE_map_order_func_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1710;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.MAP || _la===PlSqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1711;
        this.match(PlSqlParser.MEMBER);
        this.state = 1712;
        this.func_decl_in_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprog_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subprog_decl_in_type;
    return this;
}

Subprog_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprog_decl_in_typeContext.prototype.constructor = Subprog_decl_in_typeContext;

Subprog_decl_in_typeContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Subprog_decl_in_typeContext.prototype.STATIC = function() {
    return this.getToken(PlSqlParser.STATIC, 0);
};

Subprog_decl_in_typeContext.prototype.proc_decl_in_type = function() {
    return this.getTypedRuleContext(Proc_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.func_decl_in_type = function() {
    return this.getTypedRuleContext(Func_decl_in_typeContext,0);
};

Subprog_decl_in_typeContext.prototype.constructor_declaration = function() {
    return this.getTypedRuleContext(Constructor_declarationContext,0);
};

Subprog_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubprog_decl_in_type(this);
	}
};

Subprog_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubprog_decl_in_type(this);
	}
};




PlSqlParser.Subprog_decl_in_typeContext = Subprog_decl_in_typeContext;

PlSqlParser.prototype.subprog_decl_in_type = function() {

    var localctx = new Subprog_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PlSqlParser.RULE_subprog_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1714;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.MEMBER || _la===PlSqlParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.PROCEDURE:
            this.state = 1715;
            this.proc_decl_in_type();
            break;
        case PlSqlParser.FUNCTION:
            this.state = 1716;
            this.func_decl_in_type();
            break;
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.FINAL:
        case PlSqlParser.INSTANTIABLE:
            this.state = 1717;
            this.constructor_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Proc_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_proc_decl_in_type;
    return this;
}

Proc_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Proc_decl_in_typeContext.prototype.constructor = Proc_decl_in_typeContext;

Proc_decl_in_typeContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Proc_decl_in_typeContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Proc_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Proc_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Proc_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Proc_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Proc_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Proc_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Proc_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Proc_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterProc_decl_in_type(this);
	}
};

Proc_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitProc_decl_in_type(this);
	}
};




PlSqlParser.Proc_decl_in_typeContext = Proc_decl_in_typeContext;

PlSqlParser.prototype.proc_decl_in_type = function() {

    var localctx = new Proc_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PlSqlParser.RULE_proc_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1721;
        this.procedure_name();
        this.state = 1722;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 1723;
        this.type_elements_parameter();
        this.state = 1728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1724;
            this.match(PlSqlParser.COMMA);
            this.state = 1725;
            this.type_elements_parameter();
            this.state = 1730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1731;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 1732;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1746;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1733;
            this.call_spec();
            break;

        case 2:
            this.state = 1735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 1734;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 1740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1737;
                this.declare_spec();
                this.state = 1742;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1743;
            this.body();
            this.state = 1744;
            this.match(PlSqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_decl_in_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_func_decl_in_type;
    return this;
}

Func_decl_in_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_decl_in_typeContext.prototype.constructor = Func_decl_in_typeContext;

Func_decl_in_typeContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Func_decl_in_typeContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Func_decl_in_typeContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Func_decl_in_typeContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Func_decl_in_typeContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Func_decl_in_typeContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Func_decl_in_typeContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Func_decl_in_typeContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Func_decl_in_typeContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Func_decl_in_typeContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Func_decl_in_typeContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Func_decl_in_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunc_decl_in_type(this);
	}
};

Func_decl_in_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunc_decl_in_type(this);
	}
};




PlSqlParser.Func_decl_in_typeContext = Func_decl_in_typeContext;

PlSqlParser.prototype.func_decl_in_type = function() {

    var localctx = new Func_decl_in_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PlSqlParser.RULE_func_decl_in_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1748;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1749;
        this.function_name();
        this.state = 1761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1750;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1751;
            this.type_elements_parameter();
            this.state = 1756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1752;
                this.match(PlSqlParser.COMMA);
                this.state = 1753;
                this.type_elements_parameter();
                this.state = 1758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1759;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1763;
        this.match(PlSqlParser.RETURN);
        this.state = 1764;
        this.type_spec();
        this.state = 1765;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1779;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1766;
            this.call_spec();
            break;

        case 2:
            this.state = 1768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 1767;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 1773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1770;
                this.declare_spec();
                this.state = 1775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1776;
            this.body();
            this.state = 1777;
            this.match(PlSqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_constructor_declaration;
    return this;
}

Constructor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_declarationContext.prototype.constructor = Constructor_declarationContext;

Constructor_declarationContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PlSqlParser.CONSTRUCTOR, 0);
};

Constructor_declarationContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Constructor_declarationContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_declarationContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Constructor_declarationContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.SELF);
    } else {
        return this.getToken(PlSqlParser.SELF, i);
    }
};


Constructor_declarationContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.AS);
    } else {
        return this.getToken(PlSqlParser.AS, i);
    }
};


Constructor_declarationContext.prototype.RESULT = function() {
    return this.getToken(PlSqlParser.RESULT, 0);
};

Constructor_declarationContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Constructor_declarationContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_declarationContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Constructor_declarationContext.prototype.FINAL = function() {
    return this.getToken(PlSqlParser.FINAL, 0);
};

Constructor_declarationContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PlSqlParser.INSTANTIABLE, 0);
};

Constructor_declarationContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_declarationContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Constructor_declarationContext.prototype.OUT = function() {
    return this.getToken(PlSqlParser.OUT, 0);
};

Constructor_declarationContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Constructor_declarationContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Constructor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConstructor_declaration(this);
	}
};

Constructor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConstructor_declaration(this);
	}
};




PlSqlParser.Constructor_declarationContext = Constructor_declarationContext;

PlSqlParser.prototype.constructor_declaration = function() {

    var localctx = new Constructor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PlSqlParser.RULE_constructor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FINAL) {
            this.state = 1781;
            this.match(PlSqlParser.FINAL);
        }

        this.state = 1785;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INSTANTIABLE) {
            this.state = 1784;
            this.match(PlSqlParser.INSTANTIABLE);
        }

        this.state = 1787;
        this.match(PlSqlParser.CONSTRUCTOR);
        this.state = 1788;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1789;
        this.type_spec();
        this.state = 1807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1790;
            this.match(PlSqlParser.LEFT_PAREN);

            this.state = 1791;
            this.match(PlSqlParser.SELF);
            this.state = 1792;
            this.match(PlSqlParser.IN);
            this.state = 1793;
            this.match(PlSqlParser.OUT);
            this.state = 1794;
            this.type_spec();
            this.state = 1795;
            this.match(PlSqlParser.COMMA);
            this.state = 1797;
            this.type_elements_parameter();
            this.state = 1802;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1798;
                this.match(PlSqlParser.COMMA);
                this.state = 1799;
                this.type_elements_parameter();
                this.state = 1804;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1805;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1809;
        this.match(PlSqlParser.RETURN);
        this.state = 1810;
        this.match(PlSqlParser.SELF);
        this.state = 1811;
        this.match(PlSqlParser.AS);
        this.state = 1812;
        this.match(PlSqlParser.RESULT);
        this.state = 1813;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1827;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1814;
            this.call_spec();
            break;

        case 2:
            this.state = 1816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 1815;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 1821;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 1818;
                this.declare_spec();
                this.state = 1823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1824;
            this.body();
            this.state = 1825;
            this.match(PlSqlParser.SEMICOLON);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Modifier_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_modifier_clause;
    return this;
}

Modifier_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Modifier_clauseContext.prototype.constructor = Modifier_clauseContext;

Modifier_clauseContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PlSqlParser.INSTANTIABLE, 0);
};

Modifier_clauseContext.prototype.FINAL = function() {
    return this.getToken(PlSqlParser.FINAL, 0);
};

Modifier_clauseContext.prototype.OVERRIDING = function() {
    return this.getToken(PlSqlParser.OVERRIDING, 0);
};

Modifier_clauseContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Modifier_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModifier_clause(this);
	}
};

Modifier_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModifier_clause(this);
	}
};




PlSqlParser.Modifier_clauseContext = Modifier_clauseContext;

PlSqlParser.prototype.modifier_clause = function() {

    var localctx = new Modifier_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PlSqlParser.RULE_modifier_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOT) {
            this.state = 1829;
            this.match(PlSqlParser.NOT);
        }

        this.state = 1832;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.FINAL || _la===PlSqlParser.INSTANTIABLE || _la===PlSqlParser.OVERRIDING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_member_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_object_member_spec;
    return this;
}

Object_member_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_member_specContext.prototype.constructor = Object_member_specContext;

Object_member_specContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Object_member_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Object_member_specContext.prototype.sqlj_object_type_attr = function() {
    return this.getTypedRuleContext(Sqlj_object_type_attrContext,0);
};

Object_member_specContext.prototype.element_spec = function() {
    return this.getTypedRuleContext(Element_specContext,0);
};

Object_member_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterObject_member_spec(this);
	}
};

Object_member_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitObject_member_spec(this);
	}
};




PlSqlParser.Object_member_specContext = Object_member_specContext;

PlSqlParser.prototype.object_member_spec = function() {

    var localctx = new Object_member_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PlSqlParser.RULE_object_member_spec);
    var _la = 0; // Token type
    try {
        this.state = 1840;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1834;
            this.identifier();
            this.state = 1835;
            this.type_spec();
            this.state = 1837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.EXTERNAL) {
                this.state = 1836;
                this.sqlj_object_type_attr();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1839;
            this.element_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sqlj_object_type_attrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sqlj_object_type_attr;
    return this;
}

Sqlj_object_type_attrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sqlj_object_type_attrContext.prototype.constructor = Sqlj_object_type_attrContext;

Sqlj_object_type_attrContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Sqlj_object_type_attrContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Sqlj_object_type_attrContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Sqlj_object_type_attrContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSqlj_object_type_attr(this);
	}
};

Sqlj_object_type_attrContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSqlj_object_type_attr(this);
	}
};




PlSqlParser.Sqlj_object_type_attrContext = Sqlj_object_type_attrContext;

PlSqlParser.prototype.sqlj_object_type_attr = function() {

    var localctx = new Sqlj_object_type_attrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PlSqlParser.RULE_sqlj_object_type_attr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1842;
        this.match(PlSqlParser.EXTERNAL);
        this.state = 1843;
        this.match(PlSqlParser.NAME);
        this.state = 1844;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_element_spec;
    return this;
}

Element_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_specContext.prototype.constructor = Element_specContext;

Element_specContext.prototype.modifier_clause = function() {
    return this.getTypedRuleContext(Modifier_clauseContext,0);
};

Element_specContext.prototype.element_spec_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_spec_optionsContext);
    } else {
        return this.getTypedRuleContext(Element_spec_optionsContext,i);
    }
};

Element_specContext.prototype.pragma_clause = function() {
    return this.getTypedRuleContext(Pragma_clauseContext,0);
};

Element_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterElement_spec(this);
	}
};

Element_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitElement_spec(this);
	}
};




PlSqlParser.Element_specContext = Element_specContext;

PlSqlParser.prototype.element_spec = function() {

    var localctx = new Element_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PlSqlParser.RULE_element_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1847;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 1846;
            this.modifier_clause();

        }
        this.state = 1850; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1849;
            this.element_spec_options();
            this.state = 1852; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.CONSTRUCTOR || _la===PlSqlParser.FINAL || _la===PlSqlParser.INSTANTIABLE || _la===PlSqlParser.MAP || _la===PlSqlParser.MEMBER || _la===PlSqlParser.ORDER || _la===PlSqlParser.STATIC);
        this.state = 1856;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1854;
            this.match(PlSqlParser.COMMA);
            this.state = 1855;
            this.pragma_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Element_spec_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_element_spec_options;
    return this;
}

Element_spec_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_spec_optionsContext.prototype.constructor = Element_spec_optionsContext;

Element_spec_optionsContext.prototype.subprogram_spec = function() {
    return this.getTypedRuleContext(Subprogram_specContext,0);
};

Element_spec_optionsContext.prototype.constructor_spec = function() {
    return this.getTypedRuleContext(Constructor_specContext,0);
};

Element_spec_optionsContext.prototype.map_order_function_spec = function() {
    return this.getTypedRuleContext(Map_order_function_specContext,0);
};

Element_spec_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterElement_spec_options(this);
	}
};

Element_spec_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitElement_spec_options(this);
	}
};




PlSqlParser.Element_spec_optionsContext = Element_spec_optionsContext;

PlSqlParser.prototype.element_spec_options = function() {

    var localctx = new Element_spec_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PlSqlParser.RULE_element_spec_options);
    try {
        this.state = 1861;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.MEMBER:
        case PlSqlParser.STATIC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1858;
            this.subprogram_spec();
            break;
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.FINAL:
        case PlSqlParser.INSTANTIABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1859;
            this.constructor_spec();
            break;
        case PlSqlParser.MAP:
        case PlSqlParser.ORDER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1860;
            this.map_order_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subprogram_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subprogram_spec;
    return this;
}

Subprogram_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_specContext.prototype.constructor = Subprogram_specContext;

Subprogram_specContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Subprogram_specContext.prototype.STATIC = function() {
    return this.getToken(PlSqlParser.STATIC, 0);
};

Subprogram_specContext.prototype.type_procedure_spec = function() {
    return this.getTypedRuleContext(Type_procedure_specContext,0);
};

Subprogram_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Subprogram_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubprogram_spec(this);
	}
};

Subprogram_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubprogram_spec(this);
	}
};




PlSqlParser.Subprogram_specContext = Subprogram_specContext;

PlSqlParser.prototype.subprogram_spec = function() {

    var localctx = new Subprogram_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PlSqlParser.RULE_subprogram_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1863;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.MEMBER || _la===PlSqlParser.STATIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1866;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.PROCEDURE:
            this.state = 1864;
            this.type_procedure_spec();
            break;
        case PlSqlParser.FUNCTION:
            this.state = 1865;
            this.type_function_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_procedure_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_procedure_spec;
    return this;
}

Type_procedure_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_procedure_specContext.prototype.constructor = Type_procedure_specContext;

Type_procedure_specContext.prototype.PROCEDURE = function() {
    return this.getToken(PlSqlParser.PROCEDURE, 0);
};

Type_procedure_specContext.prototype.procedure_name = function() {
    return this.getTypedRuleContext(Procedure_nameContext,0);
};

Type_procedure_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_procedure_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_procedure_specContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Type_procedure_specContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Type_procedure_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_procedure_spec(this);
	}
};

Type_procedure_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_procedure_spec(this);
	}
};




PlSqlParser.Type_procedure_specContext = Type_procedure_specContext;

PlSqlParser.prototype.type_procedure_spec = function() {

    var localctx = new Type_procedure_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PlSqlParser.RULE_type_procedure_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1868;
        this.match(PlSqlParser.PROCEDURE);
        this.state = 1869;
        this.procedure_name();
        this.state = 1870;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 1871;
        this.type_elements_parameter();
        this.state = 1876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1872;
            this.match(PlSqlParser.COMMA);
            this.state = 1873;
            this.type_elements_parameter();
            this.state = 1878;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1879;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 1882;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AS || _la===PlSqlParser.IS) {
            this.state = 1880;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1881;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_function_spec;
    return this;
}

Type_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_function_specContext.prototype.constructor = Type_function_specContext;

Type_function_specContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Type_function_specContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Type_function_specContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Type_function_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_function_specContext.prototype.SELF = function() {
    return this.getToken(PlSqlParser.SELF, 0);
};

Type_function_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.AS);
    } else {
        return this.getToken(PlSqlParser.AS, i);
    }
};


Type_function_specContext.prototype.RESULT = function() {
    return this.getToken(PlSqlParser.RESULT, 0);
};

Type_function_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Type_function_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Type_function_specContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Type_function_specContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Type_function_specContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Type_function_specContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Type_function_specContext.prototype.VARIABLE = function() {
    return this.getToken(PlSqlParser.VARIABLE, 0);
};

Type_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_function_spec(this);
	}
};

Type_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_function_spec(this);
	}
};




PlSqlParser.Type_function_specContext = Type_function_specContext;

PlSqlParser.prototype.type_function_spec = function() {

    var localctx = new Type_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PlSqlParser.RULE_type_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1884;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1885;
        this.function_name();
        this.state = 1897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1886;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 1887;
            this.type_elements_parameter();
            this.state = 1892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1888;
                this.match(PlSqlParser.COMMA);
                this.state = 1889;
                this.type_elements_parameter();
                this.state = 1894;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1895;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1899;
        this.match(PlSqlParser.RETURN);
        this.state = 1904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1900;
            this.type_spec();
            break;

        case 2:
            this.state = 1901;
            this.match(PlSqlParser.SELF);
            this.state = 1902;
            this.match(PlSqlParser.AS);
            this.state = 1903;
            this.match(PlSqlParser.RESULT);
            break;

        }
        this.state = 1914;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.AS:
        case PlSqlParser.IS:
        	this.state = 1906;
        	_la = this._input.LA(1);
        	if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 1907;
        	this.call_spec();
        	break;
        case PlSqlParser.EXTERNAL:
        	this.state = 1908;
        	this.match(PlSqlParser.EXTERNAL);
        	this.state = 1910;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===PlSqlParser.VARIABLE) {
        	    this.state = 1909;
        	    this.match(PlSqlParser.VARIABLE);
        	}

        	this.state = 1912;
        	this.match(PlSqlParser.NAME);
        	this.state = 1913;
        	this.expression();
        	break;
        case PlSqlParser.CASCADE:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.FINAL:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.MAP:
        case PlSqlParser.MEMBER:
        case PlSqlParser.ORDER:
        case PlSqlParser.STATIC:
        case PlSqlParser.RIGHT_PAREN:
        case PlSqlParser.COMMA:
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constructor_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_constructor_spec;
    return this;
}

Constructor_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constructor_specContext.prototype.constructor = Constructor_specContext;

Constructor_specContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PlSqlParser.CONSTRUCTOR, 0);
};

Constructor_specContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Constructor_specContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Constructor_specContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Constructor_specContext.prototype.SELF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.SELF);
    } else {
        return this.getToken(PlSqlParser.SELF, i);
    }
};


Constructor_specContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.AS);
    } else {
        return this.getToken(PlSqlParser.AS, i);
    }
};


Constructor_specContext.prototype.RESULT = function() {
    return this.getToken(PlSqlParser.RESULT, 0);
};

Constructor_specContext.prototype.FINAL = function() {
    return this.getToken(PlSqlParser.FINAL, 0);
};

Constructor_specContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PlSqlParser.INSTANTIABLE, 0);
};

Constructor_specContext.prototype.type_elements_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_elements_parameterContext);
    } else {
        return this.getTypedRuleContext(Type_elements_parameterContext,i);
    }
};

Constructor_specContext.prototype.call_spec = function() {
    return this.getTypedRuleContext(Call_specContext,0);
};

Constructor_specContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Constructor_specContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Constructor_specContext.prototype.OUT = function() {
    return this.getToken(PlSqlParser.OUT, 0);
};

Constructor_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConstructor_spec(this);
	}
};

Constructor_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConstructor_spec(this);
	}
};




PlSqlParser.Constructor_specContext = Constructor_specContext;

PlSqlParser.prototype.constructor_spec = function() {

    var localctx = new Constructor_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PlSqlParser.RULE_constructor_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1917;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FINAL) {
            this.state = 1916;
            this.match(PlSqlParser.FINAL);
        }

        this.state = 1920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INSTANTIABLE) {
            this.state = 1919;
            this.match(PlSqlParser.INSTANTIABLE);
        }

        this.state = 1922;
        this.match(PlSqlParser.CONSTRUCTOR);
        this.state = 1923;
        this.match(PlSqlParser.FUNCTION);
        this.state = 1924;
        this.type_spec();
        this.state = 1942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 1925;
            this.match(PlSqlParser.LEFT_PAREN);

            this.state = 1926;
            this.match(PlSqlParser.SELF);
            this.state = 1927;
            this.match(PlSqlParser.IN);
            this.state = 1928;
            this.match(PlSqlParser.OUT);
            this.state = 1929;
            this.type_spec();
            this.state = 1930;
            this.match(PlSqlParser.COMMA);
            this.state = 1932;
            this.type_elements_parameter();
            this.state = 1937;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 1933;
                this.match(PlSqlParser.COMMA);
                this.state = 1934;
                this.type_elements_parameter();
                this.state = 1939;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1940;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 1944;
        this.match(PlSqlParser.RETURN);
        this.state = 1945;
        this.match(PlSqlParser.SELF);
        this.state = 1946;
        this.match(PlSqlParser.AS);
        this.state = 1947;
        this.match(PlSqlParser.RESULT);
        this.state = 1950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AS || _la===PlSqlParser.IS) {
            this.state = 1948;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AS || _la===PlSqlParser.IS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1949;
            this.call_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Map_order_function_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_map_order_function_spec;
    return this;
}

Map_order_function_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Map_order_function_specContext.prototype.constructor = Map_order_function_specContext;

Map_order_function_specContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Map_order_function_specContext.prototype.type_function_spec = function() {
    return this.getTypedRuleContext(Type_function_specContext,0);
};

Map_order_function_specContext.prototype.MAP = function() {
    return this.getToken(PlSqlParser.MAP, 0);
};

Map_order_function_specContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Map_order_function_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMap_order_function_spec(this);
	}
};

Map_order_function_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMap_order_function_spec(this);
	}
};




PlSqlParser.Map_order_function_specContext = Map_order_function_specContext;

PlSqlParser.prototype.map_order_function_spec = function() {

    var localctx = new Map_order_function_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PlSqlParser.RULE_map_order_function_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1952;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.MAP || _la===PlSqlParser.ORDER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1953;
        this.match(PlSqlParser.MEMBER);
        this.state = 1954;
        this.type_function_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pragma_clause;
    return this;
}

Pragma_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_clauseContext.prototype.constructor = Pragma_clauseContext;

Pragma_clauseContext.prototype.PRAGMA = function() {
    return this.getToken(PlSqlParser.PRAGMA, 0);
};

Pragma_clauseContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PlSqlParser.RESTRICT_REFERENCES, 0);
};

Pragma_clauseContext.prototype.pragma_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pragma_elementsContext);
    } else {
        return this.getTypedRuleContext(Pragma_elementsContext,i);
    }
};

Pragma_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPragma_clause(this);
	}
};

Pragma_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPragma_clause(this);
	}
};




PlSqlParser.Pragma_clauseContext = Pragma_clauseContext;

PlSqlParser.prototype.pragma_clause = function() {

    var localctx = new Pragma_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PlSqlParser.RULE_pragma_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1956;
        this.match(PlSqlParser.PRAGMA);
        this.state = 1957;
        this.match(PlSqlParser.RESTRICT_REFERENCES);
        this.state = 1958;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 1959;
        this.pragma_elements();
        this.state = 1964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 1960;
            this.match(PlSqlParser.COMMA);
            this.state = 1961;
            this.pragma_elements();
            this.state = 1966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1967;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pragma_elements;
    return this;
}

Pragma_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_elementsContext.prototype.constructor = Pragma_elementsContext;

Pragma_elementsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Pragma_elementsContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

Pragma_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPragma_elements(this);
	}
};

Pragma_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPragma_elements(this);
	}
};




PlSqlParser.Pragma_elementsContext = Pragma_elementsContext;

PlSqlParser.prototype.pragma_elements = function() {

    var localctx = new Pragma_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PlSqlParser.RULE_pragma_elements);
    try {
        this.state = 1971;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1969;
            this.identifier();
            break;
        case PlSqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1970;
            this.match(PlSqlParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_elements_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_elements_parameter;
    return this;
}

Type_elements_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_elements_parameterContext.prototype.constructor = Type_elements_parameterContext;

Type_elements_parameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Type_elements_parameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Type_elements_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_elements_parameter(this);
	}
};

Type_elements_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_elements_parameter(this);
	}
};




PlSqlParser.Type_elements_parameterContext = Type_elements_parameterContext;

PlSqlParser.prototype.type_elements_parameter = function() {

    var localctx = new Type_elements_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PlSqlParser.RULE_type_elements_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1973;
        this.parameter_name();
        this.state = 1974;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_sequence;
    return this;
}

Drop_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_sequenceContext.prototype.constructor = Drop_sequenceContext;

Drop_sequenceContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PlSqlParser.SEQUENCE, 0);
};

Drop_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Drop_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_sequence(this);
	}
};

Drop_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_sequence(this);
	}
};




PlSqlParser.Drop_sequenceContext = Drop_sequenceContext;

PlSqlParser.prototype.drop_sequence = function() {

    var localctx = new Drop_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PlSqlParser.RULE_drop_sequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1976;
        this.match(PlSqlParser.DROP);
        this.state = 1977;
        this.match(PlSqlParser.SEQUENCE);
        this.state = 1978;
        this.sequence_name();
        this.state = 1979;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_sequence;
    return this;
}

Alter_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_sequenceContext.prototype.constructor = Alter_sequenceContext;

Alter_sequenceContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PlSqlParser.SEQUENCE, 0);
};

Alter_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Alter_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Alter_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_sequence(this);
	}
};

Alter_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_sequence(this);
	}
};




PlSqlParser.Alter_sequenceContext = Alter_sequenceContext;

PlSqlParser.prototype.alter_sequence = function() {

    var localctx = new Alter_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PlSqlParser.RULE_alter_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1981;
        this.match(PlSqlParser.ALTER);
        this.state = 1982;
        this.match(PlSqlParser.SEQUENCE);
        this.state = 1983;
        this.sequence_name();
        this.state = 1985; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1984;
            this.sequence_spec();
            this.state = 1987; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.CACHE || _la===PlSqlParser.CYCLE || _la===PlSqlParser.INCREMENT || ((((_la - 237)) & ~0x1f) == 0 && ((1 << (_la - 237)) & ((1 << (PlSqlParser.MAXVALUE - 237)) | (1 << (PlSqlParser.MINVALUE - 237)) | (1 << (PlSqlParser.NOCACHE - 237)) | (1 << (PlSqlParser.NOCYCLE - 237)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (PlSqlParser.NOMAXVALUE - 269)) | (1 << (PlSqlParser.NOMINVALUE - 269)) | (1 << (PlSqlParser.NOORDER - 269)) | (1 << (PlSqlParser.ORDER - 269)))) !== 0));
        this.state = 1989;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_sequence;
    return this;
}

Create_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_sequenceContext.prototype.constructor = Create_sequenceContext;

Create_sequenceContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(PlSqlParser.SEQUENCE, 0);
};

Create_sequenceContext.prototype.sequence_name = function() {
    return this.getTypedRuleContext(Sequence_nameContext,0);
};

Create_sequenceContext.prototype.sequence_start_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_start_clauseContext);
    } else {
        return this.getTypedRuleContext(Sequence_start_clauseContext,i);
    }
};

Create_sequenceContext.prototype.sequence_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_specContext);
    } else {
        return this.getTypedRuleContext(Sequence_specContext,i);
    }
};

Create_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_sequence(this);
	}
};

Create_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_sequence(this);
	}
};




PlSqlParser.Create_sequenceContext = Create_sequenceContext;

PlSqlParser.prototype.create_sequence = function() {

    var localctx = new Create_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PlSqlParser.RULE_create_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1991;
        this.match(PlSqlParser.CREATE);
        this.state = 1992;
        this.match(PlSqlParser.SEQUENCE);
        this.state = 1993;
        this.sequence_name();
        this.state = 1998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.CACHE || _la===PlSqlParser.CYCLE || _la===PlSqlParser.INCREMENT || ((((_la - 237)) & ~0x1f) == 0 && ((1 << (_la - 237)) & ((1 << (PlSqlParser.MAXVALUE - 237)) | (1 << (PlSqlParser.MINVALUE - 237)) | (1 << (PlSqlParser.NOCACHE - 237)) | (1 << (PlSqlParser.NOCYCLE - 237)))) !== 0) || ((((_la - 269)) & ~0x1f) == 0 && ((1 << (_la - 269)) & ((1 << (PlSqlParser.NOMAXVALUE - 269)) | (1 << (PlSqlParser.NOMINVALUE - 269)) | (1 << (PlSqlParser.NOORDER - 269)) | (1 << (PlSqlParser.ORDER - 269)))) !== 0) || _la===PlSqlParser.START) {
            this.state = 1996;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.START:
                this.state = 1994;
                this.sequence_start_clause();
                break;
            case PlSqlParser.CACHE:
            case PlSqlParser.CYCLE:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.NOCACHE:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOMAXVALUE:
            case PlSqlParser.NOMINVALUE:
            case PlSqlParser.NOORDER:
            case PlSqlParser.ORDER:
                this.state = 1995;
                this.sequence_spec();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2001;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sequence_spec;
    return this;
}

Sequence_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_specContext.prototype.constructor = Sequence_specContext;

Sequence_specContext.prototype.INCREMENT = function() {
    return this.getToken(PlSqlParser.INCREMENT, 0);
};

Sequence_specContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Sequence_specContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PlSqlParser.UNSIGNED_INTEGER, 0);
};

Sequence_specContext.prototype.MAXVALUE = function() {
    return this.getToken(PlSqlParser.MAXVALUE, 0);
};

Sequence_specContext.prototype.NOMAXVALUE = function() {
    return this.getToken(PlSqlParser.NOMAXVALUE, 0);
};

Sequence_specContext.prototype.MINVALUE = function() {
    return this.getToken(PlSqlParser.MINVALUE, 0);
};

Sequence_specContext.prototype.NOMINVALUE = function() {
    return this.getToken(PlSqlParser.NOMINVALUE, 0);
};

Sequence_specContext.prototype.CYCLE = function() {
    return this.getToken(PlSqlParser.CYCLE, 0);
};

Sequence_specContext.prototype.NOCYCLE = function() {
    return this.getToken(PlSqlParser.NOCYCLE, 0);
};

Sequence_specContext.prototype.CACHE = function() {
    return this.getToken(PlSqlParser.CACHE, 0);
};

Sequence_specContext.prototype.NOCACHE = function() {
    return this.getToken(PlSqlParser.NOCACHE, 0);
};

Sequence_specContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Sequence_specContext.prototype.NOORDER = function() {
    return this.getToken(PlSqlParser.NOORDER, 0);
};

Sequence_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSequence_spec(this);
	}
};

Sequence_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSequence_spec(this);
	}
};




PlSqlParser.Sequence_specContext = Sequence_specContext;

PlSqlParser.prototype.sequence_spec = function() {

    var localctx = new Sequence_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PlSqlParser.RULE_sequence_spec);
    try {
        this.state = 2019;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.INCREMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2003;
            this.match(PlSqlParser.INCREMENT);
            this.state = 2004;
            this.match(PlSqlParser.BY);
            this.state = 2005;
            this.match(PlSqlParser.UNSIGNED_INTEGER);
            break;
        case PlSqlParser.MAXVALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2006;
            this.match(PlSqlParser.MAXVALUE);
            this.state = 2007;
            this.match(PlSqlParser.UNSIGNED_INTEGER);
            break;
        case PlSqlParser.NOMAXVALUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2008;
            this.match(PlSqlParser.NOMAXVALUE);
            break;
        case PlSqlParser.MINVALUE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2009;
            this.match(PlSqlParser.MINVALUE);
            this.state = 2010;
            this.match(PlSqlParser.UNSIGNED_INTEGER);
            break;
        case PlSqlParser.NOMINVALUE:
            this.enterOuterAlt(localctx, 5);
            this.state = 2011;
            this.match(PlSqlParser.NOMINVALUE);
            break;
        case PlSqlParser.CYCLE:
            this.enterOuterAlt(localctx, 6);
            this.state = 2012;
            this.match(PlSqlParser.CYCLE);
            break;
        case PlSqlParser.NOCYCLE:
            this.enterOuterAlt(localctx, 7);
            this.state = 2013;
            this.match(PlSqlParser.NOCYCLE);
            break;
        case PlSqlParser.CACHE:
            this.enterOuterAlt(localctx, 8);
            this.state = 2014;
            this.match(PlSqlParser.CACHE);
            this.state = 2015;
            this.match(PlSqlParser.UNSIGNED_INTEGER);
            break;
        case PlSqlParser.NOCACHE:
            this.enterOuterAlt(localctx, 9);
            this.state = 2016;
            this.match(PlSqlParser.NOCACHE);
            break;
        case PlSqlParser.ORDER:
            this.enterOuterAlt(localctx, 10);
            this.state = 2017;
            this.match(PlSqlParser.ORDER);
            break;
        case PlSqlParser.NOORDER:
            this.enterOuterAlt(localctx, 11);
            this.state = 2018;
            this.match(PlSqlParser.NOORDER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_start_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sequence_start_clause;
    return this;
}

Sequence_start_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_start_clauseContext.prototype.constructor = Sequence_start_clauseContext;

Sequence_start_clauseContext.prototype.START = function() {
    return this.getToken(PlSqlParser.START, 0);
};

Sequence_start_clauseContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

Sequence_start_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PlSqlParser.UNSIGNED_INTEGER, 0);
};

Sequence_start_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSequence_start_clause(this);
	}
};

Sequence_start_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSequence_start_clause(this);
	}
};




PlSqlParser.Sequence_start_clauseContext = Sequence_start_clauseContext;

PlSqlParser.prototype.sequence_start_clause = function() {

    var localctx = new Sequence_start_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PlSqlParser.RULE_sequence_start_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2021;
        this.match(PlSqlParser.START);
        this.state = 2022;
        this.match(PlSqlParser.WITH);
        this.state = 2023;
        this.match(PlSqlParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_index;
    return this;
}

Create_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_indexContext.prototype.constructor = Create_indexContext;

Create_indexContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_indexContext.prototype.INDEX = function() {
    return this.getToken(PlSqlParser.INDEX, 0);
};

Create_indexContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Create_indexContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Create_indexContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Create_indexContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Create_indexContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Create_indexContext.prototype.COMPUTE = function() {
    return this.getToken(PlSqlParser.COMPUTE, 0);
};

Create_indexContext.prototype.STATISTICS = function() {
    return this.getToken(PlSqlParser.STATISTICS, 0);
};

Create_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_index(this);
	}
};

Create_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_index(this);
	}
};




PlSqlParser.Create_indexContext = Create_indexContext;

PlSqlParser.prototype.create_index = function() {

    var localctx = new Create_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PlSqlParser.RULE_create_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2025;
        this.match(PlSqlParser.CREATE);
        this.state = 2027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.UNIQUE) {
            this.state = 2026;
            this.match(PlSqlParser.UNIQUE);
        }

        this.state = 2029;
        this.match(PlSqlParser.INDEX);
        this.state = 2030;
        this.index_name();
        this.state = 2031;
        this.match(PlSqlParser.ON);
        this.state = 2032;
        this.tableview_name();
        this.state = 2033;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2034;
        this.column_name();
        this.state = 2039;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2035;
            this.match(PlSqlParser.COMMA);
            this.state = 2036;
            this.column_name();
            this.state = 2041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2042;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 2045;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.COMPUTE) {
            this.state = 2043;
            this.match(PlSqlParser.COMPUTE);
            this.state = 2044;
            this.match(PlSqlParser.STATISTICS);
        }

        this.state = 2047;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_index;
    this.old_index_name = null; // Index_nameContext
    this.new_index_name = null; // Index_nameContext
    return this;
}

Alter_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_indexContext.prototype.constructor = Alter_indexContext;

Alter_indexContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_indexContext.prototype.INDEX = function() {
    return this.getToken(PlSqlParser.INDEX, 0);
};

Alter_indexContext.prototype.RENAME = function() {
    return this.getToken(PlSqlParser.RENAME, 0);
};

Alter_indexContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Alter_indexContext.prototype.index_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_nameContext);
    } else {
        return this.getTypedRuleContext(Index_nameContext,i);
    }
};

Alter_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_index(this);
	}
};

Alter_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_index(this);
	}
};




PlSqlParser.Alter_indexContext = Alter_indexContext;

PlSqlParser.prototype.alter_index = function() {

    var localctx = new Alter_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, PlSqlParser.RULE_alter_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2049;
        this.match(PlSqlParser.ALTER);
        this.state = 2050;
        this.match(PlSqlParser.INDEX);
        this.state = 2051;
        localctx.old_index_name = this.index_name();
        this.state = 2052;
        this.match(PlSqlParser.RENAME);
        this.state = 2053;
        this.match(PlSqlParser.TO);
        this.state = 2054;
        localctx.new_index_name = this.index_name();
        this.state = 2055;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_index;
    return this;
}

Drop_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_indexContext.prototype.constructor = Drop_indexContext;

Drop_indexContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_indexContext.prototype.INDEX = function() {
    return this.getToken(PlSqlParser.INDEX, 0);
};

Drop_indexContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Drop_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_index(this);
	}
};

Drop_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_index(this);
	}
};




PlSqlParser.Drop_indexContext = Drop_indexContext;

PlSqlParser.prototype.drop_index = function() {

    var localctx = new Drop_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, PlSqlParser.RULE_drop_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2057;
        this.match(PlSqlParser.DROP);
        this.state = 2058;
        this.match(PlSqlParser.INDEX);
        this.state = 2059;
        this.index_name();
        this.state = 2060;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_table;
    this.pctfree = null; // Token
    this.pctused = null; // Token
    this.inittrans = null; // Token
    this.initial = null; // Size_clauseContext
    this.next = null; // Size_clauseContext
    this.minextents = null; // Token
    this.pctincrease = null; // Token
    this.freelists = null; // Token
    this.freelist_groups = null; // Token
    this.tablespace_name = null; // Token
    return this;
}

Create_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_tableContext.prototype.constructor = Create_tableContext;

Create_tableContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_tableContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Create_tableContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Create_tableContext.prototype.LEFT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.LEFT_PAREN);
    } else {
        return this.getToken(PlSqlParser.LEFT_PAREN, i);
    }
};


Create_tableContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Create_tableContext.prototype.datatype = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatatypeContext);
    } else {
        return this.getTypedRuleContext(DatatypeContext,i);
    }
};

Create_tableContext.prototype.RIGHT_PAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.RIGHT_PAREN);
    } else {
        return this.getToken(PlSqlParser.RIGHT_PAREN, i);
    }
};


Create_tableContext.prototype.SEMICOLON = function() {
    return this.getToken(PlSqlParser.SEMICOLON, 0);
};

Create_tableContext.prototype.GLOBAL = function() {
    return this.getToken(PlSqlParser.GLOBAL, 0);
};

Create_tableContext.prototype.TEMPORARY = function() {
    return this.getToken(PlSqlParser.TEMPORARY, 0);
};

Create_tableContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Create_tableContext.prototype.COMMIT = function() {
    return this.getToken(PlSqlParser.COMMIT, 0);
};

Create_tableContext.prototype.ROWS = function() {
    return this.getToken(PlSqlParser.ROWS, 0);
};

Create_tableContext.prototype.SEGMENT = function() {
    return this.getToken(PlSqlParser.SEGMENT, 0);
};

Create_tableContext.prototype.CREATION = function() {
    return this.getToken(PlSqlParser.CREATION, 0);
};

Create_tableContext.prototype.PCTFREE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PCTFREE);
    } else {
        return this.getToken(PlSqlParser.PCTFREE, i);
    }
};


Create_tableContext.prototype.PCTUSED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PCTUSED);
    } else {
        return this.getToken(PlSqlParser.PCTUSED, i);
    }
};


Create_tableContext.prototype.INITRANS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.INITRANS);
    } else {
        return this.getToken(PlSqlParser.INITRANS, i);
    }
};


Create_tableContext.prototype.STORAGE = function() {
    return this.getToken(PlSqlParser.STORAGE, 0);
};

Create_tableContext.prototype.TABLESPACE = function() {
    return this.getToken(PlSqlParser.TABLESPACE, 0);
};

Create_tableContext.prototype.COMPRESS = function() {
    return this.getToken(PlSqlParser.COMPRESS, 0);
};

Create_tableContext.prototype.NOCOMPRESS = function() {
    return this.getToken(PlSqlParser.NOCOMPRESS, 0);
};

Create_tableContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

Create_tableContext.prototype.PRESERVE = function() {
    return this.getToken(PlSqlParser.PRESERVE, 0);
};

Create_tableContext.prototype.IMMEDIATE = function() {
    return this.getToken(PlSqlParser.IMMEDIATE, 0);
};

Create_tableContext.prototype.DEFERRED = function() {
    return this.getToken(PlSqlParser.DEFERRED, 0);
};

Create_tableContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(PlSqlParser.UNSIGNED_INTEGER, i);
    }
};


Create_tableContext.prototype.REGULAR_ID = function() {
    return this.getToken(PlSqlParser.REGULAR_ID, 0);
};

Create_tableContext.prototype.LOGGING = function() {
    return this.getToken(PlSqlParser.LOGGING, 0);
};

Create_tableContext.prototype.NOLOGGING = function() {
    return this.getToken(PlSqlParser.NOLOGGING, 0);
};

Create_tableContext.prototype.FILESYSTEM_LIKE_LOGGING = function() {
    return this.getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0);
};

Create_tableContext.prototype.INITIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.INITIAL);
    } else {
        return this.getToken(PlSqlParser.INITIAL, i);
    }
};


Create_tableContext.prototype.NEXT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NEXT);
    } else {
        return this.getToken(PlSqlParser.NEXT, i);
    }
};


Create_tableContext.prototype.MINEXTENTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.MINEXTENTS);
    } else {
        return this.getToken(PlSqlParser.MINEXTENTS, i);
    }
};


Create_tableContext.prototype.PCTINCREASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PCTINCREASE);
    } else {
        return this.getToken(PlSqlParser.PCTINCREASE, i);
    }
};


Create_tableContext.prototype.FREELISTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.FREELISTS);
    } else {
        return this.getToken(PlSqlParser.FREELISTS, i);
    }
};


Create_tableContext.prototype.FREELIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.FREELIST);
    } else {
        return this.getToken(PlSqlParser.FREELIST, i);
    }
};


Create_tableContext.prototype.GROUPS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.GROUPS);
    } else {
        return this.getToken(PlSqlParser.GROUPS, i);
    }
};


Create_tableContext.prototype.OPTIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OPTIMAL);
    } else {
        return this.getToken(PlSqlParser.OPTIMAL, i);
    }
};


Create_tableContext.prototype.BUFFER_POOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.BUFFER_POOL);
    } else {
        return this.getToken(PlSqlParser.BUFFER_POOL, i);
    }
};


Create_tableContext.prototype.FLASH_CACHE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.FLASH_CACHE);
    } else {
        return this.getToken(PlSqlParser.FLASH_CACHE, i);
    }
};


Create_tableContext.prototype.ENCRYPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ENCRYPT);
    } else {
        return this.getToken(PlSqlParser.ENCRYPT, i);
    }
};


Create_tableContext.prototype.BASIC = function() {
    return this.getToken(PlSqlParser.BASIC, 0);
};

Create_tableContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Create_tableContext.prototype.size_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Size_clauseContext);
    } else {
        return this.getTypedRuleContext(Size_clauseContext,i);
    }
};

Create_tableContext.prototype.KEEP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.KEEP);
    } else {
        return this.getToken(PlSqlParser.KEEP, i);
    }
};


Create_tableContext.prototype.RECYCLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.RECYCLE);
    } else {
        return this.getToken(PlSqlParser.RECYCLE, i);
    }
};


Create_tableContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.DEFAULT);
    } else {
        return this.getToken(PlSqlParser.DEFAULT, i);
    }
};


Create_tableContext.prototype.NONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NONE);
    } else {
        return this.getToken(PlSqlParser.NONE, i);
    }
};


Create_tableContext.prototype.UNLIMITED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.UNLIMITED);
    } else {
        return this.getToken(PlSqlParser.UNLIMITED, i);
    }
};


Create_tableContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NULL);
    } else {
        return this.getToken(PlSqlParser.NULL, i);
    }
};


Create_tableContext.prototype.OLTP = function() {
    return this.getToken(PlSqlParser.OLTP, 0);
};

Create_tableContext.prototype.QUERY = function() {
    return this.getToken(PlSqlParser.QUERY, 0);
};

Create_tableContext.prototype.ARCHIVE = function() {
    return this.getToken(PlSqlParser.ARCHIVE, 0);
};

Create_tableContext.prototype.LOW = function() {
    return this.getToken(PlSqlParser.LOW, 0);
};

Create_tableContext.prototype.HIGH = function() {
    return this.getToken(PlSqlParser.HIGH, 0);
};

Create_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_table(this);
	}
};

Create_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_table(this);
	}
};




PlSqlParser.Create_tableContext = Create_tableContext;

PlSqlParser.prototype.create_table = function() {

    var localctx = new Create_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, PlSqlParser.RULE_create_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2062;
        this.match(PlSqlParser.CREATE);
        this.state = 2065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.GLOBAL) {
            this.state = 2063;
            this.match(PlSqlParser.GLOBAL);
            this.state = 2064;
            this.match(PlSqlParser.TEMPORARY);
        }

        this.state = 2067;
        this.match(PlSqlParser.TABLE);
        this.state = 2068;
        this.tableview_name();
        this.state = 2069;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2070;
        this.column_name();
        this.state = 2071;
        this.datatype();
        this.state = 2078;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2072;
            this.match(PlSqlParser.COMMA);
            this.state = 2073;
            this.column_name();
            this.state = 2074;
            this.datatype();
            this.state = 2080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2081;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 2086;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ON) {
            this.state = 2082;
            this.match(PlSqlParser.ON);
            this.state = 2083;
            this.match(PlSqlParser.COMMIT);
            this.state = 2084;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DELETE || _la===PlSqlParser.PRESERVE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2085;
            this.match(PlSqlParser.ROWS);
        }

        this.state = 2091;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.SEGMENT) {
            this.state = 2088;
            this.match(PlSqlParser.SEGMENT);
            this.state = 2089;
            this.match(PlSqlParser.CREATION);
            this.state = 2090;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DEFERRED || _la===PlSqlParser.IMMEDIATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2101;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.INITRANS || _la===PlSqlParser.PCTFREE || _la===PlSqlParser.PCTUSED) {
            this.state = 2099;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.PCTFREE:
                this.state = 2093;
                this.match(PlSqlParser.PCTFREE);
                this.state = 2094;
                localctx.pctfree = this.match(PlSqlParser.UNSIGNED_INTEGER);
                break;
            case PlSqlParser.PCTUSED:
                this.state = 2095;
                this.match(PlSqlParser.PCTUSED);
                this.state = 2096;
                localctx.pctused = this.match(PlSqlParser.UNSIGNED_INTEGER);
                break;
            case PlSqlParser.INITRANS:
                this.state = 2097;
                this.match(PlSqlParser.INITRANS);
                this.state = 2098;
                localctx.inittrans = this.match(PlSqlParser.UNSIGNED_INTEGER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2134;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.STORAGE) {
            this.state = 2104;
            this.match(PlSqlParser.STORAGE);
            this.state = 2105;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2129; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2129;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.INITIAL:
                    this.state = 2106;
                    this.match(PlSqlParser.INITIAL);
                    this.state = 2107;
                    localctx.initial = this.size_clause();
                    break;
                case PlSqlParser.NEXT:
                    this.state = 2108;
                    this.match(PlSqlParser.NEXT);
                    this.state = 2109;
                    localctx.next = this.size_clause();
                    break;
                case PlSqlParser.MINEXTENTS:
                    this.state = 2110;
                    this.match(PlSqlParser.MINEXTENTS);
                    this.state = 2111;
                    localctx.minextents = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.UNLIMITED || _la===PlSqlParser.UNSIGNED_INTEGER)) {
                        localctx.minextents = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case PlSqlParser.PCTINCREASE:
                    this.state = 2112;
                    this.match(PlSqlParser.PCTINCREASE);
                    this.state = 2113;
                    localctx.pctincrease = this.match(PlSqlParser.UNSIGNED_INTEGER);
                    break;
                case PlSqlParser.FREELISTS:
                    this.state = 2114;
                    this.match(PlSqlParser.FREELISTS);
                    this.state = 2115;
                    localctx.freelists = this.match(PlSqlParser.UNSIGNED_INTEGER);
                    break;
                case PlSqlParser.FREELIST:
                    this.state = 2116;
                    this.match(PlSqlParser.FREELIST);
                    this.state = 2117;
                    this.match(PlSqlParser.GROUPS);
                    this.state = 2118;
                    localctx.freelist_groups = this.match(PlSqlParser.UNSIGNED_INTEGER);
                    break;
                case PlSqlParser.OPTIMAL:
                    this.state = 2119;
                    this.match(PlSqlParser.OPTIMAL);
                    this.state = 2122;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case PlSqlParser.UNSIGNED_INTEGER:
                        this.state = 2120;
                        this.size_clause();
                        break;
                    case PlSqlParser.NULL:
                        this.state = 2121;
                        this.match(PlSqlParser.NULL);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case PlSqlParser.BUFFER_POOL:
                    this.state = 2124;
                    this.match(PlSqlParser.BUFFER_POOL);
                    this.state = 2125;
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.KEEP || _la===PlSqlParser.RECYCLE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case PlSqlParser.FLASH_CACHE:
                    this.state = 2126;
                    this.match(PlSqlParser.FLASH_CACHE);
                    this.state = 2127;
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.KEEP || _la===PlSqlParser.NONE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case PlSqlParser.ENCRYPT:
                    this.state = 2128;
                    this.match(PlSqlParser.ENCRYPT);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2131; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlSqlParser.BUFFER_POOL || _la===PlSqlParser.ENCRYPT || _la===PlSqlParser.FLASH_CACHE || ((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (PlSqlParser.FREELIST - 161)) | (1 << (PlSqlParser.FREELISTS - 161)) | (1 << (PlSqlParser.INITIAL - 161)))) !== 0) || _la===PlSqlParser.MINEXTENTS || _la===PlSqlParser.NEXT || _la===PlSqlParser.OPTIMAL || _la===PlSqlParser.PCTINCREASE);
            this.state = 2133;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 2138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.TABLESPACE) {
            this.state = 2136;
            this.match(PlSqlParser.TABLESPACE);
            this.state = 2137;
            localctx.tablespace_name = this.match(PlSqlParser.REGULAR_ID);
        }

        this.state = 2141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FILESYSTEM_LIKE_LOGGING || _la===PlSqlParser.LOGGING || _la===PlSqlParser.NOLOGGING) {
            this.state = 2140;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FILESYSTEM_LIKE_LOGGING || _la===PlSqlParser.LOGGING || _la===PlSqlParser.NOLOGGING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2156;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.COMPRESS:
        	this.state = 2143;
        	this.match(PlSqlParser.COMPRESS);
        	this.state = 2153;
        	this._errHandler.sync(this);
        	switch (this._input.LA(1)) {
        	case PlSqlParser.BASIC:
        		this.state = 2144;
        		this.match(PlSqlParser.BASIC);
        		break;
        	case PlSqlParser.FOR:
        		this.state = 2145;
        		this.match(PlSqlParser.FOR);
        		this.state = 2151;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case PlSqlParser.OLTP:
        		    this.state = 2146;
        		    this.match(PlSqlParser.OLTP);
        		    break;
        		case PlSqlParser.ARCHIVE:
        		case PlSqlParser.QUERY:
        		    this.state = 2147;
        		    _la = this._input.LA(1);
        		    if(!(_la===PlSqlParser.ARCHIVE || _la===PlSqlParser.QUERY)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    this.state = 2149;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===PlSqlParser.HIGH || _la===PlSqlParser.LOW) {
        		        this.state = 2148;
        		        _la = this._input.LA(1);
        		        if(!(_la===PlSqlParser.HIGH || _la===PlSqlParser.LOW)) {
        		        this._errHandler.recoverInline(this);
        		        }
        		        else {
        		        	this._errHandler.reportMatch(this);
        		            this.consume();
        		        }
        		    }

        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	case PlSqlParser.SEMICOLON:
        		break;
        	default:
        		break;
        	}
        	break;
        case PlSqlParser.NOCOMPRESS:
        	this.state = 2155;
        	this.match(PlSqlParser.NOCOMPRESS);
        	break;
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
        this.state = 2158;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Size_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_size_clause;
    return this;
}

Size_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Size_clauseContext.prototype.constructor = Size_clauseContext;

Size_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PlSqlParser.UNSIGNED_INTEGER, 0);
};

Size_clauseContext.prototype.REGULAR_ID = function() {
    return this.getToken(PlSqlParser.REGULAR_ID, 0);
};

Size_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSize_clause(this);
	}
};

Size_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSize_clause(this);
	}
};




PlSqlParser.Size_clauseContext = Size_clauseContext;

PlSqlParser.prototype.size_clause = function() {

    var localctx = new Size_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, PlSqlParser.RULE_size_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2160;
        this.match(PlSqlParser.UNSIGNED_INTEGER);
        this.state = 2161;
        this.match(PlSqlParser.REGULAR_ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_table;
    return this;
}

Drop_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_tableContext.prototype.constructor = Drop_tableContext;

Drop_tableContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_tableContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Drop_tableContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Drop_tableContext.prototype.SEMICOLON = function() {
    return this.getToken(PlSqlParser.SEMICOLON, 0);
};

Drop_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_table(this);
	}
};

Drop_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_table(this);
	}
};




PlSqlParser.Drop_tableContext = Drop_tableContext;

PlSqlParser.prototype.drop_table = function() {

    var localctx = new Drop_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, PlSqlParser.RULE_drop_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163;
        this.match(PlSqlParser.DROP);
        this.state = 2164;
        this.match(PlSqlParser.TABLE);
        this.state = 2165;
        this.tableview_name();
        this.state = 2166;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comment_on_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_comment_on_column;
    return this;
}

Comment_on_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_on_columnContext.prototype.constructor = Comment_on_columnContext;

Comment_on_columnContext.prototype.COMMENT = function() {
    return this.getToken(PlSqlParser.COMMENT, 0);
};

Comment_on_columnContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Comment_on_columnContext.prototype.COLUMN = function() {
    return this.getToken(PlSqlParser.COLUMN, 0);
};

Comment_on_columnContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Comment_on_columnContext.prototype.PERIOD = function() {
    return this.getToken(PlSqlParser.PERIOD, 0);
};

Comment_on_columnContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Comment_on_columnContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Comment_on_columnContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Comment_on_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterComment_on_column(this);
	}
};

Comment_on_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitComment_on_column(this);
	}
};




PlSqlParser.Comment_on_columnContext = Comment_on_columnContext;

PlSqlParser.prototype.comment_on_column = function() {

    var localctx = new Comment_on_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, PlSqlParser.RULE_comment_on_column);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2168;
        this.match(PlSqlParser.COMMENT);
        this.state = 2169;
        this.match(PlSqlParser.ON);
        this.state = 2170;
        this.match(PlSqlParser.COLUMN);
        this.state = 2171;
        this.tableview_name();
        this.state = 2172;
        this.match(PlSqlParser.PERIOD);
        this.state = 2173;
        this.column_name();
        this.state = 2174;
        this.match(PlSqlParser.IS);
        this.state = 2175;
        this.quoted_string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_synonymContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_create_synonym;
    return this;
}

Create_synonymContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_synonymContext.prototype.constructor = Create_synonymContext;

Create_synonymContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

Create_synonymContext.prototype.PUBLIC = function() {
    return this.getToken(PlSqlParser.PUBLIC, 0);
};

Create_synonymContext.prototype.SYNONYM = function() {
    return this.getToken(PlSqlParser.SYNONYM, 0);
};

Create_synonymContext.prototype.synonym_name = function() {
    return this.getTypedRuleContext(Synonym_nameContext,0);
};

Create_synonymContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Create_synonymContext.prototype.schema_object_name = function() {
    return this.getTypedRuleContext(Schema_object_nameContext,0);
};

Create_synonymContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Create_synonymContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Create_synonymContext.prototype.schema_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Schema_nameContext);
    } else {
        return this.getTypedRuleContext(Schema_nameContext,i);
    }
};

Create_synonymContext.prototype.PERIOD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PERIOD);
    } else {
        return this.getToken(PlSqlParser.PERIOD, i);
    }
};


Create_synonymContext.prototype.AT_SIGN = function() {
    return this.getToken(PlSqlParser.AT_SIGN, 0);
};

Create_synonymContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Create_synonymContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCreate_synonym(this);
	}
};

Create_synonymContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCreate_synonym(this);
	}
};




PlSqlParser.Create_synonymContext = Create_synonymContext;

PlSqlParser.prototype.create_synonym = function() {

    var localctx = new Create_synonymContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, PlSqlParser.RULE_create_synonym);
    var _la = 0; // Token type
    try {
        this.state = 2219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2177;
            this.match(PlSqlParser.CREATE);
            this.state = 2180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.OR) {
                this.state = 2178;
                this.match(PlSqlParser.OR);
                this.state = 2179;
                this.match(PlSqlParser.REPLACE);
            }

            this.state = 2182;
            this.match(PlSqlParser.PUBLIC);
            this.state = 2183;
            this.match(PlSqlParser.SYNONYM);
            this.state = 2184;
            this.synonym_name();
            this.state = 2185;
            this.match(PlSqlParser.FOR);
            this.state = 2189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
            if(la_===1) {
                this.state = 2186;
                this.schema_name();
                this.state = 2187;
                this.match(PlSqlParser.PERIOD);

            }
            this.state = 2191;
            this.schema_object_name();
            this.state = 2194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.AT_SIGN) {
                this.state = 2192;
                this.match(PlSqlParser.AT_SIGN);
                this.state = 2193;
                this.link_name();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2196;
            this.match(PlSqlParser.CREATE);
            this.state = 2199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.OR) {
                this.state = 2197;
                this.match(PlSqlParser.OR);
                this.state = 2198;
                this.match(PlSqlParser.REPLACE);
            }

            this.state = 2201;
            this.match(PlSqlParser.SYNONYM);
            this.state = 2205;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
            if(la_===1) {
                this.state = 2202;
                this.schema_name();
                this.state = 2203;
                this.match(PlSqlParser.PERIOD);

            }
            this.state = 2207;
            this.synonym_name();
            this.state = 2208;
            this.match(PlSqlParser.FOR);
            this.state = 2212;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
            if(la_===1) {
                this.state = 2209;
                this.schema_name();
                this.state = 2210;
                this.match(PlSqlParser.PERIOD);

            }
            this.state = 2214;
            this.schema_object_name();
            this.state = 2217;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.AT_SIGN) {
                this.state = 2215;
                this.match(PlSqlParser.AT_SIGN);
                this.state = 2216;
                this.link_name();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comment_on_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_comment_on_table;
    return this;
}

Comment_on_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comment_on_tableContext.prototype.constructor = Comment_on_tableContext;

Comment_on_tableContext.prototype.COMMENT = function() {
    return this.getToken(PlSqlParser.COMMENT, 0);
};

Comment_on_tableContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Comment_on_tableContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Comment_on_tableContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Comment_on_tableContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Comment_on_tableContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Comment_on_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterComment_on_table(this);
	}
};

Comment_on_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitComment_on_table(this);
	}
};




PlSqlParser.Comment_on_tableContext = Comment_on_tableContext;

PlSqlParser.prototype.comment_on_table = function() {

    var localctx = new Comment_on_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, PlSqlParser.RULE_comment_on_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2221;
        this.match(PlSqlParser.COMMENT);
        this.state = 2222;
        this.match(PlSqlParser.ON);
        this.state = 2223;
        this.match(PlSqlParser.TABLE);
        this.state = 2224;
        this.tableview_name();
        this.state = 2225;
        this.match(PlSqlParser.IS);
        this.state = 2226;
        this.quoted_string();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_alter_table;
    return this;
}

Alter_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_tableContext.prototype.constructor = Alter_tableContext;

Alter_tableContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

Alter_tableContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Alter_tableContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Alter_tableContext.prototype.add_constraint = function() {
    return this.getTypedRuleContext(Add_constraintContext,0);
};

Alter_tableContext.prototype.drop_constraint = function() {
    return this.getTypedRuleContext(Drop_constraintContext,0);
};

Alter_tableContext.prototype.enable_constraint = function() {
    return this.getTypedRuleContext(Enable_constraintContext,0);
};

Alter_tableContext.prototype.disable_constraint = function() {
    return this.getTypedRuleContext(Disable_constraintContext,0);
};

Alter_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAlter_table(this);
	}
};

Alter_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAlter_table(this);
	}
};




PlSqlParser.Alter_tableContext = Alter_tableContext;

PlSqlParser.prototype.alter_table = function() {

    var localctx = new Alter_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, PlSqlParser.RULE_alter_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2228;
        this.match(PlSqlParser.ALTER);
        this.state = 2229;
        this.match(PlSqlParser.TABLE);
        this.state = 2230;
        this.tableview_name();
        this.state = 2235;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
            this.state = 2231;
            this.add_constraint();
            break;
        case PlSqlParser.DROP:
            this.state = 2232;
            this.drop_constraint();
            break;
        case PlSqlParser.ENABLE:
            this.state = 2233;
            this.enable_constraint();
            break;
        case PlSqlParser.DISABLE:
            this.state = 2234;
            this.disable_constraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Add_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_add_constraint;
    return this;
}

Add_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Add_constraintContext.prototype.constructor = Add_constraintContext;

Add_constraintContext.prototype.ADD = function() {
    return this.getToken(PlSqlParser.ADD, 0);
};

Add_constraintContext.prototype.primary_key_clause = function() {
    return this.getTypedRuleContext(Primary_key_clauseContext,0);
};

Add_constraintContext.prototype.foreign_key_clause = function() {
    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
};

Add_constraintContext.prototype.unique_key_clause = function() {
    return this.getTypedRuleContext(Unique_key_clauseContext,0);
};

Add_constraintContext.prototype.check_constraint = function() {
    return this.getTypedRuleContext(Check_constraintContext,0);
};

Add_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Add_constraintContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Add_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAdd_constraint(this);
	}
};

Add_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAdd_constraint(this);
	}
};




PlSqlParser.Add_constraintContext = Add_constraintContext;

PlSqlParser.prototype.add_constraint = function() {

    var localctx = new Add_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, PlSqlParser.RULE_add_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2237;
        this.match(PlSqlParser.ADD);
        this.state = 2240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.CONSTRAINT) {
            this.state = 2238;
            this.match(PlSqlParser.CONSTRAINT);
            this.state = 2239;
            this.constraint_name();
        }

        this.state = 2246;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.PRIMARY:
            this.state = 2242;
            this.primary_key_clause();
            break;
        case PlSqlParser.FOREIGN:
            this.state = 2243;
            this.foreign_key_clause();
            break;
        case PlSqlParser.UNIQUE:
            this.state = 2244;
            this.unique_key_clause();
            break;
        case PlSqlParser.CHECK:
            this.state = 2245;
            this.check_constraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Check_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_check_constraint;
    return this;
}

Check_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Check_constraintContext.prototype.constructor = Check_constraintContext;

Check_constraintContext.prototype.CHECK = function() {
    return this.getToken(PlSqlParser.CHECK, 0);
};

Check_constraintContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Check_constraintContext.prototype.DISABLE = function() {
    return this.getToken(PlSqlParser.DISABLE, 0);
};

Check_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCheck_constraint(this);
	}
};

Check_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCheck_constraint(this);
	}
};




PlSqlParser.Check_constraintContext = Check_constraintContext;

PlSqlParser.prototype.check_constraint = function() {

    var localctx = new Check_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, PlSqlParser.RULE_check_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        this.match(PlSqlParser.CHECK);
        this.state = 2249;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2250;
        this.condition();
        this.state = 2251;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 2253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DISABLE) {
            this.state = 2252;
            this.match(PlSqlParser.DISABLE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_drop_constraint;
    return this;
}

Drop_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_constraintContext.prototype.constructor = Drop_constraintContext;

Drop_constraintContext.prototype.DROP = function() {
    return this.getToken(PlSqlParser.DROP, 0);
};

Drop_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Drop_constraintContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Drop_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDrop_constraint(this);
	}
};

Drop_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDrop_constraint(this);
	}
};




PlSqlParser.Drop_constraintContext = Drop_constraintContext;

PlSqlParser.prototype.drop_constraint = function() {

    var localctx = new Drop_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, PlSqlParser.RULE_drop_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.match(PlSqlParser.DROP);
        this.state = 2256;
        this.match(PlSqlParser.CONSTRAINT);
        this.state = 2257;
        this.constraint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enable_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_enable_constraint;
    return this;
}

Enable_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enable_constraintContext.prototype.constructor = Enable_constraintContext;

Enable_constraintContext.prototype.ENABLE = function() {
    return this.getToken(PlSqlParser.ENABLE, 0);
};

Enable_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Enable_constraintContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Enable_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterEnable_constraint(this);
	}
};

Enable_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitEnable_constraint(this);
	}
};




PlSqlParser.Enable_constraintContext = Enable_constraintContext;

PlSqlParser.prototype.enable_constraint = function() {

    var localctx = new Enable_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, PlSqlParser.RULE_enable_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2259;
        this.match(PlSqlParser.ENABLE);
        this.state = 2260;
        this.match(PlSqlParser.CONSTRAINT);
        this.state = 2261;
        this.constraint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Disable_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_disable_constraint;
    return this;
}

Disable_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Disable_constraintContext.prototype.constructor = Disable_constraintContext;

Disable_constraintContext.prototype.DISABLE = function() {
    return this.getToken(PlSqlParser.DISABLE, 0);
};

Disable_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Disable_constraintContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Disable_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDisable_constraint(this);
	}
};

Disable_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDisable_constraint(this);
	}
};




PlSqlParser.Disable_constraintContext = Disable_constraintContext;

PlSqlParser.prototype.disable_constraint = function() {

    var localctx = new Disable_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, PlSqlParser.RULE_disable_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2263;
        this.match(PlSqlParser.DISABLE);
        this.state = 2264;
        this.match(PlSqlParser.CONSTRAINT);
        this.state = 2265;
        this.constraint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Foreign_key_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_foreign_key_clause;
    return this;
}

Foreign_key_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Foreign_key_clauseContext.prototype.constructor = Foreign_key_clauseContext;

Foreign_key_clauseContext.prototype.FOREIGN = function() {
    return this.getToken(PlSqlParser.FOREIGN, 0);
};

Foreign_key_clauseContext.prototype.KEY = function() {
    return this.getToken(PlSqlParser.KEY, 0);
};

Foreign_key_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(PlSqlParser.LEFT_PAREN, 0);
};

Foreign_key_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Foreign_key_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(PlSqlParser.RIGHT_PAREN, 0);
};

Foreign_key_clauseContext.prototype.references_clause = function() {
    return this.getTypedRuleContext(References_clauseContext,0);
};

Foreign_key_clauseContext.prototype.on_delete_clause = function() {
    return this.getTypedRuleContext(On_delete_clauseContext,0);
};

Foreign_key_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterForeign_key_clause(this);
	}
};

Foreign_key_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitForeign_key_clause(this);
	}
};




PlSqlParser.Foreign_key_clauseContext = Foreign_key_clauseContext;

PlSqlParser.prototype.foreign_key_clause = function() {

    var localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, PlSqlParser.RULE_foreign_key_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2267;
        this.match(PlSqlParser.FOREIGN);
        this.state = 2268;
        this.match(PlSqlParser.KEY);
        this.state = 2269;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2270;
        this.column_name();
        this.state = 2275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2271;
            this.match(PlSqlParser.COMMA);
            this.state = 2272;
            this.column_name();
            this.state = 2277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2278;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 2279;
        this.references_clause();
        this.state = 2281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ON) {
            this.state = 2280;
            this.on_delete_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function References_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_references_clause;
    return this;
}

References_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
References_clauseContext.prototype.constructor = References_clauseContext;

References_clauseContext.prototype.REFERENCES = function() {
    return this.getToken(PlSqlParser.REFERENCES, 0);
};

References_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

References_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(PlSqlParser.LEFT_PAREN, 0);
};

References_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

References_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(PlSqlParser.RIGHT_PAREN, 0);
};

References_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReferences_clause(this);
	}
};

References_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReferences_clause(this);
	}
};




PlSqlParser.References_clauseContext = References_clauseContext;

PlSqlParser.prototype.references_clause = function() {

    var localctx = new References_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, PlSqlParser.RULE_references_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2283;
        this.match(PlSqlParser.REFERENCES);
        this.state = 2284;
        this.tableview_name();
        this.state = 2285;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2286;
        this.column_name();
        this.state = 2291;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2287;
            this.match(PlSqlParser.COMMA);
            this.state = 2288;
            this.column_name();
            this.state = 2293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2294;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function On_delete_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_on_delete_clause;
    return this;
}

On_delete_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
On_delete_clauseContext.prototype.constructor = On_delete_clauseContext;

On_delete_clauseContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

On_delete_clauseContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

On_delete_clauseContext.prototype.CASCADE = function() {
    return this.getToken(PlSqlParser.CASCADE, 0);
};

On_delete_clauseContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

On_delete_clauseContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

On_delete_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOn_delete_clause(this);
	}
};

On_delete_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOn_delete_clause(this);
	}
};




PlSqlParser.On_delete_clauseContext = On_delete_clauseContext;

PlSqlParser.prototype.on_delete_clause = function() {

    var localctx = new On_delete_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, PlSqlParser.RULE_on_delete_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2296;
        this.match(PlSqlParser.ON);
        this.state = 2297;
        this.match(PlSqlParser.DELETE);
        this.state = 2301;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.CASCADE:
            this.state = 2298;
            this.match(PlSqlParser.CASCADE);
            break;
        case PlSqlParser.SET:
            this.state = 2299;
            this.match(PlSqlParser.SET);
            this.state = 2300;
            this.match(PlSqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unique_key_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unique_key_clause;
    return this;
}

Unique_key_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unique_key_clauseContext.prototype.constructor = Unique_key_clauseContext;

Unique_key_clauseContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Unique_key_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(PlSqlParser.LEFT_PAREN, 0);
};

Unique_key_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unique_key_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(PlSqlParser.RIGHT_PAREN, 0);
};

Unique_key_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnique_key_clause(this);
	}
};

Unique_key_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnique_key_clause(this);
	}
};




PlSqlParser.Unique_key_clauseContext = Unique_key_clauseContext;

PlSqlParser.prototype.unique_key_clause = function() {

    var localctx = new Unique_key_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, PlSqlParser.RULE_unique_key_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2303;
        this.match(PlSqlParser.UNIQUE);
        this.state = 2304;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2305;
        this.column_name();
        this.state = 2310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2306;
            this.match(PlSqlParser.COMMA);
            this.state = 2307;
            this.column_name();
            this.state = 2312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2313;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Primary_key_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_primary_key_clause;
    return this;
}

Primary_key_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_key_clauseContext.prototype.constructor = Primary_key_clauseContext;

Primary_key_clauseContext.prototype.PRIMARY = function() {
    return this.getToken(PlSqlParser.PRIMARY, 0);
};

Primary_key_clauseContext.prototype.KEY = function() {
    return this.getToken(PlSqlParser.KEY, 0);
};

Primary_key_clauseContext.prototype.LEFT_PAREN = function() {
    return this.getToken(PlSqlParser.LEFT_PAREN, 0);
};

Primary_key_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Primary_key_clauseContext.prototype.RIGHT_PAREN = function() {
    return this.getToken(PlSqlParser.RIGHT_PAREN, 0);
};

Primary_key_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPrimary_key_clause(this);
	}
};

Primary_key_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPrimary_key_clause(this);
	}
};




PlSqlParser.Primary_key_clauseContext = Primary_key_clauseContext;

PlSqlParser.prototype.primary_key_clause = function() {

    var localctx = new Primary_key_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, PlSqlParser.RULE_primary_key_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2315;
        this.match(PlSqlParser.PRIMARY);
        this.state = 2316;
        this.match(PlSqlParser.KEY);
        this.state = 2317;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2318;
        this.column_name();
        this.state = 2323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2319;
            this.match(PlSqlParser.COMMA);
            this.state = 2320;
            this.column_name();
            this.state = 2325;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2326;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Anonymous_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_anonymous_block;
    return this;
}

Anonymous_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Anonymous_blockContext.prototype.constructor = Anonymous_blockContext;

Anonymous_blockContext.prototype.BEGIN = function() {
    return this.getToken(PlSqlParser.BEGIN, 0);
};

Anonymous_blockContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Anonymous_blockContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Anonymous_blockContext.prototype.SEMICOLON = function() {
    return this.getToken(PlSqlParser.SEMICOLON, 0);
};

Anonymous_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAnonymous_block(this);
	}
};

Anonymous_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAnonymous_block(this);
	}
};




PlSqlParser.Anonymous_blockContext = Anonymous_blockContext;

PlSqlParser.prototype.anonymous_block = function() {

    var localctx = new Anonymous_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, PlSqlParser.RULE_anonymous_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2328;
        this.match(PlSqlParser.BEGIN);
        this.state = 2329;
        this.seq_of_statements();
        this.state = 2330;
        this.match(PlSqlParser.END);
        this.state = 2331;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Invoker_rights_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_invoker_rights_clause;
    return this;
}

Invoker_rights_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Invoker_rights_clauseContext.prototype.constructor = Invoker_rights_clauseContext;

Invoker_rights_clauseContext.prototype.AUTHID = function() {
    return this.getToken(PlSqlParser.AUTHID, 0);
};

Invoker_rights_clauseContext.prototype.CURRENT_USER = function() {
    return this.getToken(PlSqlParser.CURRENT_USER, 0);
};

Invoker_rights_clauseContext.prototype.DEFINER = function() {
    return this.getToken(PlSqlParser.DEFINER, 0);
};

Invoker_rights_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterInvoker_rights_clause(this);
	}
};

Invoker_rights_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitInvoker_rights_clause(this);
	}
};




PlSqlParser.Invoker_rights_clauseContext = Invoker_rights_clauseContext;

PlSqlParser.prototype.invoker_rights_clause = function() {

    var localctx = new Invoker_rights_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, PlSqlParser.RULE_invoker_rights_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2333;
        this.match(PlSqlParser.AUTHID);
        this.state = 2334;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CURRENT_USER || _la===PlSqlParser.DEFINER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compiler_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_compiler_parameters_clause;
    return this;
}

Compiler_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compiler_parameters_clauseContext.prototype.constructor = Compiler_parameters_clauseContext;

Compiler_parameters_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Compiler_parameters_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Compiler_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCompiler_parameters_clause(this);
	}
};

Compiler_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCompiler_parameters_clause(this);
	}
};




PlSqlParser.Compiler_parameters_clauseContext = Compiler_parameters_clauseContext;

PlSqlParser.prototype.compiler_parameters_clause = function() {

    var localctx = new Compiler_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, PlSqlParser.RULE_compiler_parameters_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2336;
        this.identifier();
        this.state = 2337;
        this.match(PlSqlParser.EQUALS_OP);
        this.state = 2338;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_call_spec;
    return this;
}

Call_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_specContext.prototype.constructor = Call_specContext;

Call_specContext.prototype.LANGUAGE = function() {
    return this.getToken(PlSqlParser.LANGUAGE, 0);
};

Call_specContext.prototype.java_spec = function() {
    return this.getTypedRuleContext(Java_specContext,0);
};

Call_specContext.prototype.c_spec = function() {
    return this.getTypedRuleContext(C_specContext,0);
};

Call_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCall_spec(this);
	}
};

Call_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCall_spec(this);
	}
};




PlSqlParser.Call_specContext = Call_specContext;

PlSqlParser.prototype.call_spec = function() {

    var localctx = new Call_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, PlSqlParser.RULE_call_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2340;
        this.match(PlSqlParser.LANGUAGE);
        this.state = 2343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.JAVA:
            this.state = 2341;
            this.java_spec();
            break;
        case PlSqlParser.C_LETTER:
            this.state = 2342;
            this.c_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Java_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_java_spec;
    return this;
}

Java_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Java_specContext.prototype.constructor = Java_specContext;

Java_specContext.prototype.JAVA = function() {
    return this.getToken(PlSqlParser.JAVA, 0);
};

Java_specContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Java_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(PlSqlParser.CHAR_STRING, 0);
};

Java_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterJava_spec(this);
	}
};

Java_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitJava_spec(this);
	}
};




PlSqlParser.Java_specContext = Java_specContext;

PlSqlParser.prototype.java_spec = function() {

    var localctx = new Java_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, PlSqlParser.RULE_java_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2345;
        this.match(PlSqlParser.JAVA);
        this.state = 2346;
        this.match(PlSqlParser.NAME);
        this.state = 2347;
        this.match(PlSqlParser.CHAR_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_c_spec;
    return this;
}

C_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_specContext.prototype.constructor = C_specContext;

C_specContext.prototype.C_LETTER = function() {
    return this.getToken(PlSqlParser.C_LETTER, 0);
};

C_specContext.prototype.LIBRARY = function() {
    return this.getToken(PlSqlParser.LIBRARY, 0);
};

C_specContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

C_specContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

C_specContext.prototype.CHAR_STRING = function() {
    return this.getToken(PlSqlParser.CHAR_STRING, 0);
};

C_specContext.prototype.c_agent_in_clause = function() {
    return this.getTypedRuleContext(C_agent_in_clauseContext,0);
};

C_specContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

C_specContext.prototype.CONTEXT = function() {
    return this.getToken(PlSqlParser.CONTEXT, 0);
};

C_specContext.prototype.c_parameters_clause = function() {
    return this.getTypedRuleContext(C_parameters_clauseContext,0);
};

C_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterC_spec(this);
	}
};

C_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitC_spec(this);
	}
};




PlSqlParser.C_specContext = C_specContext;

PlSqlParser.prototype.c_spec = function() {

    var localctx = new C_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, PlSqlParser.RULE_c_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2349;
        this.match(PlSqlParser.C_LETTER);
        this.state = 2352;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NAME) {
            this.state = 2350;
            this.match(PlSqlParser.NAME);
            this.state = 2351;
            this.match(PlSqlParser.CHAR_STRING);
        }

        this.state = 2354;
        this.match(PlSqlParser.LIBRARY);
        this.state = 2355;
        this.identifier();
        this.state = 2357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AGENT) {
            this.state = 2356;
            this.c_agent_in_clause();
        }

        this.state = 2361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WITH) {
            this.state = 2359;
            this.match(PlSqlParser.WITH);
            this.state = 2360;
            this.match(PlSqlParser.CONTEXT);
        }

        this.state = 2364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PARAMETERS) {
            this.state = 2363;
            this.c_parameters_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_agent_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_c_agent_in_clause;
    return this;
}

C_agent_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_agent_in_clauseContext.prototype.constructor = C_agent_in_clauseContext;

C_agent_in_clauseContext.prototype.AGENT = function() {
    return this.getToken(PlSqlParser.AGENT, 0);
};

C_agent_in_clauseContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

C_agent_in_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

C_agent_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterC_agent_in_clause(this);
	}
};

C_agent_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitC_agent_in_clause(this);
	}
};




PlSqlParser.C_agent_in_clauseContext = C_agent_in_clauseContext;

PlSqlParser.prototype.c_agent_in_clause = function() {

    var localctx = new C_agent_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, PlSqlParser.RULE_c_agent_in_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2366;
        this.match(PlSqlParser.AGENT);
        this.state = 2367;
        this.match(PlSqlParser.IN);
        this.state = 2368;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2369;
        this.expressions();
        this.state = 2370;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function C_parameters_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_c_parameters_clause;
    return this;
}

C_parameters_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
C_parameters_clauseContext.prototype.constructor = C_parameters_clauseContext;

C_parameters_clauseContext.prototype.PARAMETERS = function() {
    return this.getToken(PlSqlParser.PARAMETERS, 0);
};

C_parameters_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

C_parameters_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterC_parameters_clause(this);
	}
};

C_parameters_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitC_parameters_clause(this);
	}
};




PlSqlParser.C_parameters_clauseContext = C_parameters_clauseContext;

PlSqlParser.prototype.c_parameters_clause = function() {

    var localctx = new C_parameters_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, PlSqlParser.RULE_c_parameters_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2372;
        this.match(PlSqlParser.PARAMETERS);
        this.state = 2373;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2378;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NOT:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 2374;
            this.expressions();
            break;
        case PlSqlParser.PERIOD:
            this.state = 2375;
            this.match(PlSqlParser.PERIOD);
            this.state = 2376;
            this.match(PlSqlParser.PERIOD);
            this.state = 2377;
            this.match(PlSqlParser.PERIOD);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2380;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

ParameterContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

ParameterContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

ParameterContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.IN);
    } else {
        return this.getToken(PlSqlParser.IN, i);
    }
};


ParameterContext.prototype.OUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OUT);
    } else {
        return this.getToken(PlSqlParser.OUT, i);
    }
};


ParameterContext.prototype.INOUT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.INOUT);
    } else {
        return this.getToken(PlSqlParser.INOUT, i);
    }
};


ParameterContext.prototype.NOCOPY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NOCOPY);
    } else {
        return this.getToken(PlSqlParser.NOCOPY, i);
    }
};


ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitParameter(this);
	}
};




PlSqlParser.ParameterContext = ParameterContext;

PlSqlParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, PlSqlParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2382;
        this.parameter_name();
        this.state = 2386;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2383;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.IN || _la===PlSqlParser.INOUT || _la===PlSqlParser.NOCOPY || _la===PlSqlParser.OUT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 2388;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
        }

        this.state = 2390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2389;
            this.type_spec();
        }

        this.state = 2393;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.ASSIGN_OP) {
            this.state = 2392;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Default_value_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_default_value_part;
    return this;
}

Default_value_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_value_partContext.prototype.constructor = Default_value_partContext;

Default_value_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Default_value_partContext.prototype.ASSIGN_OP = function() {
    return this.getToken(PlSqlParser.ASSIGN_OP, 0);
};

Default_value_partContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

Default_value_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDefault_value_part(this);
	}
};

Default_value_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDefault_value_part(this);
	}
};




PlSqlParser.Default_value_partContext = Default_value_partContext;

PlSqlParser.prototype.default_value_part = function() {

    var localctx = new Default_value_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, PlSqlParser.RULE_default_value_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2395;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.ASSIGN_OP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2396;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_declare_spec;
    return this;
}

Declare_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_specContext.prototype.constructor = Declare_specContext;

Declare_specContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Declare_specContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Declare_specContext.prototype.cursor_declaration = function() {
    return this.getTypedRuleContext(Cursor_declarationContext,0);
};

Declare_specContext.prototype.exception_declaration = function() {
    return this.getTypedRuleContext(Exception_declarationContext,0);
};

Declare_specContext.prototype.pragma_declaration = function() {
    return this.getTypedRuleContext(Pragma_declarationContext,0);
};

Declare_specContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Declare_specContext.prototype.procedure_spec = function() {
    return this.getTypedRuleContext(Procedure_specContext,0);
};

Declare_specContext.prototype.function_spec = function() {
    return this.getTypedRuleContext(Function_specContext,0);
};

Declare_specContext.prototype.procedure_body = function() {
    return this.getTypedRuleContext(Procedure_bodyContext,0);
};

Declare_specContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Declare_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDeclare_spec(this);
	}
};

Declare_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDeclare_spec(this);
	}
};




PlSqlParser.Declare_specContext = Declare_specContext;

PlSqlParser.prototype.declare_spec = function() {

    var localctx = new Declare_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, PlSqlParser.RULE_declare_spec);
    try {
        this.state = 2408;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2398;
            this.variable_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2399;
            this.subtype_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2400;
            this.cursor_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2401;
            this.exception_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2402;
            this.pragma_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2403;
            this.type_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2404;
            this.procedure_spec();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2405;
            this.function_spec();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2406;
            this.procedure_body();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2407;
            this.function_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Variable_declarationContext.prototype.CONSTANT = function() {
    return this.getToken(PlSqlParser.CONSTANT, 0);
};

Variable_declarationContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Variable_declarationContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Variable_declarationContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitVariable_declaration(this);
	}
};




PlSqlParser.Variable_declarationContext = Variable_declarationContext;

PlSqlParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, PlSqlParser.RULE_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2410;
        this.identifier();
        this.state = 2412;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        if(la_===1) {
            this.state = 2411;
            this.match(PlSqlParser.CONSTANT);

        }
        this.state = 2414;
        this.type_spec();
        this.state = 2417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOT) {
            this.state = 2415;
            this.match(PlSqlParser.NOT);
            this.state = 2416;
            this.match(PlSqlParser.NULL);
        }

        this.state = 2420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.ASSIGN_OP) {
            this.state = 2419;
            this.default_value_part();
        }

        this.state = 2422;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subtype_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subtype_declaration;
    return this;
}

Subtype_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subtype_declarationContext.prototype.constructor = Subtype_declarationContext;

Subtype_declarationContext.prototype.SUBTYPE = function() {
    return this.getToken(PlSqlParser.SUBTYPE, 0);
};

Subtype_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Subtype_declarationContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Subtype_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Subtype_declarationContext.prototype.RANGE = function() {
    return this.getToken(PlSqlParser.RANGE, 0);
};

Subtype_declarationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Subtype_declarationContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Subtype_declarationContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Subtype_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubtype_declaration(this);
	}
};

Subtype_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubtype_declaration(this);
	}
};




PlSqlParser.Subtype_declarationContext = Subtype_declarationContext;

PlSqlParser.prototype.subtype_declaration = function() {

    var localctx = new Subtype_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, PlSqlParser.RULE_subtype_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2424;
        this.match(PlSqlParser.SUBTYPE);
        this.state = 2425;
        this.identifier();
        this.state = 2426;
        this.match(PlSqlParser.IS);
        this.state = 2427;
        this.type_spec();
        this.state = 2433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RANGE) {
            this.state = 2428;
            this.match(PlSqlParser.RANGE);
            this.state = 2429;
            this.expression();
            this.state = 2430;
            this.match(PlSqlParser.DOUBLE_PERIOD);
            this.state = 2431;
            this.expression();
        }

        this.state = 2437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOT) {
            this.state = 2435;
            this.match(PlSqlParser.NOT);
            this.state = 2436;
            this.match(PlSqlParser.NULL);
        }

        this.state = 2439;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cursor_declaration;
    return this;
}

Cursor_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_declarationContext.prototype.constructor = Cursor_declarationContext;

Cursor_declarationContext.prototype.CURSOR = function() {
    return this.getToken(PlSqlParser.CURSOR, 0);
};

Cursor_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Cursor_declarationContext.prototype.parameter_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parameter_specContext);
    } else {
        return this.getTypedRuleContext(Parameter_specContext,i);
    }
};

Cursor_declarationContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Cursor_declarationContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Cursor_declarationContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Cursor_declarationContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCursor_declaration(this);
	}
};

Cursor_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCursor_declaration(this);
	}
};




PlSqlParser.Cursor_declarationContext = Cursor_declarationContext;

PlSqlParser.prototype.cursor_declaration = function() {

    var localctx = new Cursor_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, PlSqlParser.RULE_cursor_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2441;
        this.match(PlSqlParser.CURSOR);
        this.state = 2442;
        this.identifier();
        this.state = 2454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 2443;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2444;
            this.parameter_spec();
            this.state = 2449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 2445;
                this.match(PlSqlParser.COMMA);
                this.state = 2446;
                this.parameter_spec();
                this.state = 2451;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2452;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 2458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RETURN) {
            this.state = 2456;
            this.match(PlSqlParser.RETURN);
            this.state = 2457;
            this.type_spec();
        }

        this.state = 2462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.IS) {
            this.state = 2460;
            this.match(PlSqlParser.IS);
            this.state = 2461;
            this.select_statement();
        }

        this.state = 2464;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_parameter_spec;
    return this;
}

Parameter_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_specContext.prototype.constructor = Parameter_specContext;

Parameter_specContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

Parameter_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Parameter_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Parameter_specContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Parameter_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterParameter_spec(this);
	}
};

Parameter_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitParameter_spec(this);
	}
};




PlSqlParser.Parameter_specContext = Parameter_specContext;

PlSqlParser.prototype.parameter_spec = function() {

    var localctx = new Parameter_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, PlSqlParser.RULE_parameter_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2466;
        this.parameter_name();
        this.state = 2471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.IN - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.IN) {
                this.state = 2467;
                this.match(PlSqlParser.IN);
            }

            this.state = 2470;
            this.type_spec();
        }

        this.state = 2474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.ASSIGN_OP) {
            this.state = 2473;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_exception_declaration;
    return this;
}

Exception_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_declarationContext.prototype.constructor = Exception_declarationContext;

Exception_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Exception_declarationContext.prototype.EXCEPTION = function() {
    return this.getToken(PlSqlParser.EXCEPTION, 0);
};

Exception_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterException_declaration(this);
	}
};

Exception_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitException_declaration(this);
	}
};




PlSqlParser.Exception_declarationContext = Exception_declarationContext;

PlSqlParser.prototype.exception_declaration = function() {

    var localctx = new Exception_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, PlSqlParser.RULE_exception_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2476;
        this.identifier();
        this.state = 2477;
        this.match(PlSqlParser.EXCEPTION);
        this.state = 2478;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pragma_declaration;
    this.id1 = null; // IdentifierContext
    return this;
}

Pragma_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_declarationContext.prototype.constructor = Pragma_declarationContext;

Pragma_declarationContext.prototype.PRAGMA = function() {
    return this.getToken(PlSqlParser.PRAGMA, 0);
};

Pragma_declarationContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(PlSqlParser.SERIALLY_REUSABLE, 0);
};

Pragma_declarationContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0);
};

Pragma_declarationContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(PlSqlParser.EXCEPTION_INIT, 0);
};

Pragma_declarationContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Pragma_declarationContext.prototype.numeric_negative = function() {
    return this.getTypedRuleContext(Numeric_negativeContext,0);
};

Pragma_declarationContext.prototype.INLINE = function() {
    return this.getToken(PlSqlParser.INLINE, 0);
};

Pragma_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pragma_declarationContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PlSqlParser.RESTRICT_REFERENCES, 0);
};

Pragma_declarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Pragma_declarationContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

Pragma_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPragma_declaration(this);
	}
};

Pragma_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPragma_declaration(this);
	}
};




PlSqlParser.Pragma_declarationContext = Pragma_declarationContext;

PlSqlParser.prototype.pragma_declaration = function() {

    var localctx = new Pragma_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, PlSqlParser.RULE_pragma_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2480;
        this.match(PlSqlParser.PRAGMA);
        this.state = 2511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SERIALLY_REUSABLE:
            this.state = 2481;
            this.match(PlSqlParser.SERIALLY_REUSABLE);
            break;
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
            this.state = 2482;
            this.match(PlSqlParser.AUTONOMOUS_TRANSACTION);
            break;
        case PlSqlParser.EXCEPTION_INIT:
            this.state = 2483;
            this.match(PlSqlParser.EXCEPTION_INIT);
            this.state = 2484;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2485;
            this.exception_name();
            this.state = 2486;
            this.match(PlSqlParser.COMMA);
            this.state = 2487;
            this.numeric_negative();
            this.state = 2488;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.INLINE:
            this.state = 2490;
            this.match(PlSqlParser.INLINE);
            this.state = 2491;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2492;
            localctx.id1 = this.identifier();
            this.state = 2493;
            this.match(PlSqlParser.COMMA);
            this.state = 2494;
            this.expression();
            this.state = 2495;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.RESTRICT_REFERENCES:
            this.state = 2497;
            this.match(PlSqlParser.RESTRICT_REFERENCES);
            this.state = 2498;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2501;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 2499;
                this.identifier();
                break;
            case PlSqlParser.DEFAULT:
                this.state = 2500;
                this.match(PlSqlParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2505; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2503;
                this.match(PlSqlParser.COMMA);
                this.state = 2504;
                this.identifier();
                this.state = 2507; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlSqlParser.COMMA);
            this.state = 2509;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2513;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_record_type_def;
    return this;
}

Record_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_type_defContext.prototype.constructor = Record_type_defContext;

Record_type_defContext.prototype.RECORD = function() {
    return this.getToken(PlSqlParser.RECORD, 0);
};

Record_type_defContext.prototype.field_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_specContext);
    } else {
        return this.getTypedRuleContext(Field_specContext,i);
    }
};

Record_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRecord_type_def(this);
	}
};

Record_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRecord_type_def(this);
	}
};




PlSqlParser.Record_type_defContext = Record_type_defContext;

PlSqlParser.prototype.record_type_def = function() {

    var localctx = new Record_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, PlSqlParser.RULE_record_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2515;
        this.match(PlSqlParser.RECORD);
        this.state = 2516;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2517;
        this.field_spec();
        this.state = 2522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 2518;
            this.match(PlSqlParser.COMMA);
            this.state = 2519;
            this.field_spec();
            this.state = 2524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2525;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_field_spec;
    return this;
}

Field_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_specContext.prototype.constructor = Field_specContext;

Field_specContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Field_specContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Field_specContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Field_specContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Field_specContext.prototype.default_value_part = function() {
    return this.getTypedRuleContext(Default_value_partContext,0);
};

Field_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterField_spec(this);
	}
};

Field_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitField_spec(this);
	}
};




PlSqlParser.Field_specContext = Field_specContext;

PlSqlParser.prototype.field_spec = function() {

    var localctx = new Field_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, PlSqlParser.RULE_field_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2527;
        this.column_name();
        this.state = 2529;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2528;
            this.type_spec();
        }

        this.state = 2533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOT) {
            this.state = 2531;
            this.match(PlSqlParser.NOT);
            this.state = 2532;
            this.match(PlSqlParser.NULL);
        }

        this.state = 2536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DEFAULT || _la===PlSqlParser.ASSIGN_OP) {
            this.state = 2535;
            this.default_value_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ref_cursor_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_ref_cursor_type_def;
    return this;
}

Ref_cursor_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ref_cursor_type_defContext.prototype.constructor = Ref_cursor_type_defContext;

Ref_cursor_type_defContext.prototype.REF = function() {
    return this.getToken(PlSqlParser.REF, 0);
};

Ref_cursor_type_defContext.prototype.CURSOR = function() {
    return this.getToken(PlSqlParser.CURSOR, 0);
};

Ref_cursor_type_defContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Ref_cursor_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Ref_cursor_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRef_cursor_type_def(this);
	}
};

Ref_cursor_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRef_cursor_type_def(this);
	}
};




PlSqlParser.Ref_cursor_type_defContext = Ref_cursor_type_defContext;

PlSqlParser.prototype.ref_cursor_type_def = function() {

    var localctx = new Ref_cursor_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, PlSqlParser.RULE_ref_cursor_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2538;
        this.match(PlSqlParser.REF);
        this.state = 2539;
        this.match(PlSqlParser.CURSOR);
        this.state = 2542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RETURN) {
            this.state = 2540;
            this.match(PlSqlParser.RETURN);
            this.state = 2541;
            this.type_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_declaration;
    return this;
}

Type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declarationContext.prototype.constructor = Type_declarationContext;

Type_declarationContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Type_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_declarationContext.prototype.IS = function() {
    return this.getToken(PlSqlParser.IS, 0);
};

Type_declarationContext.prototype.table_type_def = function() {
    return this.getTypedRuleContext(Table_type_defContext,0);
};

Type_declarationContext.prototype.varray_type_def = function() {
    return this.getTypedRuleContext(Varray_type_defContext,0);
};

Type_declarationContext.prototype.record_type_def = function() {
    return this.getTypedRuleContext(Record_type_defContext,0);
};

Type_declarationContext.prototype.ref_cursor_type_def = function() {
    return this.getTypedRuleContext(Ref_cursor_type_defContext,0);
};

Type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_declaration(this);
	}
};

Type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_declaration(this);
	}
};




PlSqlParser.Type_declarationContext = Type_declarationContext;

PlSqlParser.prototype.type_declaration = function() {

    var localctx = new Type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, PlSqlParser.RULE_type_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2544;
        this.match(PlSqlParser.TYPE);
        this.state = 2545;
        this.identifier();
        this.state = 2546;
        this.match(PlSqlParser.IS);
        this.state = 2551;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.TABLE:
            this.state = 2547;
            this.table_type_def();
            break;
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
            this.state = 2548;
            this.varray_type_def();
            break;
        case PlSqlParser.RECORD:
            this.state = 2549;
            this.record_type_def();
            break;
        case PlSqlParser.REF:
            this.state = 2550;
            this.ref_cursor_type_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2553;
        this.match(PlSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_type_def;
    return this;
}

Table_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_type_defContext.prototype.constructor = Table_type_defContext;

Table_type_defContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Table_type_defContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Table_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_type_defContext.prototype.table_indexed_by_part = function() {
    return this.getTypedRuleContext(Table_indexed_by_partContext,0);
};

Table_type_defContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Table_type_defContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Table_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_type_def(this);
	}
};

Table_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_type_def(this);
	}
};




PlSqlParser.Table_type_defContext = Table_type_defContext;

PlSqlParser.prototype.table_type_def = function() {

    var localctx = new Table_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, PlSqlParser.RULE_table_type_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2555;
        this.match(PlSqlParser.TABLE);
        this.state = 2556;
        this.match(PlSqlParser.OF);
        this.state = 2557;
        this.type_spec();
        this.state = 2559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INDEXED || _la===PlSqlParser.INDEX) {
            this.state = 2558;
            this.table_indexed_by_part();
        }

        this.state = 2563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOT) {
            this.state = 2561;
            this.match(PlSqlParser.NOT);
            this.state = 2562;
            this.match(PlSqlParser.NULL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_indexed_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_indexed_by_part;
    this.idx1 = null; // Token
    this.idx2 = null; // Token
    return this;
}

Table_indexed_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_indexed_by_partContext.prototype.constructor = Table_indexed_by_partContext;

Table_indexed_by_partContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Table_indexed_by_partContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Table_indexed_by_partContext.prototype.INDEXED = function() {
    return this.getToken(PlSqlParser.INDEXED, 0);
};

Table_indexed_by_partContext.prototype.INDEX = function() {
    return this.getToken(PlSqlParser.INDEX, 0);
};

Table_indexed_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_indexed_by_part(this);
	}
};

Table_indexed_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_indexed_by_part(this);
	}
};




PlSqlParser.Table_indexed_by_partContext = Table_indexed_by_partContext;

PlSqlParser.prototype.table_indexed_by_part = function() {

    var localctx = new Table_indexed_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, PlSqlParser.RULE_table_indexed_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2567;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.INDEXED:
            this.state = 2565;
            localctx.idx1 = this.match(PlSqlParser.INDEXED);
            break;
        case PlSqlParser.INDEX:
            this.state = 2566;
            localctx.idx2 = this.match(PlSqlParser.INDEX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2569;
        this.match(PlSqlParser.BY);
        this.state = 2570;
        this.type_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Varray_type_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_varray_type_def;
    return this;
}

Varray_type_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Varray_type_defContext.prototype.constructor = Varray_type_defContext;

Varray_type_defContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Varray_type_defContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Varray_type_defContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Varray_type_defContext.prototype.VARRAY = function() {
    return this.getToken(PlSqlParser.VARRAY, 0);
};

Varray_type_defContext.prototype.VARYING = function() {
    return this.getToken(PlSqlParser.VARYING, 0);
};

Varray_type_defContext.prototype.ARRAY = function() {
    return this.getToken(PlSqlParser.ARRAY, 0);
};

Varray_type_defContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Varray_type_defContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Varray_type_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterVarray_type_def(this);
	}
};

Varray_type_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitVarray_type_def(this);
	}
};




PlSqlParser.Varray_type_defContext = Varray_type_defContext;

PlSqlParser.prototype.varray_type_def = function() {

    var localctx = new Varray_type_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, PlSqlParser.RULE_varray_type_def);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2575;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.VARRAY:
            this.state = 2572;
            this.match(PlSqlParser.VARRAY);
            break;
        case PlSqlParser.VARYING:
            this.state = 2573;
            this.match(PlSqlParser.VARYING);
            this.state = 2574;
            this.match(PlSqlParser.ARRAY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2577;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2578;
        this.expression();
        this.state = 2579;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 2580;
        this.match(PlSqlParser.OF);
        this.state = 2581;
        this.type_spec();
        this.state = 2584;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
        if(la_===1) {
            this.state = 2582;
            this.match(PlSqlParser.NOT);
            this.state = 2583;
            this.match(PlSqlParser.NULL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seq_of_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_seq_of_statements;
    return this;
}

Seq_of_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seq_of_statementsContext.prototype.constructor = Seq_of_statementsContext;

Seq_of_statementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Seq_of_statementsContext.prototype.label_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_declarationContext);
    } else {
        return this.getTypedRuleContext(Label_declarationContext,i);
    }
};

Seq_of_statementsContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.EOF);
    } else {
        return this.getToken(PlSqlParser.EOF, i);
    }
};


Seq_of_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSeq_of_statements(this);
	}
};

Seq_of_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSeq_of_statements(this);
	}
};




PlSqlParser.Seq_of_statementsContext = Seq_of_statementsContext;

PlSqlParser.prototype.seq_of_statements = function() {

    var localctx = new Seq_of_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, PlSqlParser.RULE_seq_of_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2590; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2590;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case PlSqlParser.ADD:
        		case PlSqlParser.AFTER:
        		case PlSqlParser.AGENT:
        		case PlSqlParser.AGGREGATE:
        		case PlSqlParser.A_LETTER:
        		case PlSqlParser.ALTER:
        		case PlSqlParser.ANALYZE:
        		case PlSqlParser.ARRAY:
        		case PlSqlParser.ASSOCIATE:
        		case PlSqlParser.AT:
        		case PlSqlParser.ATTRIBUTE:
        		case PlSqlParser.AUDIT:
        		case PlSqlParser.AUTHID:
        		case PlSqlParser.AUTO:
        		case PlSqlParser.AUTOMATIC:
        		case PlSqlParser.AUTONOMOUS_TRANSACTION:
        		case PlSqlParser.BATCH:
        		case PlSqlParser.BEFORE:
        		case PlSqlParser.BEGIN:
        		case PlSqlParser.BFILE:
        		case PlSqlParser.BINARY_DOUBLE:
        		case PlSqlParser.BINARY_FLOAT:
        		case PlSqlParser.BINARY_INTEGER:
        		case PlSqlParser.BLOB:
        		case PlSqlParser.BLOCK:
        		case PlSqlParser.BODY:
        		case PlSqlParser.BOOLEAN:
        		case PlSqlParser.BOTH:
        		case PlSqlParser.BULK:
        		case PlSqlParser.BYTE:
        		case PlSqlParser.CALL:
        		case PlSqlParser.CANONICAL:
        		case PlSqlParser.CASCADE:
        		case PlSqlParser.CASE:
        		case PlSqlParser.CAST:
        		case PlSqlParser.CHARACTER:
        		case PlSqlParser.CHAR:
        		case PlSqlParser.CHAR_CS:
        		case PlSqlParser.CHR:
        		case PlSqlParser.C_LETTER:
        		case PlSqlParser.CLOB:
        		case PlSqlParser.CLOSE:
        		case PlSqlParser.CLUSTER:
        		case PlSqlParser.COLLECT:
        		case PlSqlParser.COLUMNS:
        		case PlSqlParser.COMMENT:
        		case PlSqlParser.COMMIT:
        		case PlSqlParser.COMMITTED:
        		case PlSqlParser.COMPATIBILITY:
        		case PlSqlParser.COMPILE:
        		case PlSqlParser.COMPOUND:
        		case PlSqlParser.CONSTANT:
        		case PlSqlParser.CONSTRAINT:
        		case PlSqlParser.CONSTRAINTS:
        		case PlSqlParser.CONSTRUCTOR:
        		case PlSqlParser.CONTENT:
        		case PlSqlParser.CONTEXT:
        		case PlSqlParser.CONTINUE:
        		case PlSqlParser.CONVERT:
        		case PlSqlParser.CORRUPT_XID_ALL:
        		case PlSqlParser.CORRUPT_XID:
        		case PlSqlParser.COST:
        		case PlSqlParser.COUNT:
        		case PlSqlParser.CREATE:
        		case PlSqlParser.CROSS:
        		case PlSqlParser.CUBE:
        		case PlSqlParser.CURRENT_USER:
        		case PlSqlParser.CURSOR:
        		case PlSqlParser.CUSTOMDATUM:
        		case PlSqlParser.CYCLE:
        		case PlSqlParser.DATABASE:
        		case PlSqlParser.DATA:
        		case PlSqlParser.DAY:
        		case PlSqlParser.DB_ROLE_CHANGE:
        		case PlSqlParser.DBTIMEZONE:
        		case PlSqlParser.DDL:
        		case PlSqlParser.DEBUG:
        		case PlSqlParser.DEC:
        		case PlSqlParser.DECIMAL:
        		case PlSqlParser.DECLARE:
        		case PlSqlParser.DECOMPOSE:
        		case PlSqlParser.DECREMENT:
        		case PlSqlParser.DEFAULTS:
        		case PlSqlParser.DEFERRED:
        		case PlSqlParser.DEFINER:
        		case PlSqlParser.DELETE:
        		case PlSqlParser.DETERMINISTIC:
        		case PlSqlParser.DIMENSION:
        		case PlSqlParser.DISABLE:
        		case PlSqlParser.DISASSOCIATE:
        		case PlSqlParser.DOCUMENT:
        		case PlSqlParser.DOUBLE:
        		case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        		case PlSqlParser.EACH:
        		case PlSqlParser.ELEMENT:
        		case PlSqlParser.EMPTY:
        		case PlSqlParser.ENABLE:
        		case PlSqlParser.ENCODING:
        		case PlSqlParser.ENTITYESCAPING:
        		case PlSqlParser.ERR:
        		case PlSqlParser.ERRORS:
        		case PlSqlParser.ESCAPE:
        		case PlSqlParser.EVALNAME:
        		case PlSqlParser.EXCEPTION:
        		case PlSqlParser.EXCEPTION_INIT:
        		case PlSqlParser.EXCEPTIONS:
        		case PlSqlParser.EXCLUDE:
        		case PlSqlParser.EXECUTE:
        		case PlSqlParser.EXIT:
        		case PlSqlParser.EXPLAIN:
        		case PlSqlParser.EXTERNAL:
        		case PlSqlParser.EXTRACT:
        		case PlSqlParser.FAILURE:
        		case PlSqlParser.FETCH:
        		case PlSqlParser.FINAL:
        		case PlSqlParser.FIRST:
        		case PlSqlParser.FIRST_VALUE:
        		case PlSqlParser.FLOAT:
        		case PlSqlParser.FOLLOWING:
        		case PlSqlParser.FOLLOWS:
        		case PlSqlParser.FORALL:
        		case PlSqlParser.FORCE:
        		case PlSqlParser.FOR:
        		case PlSqlParser.FULL:
        		case PlSqlParser.FUNCTION:
        		case PlSqlParser.GOTO:
        		case PlSqlParser.GRANT:
        		case PlSqlParser.GROUPING:
        		case PlSqlParser.HASH:
        		case PlSqlParser.HIDE:
        		case PlSqlParser.HOUR:
        		case PlSqlParser.IF:
        		case PlSqlParser.IGNORE:
        		case PlSqlParser.IMMEDIATE:
        		case PlSqlParser.INCLUDE:
        		case PlSqlParser.INCLUDING:
        		case PlSqlParser.INCREMENT:
        		case PlSqlParser.INDENT:
        		case PlSqlParser.INDEXED:
        		case PlSqlParser.INDICATOR:
        		case PlSqlParser.INDICES:
        		case PlSqlParser.INFINITE:
        		case PlSqlParser.INLINE:
        		case PlSqlParser.INNER:
        		case PlSqlParser.INOUT:
        		case PlSqlParser.INSERT:
        		case PlSqlParser.INSTANTIABLE:
        		case PlSqlParser.INSTEAD:
        		case PlSqlParser.INTEGER:
        		case PlSqlParser.INTERVAL:
        		case PlSqlParser.INT:
        		case PlSqlParser.INVALIDATE:
        		case PlSqlParser.ISOLATION:
        		case PlSqlParser.ITERATE:
        		case PlSqlParser.JAVA:
        		case PlSqlParser.JOIN:
        		case PlSqlParser.KEEP:
        		case PlSqlParser.KEY:
        		case PlSqlParser.LANGUAGE:
        		case PlSqlParser.LAST:
        		case PlSqlParser.LAST_VALUE:
        		case PlSqlParser.LEADING:
        		case PlSqlParser.LEFT:
        		case PlSqlParser.LEVEL:
        		case PlSqlParser.LIBRARY:
        		case PlSqlParser.LIKE2:
        		case PlSqlParser.LIKE4:
        		case PlSqlParser.LIKEC:
        		case PlSqlParser.LIMIT:
        		case PlSqlParser.LOCAL:
        		case PlSqlParser.LOCKED:
        		case PlSqlParser.LOCK:
        		case PlSqlParser.LOG:
        		case PlSqlParser.LOGOFF:
        		case PlSqlParser.LOGON:
        		case PlSqlParser.LONG:
        		case PlSqlParser.LOOP:
        		case PlSqlParser.MAIN:
        		case PlSqlParser.MAP:
        		case PlSqlParser.MATCHED:
        		case PlSqlParser.MAXVALUE:
        		case PlSqlParser.MEASURES:
        		case PlSqlParser.MEMBER:
        		case PlSqlParser.MERGE:
        		case PlSqlParser.MINUTE:
        		case PlSqlParser.MINVALUE:
        		case PlSqlParser.MLSLABEL:
        		case PlSqlParser.MODEL:
        		case PlSqlParser.MODIFY:
        		case PlSqlParser.MONTH:
        		case PlSqlParser.MULTISET:
        		case PlSqlParser.NAME:
        		case PlSqlParser.NAN:
        		case PlSqlParser.NATURAL:
        		case PlSqlParser.NATURALN:
        		case PlSqlParser.NAV:
        		case PlSqlParser.NCHAR_CS:
        		case PlSqlParser.NCHAR:
        		case PlSqlParser.NCLOB:
        		case PlSqlParser.NESTED:
        		case PlSqlParser.NEW:
        		case PlSqlParser.NOAUDIT:
        		case PlSqlParser.NOCOPY:
        		case PlSqlParser.NOCYCLE:
        		case PlSqlParser.NOENTITYESCAPING:
        		case PlSqlParser.NONE:
        		case PlSqlParser.NO:
        		case PlSqlParser.NOSCHEMACHECK:
        		case PlSqlParser.NULL:
        		case PlSqlParser.NULLS:
        		case PlSqlParser.NUMBER:
        		case PlSqlParser.NUMERIC:
        		case PlSqlParser.NVARCHAR2:
        		case PlSqlParser.OBJECT:
        		case PlSqlParser.OFF:
        		case PlSqlParser.OID:
        		case PlSqlParser.OLD:
        		case PlSqlParser.ONLY:
        		case PlSqlParser.OPEN:
        		case PlSqlParser.ORADATA:
        		case PlSqlParser.ORDINALITY:
        		case PlSqlParser.OSERROR:
        		case PlSqlParser.OUTER:
        		case PlSqlParser.OUT:
        		case PlSqlParser.OVER:
        		case PlSqlParser.OVERRIDING:
        		case PlSqlParser.PACKAGE:
        		case PlSqlParser.PARALLEL_ENABLE:
        		case PlSqlParser.PARAMETERS:
        		case PlSqlParser.PARENT:
        		case PlSqlParser.PARTITION:
        		case PlSqlParser.PASSING:
        		case PlSqlParser.PATH:
        		case PlSqlParser.PIPELINED:
        		case PlSqlParser.PIPE:
        		case PlSqlParser.PLAN:
        		case PlSqlParser.PLS_INTEGER:
        		case PlSqlParser.POSITIVEN:
        		case PlSqlParser.POSITIVE:
        		case PlSqlParser.PRAGMA:
        		case PlSqlParser.PRECEDING:
        		case PlSqlParser.PRECISION:
        		case PlSqlParser.PRESENT:
        		case PlSqlParser.PROCEDURE:
        		case PlSqlParser.RAISE:
        		case PlSqlParser.RANGE:
        		case PlSqlParser.RAW:
        		case PlSqlParser.READ:
        		case PlSqlParser.REAL:
        		case PlSqlParser.RECORD:
        		case PlSqlParser.REFERENCE:
        		case PlSqlParser.REFERENCING:
        		case PlSqlParser.REF:
        		case PlSqlParser.REJECT:
        		case PlSqlParser.RELIES_ON:
        		case PlSqlParser.RENAME:
        		case PlSqlParser.REPLACE:
        		case PlSqlParser.RESPECT:
        		case PlSqlParser.RESTRICT_REFERENCES:
        		case PlSqlParser.RESULT_CACHE:
        		case PlSqlParser.RESULT:
        		case PlSqlParser.RETURNING:
        		case PlSqlParser.RETURN:
        		case PlSqlParser.REUSE:
        		case PlSqlParser.REVERSE:
        		case PlSqlParser.RIGHT:
        		case PlSqlParser.ROLLBACK:
        		case PlSqlParser.ROLLUP:
        		case PlSqlParser.ROWID:
        		case PlSqlParser.ROW:
        		case PlSqlParser.ROWS:
        		case PlSqlParser.RULES:
        		case PlSqlParser.SAMPLE:
        		case PlSqlParser.SAVEPOINT:
        		case PlSqlParser.SAVE:
        		case PlSqlParser.SCHEMACHECK:
        		case PlSqlParser.SCHEMA:
        		case PlSqlParser.SCN:
        		case PlSqlParser.SECOND:
        		case PlSqlParser.SEED:
        		case PlSqlParser.SEGMENT:
        		case PlSqlParser.SELECT:
        		case PlSqlParser.SELF:
        		case PlSqlParser.SEQUENTIAL:
        		case PlSqlParser.SERIALIZABLE:
        		case PlSqlParser.SERIALLY_REUSABLE:
        		case PlSqlParser.SERVERERROR:
        		case PlSqlParser.SESSIONTIMEZONE:
        		case PlSqlParser.SET:
        		case PlSqlParser.SETS:
        		case PlSqlParser.SETTINGS:
        		case PlSqlParser.SHOW:
        		case PlSqlParser.SHUTDOWN:
        		case PlSqlParser.SIBLINGS:
        		case PlSqlParser.SIGNTYPE:
        		case PlSqlParser.SIMPLE_INTEGER:
        		case PlSqlParser.SINGLE:
        		case PlSqlParser.SKIP_:
        		case PlSqlParser.SMALLINT:
        		case PlSqlParser.SNAPSHOT:
        		case PlSqlParser.SOME:
        		case PlSqlParser.SPECIFICATION:
        		case PlSqlParser.SQLDATA:
        		case PlSqlParser.SQLERROR:
        		case PlSqlParser.STANDALONE:
        		case PlSqlParser.STARTUP:
        		case PlSqlParser.STATEMENT_ID:
        		case PlSqlParser.STATEMENT:
        		case PlSqlParser.STATIC:
        		case PlSqlParser.STATISTICS:
        		case PlSqlParser.STRING:
        		case PlSqlParser.SUBMULTISET:
        		case PlSqlParser.SUBPARTITION:
        		case PlSqlParser.SUBSTITUTABLE:
        		case PlSqlParser.SUBTYPE:
        		case PlSqlParser.SUCCESS:
        		case PlSqlParser.SUSPEND:
        		case PlSqlParser.TEMPORARY:
        		case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        		case PlSqlParser.TIMESTAMP:
        		case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        		case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        		case PlSqlParser.TIME:
        		case PlSqlParser.TIMEZONE_ABBR:
        		case PlSqlParser.TIMEZONE_HOUR:
        		case PlSqlParser.TIMEZONE_MINUTE:
        		case PlSqlParser.TIMEZONE_REGION:
        		case PlSqlParser.TRAILING:
        		case PlSqlParser.TRANSACTION:
        		case PlSqlParser.TRANSLATE:
        		case PlSqlParser.TREAT:
        		case PlSqlParser.TRIGGER:
        		case PlSqlParser.TRUNCATE:
        		case PlSqlParser.TYPE:
        		case PlSqlParser.UNBOUNDED:
        		case PlSqlParser.UNDER:
        		case PlSqlParser.UNLIMITED:
        		case PlSqlParser.UNTIL:
        		case PlSqlParser.UPDATED:
        		case PlSqlParser.UPDATE:
        		case PlSqlParser.UPSERT:
        		case PlSqlParser.UROWID:
        		case PlSqlParser.USE:
        		case PlSqlParser.VALIDATE:
        		case PlSqlParser.VALUE:
        		case PlSqlParser.VARCHAR2:
        		case PlSqlParser.VARCHAR:
        		case PlSqlParser.VARIABLE:
        		case PlSqlParser.VARRAY:
        		case PlSqlParser.VARYING:
        		case PlSqlParser.VERSIONS:
        		case PlSqlParser.VERSION:
        		case PlSqlParser.WAIT:
        		case PlSqlParser.WARNING:
        		case PlSqlParser.WELLFORMED:
        		case PlSqlParser.WHENEVER:
        		case PlSqlParser.WHILE:
        		case PlSqlParser.WITHIN:
        		case PlSqlParser.WITH:
        		case PlSqlParser.WORK:
        		case PlSqlParser.WRITE:
        		case PlSqlParser.XMLAGG:
        		case PlSqlParser.XMLATTRIBUTES:
        		case PlSqlParser.XMLCAST:
        		case PlSqlParser.XMLCOLATTVAL:
        		case PlSqlParser.XMLELEMENT:
        		case PlSqlParser.XMLEXISTS:
        		case PlSqlParser.XMLFOREST:
        		case PlSqlParser.XMLNAMESPACES:
        		case PlSqlParser.XMLPARSE:
        		case PlSqlParser.XMLPI:
        		case PlSqlParser.XMLQUERY:
        		case PlSqlParser.XMLROOT:
        		case PlSqlParser.XMLSERIALIZE:
        		case PlSqlParser.XMLTABLE:
        		case PlSqlParser.XML:
        		case PlSqlParser.YEAR:
        		case PlSqlParser.YES:
        		case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        		case PlSqlParser.ZONE:
        		case PlSqlParser.PREDICTION:
        		case PlSqlParser.PREDICTION_BOUNDS:
        		case PlSqlParser.PREDICTION_COST:
        		case PlSqlParser.PREDICTION_DETAILS:
        		case PlSqlParser.PREDICTION_PROBABILITY:
        		case PlSqlParser.PREDICTION_SET:
        		case PlSqlParser.CUME_DIST:
        		case PlSqlParser.DENSE_RANK:
        		case PlSqlParser.LISTAGG:
        		case PlSqlParser.PERCENT_RANK:
        		case PlSqlParser.PERCENTILE_CONT:
        		case PlSqlParser.PERCENTILE_DISC:
        		case PlSqlParser.RANK:
        		case PlSqlParser.AVG:
        		case PlSqlParser.CORR:
        		case PlSqlParser.COVAR_:
        		case PlSqlParser.LAG:
        		case PlSqlParser.LEAD:
        		case PlSqlParser.MAX:
        		case PlSqlParser.MEDIAN:
        		case PlSqlParser.MIN:
        		case PlSqlParser.NTILE:
        		case PlSqlParser.RATIO_TO_REPORT:
        		case PlSqlParser.REGR_:
        		case PlSqlParser.ROW_NUMBER:
        		case PlSqlParser.SUBSTR:
        		case PlSqlParser.TRIM:
        		case PlSqlParser.SUM:
        		case PlSqlParser.STDDEV:
        		case PlSqlParser.VAR_:
        		case PlSqlParser.VARIANCE:
        		case PlSqlParser.DELIMITED_ID:
        		case PlSqlParser.LEFT_PAREN:
        		case PlSqlParser.BINDVAR:
        		case PlSqlParser.COLON:
        		case PlSqlParser.INTRODUCER:
        		case PlSqlParser.REGULAR_ID:
        		    this.state = 2586;
        		    this.statement();
        		    this.state = 2587;
        		    _la = this._input.LA(1);
        		    if(!(_la===PlSqlParser.EOF || _la===PlSqlParser.SEMICOLON)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    break;
        		case PlSqlParser.LESS_THAN_OP:
        		    this.state = 2589;
        		    this.label_declaration();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2592; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,252, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_label_declaration;
    this.ltp1 = null; // Token
    return this;
}

Label_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_declarationContext.prototype.constructor = Label_declarationContext;

Label_declarationContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Label_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLabel_declaration(this);
	}
};

Label_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLabel_declaration(this);
	}
};




PlSqlParser.Label_declarationContext = Label_declarationContext;

PlSqlParser.prototype.label_declaration = function() {

    var localctx = new Label_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, PlSqlParser.RULE_label_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2594;
        localctx.ltp1 = this.match(PlSqlParser.LESS_THAN_OP);
        this.state = 2595;
        this.match(PlSqlParser.LESS_THAN_OP);
        this.state = 2596;
        this.label_name();
        this.state = 2597;
        this.match(PlSqlParser.GREATER_THAN_OP);
        this.state = 2598;
        this.match(PlSqlParser.GREATER_THAN_OP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.CREATE = function() {
    return this.getToken(PlSqlParser.CREATE, 0);
};

StatementContext.prototype.swallow_to_semi = function() {
    return this.getTypedRuleContext(Swallow_to_semiContext,0);
};

StatementContext.prototype.ALTER = function() {
    return this.getToken(PlSqlParser.ALTER, 0);
};

StatementContext.prototype.GRANT = function() {
    return this.getToken(PlSqlParser.GRANT, 0);
};

StatementContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

StatementContext.prototype.TRUNCATE = function() {
    return this.getToken(PlSqlParser.TRUNCATE, 0);
};

StatementContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.assignment_statement = function() {
    return this.getTypedRuleContext(Assignment_statementContext,0);
};

StatementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

StatementContext.prototype.exit_statement = function() {
    return this.getTypedRuleContext(Exit_statementContext,0);
};

StatementContext.prototype.goto_statement = function() {
    return this.getTypedRuleContext(Goto_statementContext,0);
};

StatementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

StatementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

StatementContext.prototype.forall_statement = function() {
    return this.getTypedRuleContext(Forall_statementContext,0);
};

StatementContext.prototype.null_statement = function() {
    return this.getTypedRuleContext(Null_statementContext,0);
};

StatementContext.prototype.raise_statement = function() {
    return this.getTypedRuleContext(Raise_statementContext,0);
};

StatementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

StatementContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

StatementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

StatementContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

StatementContext.prototype.pipe_row_statement = function() {
    return this.getTypedRuleContext(Pipe_row_statementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStatement(this);
	}
};




PlSqlParser.StatementContext = StatementContext;

PlSqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, PlSqlParser.RULE_statement);
    try {
        this.state = 2627;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2600;
            this.match(PlSqlParser.CREATE);
            this.state = 2601;
            this.swallow_to_semi();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2602;
            this.match(PlSqlParser.ALTER);
            this.state = 2603;
            this.swallow_to_semi();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2604;
            this.match(PlSqlParser.GRANT);
            this.state = 2606;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
            if(la_===1) {
                this.state = 2605;
                this.match(PlSqlParser.ALL);

            }
            this.state = 2608;
            this.swallow_to_semi();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2609;
            this.match(PlSqlParser.TRUNCATE);
            this.state = 2610;
            this.swallow_to_semi();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2611;
            this.body();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2612;
            this.block();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2613;
            this.assignment_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2614;
            this.continue_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2615;
            this.exit_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2616;
            this.goto_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2617;
            this.if_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2618;
            this.loop_statement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2619;
            this.forall_statement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2620;
            this.null_statement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2621;
            this.raise_statement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2622;
            this.return_statement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2623;
            this.case_statement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2624;
            this.sql_statement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2625;
            this.function_call();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2626;
            this.pipe_row_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Swallow_to_semiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_swallow_to_semi;
    return this;
}

Swallow_to_semiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Swallow_to_semiContext.prototype.constructor = Swallow_to_semiContext;


Swallow_to_semiContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSwallow_to_semi(this);
	}
};

Swallow_to_semiContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSwallow_to_semi(this);
	}
};




PlSqlParser.Swallow_to_semiContext = Swallow_to_semiContext;

PlSqlParser.prototype.swallow_to_semi = function() {

    var localctx = new Swallow_to_semiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, PlSqlParser.RULE_swallow_to_semi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2630; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2629;
            _la = this._input.LA(1);
            if(_la<=0 || _la===PlSqlParser.SEMICOLON) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2632; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ALTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.AND) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARCHIVE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASC) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BASIC) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BEGIN) | (1 << PlSqlParser.BETWEEN) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BREADTH - 32)) | (1 << (PlSqlParser.BUFFER_POOL - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BY - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CACHE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHECK - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMN - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.COMPRESS - 64)) | (1 << (PlSqlParser.COMPUTE - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONNECT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CREATE - 64)) | (1 << (PlSqlParser.CREATION - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECLARE - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DEPTH - 96)) | (1 << (PlSqlParser.DESC - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DROP - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.ELSE - 96)) | (1 << (PlSqlParser.ELSIF - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (PlSqlParser.ENCRYPT - 128)) | (1 << (PlSqlParser.END - 128)) | (1 << (PlSqlParser.ENTITYESCAPING - 128)) | (1 << (PlSqlParser.ERR - 128)) | (1 << (PlSqlParser.ERRORS - 128)) | (1 << (PlSqlParser.ESCAPE - 128)) | (1 << (PlSqlParser.EVALNAME - 128)) | (1 << (PlSqlParser.EXCEPTION - 128)) | (1 << (PlSqlParser.EXCEPTION_INIT - 128)) | (1 << (PlSqlParser.EXCEPTIONS - 128)) | (1 << (PlSqlParser.EXCLUDE - 128)) | (1 << (PlSqlParser.EXCLUSIVE - 128)) | (1 << (PlSqlParser.EXECUTE - 128)) | (1 << (PlSqlParser.EXISTS - 128)) | (1 << (PlSqlParser.EXIT - 128)) | (1 << (PlSqlParser.EXPLAIN - 128)) | (1 << (PlSqlParser.EXTERNAL - 128)) | (1 << (PlSqlParser.EXTRACT - 128)) | (1 << (PlSqlParser.FAILURE - 128)) | (1 << (PlSqlParser.FALSE - 128)) | (1 << (PlSqlParser.FETCH - 128)) | (1 << (PlSqlParser.FILESYSTEM_LIKE_LOGGING - 128)) | (1 << (PlSqlParser.FINAL - 128)) | (1 << (PlSqlParser.FIRST - 128)) | (1 << (PlSqlParser.FIRST_VALUE - 128)) | (1 << (PlSqlParser.FLASH_CACHE - 128)) | (1 << (PlSqlParser.FLOAT - 128)) | (1 << (PlSqlParser.FOLLOWING - 128)) | (1 << (PlSqlParser.FOLLOWS - 128)) | (1 << (PlSqlParser.FORALL - 128)) | (1 << (PlSqlParser.FORCE - 128)) | (1 << (PlSqlParser.FOREIGN - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (PlSqlParser.FOR - 160)) | (1 << (PlSqlParser.FREELIST - 160)) | (1 << (PlSqlParser.FREELISTS - 160)) | (1 << (PlSqlParser.FROM - 160)) | (1 << (PlSqlParser.FULL - 160)) | (1 << (PlSqlParser.FUNCTION - 160)) | (1 << (PlSqlParser.GLOBAL - 160)) | (1 << (PlSqlParser.GOTO - 160)) | (1 << (PlSqlParser.GRANT - 160)) | (1 << (PlSqlParser.GROUP - 160)) | (1 << (PlSqlParser.GROUPING - 160)) | (1 << (PlSqlParser.GROUPS - 160)) | (1 << (PlSqlParser.HASH - 160)) | (1 << (PlSqlParser.HAVING - 160)) | (1 << (PlSqlParser.HIDE - 160)) | (1 << (PlSqlParser.HIGH - 160)) | (1 << (PlSqlParser.HOUR - 160)) | (1 << (PlSqlParser.IF - 160)) | (1 << (PlSqlParser.IGNORE - 160)) | (1 << (PlSqlParser.IMMEDIATE - 160)) | (1 << (PlSqlParser.INCLUDE - 160)) | (1 << (PlSqlParser.INCLUDING - 160)) | (1 << (PlSqlParser.INCREMENT - 160)) | (1 << (PlSqlParser.INDENT - 160)) | (1 << (PlSqlParser.INDEXED - 160)) | (1 << (PlSqlParser.INDEX - 160)) | (1 << (PlSqlParser.INDICATOR - 160)) | (1 << (PlSqlParser.INDICES - 160)) | (1 << (PlSqlParser.INFINITE - 160)) | (1 << (PlSqlParser.IN - 160)) | (1 << (PlSqlParser.INITIAL - 160)) | (1 << (PlSqlParser.INITRANS - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (PlSqlParser.INLINE - 192)) | (1 << (PlSqlParser.INNER - 192)) | (1 << (PlSqlParser.INOUT - 192)) | (1 << (PlSqlParser.INSERT - 192)) | (1 << (PlSqlParser.INSTANTIABLE - 192)) | (1 << (PlSqlParser.INSTEAD - 192)) | (1 << (PlSqlParser.INTEGER - 192)) | (1 << (PlSqlParser.INTERSECT - 192)) | (1 << (PlSqlParser.INTERVAL - 192)) | (1 << (PlSqlParser.INT - 192)) | (1 << (PlSqlParser.INTO - 192)) | (1 << (PlSqlParser.INVALIDATE - 192)) | (1 << (PlSqlParser.IS - 192)) | (1 << (PlSqlParser.ISOLATION - 192)) | (1 << (PlSqlParser.ITERATE - 192)) | (1 << (PlSqlParser.JAVA - 192)) | (1 << (PlSqlParser.JOIN - 192)) | (1 << (PlSqlParser.KEEP - 192)) | (1 << (PlSqlParser.KEY - 192)) | (1 << (PlSqlParser.LANGUAGE - 192)) | (1 << (PlSqlParser.LAST - 192)) | (1 << (PlSqlParser.LAST_VALUE - 192)) | (1 << (PlSqlParser.LEADING - 192)) | (1 << (PlSqlParser.LEFT - 192)) | (1 << (PlSqlParser.LEVEL - 192)) | (1 << (PlSqlParser.LIBRARY - 192)) | (1 << (PlSqlParser.LIKE2 - 192)) | (1 << (PlSqlParser.LIKE4 - 192)) | (1 << (PlSqlParser.LIKEC - 192)) | (1 << (PlSqlParser.LIKE - 192)) | (1 << (PlSqlParser.LIMIT - 192)) | (1 << (PlSqlParser.LIST - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (PlSqlParser.LOCAL - 224)) | (1 << (PlSqlParser.LOCKED - 224)) | (1 << (PlSqlParser.LOCK - 224)) | (1 << (PlSqlParser.LOGGING - 224)) | (1 << (PlSqlParser.LOG - 224)) | (1 << (PlSqlParser.LOGOFF - 224)) | (1 << (PlSqlParser.LOGON - 224)) | (1 << (PlSqlParser.LONG - 224)) | (1 << (PlSqlParser.LOOP - 224)) | (1 << (PlSqlParser.LOW - 224)) | (1 << (PlSqlParser.MAIN - 224)) | (1 << (PlSqlParser.MAP - 224)) | (1 << (PlSqlParser.MATCHED - 224)) | (1 << (PlSqlParser.MAXVALUE - 224)) | (1 << (PlSqlParser.MEASURES - 224)) | (1 << (PlSqlParser.MEMBER - 224)) | (1 << (PlSqlParser.MERGE - 224)) | (1 << (PlSqlParser.MINEXTENTS - 224)) | (1 << (PlSqlParser.MINUS - 224)) | (1 << (PlSqlParser.MINUTE - 224)) | (1 << (PlSqlParser.MINVALUE - 224)) | (1 << (PlSqlParser.MLSLABEL - 224)) | (1 << (PlSqlParser.MODEL - 224)) | (1 << (PlSqlParser.MODE - 224)) | (1 << (PlSqlParser.MODIFY - 224)) | (1 << (PlSqlParser.MONTH - 224)) | (1 << (PlSqlParser.MULTISET - 224)) | (1 << (PlSqlParser.NAME - 224)) | (1 << (PlSqlParser.NAN - 224)) | (1 << (PlSqlParser.NATURAL - 224)) | (1 << (PlSqlParser.NATURALN - 224)) | (1 << (PlSqlParser.NAV - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (PlSqlParser.NCHAR_CS - 256)) | (1 << (PlSqlParser.NCHAR - 256)) | (1 << (PlSqlParser.NCLOB - 256)) | (1 << (PlSqlParser.NESTED - 256)) | (1 << (PlSqlParser.NEW - 256)) | (1 << (PlSqlParser.NEXT - 256)) | (1 << (PlSqlParser.NOAUDIT - 256)) | (1 << (PlSqlParser.NOCACHE - 256)) | (1 << (PlSqlParser.NOCOMPRESS - 256)) | (1 << (PlSqlParser.NOCOPY - 256)) | (1 << (PlSqlParser.NOCYCLE - 256)) | (1 << (PlSqlParser.NOENTITYESCAPING - 256)) | (1 << (PlSqlParser.NOLOGGING - 256)) | (1 << (PlSqlParser.NOMAXVALUE - 256)) | (1 << (PlSqlParser.NOMINVALUE - 256)) | (1 << (PlSqlParser.NONE - 256)) | (1 << (PlSqlParser.NO - 256)) | (1 << (PlSqlParser.NOORDER - 256)) | (1 << (PlSqlParser.NOSCHEMACHECK - 256)) | (1 << (PlSqlParser.NOT - 256)) | (1 << (PlSqlParser.NOWAIT - 256)) | (1 << (PlSqlParser.NULL - 256)) | (1 << (PlSqlParser.NULLS - 256)) | (1 << (PlSqlParser.NUMBER - 256)) | (1 << (PlSqlParser.NUMERIC - 256)) | (1 << (PlSqlParser.NVARCHAR2 - 256)) | (1 << (PlSqlParser.OBJECT - 256)) | (1 << (PlSqlParser.OFF - 256)) | (1 << (PlSqlParser.OF - 256)) | (1 << (PlSqlParser.OID - 256)) | (1 << (PlSqlParser.OLD - 256)) | (1 << (PlSqlParser.OLTP - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (PlSqlParser.ONLY - 288)) | (1 << (PlSqlParser.ON - 288)) | (1 << (PlSqlParser.OPEN - 288)) | (1 << (PlSqlParser.OPTIMAL - 288)) | (1 << (PlSqlParser.OPTION - 288)) | (1 << (PlSqlParser.ORADATA - 288)) | (1 << (PlSqlParser.ORDER - 288)) | (1 << (PlSqlParser.ORDINALITY - 288)) | (1 << (PlSqlParser.OR - 288)) | (1 << (PlSqlParser.OSERROR - 288)) | (1 << (PlSqlParser.OUTER - 288)) | (1 << (PlSqlParser.OUT - 288)) | (1 << (PlSqlParser.OVER - 288)) | (1 << (PlSqlParser.OVERRIDING - 288)) | (1 << (PlSqlParser.PACKAGE - 288)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 288)) | (1 << (PlSqlParser.PARAMETERS - 288)) | (1 << (PlSqlParser.PARENT - 288)) | (1 << (PlSqlParser.PARTITION - 288)) | (1 << (PlSqlParser.PASSING - 288)) | (1 << (PlSqlParser.PATH - 288)) | (1 << (PlSqlParser.PCTFREE - 288)) | (1 << (PlSqlParser.PCTINCREASE - 288)) | (1 << (PlSqlParser.PCTUSED - 288)) | (1 << (PlSqlParser.PERCENT_FOUND - 288)) | (1 << (PlSqlParser.PERCENT_ISOPEN - 288)) | (1 << (PlSqlParser.PERCENT_NOTFOUND - 288)) | (1 << (PlSqlParser.PERCENT_ROWCOUNT - 288)) | (1 << (PlSqlParser.PERCENT_ROWTYPE - 288)) | (1 << (PlSqlParser.PERCENT_TYPE - 288)) | (1 << (PlSqlParser.PIPELINED - 288)) | (1 << (PlSqlParser.PIPE - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (PlSqlParser.PIVOT - 320)) | (1 << (PlSqlParser.PLAN - 320)) | (1 << (PlSqlParser.PLS_INTEGER - 320)) | (1 << (PlSqlParser.POSITIVEN - 320)) | (1 << (PlSqlParser.POSITIVE - 320)) | (1 << (PlSqlParser.PRAGMA - 320)) | (1 << (PlSqlParser.PRECEDING - 320)) | (1 << (PlSqlParser.PRECISION - 320)) | (1 << (PlSqlParser.PRESENT - 320)) | (1 << (PlSqlParser.PRESERVE - 320)) | (1 << (PlSqlParser.PRIMARY - 320)) | (1 << (PlSqlParser.PRIOR - 320)) | (1 << (PlSqlParser.PROCEDURE - 320)) | (1 << (PlSqlParser.PUBLIC - 320)) | (1 << (PlSqlParser.QUERY - 320)) | (1 << (PlSqlParser.RAISE - 320)) | (1 << (PlSqlParser.RANGE - 320)) | (1 << (PlSqlParser.RAW - 320)) | (1 << (PlSqlParser.READ - 320)) | (1 << (PlSqlParser.REAL - 320)) | (1 << (PlSqlParser.RECORD - 320)) | (1 << (PlSqlParser.RECYCLE - 320)) | (1 << (PlSqlParser.REFERENCE - 320)) | (1 << (PlSqlParser.REFERENCES - 320)) | (1 << (PlSqlParser.REFERENCING - 320)) | (1 << (PlSqlParser.REF - 320)) | (1 << (PlSqlParser.REJECT - 320)) | (1 << (PlSqlParser.RELIES_ON - 320)) | (1 << (PlSqlParser.RENAME - 320)) | (1 << (PlSqlParser.REPLACE - 320)) | (1 << (PlSqlParser.RESPECT - 320)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 320)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (PlSqlParser.RESULT_CACHE - 352)) | (1 << (PlSqlParser.RESULT - 352)) | (1 << (PlSqlParser.RETURNING - 352)) | (1 << (PlSqlParser.RETURN - 352)) | (1 << (PlSqlParser.REUSE - 352)) | (1 << (PlSqlParser.REVERSE - 352)) | (1 << (PlSqlParser.REVOKE - 352)) | (1 << (PlSqlParser.RIGHT - 352)) | (1 << (PlSqlParser.ROLLBACK - 352)) | (1 << (PlSqlParser.ROLLUP - 352)) | (1 << (PlSqlParser.ROWID - 352)) | (1 << (PlSqlParser.ROW - 352)) | (1 << (PlSqlParser.ROWS - 352)) | (1 << (PlSqlParser.RULES - 352)) | (1 << (PlSqlParser.SAMPLE - 352)) | (1 << (PlSqlParser.SAVEPOINT - 352)) | (1 << (PlSqlParser.SAVE - 352)) | (1 << (PlSqlParser.SCHEMACHECK - 352)) | (1 << (PlSqlParser.SCHEMA - 352)) | (1 << (PlSqlParser.SCN - 352)) | (1 << (PlSqlParser.SEARCH - 352)) | (1 << (PlSqlParser.SECOND - 352)) | (1 << (PlSqlParser.SEED - 352)) | (1 << (PlSqlParser.SEGMENT - 352)) | (1 << (PlSqlParser.SELECT - 352)) | (1 << (PlSqlParser.SELF - 352)) | (1 << (PlSqlParser.SEQUENCE - 352)) | (1 << (PlSqlParser.SEQUENTIAL - 352)) | (1 << (PlSqlParser.SERIALIZABLE - 352)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 352)) | (1 << (PlSqlParser.SERVERERROR - 352)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 352)))) !== 0) || ((((_la - 384)) & ~0x1f) == 0 && ((1 << (_la - 384)) & ((1 << (PlSqlParser.SET - 384)) | (1 << (PlSqlParser.SETS - 384)) | (1 << (PlSqlParser.SETTINGS - 384)) | (1 << (PlSqlParser.SHARE - 384)) | (1 << (PlSqlParser.SHOW - 384)) | (1 << (PlSqlParser.SHUTDOWN - 384)) | (1 << (PlSqlParser.SIBLINGS - 384)) | (1 << (PlSqlParser.SIGNTYPE - 384)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 384)) | (1 << (PlSqlParser.SINGLE - 384)) | (1 << (PlSqlParser.SIZE - 384)) | (1 << (PlSqlParser.SKIP_ - 384)) | (1 << (PlSqlParser.SMALLINT - 384)) | (1 << (PlSqlParser.SNAPSHOT - 384)) | (1 << (PlSqlParser.SOME - 384)) | (1 << (PlSqlParser.SPECIFICATION - 384)) | (1 << (PlSqlParser.SQLDATA - 384)) | (1 << (PlSqlParser.SQLERROR - 384)) | (1 << (PlSqlParser.STANDALONE - 384)) | (1 << (PlSqlParser.START - 384)) | (1 << (PlSqlParser.STARTUP - 384)) | (1 << (PlSqlParser.STATEMENT_ID - 384)) | (1 << (PlSqlParser.STATEMENT - 384)) | (1 << (PlSqlParser.STATIC - 384)) | (1 << (PlSqlParser.STATISTICS - 384)) | (1 << (PlSqlParser.STORAGE - 384)) | (1 << (PlSqlParser.STRING - 384)) | (1 << (PlSqlParser.SUBMULTISET - 384)) | (1 << (PlSqlParser.SUBPARTITION - 384)) | (1 << (PlSqlParser.SUBSTITUTABLE - 384)) | (1 << (PlSqlParser.SUBTYPE - 384)) | (1 << (PlSqlParser.SUCCESS - 384)))) !== 0) || ((((_la - 416)) & ~0x1f) == 0 && ((1 << (_la - 416)) & ((1 << (PlSqlParser.SUSPEND - 416)) | (1 << (PlSqlParser.SYNONYM - 416)) | (1 << (PlSqlParser.TABLESPACE - 416)) | (1 << (PlSqlParser.TABLE - 416)) | (1 << (PlSqlParser.TEMPORARY - 416)) | (1 << (PlSqlParser.THEN - 416)) | (1 << (PlSqlParser.THE - 416)) | (1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 416)) | (1 << (PlSqlParser.TIMESTAMP - 416)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 416)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 416)) | (1 << (PlSqlParser.TIME - 416)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 416)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 416)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 416)) | (1 << (PlSqlParser.TIMEZONE_REGION - 416)) | (1 << (PlSqlParser.TO - 416)) | (1 << (PlSqlParser.TRAILING - 416)) | (1 << (PlSqlParser.TRANSACTION - 416)) | (1 << (PlSqlParser.TRANSLATE - 416)) | (1 << (PlSqlParser.TREAT - 416)) | (1 << (PlSqlParser.TRIGGER - 416)) | (1 << (PlSqlParser.TRUE - 416)) | (1 << (PlSqlParser.TRUNCATE - 416)) | (1 << (PlSqlParser.TYPE - 416)) | (1 << (PlSqlParser.UNBOUNDED - 416)) | (1 << (PlSqlParser.UNDER - 416)) | (1 << (PlSqlParser.UNION - 416)) | (1 << (PlSqlParser.UNIQUE - 416)) | (1 << (PlSqlParser.UNLIMITED - 416)) | (1 << (PlSqlParser.UNPIVOT - 416)) | (1 << (PlSqlParser.UNTIL - 416)))) !== 0) || ((((_la - 448)) & ~0x1f) == 0 && ((1 << (_la - 448)) & ((1 << (PlSqlParser.UPDATED - 448)) | (1 << (PlSqlParser.UPDATE - 448)) | (1 << (PlSqlParser.UPSERT - 448)) | (1 << (PlSqlParser.UROWID - 448)) | (1 << (PlSqlParser.USE - 448)) | (1 << (PlSqlParser.USING - 448)) | (1 << (PlSqlParser.VALIDATE - 448)) | (1 << (PlSqlParser.VALUES - 448)) | (1 << (PlSqlParser.VALUE - 448)) | (1 << (PlSqlParser.VARCHAR2 - 448)) | (1 << (PlSqlParser.VARCHAR - 448)) | (1 << (PlSqlParser.VARIABLE - 448)) | (1 << (PlSqlParser.VARRAY - 448)) | (1 << (PlSqlParser.VARYING - 448)) | (1 << (PlSqlParser.VERSIONS - 448)) | (1 << (PlSqlParser.VERSION - 448)) | (1 << (PlSqlParser.WAIT - 448)) | (1 << (PlSqlParser.WARNING - 448)) | (1 << (PlSqlParser.WELLFORMED - 448)) | (1 << (PlSqlParser.WHENEVER - 448)) | (1 << (PlSqlParser.WHEN - 448)) | (1 << (PlSqlParser.WHERE - 448)) | (1 << (PlSqlParser.WHILE - 448)) | (1 << (PlSqlParser.WITHIN - 448)) | (1 << (PlSqlParser.WITH - 448)) | (1 << (PlSqlParser.WORK - 448)) | (1 << (PlSqlParser.WRITE - 448)) | (1 << (PlSqlParser.XMLAGG - 448)) | (1 << (PlSqlParser.XMLATTRIBUTES - 448)) | (1 << (PlSqlParser.XMLCAST - 448)) | (1 << (PlSqlParser.XMLCOLATTVAL - 448)) | (1 << (PlSqlParser.XMLELEMENT - 448)))) !== 0) || ((((_la - 480)) & ~0x1f) == 0 && ((1 << (_la - 480)) & ((1 << (PlSqlParser.XMLEXISTS - 480)) | (1 << (PlSqlParser.XMLFOREST - 480)) | (1 << (PlSqlParser.XMLNAMESPACES - 480)) | (1 << (PlSqlParser.XMLPARSE - 480)) | (1 << (PlSqlParser.XMLPI - 480)) | (1 << (PlSqlParser.XMLQUERY - 480)) | (1 << (PlSqlParser.XMLROOT - 480)) | (1 << (PlSqlParser.XMLSERIALIZE - 480)) | (1 << (PlSqlParser.XMLTABLE - 480)) | (1 << (PlSqlParser.XML - 480)) | (1 << (PlSqlParser.YEAR - 480)) | (1 << (PlSqlParser.YES - 480)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 480)) | (1 << (PlSqlParser.ZONE - 480)) | (1 << (PlSqlParser.PREDICTION - 480)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 480)) | (1 << (PlSqlParser.PREDICTION_COST - 480)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 480)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 480)) | (1 << (PlSqlParser.PREDICTION_SET - 480)) | (1 << (PlSqlParser.CUME_DIST - 480)) | (1 << (PlSqlParser.DENSE_RANK - 480)) | (1 << (PlSqlParser.LISTAGG - 480)) | (1 << (PlSqlParser.PERCENT_RANK - 480)) | (1 << (PlSqlParser.PERCENTILE_CONT - 480)) | (1 << (PlSqlParser.PERCENTILE_DISC - 480)) | (1 << (PlSqlParser.RANK - 480)) | (1 << (PlSqlParser.AVG - 480)) | (1 << (PlSqlParser.CORR - 480)) | (1 << (PlSqlParser.COVAR_ - 480)) | (1 << (PlSqlParser.DECODE - 480)) | (1 << (PlSqlParser.LAG - 480)))) !== 0) || ((((_la - 512)) & ~0x1f) == 0 && ((1 << (_la - 512)) & ((1 << (PlSqlParser.LEAD - 512)) | (1 << (PlSqlParser.MAX - 512)) | (1 << (PlSqlParser.MEDIAN - 512)) | (1 << (PlSqlParser.MIN - 512)) | (1 << (PlSqlParser.NTILE - 512)) | (1 << (PlSqlParser.NVL - 512)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 512)) | (1 << (PlSqlParser.REGR_ - 512)) | (1 << (PlSqlParser.ROUND - 512)) | (1 << (PlSqlParser.ROW_NUMBER - 512)) | (1 << (PlSqlParser.SUBSTR - 512)) | (1 << (PlSqlParser.TO_CHAR - 512)) | (1 << (PlSqlParser.TRIM - 512)) | (1 << (PlSqlParser.SUM - 512)) | (1 << (PlSqlParser.STDDEV - 512)) | (1 << (PlSqlParser.VAR_ - 512)) | (1 << (PlSqlParser.VARIANCE - 512)) | (1 << (PlSqlParser.LEAST - 512)) | (1 << (PlSqlParser.GREATEST - 512)) | (1 << (PlSqlParser.TO_DATE - 512)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 512)) | (1 << (PlSqlParser.BIT_STRING_LIT - 512)) | (1 << (PlSqlParser.HEX_STRING_LIT - 512)) | (1 << (PlSqlParser.DOUBLE_PERIOD - 512)) | (1 << (PlSqlParser.PERIOD - 512)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 512)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 512)) | (1 << (PlSqlParser.CHAR_STRING - 512)) | (1 << (PlSqlParser.DELIMITED_ID - 512)) | (1 << (PlSqlParser.PERCENT - 512)) | (1 << (PlSqlParser.AMPERSAND - 512)) | (1 << (PlSqlParser.LEFT_PAREN - 512)))) !== 0) || ((((_la - 544)) & ~0x1f) == 0 && ((1 << (_la - 544)) & ((1 << (PlSqlParser.RIGHT_PAREN - 544)) | (1 << (PlSqlParser.DOUBLE_ASTERISK - 544)) | (1 << (PlSqlParser.ASTERISK - 544)) | (1 << (PlSqlParser.PLUS_SIGN - 544)) | (1 << (PlSqlParser.MINUS_SIGN - 544)) | (1 << (PlSqlParser.COMMA - 544)) | (1 << (PlSqlParser.SOLIDUS - 544)) | (1 << (PlSqlParser.AT_SIGN - 544)) | (1 << (PlSqlParser.ASSIGN_OP - 544)) | (1 << (PlSqlParser.BINDVAR - 544)) | (1 << (PlSqlParser.NOT_EQUAL_OP - 544)) | (1 << (PlSqlParser.CARRET_OPERATOR_PART - 544)) | (1 << (PlSqlParser.TILDE_OPERATOR_PART - 544)) | (1 << (PlSqlParser.EXCLAMATION_OPERATOR_PART - 544)) | (1 << (PlSqlParser.GREATER_THAN_OP - 544)) | (1 << (PlSqlParser.LESS_THAN_OP - 544)) | (1 << (PlSqlParser.COLON - 544)) | (1 << (PlSqlParser.BAR - 544)) | (1 << (PlSqlParser.EQUALS_OP - 544)) | (1 << (PlSqlParser.LEFT_BRACKET - 544)) | (1 << (PlSqlParser.RIGHT_BRACKET - 544)) | (1 << (PlSqlParser.INTRODUCER - 544)) | (1 << (PlSqlParser.SPACES - 544)) | (1 << (PlSqlParser.SINGLE_LINE_COMMENT - 544)) | (1 << (PlSqlParser.MULTI_LINE_COMMENT - 544)) | (1 << (PlSqlParser.PROMPT - 544)) | (1 << (PlSqlParser.START_CMD - 544)) | (1 << (PlSqlParser.REGULAR_ID - 544)) | (1 << (PlSqlParser.ZV - 544)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_assignment_statement;
    return this;
}

Assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_statementContext.prototype.constructor = Assignment_statementContext;

Assignment_statementContext.prototype.ASSIGN_OP = function() {
    return this.getToken(PlSqlParser.ASSIGN_OP, 0);
};

Assignment_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Assignment_statementContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

Assignment_statementContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAssignment_statement(this);
	}
};

Assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAssignment_statement(this);
	}
};




PlSqlParser.Assignment_statementContext = Assignment_statementContext;

PlSqlParser.prototype.assignment_statement = function() {

    var localctx = new Assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, PlSqlParser.RULE_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2636;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 2634;
            this.general_element();
            break;
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
            this.state = 2635;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2638;
        this.match(PlSqlParser.ASSIGN_OP);
        this.state = 2639;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(PlSqlParser.CONTINUE, 0);
};

Continue_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Continue_statementContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Continue_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitContinue_statement(this);
	}
};




PlSqlParser.Continue_statementContext = Continue_statementContext;

PlSqlParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, PlSqlParser.RULE_continue_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2641;
        this.match(PlSqlParser.CONTINUE);
        this.state = 2643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2642;
            this.label_name();
        }

        this.state = 2647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHEN) {
            this.state = 2645;
            this.match(PlSqlParser.WHEN);
            this.state = 2646;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_exit_statement;
    return this;
}

Exit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_statementContext.prototype.constructor = Exit_statementContext;

Exit_statementContext.prototype.EXIT = function() {
    return this.getToken(PlSqlParser.EXIT, 0);
};

Exit_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Exit_statementContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Exit_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Exit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterExit_statement(this);
	}
};

Exit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitExit_statement(this);
	}
};




PlSqlParser.Exit_statementContext = Exit_statementContext;

PlSqlParser.prototype.exit_statement = function() {

    var localctx = new Exit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, PlSqlParser.RULE_exit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2649;
        this.match(PlSqlParser.EXIT);
        this.state = 2651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2650;
            this.label_name();
        }

        this.state = 2655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHEN) {
            this.state = 2653;
            this.match(PlSqlParser.WHEN);
            this.state = 2654;
            this.condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Goto_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_goto_statement;
    return this;
}

Goto_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Goto_statementContext.prototype.constructor = Goto_statementContext;

Goto_statementContext.prototype.GOTO = function() {
    return this.getToken(PlSqlParser.GOTO, 0);
};

Goto_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Goto_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGoto_statement(this);
	}
};

Goto_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGoto_statement(this);
	}
};




PlSqlParser.Goto_statementContext = Goto_statementContext;

PlSqlParser.prototype.goto_statement = function() {

    var localctx = new Goto_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, PlSqlParser.RULE_goto_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2657;
        this.match(PlSqlParser.GOTO);
        this.state = 2658;
        this.label_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.IF);
    } else {
        return this.getToken(PlSqlParser.IF, i);
    }
};


If_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

If_statementContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

If_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

If_statementContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

If_statementContext.prototype.elsif_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Elsif_partContext);
    } else {
        return this.getTypedRuleContext(Elsif_partContext,i);
    }
};

If_statementContext.prototype.else_part = function() {
    return this.getTypedRuleContext(Else_partContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitIf_statement(this);
	}
};




PlSqlParser.If_statementContext = If_statementContext;

PlSqlParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, PlSqlParser.RULE_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2660;
        this.match(PlSqlParser.IF);
        this.state = 2661;
        this.condition();
        this.state = 2662;
        this.match(PlSqlParser.THEN);
        this.state = 2663;
        this.seq_of_statements();
        this.state = 2667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.ELSIF) {
            this.state = 2664;
            this.elsif_part();
            this.state = 2669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ELSE) {
            this.state = 2670;
            this.else_part();
        }

        this.state = 2673;
        this.match(PlSqlParser.END);
        this.state = 2674;
        this.match(PlSqlParser.IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Elsif_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_elsif_part;
    return this;
}

Elsif_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Elsif_partContext.prototype.constructor = Elsif_partContext;

Elsif_partContext.prototype.ELSIF = function() {
    return this.getToken(PlSqlParser.ELSIF, 0);
};

Elsif_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Elsif_partContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Elsif_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Elsif_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterElsif_part(this);
	}
};

Elsif_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitElsif_part(this);
	}
};




PlSqlParser.Elsif_partContext = Elsif_partContext;

PlSqlParser.prototype.elsif_part = function() {

    var localctx = new Elsif_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, PlSqlParser.RULE_elsif_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2676;
        this.match(PlSqlParser.ELSIF);
        this.state = 2677;
        this.condition();
        this.state = 2678;
        this.match(PlSqlParser.THEN);
        this.state = 2679;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_else_part;
    return this;
}

Else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_partContext.prototype.constructor = Else_partContext;

Else_partContext.prototype.ELSE = function() {
    return this.getToken(PlSqlParser.ELSE, 0);
};

Else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterElse_part(this);
	}
};

Else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitElse_part(this);
	}
};




PlSqlParser.Else_partContext = Else_partContext;

PlSqlParser.prototype.else_part = function() {

    var localctx = new Else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, PlSqlParser.RULE_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2681;
        this.match(PlSqlParser.ELSE);
        this.state = 2682;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.LOOP);
    } else {
        return this.getToken(PlSqlParser.LOOP, i);
    }
};


Loop_statementContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Loop_statementContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Loop_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Loop_statementContext.prototype.WHILE = function() {
    return this.getToken(PlSqlParser.WHILE, 0);
};

Loop_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Loop_statementContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Loop_statementContext.prototype.cursor_loop_param = function() {
    return this.getTypedRuleContext(Cursor_loop_paramContext,0);
};

Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLoop_statement(this);
	}
};




PlSqlParser.Loop_statementContext = Loop_statementContext;

PlSqlParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, PlSqlParser.RULE_loop_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
        if(la_===1) {
            this.state = 2684;
            this.label_name();

        }
        this.state = 2691;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.WHILE:
        	this.state = 2687;
        	this.match(PlSqlParser.WHILE);
        	this.state = 2688;
        	this.condition();
        	break;
        case PlSqlParser.FOR:
        	this.state = 2689;
        	this.match(PlSqlParser.FOR);
        	this.state = 2690;
        	this.cursor_loop_param();
        	break;
        case PlSqlParser.LOOP:
        	break;
        default:
        	break;
        }
        this.state = 2693;
        this.match(PlSqlParser.LOOP);
        this.state = 2694;
        this.seq_of_statements();
        this.state = 2695;
        this.match(PlSqlParser.END);
        this.state = 2696;
        this.match(PlSqlParser.LOOP);
        this.state = 2698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2697;
            this.label_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_loop_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cursor_loop_param;
    this.range = null; // Token
    return this;
}

Cursor_loop_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_loop_paramContext.prototype.constructor = Cursor_loop_paramContext;

Cursor_loop_paramContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Cursor_loop_paramContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Cursor_loop_paramContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Cursor_loop_paramContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Cursor_loop_paramContext.prototype.REVERSE = function() {
    return this.getToken(PlSqlParser.REVERSE, 0);
};

Cursor_loop_paramContext.prototype.record_name = function() {
    return this.getTypedRuleContext(Record_nameContext,0);
};

Cursor_loop_paramContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_loop_paramContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Cursor_loop_paramContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Cursor_loop_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCursor_loop_param(this);
	}
};

Cursor_loop_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCursor_loop_param(this);
	}
};




PlSqlParser.Cursor_loop_paramContext = Cursor_loop_paramContext;

PlSqlParser.prototype.cursor_loop_param = function() {

    var localctx = new Cursor_loop_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, PlSqlParser.RULE_cursor_loop_param);
    var _la = 0; // Token type
    try {
        this.state = 2725;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2700;
            this.index_name();
            this.state = 2701;
            this.match(PlSqlParser.IN);
            this.state = 2703;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
            if(la_===1) {
                this.state = 2702;
                this.match(PlSqlParser.REVERSE);

            }
            this.state = 2705;
            this.lower_bound();
            this.state = 2706;
            localctx.range = this.match(PlSqlParser.DOUBLE_PERIOD);
            this.state = 2707;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2709;
            this.record_name();
            this.state = 2710;
            this.match(PlSqlParser.IN);
            this.state = 2723;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.BINDVAR:
            case PlSqlParser.COLON:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 2711;
                this.cursor_name();
                this.state = 2717;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.LEFT_PAREN) {
                    this.state = 2712;
                    this.match(PlSqlParser.LEFT_PAREN);
                    this.state = 2714;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                        this.state = 2713;
                        this.expressions();
                    }

                    this.state = 2716;
                    this.match(PlSqlParser.RIGHT_PAREN);
                }

                break;
            case PlSqlParser.LEFT_PAREN:
                this.state = 2719;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 2720;
                this.select_statement();
                this.state = 2721;
                this.match(PlSqlParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Forall_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_forall_statement;
    return this;
}

Forall_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Forall_statementContext.prototype.constructor = Forall_statementContext;

Forall_statementContext.prototype.FORALL = function() {
    return this.getToken(PlSqlParser.FORALL, 0);
};

Forall_statementContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Forall_statementContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Forall_statementContext.prototype.bounds_clause = function() {
    return this.getTypedRuleContext(Bounds_clauseContext,0);
};

Forall_statementContext.prototype.sql_statement = function() {
    return this.getTypedRuleContext(Sql_statementContext,0);
};

Forall_statementContext.prototype.SAVE = function() {
    return this.getToken(PlSqlParser.SAVE, 0);
};

Forall_statementContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PlSqlParser.EXCEPTIONS, 0);
};

Forall_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterForall_statement(this);
	}
};

Forall_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitForall_statement(this);
	}
};




PlSqlParser.Forall_statementContext = Forall_statementContext;

PlSqlParser.prototype.forall_statement = function() {

    var localctx = new Forall_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, PlSqlParser.RULE_forall_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2727;
        this.match(PlSqlParser.FORALL);
        this.state = 2728;
        this.index_name();
        this.state = 2729;
        this.match(PlSqlParser.IN);
        this.state = 2730;
        this.bounds_clause();
        this.state = 2731;
        this.sql_statement();
        this.state = 2734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.SAVE) {
            this.state = 2732;
            this.match(PlSqlParser.SAVE);
            this.state = 2733;
            this.match(PlSqlParser.EXCEPTIONS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bounds_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_bounds_clause;
    return this;
}

Bounds_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bounds_clauseContext.prototype.constructor = Bounds_clauseContext;

Bounds_clauseContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Bounds_clauseContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Bounds_clauseContext.prototype.INDICES = function() {
    return this.getToken(PlSqlParser.INDICES, 0);
};

Bounds_clauseContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Bounds_clauseContext.prototype.collection_name = function() {
    return this.getTypedRuleContext(Collection_nameContext,0);
};

Bounds_clauseContext.prototype.between_bound = function() {
    return this.getTypedRuleContext(Between_boundContext,0);
};

Bounds_clauseContext.prototype.VALUES = function() {
    return this.getToken(PlSqlParser.VALUES, 0);
};

Bounds_clauseContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Bounds_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBounds_clause(this);
	}
};

Bounds_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBounds_clause(this);
	}
};




PlSqlParser.Bounds_clauseContext = Bounds_clauseContext;

PlSqlParser.prototype.bounds_clause = function() {

    var localctx = new Bounds_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, PlSqlParser.RULE_bounds_clause);
    var _la = 0; // Token type
    try {
        this.state = 2749;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2736;
            this.lower_bound();
            this.state = 2737;
            this.match(PlSqlParser.DOUBLE_PERIOD);
            this.state = 2738;
            this.upper_bound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2740;
            this.match(PlSqlParser.INDICES);
            this.state = 2741;
            this.match(PlSqlParser.OF);
            this.state = 2742;
            this.collection_name();
            this.state = 2744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.BETWEEN) {
                this.state = 2743;
                this.between_bound();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2746;
            this.match(PlSqlParser.VALUES);
            this.state = 2747;
            this.match(PlSqlParser.OF);
            this.state = 2748;
            this.index_name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_between_bound;
    return this;
}

Between_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_boundContext.prototype.constructor = Between_boundContext;

Between_boundContext.prototype.BETWEEN = function() {
    return this.getToken(PlSqlParser.BETWEEN, 0);
};

Between_boundContext.prototype.lower_bound = function() {
    return this.getTypedRuleContext(Lower_boundContext,0);
};

Between_boundContext.prototype.AND = function() {
    return this.getToken(PlSqlParser.AND, 0);
};

Between_boundContext.prototype.upper_bound = function() {
    return this.getTypedRuleContext(Upper_boundContext,0);
};

Between_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBetween_bound(this);
	}
};

Between_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBetween_bound(this);
	}
};




PlSqlParser.Between_boundContext = Between_boundContext;

PlSqlParser.prototype.between_bound = function() {

    var localctx = new Between_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, PlSqlParser.RULE_between_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2751;
        this.match(PlSqlParser.BETWEEN);
        this.state = 2752;
        this.lower_bound();
        this.state = 2753;
        this.match(PlSqlParser.AND);
        this.state = 2754;
        this.upper_bound();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lower_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_lower_bound;
    return this;
}

Lower_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lower_boundContext.prototype.constructor = Lower_boundContext;

Lower_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Lower_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLower_bound(this);
	}
};

Lower_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLower_bound(this);
	}
};




PlSqlParser.Lower_boundContext = Lower_boundContext;

PlSqlParser.prototype.lower_bound = function() {

    var localctx = new Lower_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, PlSqlParser.RULE_lower_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2756;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Upper_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_upper_bound;
    return this;
}

Upper_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Upper_boundContext.prototype.constructor = Upper_boundContext;

Upper_boundContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Upper_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUpper_bound(this);
	}
};

Upper_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUpper_bound(this);
	}
};




PlSqlParser.Upper_boundContext = Upper_boundContext;

PlSqlParser.prototype.upper_bound = function() {

    var localctx = new Upper_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, PlSqlParser.RULE_upper_bound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2758;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_null_statement;
    return this;
}

Null_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_statementContext.prototype.constructor = Null_statementContext;

Null_statementContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Null_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNull_statement(this);
	}
};

Null_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNull_statement(this);
	}
};




PlSqlParser.Null_statementContext = Null_statementContext;

PlSqlParser.prototype.null_statement = function() {

    var localctx = new Null_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, PlSqlParser.RULE_null_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2760;
        this.match(PlSqlParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_raise_statement;
    return this;
}

Raise_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_statementContext.prototype.constructor = Raise_statementContext;

Raise_statementContext.prototype.RAISE = function() {
    return this.getToken(PlSqlParser.RAISE, 0);
};

Raise_statementContext.prototype.exception_name = function() {
    return this.getTypedRuleContext(Exception_nameContext,0);
};

Raise_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRaise_statement(this);
	}
};

Raise_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRaise_statement(this);
	}
};




PlSqlParser.Raise_statementContext = Raise_statementContext;

PlSqlParser.prototype.raise_statement = function() {

    var localctx = new Raise_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, PlSqlParser.RULE_raise_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2762;
        this.match(PlSqlParser.RAISE);
        this.state = 2764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2763;
            this.exception_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReturn_statement(this);
	}
};




PlSqlParser.Return_statementContext = Return_statementContext;

PlSqlParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, PlSqlParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2766;
        this.match(PlSqlParser.RETURN);
        this.state = 2768;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 2767;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.routine_name = function() {
    return this.getTypedRuleContext(Routine_nameContext,0);
};

Function_callContext.prototype.CALL = function() {
    return this.getToken(PlSqlParser.CALL, 0);
};

Function_callContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_call(this);
	}
};




PlSqlParser.Function_callContext = Function_callContext;

PlSqlParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, PlSqlParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
        if(la_===1) {
            this.state = 2770;
            this.match(PlSqlParser.CALL);

        }
        this.state = 2773;
        this.routine_name();
        this.state = 2775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 2774;
            this.function_argument();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pipe_row_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pipe_row_statement;
    return this;
}

Pipe_row_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pipe_row_statementContext.prototype.constructor = Pipe_row_statementContext;

Pipe_row_statementContext.prototype.PIPE = function() {
    return this.getToken(PlSqlParser.PIPE, 0);
};

Pipe_row_statementContext.prototype.ROW = function() {
    return this.getToken(PlSqlParser.ROW, 0);
};

Pipe_row_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pipe_row_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPipe_row_statement(this);
	}
};

Pipe_row_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPipe_row_statement(this);
	}
};




PlSqlParser.Pipe_row_statementContext = Pipe_row_statementContext;

PlSqlParser.prototype.pipe_row_statement = function() {

    var localctx = new Pipe_row_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, PlSqlParser.RULE_pipe_row_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2777;
        this.match(PlSqlParser.PIPE);
        this.state = 2778;
        this.match(PlSqlParser.ROW);
        this.state = 2779;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 2780;
        this.expression();
        this.state = 2781;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_body;
    return this;
}

BodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BodyContext.prototype.constructor = BodyContext;

BodyContext.prototype.BEGIN = function() {
    return this.getToken(PlSqlParser.BEGIN, 0);
};

BodyContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

BodyContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

BodyContext.prototype.EXCEPTION = function() {
    return this.getToken(PlSqlParser.EXCEPTION, 0);
};

BodyContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

BodyContext.prototype.exception_handler = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_handlerContext);
    } else {
        return this.getTypedRuleContext(Exception_handlerContext,i);
    }
};

BodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBody(this);
	}
};

BodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBody(this);
	}
};




PlSqlParser.BodyContext = BodyContext;

PlSqlParser.prototype.body = function() {

    var localctx = new BodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, PlSqlParser.RULE_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2783;
        this.match(PlSqlParser.BEGIN);
        this.state = 2784;
        this.seq_of_statements();
        this.state = 2791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.EXCEPTION) {
            this.state = 2785;
            this.match(PlSqlParser.EXCEPTION);
            this.state = 2787; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2786;
                this.exception_handler();
                this.state = 2789; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlSqlParser.WHEN);
        }

        this.state = 2793;
        this.match(PlSqlParser.END);
        this.state = 2795;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
        if(la_===1) {
            this.state = 2794;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_handlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_exception_handler;
    return this;
}

Exception_handlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_handlerContext.prototype.constructor = Exception_handlerContext;

Exception_handlerContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Exception_handlerContext.prototype.exception_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Exception_nameContext);
    } else {
        return this.getTypedRuleContext(Exception_nameContext,i);
    }
};

Exception_handlerContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Exception_handlerContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Exception_handlerContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OR);
    } else {
        return this.getToken(PlSqlParser.OR, i);
    }
};


Exception_handlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterException_handler(this);
	}
};

Exception_handlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitException_handler(this);
	}
};




PlSqlParser.Exception_handlerContext = Exception_handlerContext;

PlSqlParser.prototype.exception_handler = function() {

    var localctx = new Exception_handlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, PlSqlParser.RULE_exception_handler);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2797;
        this.match(PlSqlParser.WHEN);
        this.state = 2798;
        this.exception_name();
        this.state = 2803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.OR) {
            this.state = 2799;
            this.match(PlSqlParser.OR);
            this.state = 2800;
            this.exception_name();
            this.state = 2805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2806;
        this.match(PlSqlParser.THEN);
        this.state = 2807;
        this.seq_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_trigger_block;
    return this;
}

Trigger_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_blockContext.prototype.constructor = Trigger_blockContext;

Trigger_blockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

Trigger_blockContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

Trigger_blockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

Trigger_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTrigger_block(this);
	}
};

Trigger_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTrigger_block(this);
	}
};




PlSqlParser.Trigger_blockContext = Trigger_blockContext;

PlSqlParser.prototype.trigger_block = function() {

    var localctx = new Trigger_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, PlSqlParser.RULE_trigger_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECLARE - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 2810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DECLARE) {
                this.state = 2809;
                this.match(PlSqlParser.DECLARE);
            }

            this.state = 2813; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2812;
                this.declare_spec();
                this.state = 2815; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID);
        }

        this.state = 2819;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.body = function() {
    return this.getTypedRuleContext(BodyContext,0);
};

BlockContext.prototype.DECLARE = function() {
    return this.getToken(PlSqlParser.DECLARE, 0);
};

BlockContext.prototype.declare_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_specContext);
    } else {
        return this.getTypedRuleContext(Declare_specContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBlock(this);
	}
};




PlSqlParser.BlockContext = BlockContext;

PlSqlParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, PlSqlParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DECLARE) {
            this.state = 2821;
            this.match(PlSqlParser.DECLARE);
        }

        this.state = 2825; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2824;
            this.declare_spec();
            this.state = 2827; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PROCEDURE - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID);
        this.state = 2829;
        this.body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sql_statement;
    return this;
}

Sql_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_statementContext.prototype.constructor = Sql_statementContext;

Sql_statementContext.prototype.execute_immediate = function() {
    return this.getTypedRuleContext(Execute_immediateContext,0);
};

Sql_statementContext.prototype.data_manipulation_language_statements = function() {
    return this.getTypedRuleContext(Data_manipulation_language_statementsContext,0);
};

Sql_statementContext.prototype.cursor_manipulation_statements = function() {
    return this.getTypedRuleContext(Cursor_manipulation_statementsContext,0);
};

Sql_statementContext.prototype.transaction_control_statements = function() {
    return this.getTypedRuleContext(Transaction_control_statementsContext,0);
};

Sql_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSql_statement(this);
	}
};

Sql_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSql_statement(this);
	}
};




PlSqlParser.Sql_statementContext = Sql_statementContext;

PlSqlParser.prototype.sql_statement = function() {

    var localctx = new Sql_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, PlSqlParser.RULE_sql_statement);
    try {
        this.state = 2835;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2831;
            this.execute_immediate();
            break;
        case PlSqlParser.DELETE:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.INSERT:
        case PlSqlParser.LOCK:
        case PlSqlParser.MERGE:
        case PlSqlParser.SELECT:
        case PlSqlParser.UPDATE:
        case PlSqlParser.WITH:
        case PlSqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2832;
            this.data_manipulation_language_statements();
            break;
        case PlSqlParser.CLOSE:
        case PlSqlParser.FETCH:
        case PlSqlParser.OPEN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2833;
            this.cursor_manipulation_statements();
            break;
        case PlSqlParser.COMMIT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SET:
            this.enterOuterAlt(localctx, 4);
            this.state = 2834;
            this.transaction_control_statements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_immediateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_execute_immediate;
    return this;
}

Execute_immediateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_immediateContext.prototype.constructor = Execute_immediateContext;

Execute_immediateContext.prototype.EXECUTE = function() {
    return this.getToken(PlSqlParser.EXECUTE, 0);
};

Execute_immediateContext.prototype.IMMEDIATE = function() {
    return this.getToken(PlSqlParser.IMMEDIATE, 0);
};

Execute_immediateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Execute_immediateContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Execute_immediateContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Execute_immediateContext.prototype.dynamic_returning_clause = function() {
    return this.getTypedRuleContext(Dynamic_returning_clauseContext,0);
};

Execute_immediateContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterExecute_immediate(this);
	}
};

Execute_immediateContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitExecute_immediate(this);
	}
};




PlSqlParser.Execute_immediateContext = Execute_immediateContext;

PlSqlParser.prototype.execute_immediate = function() {

    var localctx = new Execute_immediateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, PlSqlParser.RULE_execute_immediate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2837;
        this.match(PlSqlParser.EXECUTE);
        this.state = 2838;
        this.match(PlSqlParser.IMMEDIATE);
        this.state = 2839;
        this.expression();
        this.state = 2849;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.BULK:
        case PlSqlParser.INTO:
        	this.state = 2840;
        	this.into_clause();
        	this.state = 2842;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===PlSqlParser.USING) {
        	    this.state = 2841;
        	    this.using_clause();
        	}

        	break;
        case PlSqlParser.USING:
        	this.state = 2844;
        	this.using_clause();
        	this.state = 2846;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN) {
        	    this.state = 2845;
        	    this.dynamic_returning_clause();
        	}

        	break;
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        	this.state = 2848;
        	this.dynamic_returning_clause();
        	break;
        case PlSqlParser.EOF:
        case PlSqlParser.SAVE:
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dynamic_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dynamic_returning_clause;
    return this;
}

Dynamic_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dynamic_returning_clauseContext.prototype.constructor = Dynamic_returning_clauseContext;

Dynamic_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Dynamic_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(PlSqlParser.RETURNING, 0);
};

Dynamic_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Dynamic_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDynamic_returning_clause(this);
	}
};

Dynamic_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDynamic_returning_clause(this);
	}
};




PlSqlParser.Dynamic_returning_clauseContext = Dynamic_returning_clauseContext;

PlSqlParser.prototype.dynamic_returning_clause = function() {

    var localctx = new Dynamic_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, PlSqlParser.RULE_dynamic_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2851;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2852;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_manipulation_language_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_data_manipulation_language_statements;
    return this;
}

Data_manipulation_language_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_manipulation_language_statementsContext.prototype.constructor = Data_manipulation_language_statementsContext;

Data_manipulation_language_statementsContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.lock_table_statement = function() {
    return this.getTypedRuleContext(Lock_table_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.explain_statement = function() {
    return this.getTypedRuleContext(Explain_statementContext,0);
};

Data_manipulation_language_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterData_manipulation_language_statements(this);
	}
};

Data_manipulation_language_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitData_manipulation_language_statements(this);
	}
};




PlSqlParser.Data_manipulation_language_statementsContext = Data_manipulation_language_statementsContext;

PlSqlParser.prototype.data_manipulation_language_statements = function() {

    var localctx = new Data_manipulation_language_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, PlSqlParser.RULE_data_manipulation_language_statements);
    try {
        this.state = 2861;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.MERGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2854;
            this.merge_statement();
            break;
        case PlSqlParser.LOCK:
            this.enterOuterAlt(localctx, 2);
            this.state = 2855;
            this.lock_table_statement();
            break;
        case PlSqlParser.SELECT:
        case PlSqlParser.WITH:
        case PlSqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 3);
            this.state = 2856;
            this.select_statement();
            break;
        case PlSqlParser.UPDATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2857;
            this.update_statement();
            break;
        case PlSqlParser.DELETE:
            this.enterOuterAlt(localctx, 5);
            this.state = 2858;
            this.delete_statement();
            break;
        case PlSqlParser.INSERT:
            this.enterOuterAlt(localctx, 6);
            this.state = 2859;
            this.insert_statement();
            break;
        case PlSqlParser.EXPLAIN:
            this.enterOuterAlt(localctx, 7);
            this.state = 2860;
            this.explain_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_manipulation_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cursor_manipulation_statements;
    return this;
}

Cursor_manipulation_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_manipulation_statementsContext.prototype.constructor = Cursor_manipulation_statementsContext;

Cursor_manipulation_statementsContext.prototype.close_statement = function() {
    return this.getTypedRuleContext(Close_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_statement = function() {
    return this.getTypedRuleContext(Open_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.fetch_statement = function() {
    return this.getTypedRuleContext(Fetch_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.open_for_statement = function() {
    return this.getTypedRuleContext(Open_for_statementContext,0);
};

Cursor_manipulation_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCursor_manipulation_statements(this);
	}
};

Cursor_manipulation_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCursor_manipulation_statements(this);
	}
};




PlSqlParser.Cursor_manipulation_statementsContext = Cursor_manipulation_statementsContext;

PlSqlParser.prototype.cursor_manipulation_statements = function() {

    var localctx = new Cursor_manipulation_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, PlSqlParser.RULE_cursor_manipulation_statements);
    try {
        this.state = 2867;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2863;
            this.close_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2864;
            this.open_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2865;
            this.fetch_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2866;
            this.open_for_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Close_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_close_statement;
    return this;
}

Close_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_statementContext.prototype.constructor = Close_statementContext;

Close_statementContext.prototype.CLOSE = function() {
    return this.getToken(PlSqlParser.CLOSE, 0);
};

Close_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Close_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterClose_statement(this);
	}
};

Close_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitClose_statement(this);
	}
};




PlSqlParser.Close_statementContext = Close_statementContext;

PlSqlParser.prototype.close_statement = function() {

    var localctx = new Close_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, PlSqlParser.RULE_close_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2869;
        this.match(PlSqlParser.CLOSE);
        this.state = 2870;
        this.cursor_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_open_statement;
    return this;
}

Open_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_statementContext.prototype.constructor = Open_statementContext;

Open_statementContext.prototype.OPEN = function() {
    return this.getToken(PlSqlParser.OPEN, 0);
};

Open_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Open_statementContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Open_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOpen_statement(this);
	}
};

Open_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOpen_statement(this);
	}
};




PlSqlParser.Open_statementContext = Open_statementContext;

PlSqlParser.prototype.open_statement = function() {

    var localctx = new Open_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, PlSqlParser.RULE_open_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2872;
        this.match(PlSqlParser.OPEN);
        this.state = 2873;
        this.cursor_name();
        this.state = 2879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 2874;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 2876;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 2875;
                this.expressions();
            }

            this.state = 2878;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_fetch_statement;
    this.it1 = null; // Token
    return this;
}

Fetch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_statementContext.prototype.constructor = Fetch_statementContext;

Fetch_statementContext.prototype.FETCH = function() {
    return this.getToken(PlSqlParser.FETCH, 0);
};

Fetch_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Fetch_statementContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Fetch_statementContext.prototype.BULK = function() {
    return this.getToken(PlSqlParser.BULK, 0);
};

Fetch_statementContext.prototype.COLLECT = function() {
    return this.getToken(PlSqlParser.COLLECT, 0);
};

Fetch_statementContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Fetch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFetch_statement(this);
	}
};

Fetch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFetch_statement(this);
	}
};




PlSqlParser.Fetch_statementContext = Fetch_statementContext;

PlSqlParser.prototype.fetch_statement = function() {

    var localctx = new Fetch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, PlSqlParser.RULE_fetch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2881;
        this.match(PlSqlParser.FETCH);
        this.state = 2882;
        this.cursor_name();
        this.state = 2903;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.INTO:
            this.state = 2883;
            localctx.it1 = this.match(PlSqlParser.INTO);
            this.state = 2884;
            this.variable_name();
            this.state = 2889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 2885;
                this.match(PlSqlParser.COMMA);
                this.state = 2886;
                this.variable_name();
                this.state = 2891;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case PlSqlParser.BULK:
            this.state = 2892;
            this.match(PlSqlParser.BULK);
            this.state = 2893;
            this.match(PlSqlParser.COLLECT);
            this.state = 2894;
            this.match(PlSqlParser.INTO);
            this.state = 2895;
            this.variable_name();
            this.state = 2900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 2896;
                this.match(PlSqlParser.COMMA);
                this.state = 2897;
                this.variable_name();
                this.state = 2902;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_for_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_open_for_statement;
    return this;
}

Open_for_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_for_statementContext.prototype.constructor = Open_for_statementContext;

Open_for_statementContext.prototype.OPEN = function() {
    return this.getToken(PlSqlParser.OPEN, 0);
};

Open_for_statementContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Open_for_statementContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Open_for_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Open_for_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Open_for_statementContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Open_for_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOpen_for_statement(this);
	}
};

Open_for_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOpen_for_statement(this);
	}
};




PlSqlParser.Open_for_statementContext = Open_for_statementContext;

PlSqlParser.prototype.open_for_statement = function() {

    var localctx = new Open_for_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, PlSqlParser.RULE_open_for_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2905;
        this.match(PlSqlParser.OPEN);
        this.state = 2906;
        this.variable_name();
        this.state = 2907;
        this.match(PlSqlParser.FOR);
        this.state = 2910;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2908;
            this.select_statement();
            break;

        case 2:
            this.state = 2909;
            this.expression();
            break;

        }
        this.state = 2913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.USING) {
            this.state = 2912;
            this.using_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_control_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_transaction_control_statements;
    return this;
}

Transaction_control_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_control_statementsContext.prototype.constructor = Transaction_control_statementsContext;

Transaction_control_statementsContext.prototype.set_transaction_command = function() {
    return this.getTypedRuleContext(Set_transaction_commandContext,0);
};

Transaction_control_statementsContext.prototype.set_constraint_command = function() {
    return this.getTypedRuleContext(Set_constraint_commandContext,0);
};

Transaction_control_statementsContext.prototype.commit_statement = function() {
    return this.getTypedRuleContext(Commit_statementContext,0);
};

Transaction_control_statementsContext.prototype.rollback_statement = function() {
    return this.getTypedRuleContext(Rollback_statementContext,0);
};

Transaction_control_statementsContext.prototype.savepoint_statement = function() {
    return this.getTypedRuleContext(Savepoint_statementContext,0);
};

Transaction_control_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTransaction_control_statements(this);
	}
};

Transaction_control_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTransaction_control_statements(this);
	}
};




PlSqlParser.Transaction_control_statementsContext = Transaction_control_statementsContext;

PlSqlParser.prototype.transaction_control_statements = function() {

    var localctx = new Transaction_control_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, PlSqlParser.RULE_transaction_control_statements);
    try {
        this.state = 2920;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2915;
            this.set_transaction_command();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2916;
            this.set_constraint_command();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2917;
            this.commit_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2918;
            this.rollback_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2919;
            this.savepoint_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_transaction_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_set_transaction_command;
    return this;
}

Set_transaction_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_transaction_commandContext.prototype.constructor = Set_transaction_commandContext;

Set_transaction_commandContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Set_transaction_commandContext.prototype.TRANSACTION = function() {
    return this.getToken(PlSqlParser.TRANSACTION, 0);
};

Set_transaction_commandContext.prototype.READ = function() {
    return this.getToken(PlSqlParser.READ, 0);
};

Set_transaction_commandContext.prototype.ISOLATION = function() {
    return this.getToken(PlSqlParser.ISOLATION, 0);
};

Set_transaction_commandContext.prototype.LEVEL = function() {
    return this.getToken(PlSqlParser.LEVEL, 0);
};

Set_transaction_commandContext.prototype.USE = function() {
    return this.getToken(PlSqlParser.USE, 0);
};

Set_transaction_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(PlSqlParser.ROLLBACK, 0);
};

Set_transaction_commandContext.prototype.SEGMENT = function() {
    return this.getToken(PlSqlParser.SEGMENT, 0);
};

Set_transaction_commandContext.prototype.rollback_segment_name = function() {
    return this.getTypedRuleContext(Rollback_segment_nameContext,0);
};

Set_transaction_commandContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Set_transaction_commandContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Set_transaction_commandContext.prototype.ONLY = function() {
    return this.getToken(PlSqlParser.ONLY, 0);
};

Set_transaction_commandContext.prototype.WRITE = function() {
    return this.getToken(PlSqlParser.WRITE, 0);
};

Set_transaction_commandContext.prototype.SERIALIZABLE = function() {
    return this.getToken(PlSqlParser.SERIALIZABLE, 0);
};

Set_transaction_commandContext.prototype.COMMITTED = function() {
    return this.getToken(PlSqlParser.COMMITTED, 0);
};

Set_transaction_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSet_transaction_command(this);
	}
};

Set_transaction_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSet_transaction_command(this);
	}
};




PlSqlParser.Set_transaction_commandContext = Set_transaction_commandContext;

PlSqlParser.prototype.set_transaction_command = function() {

    var localctx = new Set_transaction_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, PlSqlParser.RULE_set_transaction_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2922;
        this.match(PlSqlParser.SET);
        this.state = 2923;
        this.match(PlSqlParser.TRANSACTION);
        this.state = 2937;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.READ:
        	this.state = 2924;
        	this.match(PlSqlParser.READ);
        	this.state = 2925;
        	_la = this._input.LA(1);
        	if(!(_la===PlSqlParser.ONLY || _la===PlSqlParser.WRITE)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	break;
        case PlSqlParser.ISOLATION:
        	this.state = 2926;
        	this.match(PlSqlParser.ISOLATION);
        	this.state = 2927;
        	this.match(PlSqlParser.LEVEL);
        	this.state = 2931;
        	this._errHandler.sync(this);
        	switch(this._input.LA(1)) {
        	case PlSqlParser.SERIALIZABLE:
        	    this.state = 2928;
        	    this.match(PlSqlParser.SERIALIZABLE);
        	    break;
        	case PlSqlParser.READ:
        	    this.state = 2929;
        	    this.match(PlSqlParser.READ);
        	    this.state = 2930;
        	    this.match(PlSqlParser.COMMITTED);
        	    break;
        	default:
        	    throw new antlr4.error.NoViableAltException(this);
        	}
        	break;
        case PlSqlParser.USE:
        	this.state = 2933;
        	this.match(PlSqlParser.USE);
        	this.state = 2934;
        	this.match(PlSqlParser.ROLLBACK);
        	this.state = 2935;
        	this.match(PlSqlParser.SEGMENT);
        	this.state = 2936;
        	this.rollback_segment_name();
        	break;
        case PlSqlParser.EOF:
        case PlSqlParser.NAME:
        case PlSqlParser.SAVE:
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
        this.state = 2941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NAME) {
            this.state = 2939;
            this.match(PlSqlParser.NAME);
            this.state = 2940;
            this.quoted_string();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_constraint_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_set_constraint_command;
    return this;
}

Set_constraint_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_constraint_commandContext.prototype.constructor = Set_constraint_commandContext;

Set_constraint_commandContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Set_constraint_commandContext.prototype.CONSTRAINTS = function() {
    return this.getToken(PlSqlParser.CONSTRAINTS, 0);
};

Set_constraint_commandContext.prototype.IMMEDIATE = function() {
    return this.getToken(PlSqlParser.IMMEDIATE, 0);
};

Set_constraint_commandContext.prototype.DEFERRED = function() {
    return this.getToken(PlSqlParser.DEFERRED, 0);
};

Set_constraint_commandContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Set_constraint_commandContext.prototype.constraint_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constraint_nameContext);
    } else {
        return this.getTypedRuleContext(Constraint_nameContext,i);
    }
};

Set_constraint_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSet_constraint_command(this);
	}
};

Set_constraint_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSet_constraint_command(this);
	}
};




PlSqlParser.Set_constraint_commandContext = Set_constraint_commandContext;

PlSqlParser.prototype.set_constraint_command = function() {

    var localctx = new Set_constraint_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, PlSqlParser.RULE_set_constraint_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2943;
        this.match(PlSqlParser.SET);
        this.state = 2944;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CONSTRAINT || _la===PlSqlParser.CONSTRAINTS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2954;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ALL:
            this.state = 2945;
            this.match(PlSqlParser.ALL);
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 2946;
            this.constraint_name();
            this.state = 2951;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 2947;
                this.match(PlSqlParser.COMMA);
                this.state = 2948;
                this.constraint_name();
                this.state = 2953;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2956;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.DEFERRED || _la===PlSqlParser.IMMEDIATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Commit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_commit_statement;
    return this;
}

Commit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Commit_statementContext.prototype.constructor = Commit_statementContext;

Commit_statementContext.prototype.COMMIT = function() {
    return this.getToken(PlSqlParser.COMMIT, 0);
};

Commit_statementContext.prototype.WORK = function() {
    return this.getToken(PlSqlParser.WORK, 0);
};

Commit_statementContext.prototype.COMMENT = function() {
    return this.getToken(PlSqlParser.COMMENT, 0);
};

Commit_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Commit_statementContext.prototype.FORCE = function() {
    return this.getToken(PlSqlParser.FORCE, 0);
};

Commit_statementContext.prototype.write_clause = function() {
    return this.getTypedRuleContext(Write_clauseContext,0);
};

Commit_statementContext.prototype.CORRUPT_XID = function() {
    return this.getToken(PlSqlParser.CORRUPT_XID, 0);
};

Commit_statementContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(PlSqlParser.CORRUPT_XID_ALL, 0);
};

Commit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCommit_statement(this);
	}
};

Commit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCommit_statement(this);
	}
};




PlSqlParser.Commit_statementContext = Commit_statementContext;

PlSqlParser.prototype.commit_statement = function() {

    var localctx = new Commit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, PlSqlParser.RULE_commit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2958;
        this.match(PlSqlParser.COMMIT);
        this.state = 2960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WORK) {
            this.state = 2959;
            this.match(PlSqlParser.WORK);
        }

        this.state = 2975;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.COMMENT:
        	this.state = 2962;
        	this.match(PlSqlParser.COMMENT);
        	this.state = 2963;
        	this.expression();
        	break;
        case PlSqlParser.FORCE:
        	this.state = 2964;
        	this.match(PlSqlParser.FORCE);
        	this.state = 2973;
        	this._errHandler.sync(this);
        	var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
        	switch(la_) {
        	case 1:
        	    this.state = 2965;
        	    this.match(PlSqlParser.CORRUPT_XID);
        	    this.state = 2966;
        	    this.expression();
        	    break;

        	case 2:
        	    this.state = 2967;
        	    this.match(PlSqlParser.CORRUPT_XID_ALL);
        	    break;

        	case 3:
        	    this.state = 2968;
        	    this.expression();
        	    this.state = 2971;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	    if(_la===PlSqlParser.COMMA) {
        	        this.state = 2969;
        	        this.match(PlSqlParser.COMMA);
        	        this.state = 2970;
        	        this.expression();
        	    }

        	    break;

        	}
        	break;
        case PlSqlParser.EOF:
        case PlSqlParser.SAVE:
        case PlSqlParser.WRITE:
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
        this.state = 2978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WRITE) {
            this.state = 2977;
            this.write_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Write_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_write_clause;
    return this;
}

Write_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Write_clauseContext.prototype.constructor = Write_clauseContext;

Write_clauseContext.prototype.WRITE = function() {
    return this.getToken(PlSqlParser.WRITE, 0);
};

Write_clauseContext.prototype.WAIT = function() {
    return this.getToken(PlSqlParser.WAIT, 0);
};

Write_clauseContext.prototype.NOWAIT = function() {
    return this.getToken(PlSqlParser.NOWAIT, 0);
};

Write_clauseContext.prototype.IMMEDIATE = function() {
    return this.getToken(PlSqlParser.IMMEDIATE, 0);
};

Write_clauseContext.prototype.BATCH = function() {
    return this.getToken(PlSqlParser.BATCH, 0);
};

Write_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWrite_clause(this);
	}
};

Write_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWrite_clause(this);
	}
};




PlSqlParser.Write_clauseContext = Write_clauseContext;

PlSqlParser.prototype.write_clause = function() {

    var localctx = new Write_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, PlSqlParser.RULE_write_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2980;
        this.match(PlSqlParser.WRITE);
        this.state = 2982;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOWAIT || _la===PlSqlParser.WAIT) {
            this.state = 2981;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.NOWAIT || _la===PlSqlParser.WAIT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2985;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BATCH || _la===PlSqlParser.IMMEDIATE) {
            this.state = 2984;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.BATCH || _la===PlSqlParser.IMMEDIATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_rollback_statement;
    return this;
}

Rollback_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_statementContext.prototype.constructor = Rollback_statementContext;

Rollback_statementContext.prototype.ROLLBACK = function() {
    return this.getToken(PlSqlParser.ROLLBACK, 0);
};

Rollback_statementContext.prototype.WORK = function() {
    return this.getToken(PlSqlParser.WORK, 0);
};

Rollback_statementContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Rollback_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Rollback_statementContext.prototype.FORCE = function() {
    return this.getToken(PlSqlParser.FORCE, 0);
};

Rollback_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Rollback_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(PlSqlParser.SAVEPOINT, 0);
};

Rollback_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRollback_statement(this);
	}
};

Rollback_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRollback_statement(this);
	}
};




PlSqlParser.Rollback_statementContext = Rollback_statementContext;

PlSqlParser.prototype.rollback_statement = function() {

    var localctx = new Rollback_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, PlSqlParser.RULE_rollback_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2987;
        this.match(PlSqlParser.ROLLBACK);
        this.state = 2989;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WORK) {
            this.state = 2988;
            this.match(PlSqlParser.WORK);
        }

        this.state = 2998;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.TO:
        	this.state = 2991;
        	this.match(PlSqlParser.TO);
        	this.state = 2993;
        	this._errHandler.sync(this);
        	var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        	if(la_===1) {
        	    this.state = 2992;
        	    this.match(PlSqlParser.SAVEPOINT);

        	}
        	this.state = 2995;
        	this.savepoint_name();
        	break;
        case PlSqlParser.FORCE:
        	this.state = 2996;
        	this.match(PlSqlParser.FORCE);
        	this.state = 2997;
        	this.quoted_string();
        	break;
        case PlSqlParser.EOF:
        case PlSqlParser.SAVE:
        case PlSqlParser.SEMICOLON:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_savepoint_statement;
    return this;
}

Savepoint_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_statementContext.prototype.constructor = Savepoint_statementContext;

Savepoint_statementContext.prototype.SAVEPOINT = function() {
    return this.getToken(PlSqlParser.SAVEPOINT, 0);
};

Savepoint_statementContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Savepoint_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSavepoint_statement(this);
	}
};

Savepoint_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSavepoint_statement(this);
	}
};




PlSqlParser.Savepoint_statementContext = Savepoint_statementContext;

PlSqlParser.prototype.savepoint_statement = function() {

    var localctx = new Savepoint_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, PlSqlParser.RULE_savepoint_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3000;
        this.match(PlSqlParser.SAVEPOINT);
        this.state = 3001;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Explain_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_explain_statement;
    return this;
}

Explain_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explain_statementContext.prototype.constructor = Explain_statementContext;

Explain_statementContext.prototype.EXPLAIN = function() {
    return this.getToken(PlSqlParser.EXPLAIN, 0);
};

Explain_statementContext.prototype.PLAN = function() {
    return this.getToken(PlSqlParser.PLAN, 0);
};

Explain_statementContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Explain_statementContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Explain_statementContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Explain_statementContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Explain_statementContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Explain_statementContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Explain_statementContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Explain_statementContext.prototype.STATEMENT_ID = function() {
    return this.getToken(PlSqlParser.STATEMENT_ID, 0);
};

Explain_statementContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Explain_statementContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Explain_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Explain_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterExplain_statement(this);
	}
};

Explain_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitExplain_statement(this);
	}
};




PlSqlParser.Explain_statementContext = Explain_statementContext;

PlSqlParser.prototype.explain_statement = function() {

    var localctx = new Explain_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, PlSqlParser.RULE_explain_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3003;
        this.match(PlSqlParser.EXPLAIN);
        this.state = 3004;
        this.match(PlSqlParser.PLAN);
        this.state = 3009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.SET) {
            this.state = 3005;
            this.match(PlSqlParser.SET);
            this.state = 3006;
            this.match(PlSqlParser.STATEMENT_ID);
            this.state = 3007;
            this.match(PlSqlParser.EQUALS_OP);
            this.state = 3008;
            this.quoted_string();
        }

        this.state = 3013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INTO) {
            this.state = 3011;
            this.match(PlSqlParser.INTO);
            this.state = 3012;
            this.tableview_name();
        }

        this.state = 3015;
        this.match(PlSqlParser.FOR);
        this.state = 3021;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SELECT:
        case PlSqlParser.WITH:
        case PlSqlParser.LEFT_PAREN:
            this.state = 3016;
            this.select_statement();
            break;
        case PlSqlParser.UPDATE:
            this.state = 3017;
            this.update_statement();
            break;
        case PlSqlParser.DELETE:
            this.state = 3018;
            this.delete_statement();
            break;
        case PlSqlParser.INSERT:
            this.state = 3019;
            this.insert_statement();
            break;
        case PlSqlParser.MERGE:
            this.state = 3020;
            this.merge_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_select_statement;
    return this;
}

Select_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_statementContext.prototype.constructor = Select_statementContext;

Select_statementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Select_statementContext.prototype.subquery_factoring_clause = function() {
    return this.getTypedRuleContext(Subquery_factoring_clauseContext,0);
};

Select_statementContext.prototype.for_update_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(For_update_clauseContext);
    } else {
        return this.getTypedRuleContext(For_update_clauseContext,i);
    }
};

Select_statementContext.prototype.order_by_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_clauseContext);
    } else {
        return this.getTypedRuleContext(Order_by_clauseContext,i);
    }
};

Select_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSelect_statement(this);
	}
};

Select_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSelect_statement(this);
	}
};




PlSqlParser.Select_statementContext = Select_statementContext;

PlSqlParser.prototype.select_statement = function() {

    var localctx = new Select_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, PlSqlParser.RULE_select_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WITH) {
            this.state = 3023;
            this.subquery_factoring_clause();
        }

        this.state = 3026;
        this.subquery();
        this.state = 3031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.FOR || _la===PlSqlParser.ORDER) {
            this.state = 3029;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.FOR:
                this.state = 3027;
                this.for_update_clause();
                break;
            case PlSqlParser.ORDER:
                this.state = 3028;
                this.order_by_clause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_factoring_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subquery_factoring_clause;
    return this;
}

Subquery_factoring_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_factoring_clauseContext.prototype.constructor = Subquery_factoring_clauseContext;

Subquery_factoring_clauseContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

Subquery_factoring_clauseContext.prototype.factoring_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Factoring_elementContext);
    } else {
        return this.getTypedRuleContext(Factoring_elementContext,i);
    }
};

Subquery_factoring_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubquery_factoring_clause(this);
	}
};

Subquery_factoring_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubquery_factoring_clause(this);
	}
};




PlSqlParser.Subquery_factoring_clauseContext = Subquery_factoring_clauseContext;

PlSqlParser.prototype.subquery_factoring_clause = function() {

    var localctx = new Subquery_factoring_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, PlSqlParser.RULE_subquery_factoring_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3034;
        this.match(PlSqlParser.WITH);
        this.state = 3035;
        this.factoring_element();
        this.state = 3040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3036;
            this.match(PlSqlParser.COMMA);
            this.state = 3037;
            this.factoring_element();
            this.state = 3042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Factoring_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_factoring_element;
    return this;
}

Factoring_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Factoring_elementContext.prototype.constructor = Factoring_elementContext;

Factoring_elementContext.prototype.query_name = function() {
    return this.getTypedRuleContext(Query_nameContext,0);
};

Factoring_elementContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Factoring_elementContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Factoring_elementContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Factoring_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Factoring_elementContext.prototype.search_clause = function() {
    return this.getTypedRuleContext(Search_clauseContext,0);
};

Factoring_elementContext.prototype.cycle_clause = function() {
    return this.getTypedRuleContext(Cycle_clauseContext,0);
};

Factoring_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFactoring_element(this);
	}
};

Factoring_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFactoring_element(this);
	}
};




PlSqlParser.Factoring_elementContext = Factoring_elementContext;

PlSqlParser.prototype.factoring_element = function() {

    var localctx = new Factoring_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, PlSqlParser.RULE_factoring_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3043;
        this.query_name();
        this.state = 3055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 3044;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3045;
            this.column_name();
            this.state = 3050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3046;
                this.match(PlSqlParser.COMMA);
                this.state = 3047;
                this.column_name();
                this.state = 3052;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3053;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 3057;
        this.match(PlSqlParser.AS);
        this.state = 3058;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3059;
        this.subquery();
        this.state = 3061;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ORDER) {
            this.state = 3060;
            this.order_by_clause();
        }

        this.state = 3063;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.SEARCH) {
            this.state = 3064;
            this.search_clause();
        }

        this.state = 3068;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.CYCLE) {
            this.state = 3067;
            this.cycle_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_search_clause;
    return this;
}

Search_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_clauseContext.prototype.constructor = Search_clauseContext;

Search_clauseContext.prototype.SEARCH = function() {
    return this.getToken(PlSqlParser.SEARCH, 0);
};

Search_clauseContext.prototype.FIRST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.FIRST);
    } else {
        return this.getToken(PlSqlParser.FIRST, i);
    }
};


Search_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Search_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Search_clauseContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Search_clauseContext.prototype.DEPTH = function() {
    return this.getToken(PlSqlParser.DEPTH, 0);
};

Search_clauseContext.prototype.BREADTH = function() {
    return this.getToken(PlSqlParser.BREADTH, 0);
};

Search_clauseContext.prototype.ASC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ASC);
    } else {
        return this.getToken(PlSqlParser.ASC, i);
    }
};


Search_clauseContext.prototype.DESC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.DESC);
    } else {
        return this.getToken(PlSqlParser.DESC, i);
    }
};


Search_clauseContext.prototype.NULLS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NULLS);
    } else {
        return this.getToken(PlSqlParser.NULLS, i);
    }
};


Search_clauseContext.prototype.LAST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.LAST);
    } else {
        return this.getToken(PlSqlParser.LAST, i);
    }
};


Search_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSearch_clause(this);
	}
};

Search_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSearch_clause(this);
	}
};




PlSqlParser.Search_clauseContext = Search_clauseContext;

PlSqlParser.prototype.search_clause = function() {

    var localctx = new Search_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, PlSqlParser.RULE_search_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3070;
        this.match(PlSqlParser.SEARCH);
        this.state = 3071;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.BREADTH || _la===PlSqlParser.DEPTH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3072;
        this.match(PlSqlParser.FIRST);
        this.state = 3073;
        this.match(PlSqlParser.BY);
        this.state = 3074;
        this.column_name();
        this.state = 3076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ASC) {
            this.state = 3075;
            this.match(PlSqlParser.ASC);
        }

        this.state = 3079;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DESC) {
            this.state = 3078;
            this.match(PlSqlParser.DESC);
        }

        this.state = 3083;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
        if(la_===1) {
            this.state = 3081;
            this.match(PlSqlParser.NULLS);
            this.state = 3082;
            this.match(PlSqlParser.FIRST);

        }
        this.state = 3087;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NULLS) {
            this.state = 3085;
            this.match(PlSqlParser.NULLS);
            this.state = 3086;
            this.match(PlSqlParser.LAST);
        }

        this.state = 3107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3089;
            this.match(PlSqlParser.COMMA);
            this.state = 3090;
            this.column_name();
            this.state = 3092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.ASC) {
                this.state = 3091;
                this.match(PlSqlParser.ASC);
            }

            this.state = 3095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DESC) {
                this.state = 3094;
                this.match(PlSqlParser.DESC);
            }

            this.state = 3099;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
            if(la_===1) {
                this.state = 3097;
                this.match(PlSqlParser.NULLS);
                this.state = 3098;
                this.match(PlSqlParser.FIRST);

            }
            this.state = 3103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.NULLS) {
                this.state = 3101;
                this.match(PlSqlParser.NULLS);
                this.state = 3102;
                this.match(PlSqlParser.LAST);
            }

            this.state = 3109;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3110;
        this.match(PlSqlParser.SET);
        this.state = 3111;
        this.column_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cycle_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cycle_clause;
    return this;
}

Cycle_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cycle_clauseContext.prototype.constructor = Cycle_clauseContext;

Cycle_clauseContext.prototype.CYCLE = function() {
    return this.getToken(PlSqlParser.CYCLE, 0);
};

Cycle_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Cycle_clauseContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Cycle_clauseContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Cycle_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Cycle_clauseContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

Cycle_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCycle_clause(this);
	}
};

Cycle_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCycle_clause(this);
	}
};




PlSqlParser.Cycle_clauseContext = Cycle_clauseContext;

PlSqlParser.prototype.cycle_clause = function() {

    var localctx = new Cycle_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, PlSqlParser.RULE_cycle_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3113;
        this.match(PlSqlParser.CYCLE);
        this.state = 3114;
        this.column_name();
        this.state = 3119;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3115;
            this.match(PlSqlParser.COMMA);
            this.state = 3116;
            this.column_name();
            this.state = 3121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3122;
        this.match(PlSqlParser.SET);
        this.state = 3123;
        this.column_name();
        this.state = 3124;
        this.match(PlSqlParser.TO);
        this.state = 3125;
        this.expression();
        this.state = 3126;
        this.match(PlSqlParser.DEFAULT);
        this.state = 3127;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.subquery_basic_elements = function() {
    return this.getTypedRuleContext(Subquery_basic_elementsContext,0);
};

SubqueryContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubquery(this);
	}
};




PlSqlParser.SubqueryContext = SubqueryContext;

PlSqlParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, PlSqlParser.RULE_subquery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3129;
        this.subquery_basic_elements();
        this.state = 3133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.INTERSECT || _la===PlSqlParser.MINUS || _la===PlSqlParser.UNION) {
            this.state = 3130;
            this.subquery_operation_part();
            this.state = 3135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_basic_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subquery_basic_elements;
    return this;
}

Subquery_basic_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_basic_elementsContext.prototype.constructor = Subquery_basic_elementsContext;

Subquery_basic_elementsContext.prototype.query_block = function() {
    return this.getTypedRuleContext(Query_blockContext,0);
};

Subquery_basic_elementsContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Subquery_basic_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubquery_basic_elements(this);
	}
};

Subquery_basic_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubquery_basic_elements(this);
	}
};




PlSqlParser.Subquery_basic_elementsContext = Subquery_basic_elementsContext;

PlSqlParser.prototype.subquery_basic_elements = function() {

    var localctx = new Subquery_basic_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, PlSqlParser.RULE_subquery_basic_elements);
    try {
        this.state = 3141;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3136;
            this.query_block();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3137;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3138;
            this.subquery();
            this.state = 3139;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_operation_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subquery_operation_part;
    return this;
}

Subquery_operation_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_operation_partContext.prototype.constructor = Subquery_operation_partContext;

Subquery_operation_partContext.prototype.subquery_basic_elements = function() {
    return this.getTypedRuleContext(Subquery_basic_elementsContext,0);
};

Subquery_operation_partContext.prototype.UNION = function() {
    return this.getToken(PlSqlParser.UNION, 0);
};

Subquery_operation_partContext.prototype.INTERSECT = function() {
    return this.getToken(PlSqlParser.INTERSECT, 0);
};

Subquery_operation_partContext.prototype.MINUS = function() {
    return this.getToken(PlSqlParser.MINUS, 0);
};

Subquery_operation_partContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Subquery_operation_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubquery_operation_part(this);
	}
};

Subquery_operation_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubquery_operation_part(this);
	}
};




PlSqlParser.Subquery_operation_partContext = Subquery_operation_partContext;

PlSqlParser.prototype.subquery_operation_part = function() {

    var localctx = new Subquery_operation_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, PlSqlParser.RULE_subquery_operation_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3149;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.UNION:
            this.state = 3143;
            this.match(PlSqlParser.UNION);
            this.state = 3145;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.ALL) {
                this.state = 3144;
                this.match(PlSqlParser.ALL);
            }

            break;
        case PlSqlParser.INTERSECT:
            this.state = 3147;
            this.match(PlSqlParser.INTERSECT);
            break;
        case PlSqlParser.MINUS:
            this.state = 3148;
            this.match(PlSqlParser.MINUS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3151;
        this.subquery_basic_elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_query_block;
    return this;
}

Query_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_blockContext.prototype.constructor = Query_blockContext;

Query_blockContext.prototype.SELECT = function() {
    return this.getToken(PlSqlParser.SELECT, 0);
};

Query_blockContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Query_blockContext.prototype.selected_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Selected_elementContext);
    } else {
        return this.getTypedRuleContext(Selected_elementContext,i);
    }
};

Query_blockContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Query_blockContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Query_blockContext.prototype.hierarchical_query_clause = function() {
    return this.getTypedRuleContext(Hierarchical_query_clauseContext,0);
};

Query_blockContext.prototype.group_by_clause = function() {
    return this.getTypedRuleContext(Group_by_clauseContext,0);
};

Query_blockContext.prototype.model_clause = function() {
    return this.getTypedRuleContext(Model_clauseContext,0);
};

Query_blockContext.prototype.DISTINCT = function() {
    return this.getToken(PlSqlParser.DISTINCT, 0);
};

Query_blockContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Query_blockContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Query_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterQuery_block(this);
	}
};

Query_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitQuery_block(this);
	}
};




PlSqlParser.Query_blockContext = Query_blockContext;

PlSqlParser.prototype.query_block = function() {

    var localctx = new Query_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, PlSqlParser.RULE_query_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3153;
        this.match(PlSqlParser.SELECT);
        this.state = 3155;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
        if(la_===1) {
            this.state = 3154;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT || _la===PlSqlParser.UNIQUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 3166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ASTERISK:
            this.state = 3157;
            this.match(PlSqlParser.ASTERISK);
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NOT:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3158;
            this.selected_element();
            this.state = 3163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3159;
                this.match(PlSqlParser.COMMA);
                this.state = 3160;
                this.selected_element();
                this.state = 3165;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BULK || _la===PlSqlParser.INTO) {
            this.state = 3168;
            this.into_clause();
        }

        this.state = 3171;
        this.from_clause();
        this.state = 3173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
        if(la_===1) {
            this.state = 3172;
            this.where_clause();

        }
        this.state = 3176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
        if(la_===1) {
            this.state = 3175;
            this.hierarchical_query_clause();

        }
        this.state = 3179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
        if(la_===1) {
            this.state = 3178;
            this.group_by_clause();

        }
        this.state = 3182;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
        if(la_===1) {
            this.state = 3181;
            this.model_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_selected_element;
    return this;
}

Selected_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_elementContext.prototype.constructor = Selected_elementContext;

Selected_elementContext.prototype.select_list_elements = function() {
    return this.getTypedRuleContext(Select_list_elementsContext,0);
};

Selected_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Selected_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSelected_element(this);
	}
};

Selected_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSelected_element(this);
	}
};




PlSqlParser.Selected_elementContext = Selected_elementContext;

PlSqlParser.prototype.selected_element = function() {

    var localctx = new Selected_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, PlSqlParser.RULE_selected_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3184;
        this.select_list_elements();
        this.state = 3186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
        if(la_===1) {
            this.state = 3185;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(PlSqlParser.FROM, 0);
};

From_clauseContext.prototype.table_ref_list = function() {
    return this.getTypedRuleContext(Table_ref_listContext,0);
};

From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFrom_clause(this);
	}
};




PlSqlParser.From_clauseContext = From_clauseContext;

PlSqlParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, PlSqlParser.RULE_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3188;
        this.match(PlSqlParser.FROM);
        this.state = 3189;
        this.table_ref_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_list_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_select_list_elements;
    return this;
}

Select_list_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_list_elementsContext.prototype.constructor = Select_list_elementsContext;

Select_list_elementsContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Select_list_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Select_list_elementsContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Select_list_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSelect_list_elements(this);
	}
};

Select_list_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSelect_list_elements(this);
	}
};




PlSqlParser.Select_list_elementsContext = Select_list_elementsContext;

PlSqlParser.prototype.select_list_elements = function() {

    var localctx = new Select_list_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, PlSqlParser.RULE_select_list_elements);
    try {
        this.state = 3201;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3191;
            this.tableview_name();
            this.state = 3192;
            this.match(PlSqlParser.PERIOD);
            this.state = 3193;
            this.match(PlSqlParser.ASTERISK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3198;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
            if(la_===1) {
                this.state = 3195;
                this.regular_id();
                this.state = 3196;
                this.match(PlSqlParser.PERIOD);

            }
            this.state = 3200;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_ref_list;
    return this;
}

Table_ref_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_listContext.prototype.constructor = Table_ref_listContext;

Table_ref_listContext.prototype.table_ref = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_refContext);
    } else {
        return this.getTypedRuleContext(Table_refContext,i);
    }
};

Table_ref_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref_list(this);
	}
};

Table_ref_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref_list(this);
	}
};




PlSqlParser.Table_ref_listContext = Table_ref_listContext;

PlSqlParser.prototype.table_ref_list = function() {

    var localctx = new Table_ref_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, PlSqlParser.RULE_table_ref_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3203;
        this.table_ref();
        this.state = 3208;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,353,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3204;
                this.match(PlSqlParser.COMMA);
                this.state = 3205;
                this.table_ref(); 
            }
            this.state = 3210;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,353,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_ref;
    return this;
}

Table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_refContext.prototype.constructor = Table_refContext;

Table_refContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Table_refContext.prototype.join_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_clauseContext);
    } else {
        return this.getTypedRuleContext(Join_clauseContext,i);
    }
};

Table_refContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_refContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref(this);
	}
};

Table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref(this);
	}
};




PlSqlParser.Table_refContext = Table_refContext;

PlSqlParser.prototype.table_ref = function() {

    var localctx = new Table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, PlSqlParser.RULE_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3211;
        this.table_ref_aux();
        this.state = 3215;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3212;
                this.join_clause(); 
            }
            this.state = 3217;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
        }

        this.state = 3220;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
        if(la_===1) {
            this.state = 3218;
            this.pivot_clause();

        } else if(la_===2) {
            this.state = 3219;
            this.unpivot_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_auxContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_ref_aux;
    return this;
}

Table_ref_auxContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_auxContext.prototype.constructor = Table_ref_auxContext;

Table_ref_auxContext.prototype.table_ref_aux_internal = function() {
    return this.getTypedRuleContext(Table_ref_aux_internalContext,0);
};

Table_ref_auxContext.prototype.flashback_query_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Flashback_query_clauseContext);
    } else {
        return this.getTypedRuleContext(Flashback_query_clauseContext,i);
    }
};

Table_ref_auxContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Table_ref_auxContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref_aux(this);
	}
};

Table_ref_auxContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref_aux(this);
	}
};




PlSqlParser.Table_ref_auxContext = Table_ref_auxContext;

PlSqlParser.prototype.table_ref_aux = function() {

    var localctx = new Table_ref_auxContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, PlSqlParser.RULE_table_ref_aux);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3222;
        this.table_ref_aux_internal();
        this.state = 3226;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,356,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3223;
                this.flashback_query_clause(); 
            }
            this.state = 3228;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,356,this._ctx);
        }

        this.state = 3230;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
        if(la_===1) {
            this.state = 3229;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_ref_aux_internalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_ref_aux_internal;
    return this;
}

Table_ref_aux_internalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_ref_aux_internalContext.prototype.constructor = Table_ref_aux_internalContext;


 
Table_ref_aux_internalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Table_ref_aux_internal_threeContext(parser, ctx) {
	Table_ref_aux_internalContext.call(this, parser);
    Table_ref_aux_internalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Table_ref_aux_internal_threeContext.prototype = Object.create(Table_ref_aux_internalContext.prototype);
Table_ref_aux_internal_threeContext.prototype.constructor = Table_ref_aux_internal_threeContext;

PlSqlParser.Table_ref_aux_internal_threeContext = Table_ref_aux_internal_threeContext;

Table_ref_aux_internal_threeContext.prototype.ONLY = function() {
    return this.getToken(PlSqlParser.ONLY, 0);
};

Table_ref_aux_internal_threeContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};
Table_ref_aux_internal_threeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref_aux_internal_three(this);
	}
};

Table_ref_aux_internal_threeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref_aux_internal_three(this);
	}
};


function Table_ref_aux_internal_oneContext(parser, ctx) {
	Table_ref_aux_internalContext.call(this, parser);
    Table_ref_aux_internalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Table_ref_aux_internal_oneContext.prototype = Object.create(Table_ref_aux_internalContext.prototype);
Table_ref_aux_internal_oneContext.prototype.constructor = Table_ref_aux_internal_oneContext;

PlSqlParser.Table_ref_aux_internal_oneContext = Table_ref_aux_internal_oneContext;

Table_ref_aux_internal_oneContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

Table_ref_aux_internal_oneContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_ref_aux_internal_oneContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};
Table_ref_aux_internal_oneContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref_aux_internal_one(this);
	}
};

Table_ref_aux_internal_oneContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref_aux_internal_one(this);
	}
};


function Table_ref_aux_internal_twoContext(parser, ctx) {
	Table_ref_aux_internalContext.call(this, parser);
    Table_ref_aux_internalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Table_ref_aux_internal_twoContext.prototype = Object.create(Table_ref_aux_internalContext.prototype);
Table_ref_aux_internal_twoContext.prototype.constructor = Table_ref_aux_internal_twoContext;

PlSqlParser.Table_ref_aux_internal_twoContext = Table_ref_aux_internal_twoContext;

Table_ref_aux_internal_twoContext.prototype.table_ref = function() {
    return this.getTypedRuleContext(Table_refContext,0);
};

Table_ref_aux_internal_twoContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

Table_ref_aux_internal_twoContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Table_ref_aux_internal_twoContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};
Table_ref_aux_internal_twoContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_ref_aux_internal_two(this);
	}
};

Table_ref_aux_internal_twoContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_ref_aux_internal_two(this);
	}
};



PlSqlParser.Table_ref_aux_internalContext = Table_ref_aux_internalContext;

PlSqlParser.prototype.table_ref_aux_internal = function() {

    var localctx = new Table_ref_aux_internalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, PlSqlParser.RULE_table_ref_aux_internal);
    var _la = 0; // Token type
    try {
        this.state = 3255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Table_ref_aux_internal_oneContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3232;
            this.dml_table_expression_clause();
            this.state = 3235;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
            if(la_===1) {
                this.state = 3233;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 3234;
                this.unpivot_clause();

            }
            break;

        case 2:
            localctx = new Table_ref_aux_internal_twoContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3237;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3238;
            this.table_ref();
            this.state = 3242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.INTERSECT || _la===PlSqlParser.MINUS || _la===PlSqlParser.UNION) {
                this.state = 3239;
                this.subquery_operation_part();
                this.state = 3244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3245;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 3248;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
            if(la_===1) {
                this.state = 3246;
                this.pivot_clause();

            } else if(la_===2) {
                this.state = 3247;
                this.unpivot_clause();

            }
            break;

        case 3:
            localctx = new Table_ref_aux_internal_threeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3250;
            this.match(PlSqlParser.ONLY);
            this.state = 3251;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3252;
            this.dml_table_expression_clause();
            this.state = 3253;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;

Join_clauseContext.prototype.JOIN = function() {
    return this.getToken(PlSqlParser.JOIN, 0);
};

Join_clauseContext.prototype.table_ref_aux = function() {
    return this.getTypedRuleContext(Table_ref_auxContext,0);
};

Join_clauseContext.prototype.query_partition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_partition_clauseContext);
    } else {
        return this.getTypedRuleContext(Query_partition_clauseContext,i);
    }
};

Join_clauseContext.prototype.INNER = function() {
    return this.getToken(PlSqlParser.INNER, 0);
};

Join_clauseContext.prototype.outer_join_type = function() {
    return this.getTypedRuleContext(Outer_join_typeContext,0);
};

Join_clauseContext.prototype.join_on_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_on_partContext);
    } else {
        return this.getTypedRuleContext(Join_on_partContext,i);
    }
};

Join_clauseContext.prototype.join_using_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_using_partContext);
    } else {
        return this.getTypedRuleContext(Join_using_partContext,i);
    }
};

Join_clauseContext.prototype.CROSS = function() {
    return this.getToken(PlSqlParser.CROSS, 0);
};

Join_clauseContext.prototype.NATURAL = function() {
    return this.getToken(PlSqlParser.NATURAL, 0);
};

Join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterJoin_clause(this);
	}
};

Join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitJoin_clause(this);
	}
};




PlSqlParser.Join_clauseContext = Join_clauseContext;

PlSqlParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, PlSqlParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PARTITION) {
            this.state = 3257;
            this.query_partition_clause();
        }

        this.state = 3261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.CROSS || _la===PlSqlParser.NATURAL) {
            this.state = 3260;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.CROSS || _la===PlSqlParser.NATURAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3265;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.INNER:
        	this.state = 3263;
        	this.match(PlSqlParser.INNER);
        	break;
        case PlSqlParser.FULL:
        case PlSqlParser.LEFT:
        case PlSqlParser.RIGHT:
        	this.state = 3264;
        	this.outer_join_type();
        	break;
        case PlSqlParser.JOIN:
        	break;
        default:
        	break;
        }
        this.state = 3267;
        this.match(PlSqlParser.JOIN);
        this.state = 3268;
        this.table_ref_aux();
        this.state = 3270;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
        if(la_===1) {
            this.state = 3269;
            this.query_partition_clause();

        }
        this.state = 3276;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,367,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3274;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.ON:
                    this.state = 3272;
                    this.join_on_part();
                    break;
                case PlSqlParser.USING:
                    this.state = 3273;
                    this.join_using_part();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 3278;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,367,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_on_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_join_on_part;
    return this;
}

Join_on_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_on_partContext.prototype.constructor = Join_on_partContext;

Join_on_partContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Join_on_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Join_on_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterJoin_on_part(this);
	}
};

Join_on_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitJoin_on_part(this);
	}
};




PlSqlParser.Join_on_partContext = Join_on_partContext;

PlSqlParser.prototype.join_on_part = function() {

    var localctx = new Join_on_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, PlSqlParser.RULE_join_on_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3279;
        this.match(PlSqlParser.ON);
        this.state = 3280;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_using_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_join_using_part;
    return this;
}

Join_using_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_using_partContext.prototype.constructor = Join_using_partContext;

Join_using_partContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Join_using_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Join_using_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterJoin_using_part(this);
	}
};

Join_using_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitJoin_using_part(this);
	}
};




PlSqlParser.Join_using_partContext = Join_using_partContext;

PlSqlParser.prototype.join_using_part = function() {

    var localctx = new Join_using_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, PlSqlParser.RULE_join_using_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3282;
        this.match(PlSqlParser.USING);
        this.state = 3283;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3284;
        this.column_name();
        this.state = 3289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3285;
            this.match(PlSqlParser.COMMA);
            this.state = 3286;
            this.column_name();
            this.state = 3291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3292;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_outer_join_type;
    return this;
}

Outer_join_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_typeContext.prototype.constructor = Outer_join_typeContext;

Outer_join_typeContext.prototype.FULL = function() {
    return this.getToken(PlSqlParser.FULL, 0);
};

Outer_join_typeContext.prototype.LEFT = function() {
    return this.getToken(PlSqlParser.LEFT, 0);
};

Outer_join_typeContext.prototype.RIGHT = function() {
    return this.getToken(PlSqlParser.RIGHT, 0);
};

Outer_join_typeContext.prototype.OUTER = function() {
    return this.getToken(PlSqlParser.OUTER, 0);
};

Outer_join_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOuter_join_type(this);
	}
};

Outer_join_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOuter_join_type(this);
	}
};




PlSqlParser.Outer_join_typeContext = Outer_join_typeContext;

PlSqlParser.prototype.outer_join_type = function() {

    var localctx = new Outer_join_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, PlSqlParser.RULE_outer_join_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3294;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.FULL || _la===PlSqlParser.LEFT || _la===PlSqlParser.RIGHT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3296;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OUTER) {
            this.state = 3295;
            this.match(PlSqlParser.OUTER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_partition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_query_partition_clause;
    return this;
}

Query_partition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_partition_clauseContext.prototype.constructor = Query_partition_clauseContext;

Query_partition_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PlSqlParser.PARTITION, 0);
};

Query_partition_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Query_partition_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Query_partition_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Query_partition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterQuery_partition_clause(this);
	}
};

Query_partition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitQuery_partition_clause(this);
	}
};




PlSqlParser.Query_partition_clauseContext = Query_partition_clauseContext;

PlSqlParser.prototype.query_partition_clause = function() {

    var localctx = new Query_partition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, PlSqlParser.RULE_query_partition_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3298;
        this.match(PlSqlParser.PARTITION);
        this.state = 3299;
        this.match(PlSqlParser.BY);
        this.state = 3307;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3300;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3303;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
            if(la_===1) {
                this.state = 3301;
                this.subquery();

            } else if(la_===2) {
                this.state = 3302;
                this.expressions();

            }
            this.state = 3305;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 3306;
            this.expressions();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flashback_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_flashback_query_clause;
    return this;
}

Flashback_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flashback_query_clauseContext.prototype.constructor = Flashback_query_clauseContext;

Flashback_query_clauseContext.prototype.VERSIONS = function() {
    return this.getToken(PlSqlParser.VERSIONS, 0);
};

Flashback_query_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(PlSqlParser.BETWEEN, 0);
};

Flashback_query_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Flashback_query_clauseContext.prototype.SCN = function() {
    return this.getToken(PlSqlParser.SCN, 0);
};

Flashback_query_clauseContext.prototype.TIMESTAMP = function() {
    return this.getToken(PlSqlParser.TIMESTAMP, 0);
};

Flashback_query_clauseContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Flashback_query_clauseContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Flashback_query_clauseContext.prototype.SNAPSHOT = function() {
    return this.getToken(PlSqlParser.SNAPSHOT, 0);
};

Flashback_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFlashback_query_clause(this);
	}
};

Flashback_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFlashback_query_clause(this);
	}
};




PlSqlParser.Flashback_query_clauseContext = Flashback_query_clauseContext;

PlSqlParser.prototype.flashback_query_clause = function() {

    var localctx = new Flashback_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, PlSqlParser.RULE_flashback_query_clause);
    var _la = 0; // Token type
    try {
        this.state = 3317;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.VERSIONS:
            this.enterOuterAlt(localctx, 1);
            this.state = 3309;
            this.match(PlSqlParser.VERSIONS);
            this.state = 3310;
            this.match(PlSqlParser.BETWEEN);
            this.state = 3311;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.SCN || _la===PlSqlParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3312;
            this.expression();
            break;
        case PlSqlParser.AS:
            this.enterOuterAlt(localctx, 2);
            this.state = 3313;
            this.match(PlSqlParser.AS);
            this.state = 3314;
            this.match(PlSqlParser.OF);
            this.state = 3315;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.SCN || _la===PlSqlParser.SNAPSHOT || _la===PlSqlParser.TIMESTAMP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3316;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_clause;
    return this;
}

Pivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_clauseContext.prototype.constructor = Pivot_clauseContext;

Pivot_clauseContext.prototype.PIVOT = function() {
    return this.getToken(PlSqlParser.PIVOT, 0);
};

Pivot_clauseContext.prototype.pivot_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_elementContext,i);
    }
};

Pivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Pivot_clauseContext.prototype.pivot_in_clause = function() {
    return this.getTypedRuleContext(Pivot_in_clauseContext,0);
};

Pivot_clauseContext.prototype.XML = function() {
    return this.getToken(PlSqlParser.XML, 0);
};

Pivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_clause(this);
	}
};

Pivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_clause(this);
	}
};




PlSqlParser.Pivot_clauseContext = Pivot_clauseContext;

PlSqlParser.prototype.pivot_clause = function() {

    var localctx = new Pivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, PlSqlParser.RULE_pivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3319;
        this.match(PlSqlParser.PIVOT);
        this.state = 3321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.XML) {
            this.state = 3320;
            this.match(PlSqlParser.XML);
        }

        this.state = 3323;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3324;
        this.pivot_element();
        this.state = 3329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3325;
            this.match(PlSqlParser.COMMA);
            this.state = 3326;
            this.pivot_element();
            this.state = 3331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3332;
        this.pivot_for_clause();
        this.state = 3333;
        this.pivot_in_clause();
        this.state = 3334;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_element;
    return this;
}

Pivot_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_elementContext.prototype.constructor = Pivot_elementContext;

Pivot_elementContext.prototype.aggregate_function_name = function() {
    return this.getTypedRuleContext(Aggregate_function_nameContext,0);
};

Pivot_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_element(this);
	}
};

Pivot_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_element(this);
	}
};




PlSqlParser.Pivot_elementContext = Pivot_elementContext;

PlSqlParser.prototype.pivot_element = function() {

    var localctx = new Pivot_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, PlSqlParser.RULE_pivot_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3336;
        this.aggregate_function_name();
        this.state = 3337;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3338;
        this.expression();
        this.state = 3339;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 3340;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_for_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_for_clause;
    return this;
}

Pivot_for_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_for_clauseContext.prototype.constructor = Pivot_for_clauseContext;

Pivot_for_clauseContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Pivot_for_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Pivot_for_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_for_clause(this);
	}
};

Pivot_for_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_for_clause(this);
	}
};




PlSqlParser.Pivot_for_clauseContext = Pivot_for_clauseContext;

PlSqlParser.prototype.pivot_for_clause = function() {

    var localctx = new Pivot_for_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, PlSqlParser.RULE_pivot_for_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3343;
        this.match(PlSqlParser.FOR);
        this.state = 3356;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3344;
            this.column_name();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 3345;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3346;
            this.column_name();
            this.state = 3351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3347;
                this.match(PlSqlParser.COMMA);
                this.state = 3348;
                this.column_name();
                this.state = 3353;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3354;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_in_clause;
    return this;
}

Pivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clauseContext.prototype.constructor = Pivot_in_clauseContext;

Pivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Pivot_in_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Pivot_in_clauseContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ANY);
    } else {
        return this.getToken(PlSqlParser.ANY, i);
    }
};


Pivot_in_clauseContext.prototype.pivot_in_clause_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pivot_in_clause_elementContext);
    } else {
        return this.getTypedRuleContext(Pivot_in_clause_elementContext,i);
    }
};

Pivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_in_clause(this);
	}
};

Pivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_in_clause(this);
	}
};




PlSqlParser.Pivot_in_clauseContext = Pivot_in_clauseContext;

PlSqlParser.prototype.pivot_in_clause = function() {

    var localctx = new Pivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, PlSqlParser.RULE_pivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3358;
        this.match(PlSqlParser.IN);
        this.state = 3359;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3377;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3360;
            this.subquery();
            break;

        case 2:
            this.state = 3361;
            this.match(PlSqlParser.ANY);
            this.state = 3366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3362;
                this.match(PlSqlParser.COMMA);
                this.state = 3363;
                this.match(PlSqlParser.ANY);
                this.state = 3368;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.state = 3369;
            this.pivot_in_clause_element();
            this.state = 3374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3370;
                this.match(PlSqlParser.COMMA);
                this.state = 3371;
                this.pivot_in_clause_element();
                this.state = 3376;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 3379;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_in_clause_element;
    return this;
}

Pivot_in_clause_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementContext.prototype.constructor = Pivot_in_clause_elementContext;

Pivot_in_clause_elementContext.prototype.pivot_in_clause_elements = function() {
    return this.getTypedRuleContext(Pivot_in_clause_elementsContext,0);
};

Pivot_in_clause_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Pivot_in_clause_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_in_clause_element(this);
	}
};

Pivot_in_clause_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_in_clause_element(this);
	}
};




PlSqlParser.Pivot_in_clause_elementContext = Pivot_in_clause_elementContext;

PlSqlParser.prototype.pivot_in_clause_element = function() {

    var localctx = new Pivot_in_clause_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, PlSqlParser.RULE_pivot_in_clause_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3381;
        this.pivot_in_clause_elements();
        this.state = 3383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 3382;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_in_clause_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_pivot_in_clause_elements;
    return this;
}

Pivot_in_clause_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_in_clause_elementsContext.prototype.constructor = Pivot_in_clause_elementsContext;

Pivot_in_clause_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pivot_in_clause_elementsContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Pivot_in_clause_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPivot_in_clause_elements(this);
	}
};

Pivot_in_clause_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPivot_in_clause_elements(this);
	}
};




PlSqlParser.Pivot_in_clause_elementsContext = Pivot_in_clause_elementsContext;

PlSqlParser.prototype.pivot_in_clause_elements = function() {

    var localctx = new Pivot_in_clause_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, PlSqlParser.RULE_pivot_in_clause_elements);
    var _la = 0; // Token type
    try {
        this.state = 3391;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3385;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3386;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 3387;
                this.expressions();
            }

            this.state = 3390;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unpivot_clause;
    return this;
}

Unpivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_clauseContext.prototype.constructor = Unpivot_clauseContext;

Unpivot_clauseContext.prototype.UNPIVOT = function() {
    return this.getToken(PlSqlParser.UNPIVOT, 0);
};

Unpivot_clauseContext.prototype.pivot_for_clause = function() {
    return this.getTypedRuleContext(Pivot_for_clauseContext,0);
};

Unpivot_clauseContext.prototype.unpivot_in_clause = function() {
    return this.getTypedRuleContext(Unpivot_in_clauseContext,0);
};

Unpivot_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_clauseContext.prototype.NULLS = function() {
    return this.getToken(PlSqlParser.NULLS, 0);
};

Unpivot_clauseContext.prototype.INCLUDE = function() {
    return this.getToken(PlSqlParser.INCLUDE, 0);
};

Unpivot_clauseContext.prototype.EXCLUDE = function() {
    return this.getToken(PlSqlParser.EXCLUDE, 0);
};

Unpivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnpivot_clause(this);
	}
};

Unpivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnpivot_clause(this);
	}
};




PlSqlParser.Unpivot_clauseContext = Unpivot_clauseContext;

PlSqlParser.prototype.unpivot_clause = function() {

    var localctx = new Unpivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, PlSqlParser.RULE_unpivot_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3393;
        this.match(PlSqlParser.UNPIVOT);
        this.state = 3396;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.EXCLUDE || _la===PlSqlParser.INCLUDE) {
            this.state = 3394;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.EXCLUDE || _la===PlSqlParser.INCLUDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3395;
            this.match(PlSqlParser.NULLS);
        }

        this.state = 3398;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3411;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3399;
            this.column_name();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 3400;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3401;
            this.column_name();
            this.state = 3406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3402;
                this.match(PlSqlParser.COMMA);
                this.state = 3403;
                this.column_name();
                this.state = 3408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3409;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3413;
        this.pivot_for_clause();
        this.state = 3414;
        this.unpivot_in_clause();
        this.state = 3415;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unpivot_in_clause;
    return this;
}

Unpivot_in_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_clauseContext.prototype.constructor = Unpivot_in_clauseContext;

Unpivot_in_clauseContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Unpivot_in_clauseContext.prototype.unpivot_in_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Unpivot_in_elementsContext);
    } else {
        return this.getTypedRuleContext(Unpivot_in_elementsContext,i);
    }
};

Unpivot_in_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnpivot_in_clause(this);
	}
};

Unpivot_in_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnpivot_in_clause(this);
	}
};




PlSqlParser.Unpivot_in_clauseContext = Unpivot_in_clauseContext;

PlSqlParser.prototype.unpivot_in_clause = function() {

    var localctx = new Unpivot_in_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, PlSqlParser.RULE_unpivot_in_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3417;
        this.match(PlSqlParser.IN);
        this.state = 3418;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3419;
        this.unpivot_in_elements();
        this.state = 3424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3420;
            this.match(PlSqlParser.COMMA);
            this.state = 3421;
            this.unpivot_in_elements();
            this.state = 3426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3427;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_in_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unpivot_in_elements;
    return this;
}

Unpivot_in_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_in_elementsContext.prototype.constructor = Unpivot_in_elementsContext;

Unpivot_in_elementsContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Unpivot_in_elementsContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Unpivot_in_elementsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

Unpivot_in_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnpivot_in_elements(this);
	}
};

Unpivot_in_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnpivot_in_elements(this);
	}
};




PlSqlParser.Unpivot_in_elementsContext = Unpivot_in_elementsContext;

PlSqlParser.prototype.unpivot_in_elements = function() {

    var localctx = new Unpivot_in_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, PlSqlParser.RULE_unpivot_in_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3441;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3429;
            this.column_name();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 3430;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3431;
            this.column_name();
            this.state = 3436;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3432;
                this.match(PlSqlParser.COMMA);
                this.state = 3433;
                this.column_name();
                this.state = 3438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3439;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AS) {
            this.state = 3443;
            this.match(PlSqlParser.AS);
            this.state = 3456;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.DATE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DEFAULT:
            case PlSqlParser.FALSE:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.NULL:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TRUE:
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.UNSIGNED_INTEGER:
            case PlSqlParser.APPROXIMATE_NUM_LIT:
            case PlSqlParser.CHAR_STRING:
                this.state = 3444;
                this.constant();
                break;
            case PlSqlParser.LEFT_PAREN:
                this.state = 3445;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 3446;
                this.constant();
                this.state = 3451;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PlSqlParser.COMMA) {
                    this.state = 3447;
                    this.match(PlSqlParser.COMMA);
                    this.state = 3448;
                    this.constant();
                    this.state = 3453;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 3454;
                this.match(PlSqlParser.RIGHT_PAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hierarchical_query_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_hierarchical_query_clause;
    return this;
}

Hierarchical_query_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_query_clauseContext.prototype.constructor = Hierarchical_query_clauseContext;

Hierarchical_query_clauseContext.prototype.CONNECT = function() {
    return this.getToken(PlSqlParser.CONNECT, 0);
};

Hierarchical_query_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Hierarchical_query_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Hierarchical_query_clauseContext.prototype.NOCYCLE = function() {
    return this.getToken(PlSqlParser.NOCYCLE, 0);
};

Hierarchical_query_clauseContext.prototype.start_part = function() {
    return this.getTypedRuleContext(Start_partContext,0);
};

Hierarchical_query_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterHierarchical_query_clause(this);
	}
};

Hierarchical_query_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitHierarchical_query_clause(this);
	}
};




PlSqlParser.Hierarchical_query_clauseContext = Hierarchical_query_clauseContext;

PlSqlParser.prototype.hierarchical_query_clause = function() {

    var localctx = new Hierarchical_query_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, PlSqlParser.RULE_hierarchical_query_clause);
    try {
        this.state = 3477;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.CONNECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3460;
            this.match(PlSqlParser.CONNECT);
            this.state = 3461;
            this.match(PlSqlParser.BY);
            this.state = 3463;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
            if(la_===1) {
                this.state = 3462;
                this.match(PlSqlParser.NOCYCLE);

            }
            this.state = 3465;
            this.condition();
            this.state = 3467;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
            if(la_===1) {
                this.state = 3466;
                this.start_part();

            }
            break;
        case PlSqlParser.START:
            this.enterOuterAlt(localctx, 2);
            this.state = 3469;
            this.start_part();
            this.state = 3470;
            this.match(PlSqlParser.CONNECT);
            this.state = 3471;
            this.match(PlSqlParser.BY);
            this.state = 3473;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
            if(la_===1) {
                this.state = 3472;
                this.match(PlSqlParser.NOCYCLE);

            }
            this.state = 3475;
            this.condition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Start_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_start_part;
    return this;
}

Start_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Start_partContext.prototype.constructor = Start_partContext;

Start_partContext.prototype.START = function() {
    return this.getToken(PlSqlParser.START, 0);
};

Start_partContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

Start_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Start_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStart_part(this);
	}
};

Start_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStart_part(this);
	}
};




PlSqlParser.Start_partContext = Start_partContext;

PlSqlParser.prototype.start_part = function() {

    var localctx = new Start_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, PlSqlParser.RULE_start_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3479;
        this.match(PlSqlParser.START);
        this.state = 3480;
        this.match(PlSqlParser.WITH);
        this.state = 3481;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_group_by_clause;
    return this;
}

Group_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_clauseContext.prototype.constructor = Group_by_clauseContext;

Group_by_clauseContext.prototype.GROUP = function() {
    return this.getToken(PlSqlParser.GROUP, 0);
};

Group_by_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Group_by_clauseContext.prototype.group_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Group_by_elementsContext,i);
    }
};

Group_by_clauseContext.prototype.having_clause = function() {
    return this.getTypedRuleContext(Having_clauseContext,0);
};

Group_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGroup_by_clause(this);
	}
};

Group_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGroup_by_clause(this);
	}
};




PlSqlParser.Group_by_clauseContext = Group_by_clauseContext;

PlSqlParser.prototype.group_by_clause = function() {

    var localctx = new Group_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, PlSqlParser.RULE_group_by_clause);
    try {
        this.state = 3509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.GROUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3483;
            this.match(PlSqlParser.GROUP);
            this.state = 3484;
            this.match(PlSqlParser.BY);
            this.state = 3485;
            this.group_by_elements();
            this.state = 3490;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,397,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3486;
                    this.match(PlSqlParser.COMMA);
                    this.state = 3487;
                    this.group_by_elements(); 
                }
                this.state = 3492;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,397,this._ctx);
            }

            this.state = 3494;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
            if(la_===1) {
                this.state = 3493;
                this.having_clause();

            }
            break;
        case PlSqlParser.HAVING:
            this.enterOuterAlt(localctx, 2);
            this.state = 3496;
            this.having_clause();
            this.state = 3507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
            if(la_===1) {
                this.state = 3497;
                this.match(PlSqlParser.GROUP);
                this.state = 3498;
                this.match(PlSqlParser.BY);
                this.state = 3499;
                this.group_by_elements();
                this.state = 3504;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,399,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 3500;
                        this.match(PlSqlParser.COMMA);
                        this.state = 3501;
                        this.group_by_elements(); 
                    }
                    this.state = 3506;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,399,this._ctx);
                }


            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_group_by_elements;
    return this;
}

Group_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_elementsContext.prototype.constructor = Group_by_elementsContext;

Group_by_elementsContext.prototype.grouping_sets_clause = function() {
    return this.getTypedRuleContext(Grouping_sets_clauseContext,0);
};

Group_by_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Group_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Group_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGroup_by_elements(this);
	}
};

Group_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGroup_by_elements(this);
	}
};




PlSqlParser.Group_by_elementsContext = Group_by_elementsContext;

PlSqlParser.prototype.group_by_elements = function() {

    var localctx = new Group_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, PlSqlParser.RULE_group_by_elements);
    try {
        this.state = 3514;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3511;
            this.grouping_sets_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3512;
            this.rollup_cube_clause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3513;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_cube_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_rollup_cube_clause;
    return this;
}

Rollup_cube_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_cube_clauseContext.prototype.constructor = Rollup_cube_clauseContext;

Rollup_cube_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Rollup_cube_clauseContext.prototype.ROLLUP = function() {
    return this.getToken(PlSqlParser.ROLLUP, 0);
};

Rollup_cube_clauseContext.prototype.CUBE = function() {
    return this.getToken(PlSqlParser.CUBE, 0);
};

Rollup_cube_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRollup_cube_clause(this);
	}
};

Rollup_cube_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRollup_cube_clause(this);
	}
};




PlSqlParser.Rollup_cube_clauseContext = Rollup_cube_clauseContext;

PlSqlParser.prototype.rollup_cube_clause = function() {

    var localctx = new Rollup_cube_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, PlSqlParser.RULE_rollup_cube_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3516;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CUBE || _la===PlSqlParser.ROLLUP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3517;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3518;
        this.grouping_sets_elements();
        this.state = 3523;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3519;
            this.match(PlSqlParser.COMMA);
            this.state = 3520;
            this.grouping_sets_elements();
            this.state = 3525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3526;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_grouping_sets_clause;
    return this;
}

Grouping_sets_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_clauseContext.prototype.constructor = Grouping_sets_clauseContext;

Grouping_sets_clauseContext.prototype.GROUPING = function() {
    return this.getToken(PlSqlParser.GROUPING, 0);
};

Grouping_sets_clauseContext.prototype.SETS = function() {
    return this.getToken(PlSqlParser.SETS, 0);
};

Grouping_sets_clauseContext.prototype.grouping_sets_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Grouping_sets_elementsContext);
    } else {
        return this.getTypedRuleContext(Grouping_sets_elementsContext,i);
    }
};

Grouping_sets_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGrouping_sets_clause(this);
	}
};

Grouping_sets_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGrouping_sets_clause(this);
	}
};




PlSqlParser.Grouping_sets_clauseContext = Grouping_sets_clauseContext;

PlSqlParser.prototype.grouping_sets_clause = function() {

    var localctx = new Grouping_sets_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, PlSqlParser.RULE_grouping_sets_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3528;
        this.match(PlSqlParser.GROUPING);
        this.state = 3529;
        this.match(PlSqlParser.SETS);
        this.state = 3530;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3531;
        this.grouping_sets_elements();
        this.state = 3536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3532;
            this.match(PlSqlParser.COMMA);
            this.state = 3533;
            this.grouping_sets_elements();
            this.state = 3538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3539;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grouping_sets_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_grouping_sets_elements;
    return this;
}

Grouping_sets_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grouping_sets_elementsContext.prototype.constructor = Grouping_sets_elementsContext;

Grouping_sets_elementsContext.prototype.rollup_cube_clause = function() {
    return this.getTypedRuleContext(Rollup_cube_clauseContext,0);
};

Grouping_sets_elementsContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Grouping_sets_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Grouping_sets_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGrouping_sets_elements(this);
	}
};

Grouping_sets_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGrouping_sets_elements(this);
	}
};




PlSqlParser.Grouping_sets_elementsContext = Grouping_sets_elementsContext;

PlSqlParser.prototype.grouping_sets_elements = function() {

    var localctx = new Grouping_sets_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, PlSqlParser.RULE_grouping_sets_elements);
    var _la = 0; // Token type
    try {
        this.state = 3548;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3541;
            this.rollup_cube_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3542;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 3543;
                this.expressions();
            }

            this.state = 3546;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3547;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(PlSqlParser.HAVING, 0);
};

Having_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitHaving_clause(this);
	}
};




PlSqlParser.Having_clauseContext = Having_clauseContext;

PlSqlParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, PlSqlParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3550;
        this.match(PlSqlParser.HAVING);
        this.state = 3551;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_clause;
    return this;
}

Model_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_clauseContext.prototype.constructor = Model_clauseContext;

Model_clauseContext.prototype.MODEL = function() {
    return this.getToken(PlSqlParser.MODEL, 0);
};

Model_clauseContext.prototype.main_model = function() {
    return this.getTypedRuleContext(Main_modelContext,0);
};

Model_clauseContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Model_clauseContext.prototype.return_rows_clause = function() {
    return this.getTypedRuleContext(Return_rows_clauseContext,0);
};

Model_clauseContext.prototype.reference_model = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Reference_modelContext);
    } else {
        return this.getTypedRuleContext(Reference_modelContext,i);
    }
};

Model_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_clause(this);
	}
};

Model_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_clause(this);
	}
};




PlSqlParser.Model_clauseContext = Model_clauseContext;

PlSqlParser.prototype.model_clause = function() {

    var localctx = new Model_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, PlSqlParser.RULE_model_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3553;
        this.match(PlSqlParser.MODEL);
        this.state = 3557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.IGNORE || _la===PlSqlParser.KEEP || _la===PlSqlParser.UNIQUE) {
            this.state = 3554;
            this.cell_reference_options();
            this.state = 3559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RETURN) {
            this.state = 3560;
            this.return_rows_clause();
        }

        this.state = 3566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.REFERENCE) {
            this.state = 3563;
            this.reference_model();
            this.state = 3568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3569;
        this.main_model();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_reference_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cell_reference_options;
    return this;
}

Cell_reference_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_reference_optionsContext.prototype.constructor = Cell_reference_optionsContext;

Cell_reference_optionsContext.prototype.NAV = function() {
    return this.getToken(PlSqlParser.NAV, 0);
};

Cell_reference_optionsContext.prototype.IGNORE = function() {
    return this.getToken(PlSqlParser.IGNORE, 0);
};

Cell_reference_optionsContext.prototype.KEEP = function() {
    return this.getToken(PlSqlParser.KEEP, 0);
};

Cell_reference_optionsContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Cell_reference_optionsContext.prototype.DIMENSION = function() {
    return this.getToken(PlSqlParser.DIMENSION, 0);
};

Cell_reference_optionsContext.prototype.SINGLE = function() {
    return this.getToken(PlSqlParser.SINGLE, 0);
};

Cell_reference_optionsContext.prototype.REFERENCE = function() {
    return this.getToken(PlSqlParser.REFERENCE, 0);
};

Cell_reference_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCell_reference_options(this);
	}
};

Cell_reference_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCell_reference_options(this);
	}
};




PlSqlParser.Cell_reference_optionsContext = Cell_reference_optionsContext;

PlSqlParser.prototype.cell_reference_options = function() {

    var localctx = new Cell_reference_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, PlSqlParser.RULE_cell_reference_options);
    var _la = 0; // Token type
    try {
        this.state = 3579;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.IGNORE:
        case PlSqlParser.KEEP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3571;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.IGNORE || _la===PlSqlParser.KEEP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3572;
            this.match(PlSqlParser.NAV);
            break;
        case PlSqlParser.UNIQUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3573;
            this.match(PlSqlParser.UNIQUE);
            this.state = 3577;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.DIMENSION:
                this.state = 3574;
                this.match(PlSqlParser.DIMENSION);
                break;
            case PlSqlParser.SINGLE:
                this.state = 3575;
                this.match(PlSqlParser.SINGLE);
                this.state = 3576;
                this.match(PlSqlParser.REFERENCE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_rows_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_return_rows_clause;
    return this;
}

Return_rows_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_rows_clauseContext.prototype.constructor = Return_rows_clauseContext;

Return_rows_clauseContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Return_rows_clauseContext.prototype.ROWS = function() {
    return this.getToken(PlSqlParser.ROWS, 0);
};

Return_rows_clauseContext.prototype.UPDATED = function() {
    return this.getToken(PlSqlParser.UPDATED, 0);
};

Return_rows_clauseContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Return_rows_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReturn_rows_clause(this);
	}
};

Return_rows_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReturn_rows_clause(this);
	}
};




PlSqlParser.Return_rows_clauseContext = Return_rows_clauseContext;

PlSqlParser.prototype.return_rows_clause = function() {

    var localctx = new Return_rows_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, PlSqlParser.RULE_return_rows_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3581;
        this.match(PlSqlParser.RETURN);
        this.state = 3582;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.UPDATED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3583;
        this.match(PlSqlParser.ROWS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_reference_model;
    return this;
}

Reference_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_modelContext.prototype.constructor = Reference_modelContext;

Reference_modelContext.prototype.REFERENCE = function() {
    return this.getToken(PlSqlParser.REFERENCE, 0);
};

Reference_modelContext.prototype.reference_model_name = function() {
    return this.getTypedRuleContext(Reference_model_nameContext,0);
};

Reference_modelContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Reference_modelContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Reference_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Reference_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Reference_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReference_model(this);
	}
};

Reference_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReference_model(this);
	}
};




PlSqlParser.Reference_modelContext = Reference_modelContext;

PlSqlParser.prototype.reference_model = function() {

    var localctx = new Reference_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, PlSqlParser.RULE_reference_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3585;
        this.match(PlSqlParser.REFERENCE);
        this.state = 3586;
        this.reference_model_name();
        this.state = 3587;
        this.match(PlSqlParser.ON);
        this.state = 3588;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3589;
        this.subquery();
        this.state = 3590;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3591;
        this.model_column_clauses();
        this.state = 3595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.IGNORE || _la===PlSqlParser.KEEP || _la===PlSqlParser.UNIQUE) {
            this.state = 3592;
            this.cell_reference_options();
            this.state = 3597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_modelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_main_model;
    return this;
}

Main_modelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_modelContext.prototype.constructor = Main_modelContext;

Main_modelContext.prototype.model_column_clauses = function() {
    return this.getTypedRuleContext(Model_column_clausesContext,0);
};

Main_modelContext.prototype.model_rules_clause = function() {
    return this.getTypedRuleContext(Model_rules_clauseContext,0);
};

Main_modelContext.prototype.MAIN = function() {
    return this.getToken(PlSqlParser.MAIN, 0);
};

Main_modelContext.prototype.main_model_name = function() {
    return this.getTypedRuleContext(Main_model_nameContext,0);
};

Main_modelContext.prototype.cell_reference_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_reference_optionsContext);
    } else {
        return this.getTypedRuleContext(Cell_reference_optionsContext,i);
    }
};

Main_modelContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMain_model(this);
	}
};

Main_modelContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMain_model(this);
	}
};




PlSqlParser.Main_modelContext = Main_modelContext;

PlSqlParser.prototype.main_model = function() {

    var localctx = new Main_modelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, PlSqlParser.RULE_main_model);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.MAIN) {
            this.state = 3598;
            this.match(PlSqlParser.MAIN);
            this.state = 3599;
            this.main_model_name();
        }

        this.state = 3602;
        this.model_column_clauses();
        this.state = 3606;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.IGNORE || _la===PlSqlParser.KEEP || _la===PlSqlParser.UNIQUE) {
            this.state = 3603;
            this.cell_reference_options();
            this.state = 3608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3609;
        this.model_rules_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_column_clauses;
    return this;
}

Model_column_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_clausesContext.prototype.constructor = Model_column_clausesContext;

Model_column_clausesContext.prototype.DIMENSION = function() {
    return this.getToken(PlSqlParser.DIMENSION, 0);
};

Model_column_clausesContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Model_column_clausesContext.prototype.model_column_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_column_listContext);
    } else {
        return this.getTypedRuleContext(Model_column_listContext,i);
    }
};

Model_column_clausesContext.prototype.MEASURES = function() {
    return this.getToken(PlSqlParser.MEASURES, 0);
};

Model_column_clausesContext.prototype.model_column_partition_part = function() {
    return this.getTypedRuleContext(Model_column_partition_partContext,0);
};

Model_column_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_column_clauses(this);
	}
};

Model_column_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_column_clauses(this);
	}
};




PlSqlParser.Model_column_clausesContext = Model_column_clausesContext;

PlSqlParser.prototype.model_column_clauses = function() {

    var localctx = new Model_column_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, PlSqlParser.RULE_model_column_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3612;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PARTITION) {
            this.state = 3611;
            this.model_column_partition_part();
        }

        this.state = 3614;
        this.match(PlSqlParser.DIMENSION);
        this.state = 3615;
        this.match(PlSqlParser.BY);
        this.state = 3616;
        this.model_column_list();
        this.state = 3617;
        this.match(PlSqlParser.MEASURES);
        this.state = 3618;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_partition_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_column_partition_part;
    return this;
}

Model_column_partition_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_partition_partContext.prototype.constructor = Model_column_partition_partContext;

Model_column_partition_partContext.prototype.PARTITION = function() {
    return this.getToken(PlSqlParser.PARTITION, 0);
};

Model_column_partition_partContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Model_column_partition_partContext.prototype.model_column_list = function() {
    return this.getTypedRuleContext(Model_column_listContext,0);
};

Model_column_partition_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_column_partition_part(this);
	}
};

Model_column_partition_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_column_partition_part(this);
	}
};




PlSqlParser.Model_column_partition_partContext = Model_column_partition_partContext;

PlSqlParser.prototype.model_column_partition_part = function() {

    var localctx = new Model_column_partition_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, PlSqlParser.RULE_model_column_partition_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3620;
        this.match(PlSqlParser.PARTITION);
        this.state = 3621;
        this.match(PlSqlParser.BY);
        this.state = 3622;
        this.model_column_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_column_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_column_list;
    return this;
}

Model_column_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_column_listContext.prototype.constructor = Model_column_listContext;

Model_column_listContext.prototype.model_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_columnContext);
    } else {
        return this.getTypedRuleContext(Model_columnContext,i);
    }
};

Model_column_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_column_list(this);
	}
};

Model_column_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_column_list(this);
	}
};




PlSqlParser.Model_column_listContext = Model_column_listContext;

PlSqlParser.prototype.model_column_list = function() {

    var localctx = new Model_column_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, PlSqlParser.RULE_model_column_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3624;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3625;
        this.model_column();
        this.state = 3630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3626;
            this.match(PlSqlParser.COMMA);
            this.state = 3627;
            this.model_column();
            this.state = 3632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3633;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_column;
    return this;
}

Model_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_columnContext.prototype.constructor = Model_columnContext;

Model_columnContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_columnContext.prototype.query_block = function() {
    return this.getTypedRuleContext(Query_blockContext,0);
};

Model_columnContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Model_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_column(this);
	}
};

Model_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_column(this);
	}
};




PlSqlParser.Model_columnContext = Model_columnContext;

PlSqlParser.prototype.model_column = function() {

    var localctx = new Model_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, PlSqlParser.RULE_model_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NOT:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3635;
            this.expression();
            break;
        case PlSqlParser.SELECT:
            this.state = 3636;
            this.query_block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 3639;
            this.column_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_rules_clause;
    return this;
}

Model_rules_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_clauseContext.prototype.constructor = Model_rules_clauseContext;

Model_rules_clauseContext.prototype.model_rules_part = function() {
    return this.getTypedRuleContext(Model_rules_partContext,0);
};

Model_rules_clauseContext.prototype.model_rules_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Model_rules_elementContext);
    } else {
        return this.getTypedRuleContext(Model_rules_elementContext,i);
    }
};

Model_rules_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_rules_clause(this);
	}
};

Model_rules_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_rules_clause(this);
	}
};




PlSqlParser.Model_rules_clauseContext = Model_rules_clauseContext;

PlSqlParser.prototype.model_rules_clause = function() {

    var localctx = new Model_rules_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, PlSqlParser.RULE_model_rules_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RULES) {
            this.state = 3642;
            this.model_rules_part();
        }

        this.state = 3645;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPDATE - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 3646;
            this.model_rules_element();
            this.state = 3651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3647;
                this.match(PlSqlParser.COMMA);
                this.state = 3648;
                this.model_rules_element();
                this.state = 3653;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3656;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_rules_part;
    return this;
}

Model_rules_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_partContext.prototype.constructor = Model_rules_partContext;

Model_rules_partContext.prototype.RULES = function() {
    return this.getToken(PlSqlParser.RULES, 0);
};

Model_rules_partContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Model_rules_partContext.prototype.UPSERT = function() {
    return this.getToken(PlSqlParser.UPSERT, 0);
};

Model_rules_partContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Model_rules_partContext.prototype.model_iterate_clause = function() {
    return this.getTypedRuleContext(Model_iterate_clauseContext,0);
};

Model_rules_partContext.prototype.AUTOMATIC = function() {
    return this.getToken(PlSqlParser.AUTOMATIC, 0);
};

Model_rules_partContext.prototype.SEQUENTIAL = function() {
    return this.getToken(PlSqlParser.SEQUENTIAL, 0);
};

Model_rules_partContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Model_rules_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_rules_part(this);
	}
};

Model_rules_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_rules_part(this);
	}
};




PlSqlParser.Model_rules_partContext = Model_rules_partContext;

PlSqlParser.prototype.model_rules_part = function() {

    var localctx = new Model_rules_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, PlSqlParser.RULE_model_rules_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3658;
        this.match(PlSqlParser.RULES);
        this.state = 3664;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PlSqlParser.UPDATE:
        	this.state = 3659;
        	this.match(PlSqlParser.UPDATE);
        	break;
        case PlSqlParser.UPSERT:
        	this.state = 3660;
        	this.match(PlSqlParser.UPSERT);
        	this.state = 3662;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===PlSqlParser.ALL) {
        	    this.state = 3661;
        	    this.match(PlSqlParser.ALL);
        	}

        	break;
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.ITERATE:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.LEFT_PAREN:
        	break;
        default:
        	break;
        }
        this.state = 3668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AUTOMATIC || _la===PlSqlParser.SEQUENTIAL) {
            this.state = 3666;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.AUTOMATIC || _la===PlSqlParser.SEQUENTIAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3667;
            this.match(PlSqlParser.ORDER);
        }

        this.state = 3671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ITERATE) {
            this.state = 3670;
            this.model_iterate_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_rules_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_rules_element;
    return this;
}

Model_rules_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_rules_elementContext.prototype.constructor = Model_rules_elementContext;

Model_rules_elementContext.prototype.cell_assignment = function() {
    return this.getTypedRuleContext(Cell_assignmentContext,0);
};

Model_rules_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_rules_elementContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Model_rules_elementContext.prototype.UPSERT = function() {
    return this.getToken(PlSqlParser.UPSERT, 0);
};

Model_rules_elementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Model_rules_elementContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Model_rules_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_rules_element(this);
	}
};

Model_rules_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_rules_element(this);
	}
};




PlSqlParser.Model_rules_elementContext = Model_rules_elementContext;

PlSqlParser.prototype.model_rules_element = function() {

    var localctx = new Model_rules_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, PlSqlParser.RULE_model_rules_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3678;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,427,this._ctx);
        if(la_===1) {
            this.state = 3673;
            this.match(PlSqlParser.UPDATE);

        } else if(la_===2) {
            this.state = 3674;
            this.match(PlSqlParser.UPSERT);
            this.state = 3676;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
            if(la_===1) {
                this.state = 3675;
                this.match(PlSqlParser.ALL);

            }

        }
        this.state = 3680;
        this.cell_assignment();
        this.state = 3682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ORDER) {
            this.state = 3681;
            this.order_by_clause();
        }

        this.state = 3684;
        this.match(PlSqlParser.EQUALS_OP);
        this.state = 3685;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cell_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cell_assignment;
    return this;
}

Cell_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_assignmentContext.prototype.constructor = Cell_assignmentContext;

Cell_assignmentContext.prototype.model_expression = function() {
    return this.getTypedRuleContext(Model_expressionContext,0);
};

Cell_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCell_assignment(this);
	}
};

Cell_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCell_assignment(this);
	}
};




PlSqlParser.Cell_assignmentContext = Cell_assignmentContext;

PlSqlParser.prototype.cell_assignment = function() {

    var localctx = new Cell_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, PlSqlParser.RULE_cell_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3687;
        this.model_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_iterate_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_iterate_clause;
    return this;
}

Model_iterate_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_iterate_clauseContext.prototype.constructor = Model_iterate_clauseContext;

Model_iterate_clauseContext.prototype.ITERATE = function() {
    return this.getToken(PlSqlParser.ITERATE, 0);
};

Model_iterate_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Model_iterate_clauseContext.prototype.until_part = function() {
    return this.getTypedRuleContext(Until_partContext,0);
};

Model_iterate_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_iterate_clause(this);
	}
};

Model_iterate_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_iterate_clause(this);
	}
};




PlSqlParser.Model_iterate_clauseContext = Model_iterate_clauseContext;

PlSqlParser.prototype.model_iterate_clause = function() {

    var localctx = new Model_iterate_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, PlSqlParser.RULE_model_iterate_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3689;
        this.match(PlSqlParser.ITERATE);
        this.state = 3690;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3691;
        this.expression();
        this.state = 3692;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.UNTIL) {
            this.state = 3693;
            this.until_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Until_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_until_part;
    return this;
}

Until_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Until_partContext.prototype.constructor = Until_partContext;

Until_partContext.prototype.UNTIL = function() {
    return this.getToken(PlSqlParser.UNTIL, 0);
};

Until_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Until_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUntil_part(this);
	}
};

Until_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUntil_part(this);
	}
};




PlSqlParser.Until_partContext = Until_partContext;

PlSqlParser.prototype.until_part = function() {

    var localctx = new Until_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, PlSqlParser.RULE_until_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3696;
        this.match(PlSqlParser.UNTIL);
        this.state = 3697;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3698;
        this.condition();
        this.state = 3699;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_order_by_clause;
    return this;
}

Order_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_clauseContext.prototype.constructor = Order_by_clauseContext;

Order_by_clauseContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Order_by_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Order_by_clauseContext.prototype.order_by_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_elementsContext);
    } else {
        return this.getTypedRuleContext(Order_by_elementsContext,i);
    }
};

Order_by_clauseContext.prototype.SIBLINGS = function() {
    return this.getToken(PlSqlParser.SIBLINGS, 0);
};

Order_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOrder_by_clause(this);
	}
};

Order_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOrder_by_clause(this);
	}
};




PlSqlParser.Order_by_clauseContext = Order_by_clauseContext;

PlSqlParser.prototype.order_by_clause = function() {

    var localctx = new Order_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, PlSqlParser.RULE_order_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3701;
        this.match(PlSqlParser.ORDER);
        this.state = 3703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.SIBLINGS) {
            this.state = 3702;
            this.match(PlSqlParser.SIBLINGS);
        }

        this.state = 3705;
        this.match(PlSqlParser.BY);
        this.state = 3706;
        this.order_by_elements();
        this.state = 3711;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3707;
            this.match(PlSqlParser.COMMA);
            this.state = 3708;
            this.order_by_elements();
            this.state = 3713;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_order_by_elements;
    return this;
}

Order_by_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_elementsContext.prototype.constructor = Order_by_elementsContext;

Order_by_elementsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Order_by_elementsContext.prototype.NULLS = function() {
    return this.getToken(PlSqlParser.NULLS, 0);
};

Order_by_elementsContext.prototype.ASC = function() {
    return this.getToken(PlSqlParser.ASC, 0);
};

Order_by_elementsContext.prototype.DESC = function() {
    return this.getToken(PlSqlParser.DESC, 0);
};

Order_by_elementsContext.prototype.FIRST = function() {
    return this.getToken(PlSqlParser.FIRST, 0);
};

Order_by_elementsContext.prototype.LAST = function() {
    return this.getToken(PlSqlParser.LAST, 0);
};

Order_by_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOrder_by_elements(this);
	}
};

Order_by_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOrder_by_elements(this);
	}
};




PlSqlParser.Order_by_elementsContext = Order_by_elementsContext;

PlSqlParser.prototype.order_by_elements = function() {

    var localctx = new Order_by_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, PlSqlParser.RULE_order_by_elements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3714;
        this.expression();
        this.state = 3716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ASC || _la===PlSqlParser.DESC) {
            this.state = 3715;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.ASC || _la===PlSqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3720;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NULLS) {
            this.state = 3718;
            this.match(PlSqlParser.NULLS);
            this.state = 3719;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FIRST || _la===PlSqlParser.LAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_for_update_clause;
    return this;
}

For_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_clauseContext.prototype.constructor = For_update_clauseContext;

For_update_clauseContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

For_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

For_update_clauseContext.prototype.for_update_of_part = function() {
    return this.getTypedRuleContext(For_update_of_partContext,0);
};

For_update_clauseContext.prototype.for_update_options = function() {
    return this.getTypedRuleContext(For_update_optionsContext,0);
};

For_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFor_update_clause(this);
	}
};

For_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFor_update_clause(this);
	}
};




PlSqlParser.For_update_clauseContext = For_update_clauseContext;

PlSqlParser.prototype.for_update_clause = function() {

    var localctx = new For_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, PlSqlParser.RULE_for_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3722;
        this.match(PlSqlParser.FOR);
        this.state = 3723;
        this.match(PlSqlParser.UPDATE);
        this.state = 3725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.OF) {
            this.state = 3724;
            this.for_update_of_part();
        }

        this.state = 3728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOWAIT || _la===PlSqlParser.SKIP_ || _la===PlSqlParser.WAIT) {
            this.state = 3727;
            this.for_update_options();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_of_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_for_update_of_part;
    return this;
}

For_update_of_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_of_partContext.prototype.constructor = For_update_of_partContext;

For_update_of_partContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

For_update_of_partContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

For_update_of_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFor_update_of_part(this);
	}
};

For_update_of_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFor_update_of_part(this);
	}
};




PlSqlParser.For_update_of_partContext = For_update_of_partContext;

PlSqlParser.prototype.for_update_of_part = function() {

    var localctx = new For_update_of_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, PlSqlParser.RULE_for_update_of_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3730;
        this.match(PlSqlParser.OF);
        this.state = 3731;
        this.column_name();
        this.state = 3736;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3732;
            this.match(PlSqlParser.COMMA);
            this.state = 3733;
            this.column_name();
            this.state = 3738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_update_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_for_update_options;
    return this;
}

For_update_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_update_optionsContext.prototype.constructor = For_update_optionsContext;

For_update_optionsContext.prototype.SKIP_ = function() {
    return this.getToken(PlSqlParser.SKIP_, 0);
};

For_update_optionsContext.prototype.LOCKED = function() {
    return this.getToken(PlSqlParser.LOCKED, 0);
};

For_update_optionsContext.prototype.NOWAIT = function() {
    return this.getToken(PlSqlParser.NOWAIT, 0);
};

For_update_optionsContext.prototype.WAIT = function() {
    return this.getToken(PlSqlParser.WAIT, 0);
};

For_update_optionsContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_update_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFor_update_options(this);
	}
};

For_update_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFor_update_options(this);
	}
};




PlSqlParser.For_update_optionsContext = For_update_optionsContext;

PlSqlParser.prototype.for_update_options = function() {

    var localctx = new For_update_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, PlSqlParser.RULE_for_update_options);
    try {
        this.state = 3744;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SKIP_:
            this.enterOuterAlt(localctx, 1);
            this.state = 3739;
            this.match(PlSqlParser.SKIP_);
            this.state = 3740;
            this.match(PlSqlParser.LOCKED);
            break;
        case PlSqlParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3741;
            this.match(PlSqlParser.NOWAIT);
            break;
        case PlSqlParser.WAIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 3742;
            this.match(PlSqlParser.WAIT);
            this.state = 3743;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_update_statement;
    return this;
}

Update_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_statementContext.prototype.constructor = Update_statementContext;

Update_statementContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Update_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Update_statementContext.prototype.update_set_clause = function() {
    return this.getTypedRuleContext(Update_set_clauseContext,0);
};

Update_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Update_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Update_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Update_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUpdate_statement(this);
	}
};

Update_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUpdate_statement(this);
	}
};




PlSqlParser.Update_statementContext = Update_statementContext;

PlSqlParser.prototype.update_statement = function() {

    var localctx = new Update_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, PlSqlParser.RULE_update_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3746;
        this.match(PlSqlParser.UPDATE);
        this.state = 3747;
        this.general_table_ref();
        this.state = 3748;
        this.update_set_clause();
        this.state = 3750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHERE) {
            this.state = 3749;
            this.where_clause();
        }

        this.state = 3753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN) {
            this.state = 3752;
            this.static_returning_clause();
        }

        this.state = 3756;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LOG) {
            this.state = 3755;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_update_set_clause;
    return this;
}

Update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_set_clauseContext.prototype.constructor = Update_set_clauseContext;

Update_set_clauseContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Update_set_clauseContext.prototype.column_based_update_set_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_based_update_set_clauseContext);
    } else {
        return this.getTypedRuleContext(Column_based_update_set_clauseContext,i);
    }
};

Update_set_clauseContext.prototype.VALUE = function() {
    return this.getToken(PlSqlParser.VALUE, 0);
};

Update_set_clauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUpdate_set_clause(this);
	}
};

Update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUpdate_set_clause(this);
	}
};




PlSqlParser.Update_set_clauseContext = Update_set_clauseContext;

PlSqlParser.prototype.update_set_clause = function() {

    var localctx = new Update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, PlSqlParser.RULE_update_set_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3758;
        this.match(PlSqlParser.SET);
        this.state = 3774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3759;
            this.column_based_update_set_clause();
            this.state = 3764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3760;
                this.match(PlSqlParser.COMMA);
                this.state = 3761;
                this.column_based_update_set_clause();
                this.state = 3766;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 3767;
            this.match(PlSqlParser.VALUE);
            this.state = 3768;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3769;
            this.identifier();
            this.state = 3770;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 3771;
            this.match(PlSqlParser.EQUALS_OP);
            this.state = 3772;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_based_update_set_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_column_based_update_set_clause;
    return this;
}

Column_based_update_set_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_based_update_set_clauseContext.prototype.constructor = Column_based_update_set_clauseContext;

Column_based_update_set_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Column_based_update_set_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Column_based_update_set_clauseContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Column_based_update_set_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterColumn_based_update_set_clause(this);
	}
};

Column_based_update_set_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitColumn_based_update_set_clause(this);
	}
};




PlSqlParser.Column_based_update_set_clauseContext = Column_based_update_set_clauseContext;

PlSqlParser.prototype.column_based_update_set_clause = function() {

    var localctx = new Column_based_update_set_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, PlSqlParser.RULE_column_based_update_set_clause);
    var _la = 0; // Token type
    try {
        this.state = 3793;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 3776;
            this.column_name();
            this.state = 3777;
            this.match(PlSqlParser.EQUALS_OP);
            this.state = 3778;
            this.expression();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 3780;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3781;
            this.column_name();
            this.state = 3786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3782;
                this.match(PlSqlParser.COMMA);
                this.state = 3783;
                this.column_name();
                this.state = 3788;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3789;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 3790;
            this.match(PlSqlParser.EQUALS_OP);
            this.state = 3791;
            this.subquery();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_delete_statement;
    return this;
}

Delete_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_statementContext.prototype.constructor = Delete_statementContext;

Delete_statementContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

Delete_statementContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Delete_statementContext.prototype.FROM = function() {
    return this.getToken(PlSqlParser.FROM, 0);
};

Delete_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Delete_statementContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Delete_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Delete_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDelete_statement(this);
	}
};

Delete_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDelete_statement(this);
	}
};




PlSqlParser.Delete_statementContext = Delete_statementContext;

PlSqlParser.prototype.delete_statement = function() {

    var localctx = new Delete_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, PlSqlParser.RULE_delete_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3795;
        this.match(PlSqlParser.DELETE);
        this.state = 3797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FROM) {
            this.state = 3796;
            this.match(PlSqlParser.FROM);
        }

        this.state = 3799;
        this.general_table_ref();
        this.state = 3801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHERE) {
            this.state = 3800;
            this.where_clause();
        }

        this.state = 3804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN) {
            this.state = 3803;
            this.static_returning_clause();
        }

        this.state = 3807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LOG) {
            this.state = 3806;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_insert_statement;
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(PlSqlParser.INSERT, 0);
};

Insert_statementContext.prototype.single_table_insert = function() {
    return this.getTypedRuleContext(Single_table_insertContext,0);
};

Insert_statementContext.prototype.multi_table_insert = function() {
    return this.getTypedRuleContext(Multi_table_insertContext,0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitInsert_statement(this);
	}
};




PlSqlParser.Insert_statementContext = Insert_statementContext;

PlSqlParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, PlSqlParser.RULE_insert_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3809;
        this.match(PlSqlParser.INSERT);
        this.state = 3812;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.INTO:
            this.state = 3810;
            this.single_table_insert();
            break;
        case PlSqlParser.ALL:
        case PlSqlParser.FIRST:
        case PlSqlParser.WHEN:
            this.state = 3811;
            this.multi_table_insert();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_single_table_insert;
    return this;
}

Single_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_table_insertContext.prototype.constructor = Single_table_insertContext;

Single_table_insertContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Single_table_insertContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Single_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Single_table_insertContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Single_table_insertContext.prototype.static_returning_clause = function() {
    return this.getTypedRuleContext(Static_returning_clauseContext,0);
};

Single_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSingle_table_insert(this);
	}
};

Single_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSingle_table_insert(this);
	}
};




PlSqlParser.Single_table_insertContext = Single_table_insertContext;

PlSqlParser.prototype.single_table_insert = function() {

    var localctx = new Single_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, PlSqlParser.RULE_single_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3814;
        this.insert_into_clause();
        this.state = 3820;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.VALUES:
            this.state = 3815;
            this.values_clause();
            this.state = 3817;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN) {
                this.state = 3816;
                this.static_returning_clause();
            }

            break;
        case PlSqlParser.SELECT:
        case PlSqlParser.WITH:
        case PlSqlParser.LEFT_PAREN:
            this.state = 3819;
            this.select_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LOG) {
            this.state = 3822;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_insertContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_multi_table_insert;
    return this;
}

Multi_table_insertContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_insertContext.prototype.constructor = Multi_table_insertContext;

Multi_table_insertContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Multi_table_insertContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Multi_table_insertContext.prototype.conditional_insert_clause = function() {
    return this.getTypedRuleContext(Conditional_insert_clauseContext,0);
};

Multi_table_insertContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Multi_table_insertContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMulti_table_insert(this);
	}
};

Multi_table_insertContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMulti_table_insert(this);
	}
};




PlSqlParser.Multi_table_insertContext = Multi_table_insertContext;

PlSqlParser.prototype.multi_table_insert = function() {

    var localctx = new Multi_table_insertContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, PlSqlParser.RULE_multi_table_insert);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3825;
            this.match(PlSqlParser.ALL);
            this.state = 3827; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3826;
                this.multi_table_element();
                this.state = 3829; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PlSqlParser.INTO);
            break;

        case 2:
            this.state = 3831;
            this.conditional_insert_clause();
            break;

        }
        this.state = 3834;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_multi_table_element;
    return this;
}

Multi_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_table_elementContext.prototype.constructor = Multi_table_elementContext;

Multi_table_elementContext.prototype.insert_into_clause = function() {
    return this.getTypedRuleContext(Insert_into_clauseContext,0);
};

Multi_table_elementContext.prototype.values_clause = function() {
    return this.getTypedRuleContext(Values_clauseContext,0);
};

Multi_table_elementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Multi_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMulti_table_element(this);
	}
};

Multi_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMulti_table_element(this);
	}
};




PlSqlParser.Multi_table_elementContext = Multi_table_elementContext;

PlSqlParser.prototype.multi_table_element = function() {

    var localctx = new Multi_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, PlSqlParser.RULE_multi_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3836;
        this.insert_into_clause();
        this.state = 3838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.VALUES) {
            this.state = 3837;
            this.values_clause();
        }

        this.state = 3841;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LOG) {
            this.state = 3840;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_conditional_insert_clause;
    return this;
}

Conditional_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_clauseContext.prototype.constructor = Conditional_insert_clauseContext;

Conditional_insert_clauseContext.prototype.conditional_insert_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Conditional_insert_when_partContext);
    } else {
        return this.getTypedRuleContext(Conditional_insert_when_partContext,i);
    }
};

Conditional_insert_clauseContext.prototype.conditional_insert_else_part = function() {
    return this.getTypedRuleContext(Conditional_insert_else_partContext,0);
};

Conditional_insert_clauseContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Conditional_insert_clauseContext.prototype.FIRST = function() {
    return this.getToken(PlSqlParser.FIRST, 0);
};

Conditional_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConditional_insert_clause(this);
	}
};

Conditional_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConditional_insert_clause(this);
	}
};




PlSqlParser.Conditional_insert_clauseContext = Conditional_insert_clauseContext;

PlSqlParser.prototype.conditional_insert_clause = function() {

    var localctx = new Conditional_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, PlSqlParser.RULE_conditional_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ALL || _la===PlSqlParser.FIRST) {
            this.state = 3843;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.FIRST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3847; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3846;
            this.conditional_insert_when_part();
            this.state = 3849; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.WHEN);
        this.state = 3852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ELSE) {
            this.state = 3851;
            this.conditional_insert_else_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_conditional_insert_when_part;
    return this;
}

Conditional_insert_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_when_partContext.prototype.constructor = Conditional_insert_when_partContext;

Conditional_insert_when_partContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Conditional_insert_when_partContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Conditional_insert_when_partContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Conditional_insert_when_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConditional_insert_when_part(this);
	}
};

Conditional_insert_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConditional_insert_when_part(this);
	}
};




PlSqlParser.Conditional_insert_when_partContext = Conditional_insert_when_partContext;

PlSqlParser.prototype.conditional_insert_when_part = function() {

    var localctx = new Conditional_insert_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, PlSqlParser.RULE_conditional_insert_when_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3854;
        this.match(PlSqlParser.WHEN);
        this.state = 3855;
        this.condition();
        this.state = 3856;
        this.match(PlSqlParser.THEN);
        this.state = 3858; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3857;
            this.multi_table_element();
            this.state = 3860; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conditional_insert_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_conditional_insert_else_part;
    return this;
}

Conditional_insert_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_insert_else_partContext.prototype.constructor = Conditional_insert_else_partContext;

Conditional_insert_else_partContext.prototype.ELSE = function() {
    return this.getToken(PlSqlParser.ELSE, 0);
};

Conditional_insert_else_partContext.prototype.multi_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multi_table_elementContext);
    } else {
        return this.getTypedRuleContext(Multi_table_elementContext,i);
    }
};

Conditional_insert_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConditional_insert_else_part(this);
	}
};

Conditional_insert_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConditional_insert_else_part(this);
	}
};




PlSqlParser.Conditional_insert_else_partContext = Conditional_insert_else_partContext;

PlSqlParser.prototype.conditional_insert_else_part = function() {

    var localctx = new Conditional_insert_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, PlSqlParser.RULE_conditional_insert_else_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3862;
        this.match(PlSqlParser.ELSE);
        this.state = 3864; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3863;
            this.multi_table_element();
            this.state = 3866; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.INTO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_insert_into_clause;
    return this;
}

Insert_into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_into_clauseContext.prototype.constructor = Insert_into_clauseContext;

Insert_into_clauseContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Insert_into_clauseContext.prototype.general_table_ref = function() {
    return this.getTypedRuleContext(General_table_refContext,0);
};

Insert_into_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Insert_into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterInsert_into_clause(this);
	}
};

Insert_into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitInsert_into_clause(this);
	}
};




PlSqlParser.Insert_into_clauseContext = Insert_into_clauseContext;

PlSqlParser.prototype.insert_into_clause = function() {

    var localctx = new Insert_into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, PlSqlParser.RULE_insert_into_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3868;
        this.match(PlSqlParser.INTO);
        this.state = 3869;
        this.general_table_ref();
        this.state = 3881;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
        if(la_===1) {
            this.state = 3870;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3871;
            this.column_name();
            this.state = 3876;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3872;
                this.match(PlSqlParser.COMMA);
                this.state = 3873;
                this.column_name();
                this.state = 3878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3879;
            this.match(PlSqlParser.RIGHT_PAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Values_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_values_clause;
    return this;
}

Values_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Values_clauseContext.prototype.constructor = Values_clauseContext;

Values_clauseContext.prototype.VALUES = function() {
    return this.getToken(PlSqlParser.VALUES, 0);
};

Values_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Values_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterValues_clause(this);
	}
};

Values_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitValues_clause(this);
	}
};




PlSqlParser.Values_clauseContext = Values_clauseContext;

PlSqlParser.prototype.values_clause = function() {

    var localctx = new Values_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, PlSqlParser.RULE_values_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3883;
        this.match(PlSqlParser.VALUES);
        this.state = 3884;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3886;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 3885;
            this.expressions();
        }

        this.state = 3888;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_merge_statement;
    return this;
}

Merge_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_statementContext.prototype.constructor = Merge_statementContext;

Merge_statementContext.prototype.MERGE = function() {
    return this.getToken(PlSqlParser.MERGE, 0);
};

Merge_statementContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Merge_statementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Merge_statementContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Merge_statementContext.prototype.selected_tableview = function() {
    return this.getTypedRuleContext(Selected_tableviewContext,0);
};

Merge_statementContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Merge_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Merge_statementContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Merge_statementContext.prototype.merge_update_clause = function() {
    return this.getTypedRuleContext(Merge_update_clauseContext,0);
};

Merge_statementContext.prototype.merge_insert_clause = function() {
    return this.getTypedRuleContext(Merge_insert_clauseContext,0);
};

Merge_statementContext.prototype.error_logging_clause = function() {
    return this.getTypedRuleContext(Error_logging_clauseContext,0);
};

Merge_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMerge_statement(this);
	}
};

Merge_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMerge_statement(this);
	}
};




PlSqlParser.Merge_statementContext = Merge_statementContext;

PlSqlParser.prototype.merge_statement = function() {

    var localctx = new Merge_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, PlSqlParser.RULE_merge_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3890;
        this.match(PlSqlParser.MERGE);
        this.state = 3891;
        this.match(PlSqlParser.INTO);
        this.state = 3892;
        this.tableview_name();
        this.state = 3894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 3893;
            this.table_alias();
        }

        this.state = 3896;
        this.match(PlSqlParser.USING);
        this.state = 3897;
        this.selected_tableview();
        this.state = 3898;
        this.match(PlSqlParser.ON);
        this.state = 3899;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3900;
        this.condition();
        this.state = 3901;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3910;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
        if(la_===1) {
            this.state = 3902;
            this.merge_update_clause();
            this.state = 3904;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.WHEN) {
                this.state = 3903;
                this.merge_insert_clause();
            }


        } else if(la_===2) {
            this.state = 3906;
            this.merge_insert_clause();
            this.state = 3908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.WHEN) {
                this.state = 3907;
                this.merge_update_clause();
            }


        }
        this.state = 3913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LOG) {
            this.state = 3912;
            this.error_logging_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_merge_update_clause;
    return this;
}

Merge_update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_clauseContext.prototype.constructor = Merge_update_clauseContext;

Merge_update_clauseContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Merge_update_clauseContext.prototype.MATCHED = function() {
    return this.getToken(PlSqlParser.MATCHED, 0);
};

Merge_update_clauseContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Merge_update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Merge_update_clauseContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Merge_update_clauseContext.prototype.merge_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Merge_elementContext);
    } else {
        return this.getTypedRuleContext(Merge_elementContext,i);
    }
};

Merge_update_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_clauseContext.prototype.merge_update_delete_part = function() {
    return this.getTypedRuleContext(Merge_update_delete_partContext,0);
};

Merge_update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMerge_update_clause(this);
	}
};

Merge_update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMerge_update_clause(this);
	}
};




PlSqlParser.Merge_update_clauseContext = Merge_update_clauseContext;

PlSqlParser.prototype.merge_update_clause = function() {

    var localctx = new Merge_update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, PlSqlParser.RULE_merge_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3915;
        this.match(PlSqlParser.WHEN);
        this.state = 3916;
        this.match(PlSqlParser.MATCHED);
        this.state = 3917;
        this.match(PlSqlParser.THEN);
        this.state = 3918;
        this.match(PlSqlParser.UPDATE);
        this.state = 3919;
        this.match(PlSqlParser.SET);
        this.state = 3920;
        this.merge_element();
        this.state = 3925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3921;
            this.match(PlSqlParser.COMMA);
            this.state = 3922;
            this.merge_element();
            this.state = 3927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHERE) {
            this.state = 3928;
            this.where_clause();
        }

        this.state = 3932;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
        if(la_===1) {
            this.state = 3931;
            this.merge_update_delete_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_merge_element;
    return this;
}

Merge_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_elementContext.prototype.constructor = Merge_elementContext;

Merge_elementContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Merge_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Merge_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMerge_element(this);
	}
};

Merge_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMerge_element(this);
	}
};




PlSqlParser.Merge_elementContext = Merge_elementContext;

PlSqlParser.prototype.merge_element = function() {

    var localctx = new Merge_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, PlSqlParser.RULE_merge_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3934;
        this.column_name();
        this.state = 3935;
        this.match(PlSqlParser.EQUALS_OP);
        this.state = 3936;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_update_delete_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_merge_update_delete_part;
    return this;
}

Merge_update_delete_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_update_delete_partContext.prototype.constructor = Merge_update_delete_partContext;

Merge_update_delete_partContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

Merge_update_delete_partContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_update_delete_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMerge_update_delete_part(this);
	}
};

Merge_update_delete_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMerge_update_delete_part(this);
	}
};




PlSqlParser.Merge_update_delete_partContext = Merge_update_delete_partContext;

PlSqlParser.prototype.merge_update_delete_part = function() {

    var localctx = new Merge_update_delete_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, PlSqlParser.RULE_merge_update_delete_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3938;
        this.match(PlSqlParser.DELETE);
        this.state = 3939;
        this.where_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_insert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_merge_insert_clause;
    return this;
}

Merge_insert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_insert_clauseContext.prototype.constructor = Merge_insert_clauseContext;

Merge_insert_clauseContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Merge_insert_clauseContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Merge_insert_clauseContext.prototype.MATCHED = function() {
    return this.getToken(PlSqlParser.MATCHED, 0);
};

Merge_insert_clauseContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Merge_insert_clauseContext.prototype.INSERT = function() {
    return this.getToken(PlSqlParser.INSERT, 0);
};

Merge_insert_clauseContext.prototype.VALUES = function() {
    return this.getToken(PlSqlParser.VALUES, 0);
};

Merge_insert_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Merge_insert_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Merge_insert_clauseContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Merge_insert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMerge_insert_clause(this);
	}
};

Merge_insert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMerge_insert_clause(this);
	}
};




PlSqlParser.Merge_insert_clauseContext = Merge_insert_clauseContext;

PlSqlParser.prototype.merge_insert_clause = function() {

    var localctx = new Merge_insert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, PlSqlParser.RULE_merge_insert_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3941;
        this.match(PlSqlParser.WHEN);
        this.state = 3942;
        this.match(PlSqlParser.NOT);
        this.state = 3943;
        this.match(PlSqlParser.MATCHED);
        this.state = 3944;
        this.match(PlSqlParser.THEN);
        this.state = 3945;
        this.match(PlSqlParser.INSERT);
        this.state = 3957;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.LEFT_PAREN) {
            this.state = 3946;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3947;
            this.column_name();
            this.state = 3952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 3948;
                this.match(PlSqlParser.COMMA);
                this.state = 3949;
                this.column_name();
                this.state = 3954;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3955;
            this.match(PlSqlParser.RIGHT_PAREN);
        }

        this.state = 3959;
        this.match(PlSqlParser.VALUES);
        this.state = 3960;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 3962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 3961;
            this.expressions();
        }

        this.state = 3964;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 3966;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.WHERE) {
            this.state = 3965;
            this.where_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Selected_tableviewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_selected_tableview;
    return this;
}

Selected_tableviewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_tableviewContext.prototype.constructor = Selected_tableviewContext;

Selected_tableviewContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Selected_tableviewContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Selected_tableviewContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Selected_tableviewContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSelected_tableview(this);
	}
};

Selected_tableviewContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSelected_tableview(this);
	}
};




PlSqlParser.Selected_tableviewContext = Selected_tableviewContext;

PlSqlParser.prototype.selected_tableview = function() {

    var localctx = new Selected_tableviewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, PlSqlParser.RULE_selected_tableview);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3973;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 3968;
            this.tableview_name();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 3969;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 3970;
            this.select_statement();
            this.state = 3971;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3976;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 3975;
            this.table_alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_lock_table_statement;
    return this;
}

Lock_table_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_statementContext.prototype.constructor = Lock_table_statementContext;

Lock_table_statementContext.prototype.LOCK = function() {
    return this.getToken(PlSqlParser.LOCK, 0);
};

Lock_table_statementContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Lock_table_statementContext.prototype.lock_table_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lock_table_elementContext);
    } else {
        return this.getTypedRuleContext(Lock_table_elementContext,i);
    }
};

Lock_table_statementContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Lock_table_statementContext.prototype.lock_mode = function() {
    return this.getTypedRuleContext(Lock_modeContext,0);
};

Lock_table_statementContext.prototype.MODE = function() {
    return this.getToken(PlSqlParser.MODE, 0);
};

Lock_table_statementContext.prototype.wait_nowait_part = function() {
    return this.getTypedRuleContext(Wait_nowait_partContext,0);
};

Lock_table_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLock_table_statement(this);
	}
};

Lock_table_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLock_table_statement(this);
	}
};




PlSqlParser.Lock_table_statementContext = Lock_table_statementContext;

PlSqlParser.prototype.lock_table_statement = function() {

    var localctx = new Lock_table_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, PlSqlParser.RULE_lock_table_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3978;
        this.match(PlSqlParser.LOCK);
        this.state = 3979;
        this.match(PlSqlParser.TABLE);
        this.state = 3980;
        this.lock_table_element();
        this.state = 3985;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 3981;
            this.match(PlSqlParser.COMMA);
            this.state = 3982;
            this.lock_table_element();
            this.state = 3987;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3988;
        this.match(PlSqlParser.IN);
        this.state = 3989;
        this.lock_mode();
        this.state = 3990;
        this.match(PlSqlParser.MODE);
        this.state = 3992;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.NOWAIT || _la===PlSqlParser.WAIT) {
            this.state = 3991;
            this.wait_nowait_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Wait_nowait_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_wait_nowait_part;
    return this;
}

Wait_nowait_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wait_nowait_partContext.prototype.constructor = Wait_nowait_partContext;

Wait_nowait_partContext.prototype.WAIT = function() {
    return this.getToken(PlSqlParser.WAIT, 0);
};

Wait_nowait_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Wait_nowait_partContext.prototype.NOWAIT = function() {
    return this.getToken(PlSqlParser.NOWAIT, 0);
};

Wait_nowait_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWait_nowait_part(this);
	}
};

Wait_nowait_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWait_nowait_part(this);
	}
};




PlSqlParser.Wait_nowait_partContext = Wait_nowait_partContext;

PlSqlParser.prototype.wait_nowait_part = function() {

    var localctx = new Wait_nowait_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, PlSqlParser.RULE_wait_nowait_part);
    try {
        this.state = 3997;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.WAIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3994;
            this.match(PlSqlParser.WAIT);
            this.state = 3995;
            this.expression();
            break;
        case PlSqlParser.NOWAIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3996;
            this.match(PlSqlParser.NOWAIT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_lock_table_element;
    return this;
}

Lock_table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_table_elementContext.prototype.constructor = Lock_table_elementContext;

Lock_table_elementContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Lock_table_elementContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Lock_table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLock_table_element(this);
	}
};

Lock_table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLock_table_element(this);
	}
};




PlSqlParser.Lock_table_elementContext = Lock_table_elementContext;

PlSqlParser.prototype.lock_table_element = function() {

    var localctx = new Lock_table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, PlSqlParser.RULE_lock_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3999;
        this.tableview_name();
        this.state = 4001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PARTITION || _la===PlSqlParser.SUBPARTITION) {
            this.state = 4000;
            this.partition_extension_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lock_modeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_lock_mode;
    return this;
}

Lock_modeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lock_modeContext.prototype.constructor = Lock_modeContext;

Lock_modeContext.prototype.ROW = function() {
    return this.getToken(PlSqlParser.ROW, 0);
};

Lock_modeContext.prototype.SHARE = function() {
    return this.getToken(PlSqlParser.SHARE, 0);
};

Lock_modeContext.prototype.EXCLUSIVE = function() {
    return this.getToken(PlSqlParser.EXCLUSIVE, 0);
};

Lock_modeContext.prototype.UPDATE = function() {
    return this.getToken(PlSqlParser.UPDATE, 0);
};

Lock_modeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLock_mode(this);
	}
};

Lock_modeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLock_mode(this);
	}
};




PlSqlParser.Lock_modeContext = Lock_modeContext;

PlSqlParser.prototype.lock_mode = function() {

    var localctx = new Lock_modeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, PlSqlParser.RULE_lock_mode);
    var _la = 0; // Token type
    try {
        this.state = 4015;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4003;
            this.match(PlSqlParser.ROW);
            this.state = 4004;
            this.match(PlSqlParser.SHARE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4005;
            this.match(PlSqlParser.ROW);
            this.state = 4006;
            this.match(PlSqlParser.EXCLUSIVE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4007;
            this.match(PlSqlParser.SHARE);
            this.state = 4009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.UPDATE) {
                this.state = 4008;
                this.match(PlSqlParser.UPDATE);
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4011;
            this.match(PlSqlParser.SHARE);
            this.state = 4012;
            this.match(PlSqlParser.ROW);
            this.state = 4013;
            this.match(PlSqlParser.EXCLUSIVE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4014;
            this.match(PlSqlParser.EXCLUSIVE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_table_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_general_table_ref;
    return this;
}

General_table_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_table_refContext.prototype.constructor = General_table_refContext;

General_table_refContext.prototype.dml_table_expression_clause = function() {
    return this.getTypedRuleContext(Dml_table_expression_clauseContext,0);
};

General_table_refContext.prototype.ONLY = function() {
    return this.getToken(PlSqlParser.ONLY, 0);
};

General_table_refContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

General_table_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGeneral_table_ref(this);
	}
};

General_table_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGeneral_table_ref(this);
	}
};




PlSqlParser.General_table_refContext = General_table_refContext;

PlSqlParser.prototype.general_table_ref = function() {

    var localctx = new General_table_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, PlSqlParser.RULE_general_table_ref);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4023;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4017;
            this.dml_table_expression_clause();
            break;

        case 2:
            this.state = 4018;
            this.match(PlSqlParser.ONLY);
            this.state = 4019;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4020;
            this.dml_table_expression_clause();
            this.state = 4021;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
        this.state = 4026;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
        if(la_===1) {
            this.state = 4025;
            this.table_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Static_returning_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_static_returning_clause;
    return this;
}

Static_returning_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_returning_clauseContext.prototype.constructor = Static_returning_clauseContext;

Static_returning_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Static_returning_clauseContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Static_returning_clauseContext.prototype.RETURNING = function() {
    return this.getToken(PlSqlParser.RETURNING, 0);
};

Static_returning_clauseContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Static_returning_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStatic_returning_clause(this);
	}
};

Static_returning_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStatic_returning_clause(this);
	}
};




PlSqlParser.Static_returning_clauseContext = Static_returning_clauseContext;

PlSqlParser.prototype.static_returning_clause = function() {

    var localctx = new Static_returning_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, PlSqlParser.RULE_static_returning_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4028;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.RETURNING || _la===PlSqlParser.RETURN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4029;
        this.expressions();
        this.state = 4030;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_error_logging_clause;
    return this;
}

Error_logging_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_clauseContext.prototype.constructor = Error_logging_clauseContext;

Error_logging_clauseContext.prototype.LOG = function() {
    return this.getToken(PlSqlParser.LOG, 0);
};

Error_logging_clauseContext.prototype.ERRORS = function() {
    return this.getToken(PlSqlParser.ERRORS, 0);
};

Error_logging_clauseContext.prototype.error_logging_into_part = function() {
    return this.getTypedRuleContext(Error_logging_into_partContext,0);
};

Error_logging_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Error_logging_clauseContext.prototype.error_logging_reject_part = function() {
    return this.getTypedRuleContext(Error_logging_reject_partContext,0);
};

Error_logging_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterError_logging_clause(this);
	}
};

Error_logging_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitError_logging_clause(this);
	}
};




PlSqlParser.Error_logging_clauseContext = Error_logging_clauseContext;

PlSqlParser.prototype.error_logging_clause = function() {

    var localctx = new Error_logging_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, PlSqlParser.RULE_error_logging_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4032;
        this.match(PlSqlParser.LOG);
        this.state = 4033;
        this.match(PlSqlParser.ERRORS);
        this.state = 4035;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
        if(la_===1) {
            this.state = 4034;
            this.error_logging_into_part();

        }
        this.state = 4038;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
        if(la_===1) {
            this.state = 4037;
            this.expression();

        }
        this.state = 4041;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.REJECT) {
            this.state = 4040;
            this.error_logging_reject_part();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_into_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_error_logging_into_part;
    return this;
}

Error_logging_into_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_into_partContext.prototype.constructor = Error_logging_into_partContext;

Error_logging_into_partContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Error_logging_into_partContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Error_logging_into_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterError_logging_into_part(this);
	}
};

Error_logging_into_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitError_logging_into_part(this);
	}
};




PlSqlParser.Error_logging_into_partContext = Error_logging_into_partContext;

PlSqlParser.prototype.error_logging_into_part = function() {

    var localctx = new Error_logging_into_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, PlSqlParser.RULE_error_logging_into_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4043;
        this.match(PlSqlParser.INTO);
        this.state = 4044;
        this.tableview_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_logging_reject_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_error_logging_reject_part;
    return this;
}

Error_logging_reject_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_logging_reject_partContext.prototype.constructor = Error_logging_reject_partContext;

Error_logging_reject_partContext.prototype.REJECT = function() {
    return this.getToken(PlSqlParser.REJECT, 0);
};

Error_logging_reject_partContext.prototype.LIMIT = function() {
    return this.getToken(PlSqlParser.LIMIT, 0);
};

Error_logging_reject_partContext.prototype.UNLIMITED = function() {
    return this.getToken(PlSqlParser.UNLIMITED, 0);
};

Error_logging_reject_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Error_logging_reject_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterError_logging_reject_part(this);
	}
};

Error_logging_reject_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitError_logging_reject_part(this);
	}
};




PlSqlParser.Error_logging_reject_partContext = Error_logging_reject_partContext;

PlSqlParser.prototype.error_logging_reject_part = function() {

    var localctx = new Error_logging_reject_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, PlSqlParser.RULE_error_logging_reject_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4046;
        this.match(PlSqlParser.REJECT);
        this.state = 4047;
        this.match(PlSqlParser.LIMIT);
        this.state = 4050;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4048;
            this.match(PlSqlParser.UNLIMITED);
            break;

        case 2:
            this.state = 4049;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_table_expression_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_dml_table_expression_clause;
    return this;
}

Dml_table_expression_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_table_expression_clauseContext.prototype.constructor = Dml_table_expression_clauseContext;

Dml_table_expression_clauseContext.prototype.table_collection_expression = function() {
    return this.getTypedRuleContext(Table_collection_expressionContext,0);
};

Dml_table_expression_clauseContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Dml_table_expression_clauseContext.prototype.subquery_restriction_clause = function() {
    return this.getTypedRuleContext(Subquery_restriction_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Dml_table_expression_clauseContext.prototype.sample_clause = function() {
    return this.getTypedRuleContext(Sample_clauseContext,0);
};

Dml_table_expression_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDml_table_expression_clause(this);
	}
};

Dml_table_expression_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDml_table_expression_clause(this);
	}
};




PlSqlParser.Dml_table_expression_clauseContext = Dml_table_expression_clauseContext;

PlSqlParser.prototype.dml_table_expression_clause = function() {

    var localctx = new Dml_table_expression_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, PlSqlParser.RULE_dml_table_expression_clause);
    var _la = 0; // Token type
    try {
        this.state = 4064;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.TABLE:
        case PlSqlParser.THE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4052;
            this.table_collection_expression();
            break;
        case PlSqlParser.LEFT_PAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 4053;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4054;
            this.select_statement();
            this.state = 4056;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.WITH) {
                this.state = 4055;
                this.subquery_restriction_clause();
            }

            this.state = 4058;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 4060;
            this.tableview_name();
            this.state = 4062;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
            if(la_===1) {
                this.state = 4061;
                this.sample_clause();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_collection_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_collection_expression;
    return this;
}

Table_collection_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_collection_expressionContext.prototype.constructor = Table_collection_expressionContext;

Table_collection_expressionContext.prototype.TABLE = function() {
    return this.getToken(PlSqlParser.TABLE, 0);
};

Table_collection_expressionContext.prototype.THE = function() {
    return this.getToken(PlSqlParser.THE, 0);
};

Table_collection_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Table_collection_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Table_collection_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_collection_expression(this);
	}
};

Table_collection_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_collection_expression(this);
	}
};




PlSqlParser.Table_collection_expressionContext = Table_collection_expressionContext;

PlSqlParser.prototype.table_collection_expression = function() {

    var localctx = new Table_collection_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, PlSqlParser.RULE_table_collection_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4066;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.TABLE || _la===PlSqlParser.THE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4079;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4067;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4068;
            this.subquery();
            this.state = 4069;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 4071;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4072;
            this.expression();
            this.state = 4073;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4077;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
            if(la_===1) {
                this.state = 4074;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 4075;
                this.match(PlSqlParser.PLUS_SIGN);
                this.state = 4076;
                this.match(PlSqlParser.RIGHT_PAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_restriction_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_subquery_restriction_clause;
    return this;
}

Subquery_restriction_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_restriction_clauseContext.prototype.constructor = Subquery_restriction_clauseContext;

Subquery_restriction_clauseContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

Subquery_restriction_clauseContext.prototype.READ = function() {
    return this.getToken(PlSqlParser.READ, 0);
};

Subquery_restriction_clauseContext.prototype.ONLY = function() {
    return this.getToken(PlSqlParser.ONLY, 0);
};

Subquery_restriction_clauseContext.prototype.CHECK = function() {
    return this.getToken(PlSqlParser.CHECK, 0);
};

Subquery_restriction_clauseContext.prototype.OPTION = function() {
    return this.getToken(PlSqlParser.OPTION, 0);
};

Subquery_restriction_clauseContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Subquery_restriction_clauseContext.prototype.constraint_name = function() {
    return this.getTypedRuleContext(Constraint_nameContext,0);
};

Subquery_restriction_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSubquery_restriction_clause(this);
	}
};

Subquery_restriction_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSubquery_restriction_clause(this);
	}
};




PlSqlParser.Subquery_restriction_clauseContext = Subquery_restriction_clauseContext;

PlSqlParser.prototype.subquery_restriction_clause = function() {

    var localctx = new Subquery_restriction_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, PlSqlParser.RULE_subquery_restriction_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4081;
        this.match(PlSqlParser.WITH);
        this.state = 4090;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.READ:
            this.state = 4082;
            this.match(PlSqlParser.READ);
            this.state = 4083;
            this.match(PlSqlParser.ONLY);
            break;
        case PlSqlParser.CHECK:
            this.state = 4084;
            this.match(PlSqlParser.CHECK);
            this.state = 4085;
            this.match(PlSqlParser.OPTION);
            this.state = 4088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.CONSTRAINT) {
                this.state = 4086;
                this.match(PlSqlParser.CONSTRAINT);
                this.state = 4087;
                this.constraint_name();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sample_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sample_clause;
    return this;
}

Sample_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sample_clauseContext.prototype.constructor = Sample_clauseContext;

Sample_clauseContext.prototype.SAMPLE = function() {
    return this.getToken(PlSqlParser.SAMPLE, 0);
};

Sample_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Sample_clauseContext.prototype.BLOCK = function() {
    return this.getToken(PlSqlParser.BLOCK, 0);
};

Sample_clauseContext.prototype.seed_part = function() {
    return this.getTypedRuleContext(Seed_partContext,0);
};

Sample_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSample_clause(this);
	}
};

Sample_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSample_clause(this);
	}
};




PlSqlParser.Sample_clauseContext = Sample_clauseContext;

PlSqlParser.prototype.sample_clause = function() {

    var localctx = new Sample_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, PlSqlParser.RULE_sample_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4092;
        this.match(PlSqlParser.SAMPLE);
        this.state = 4094;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BLOCK) {
            this.state = 4093;
            this.match(PlSqlParser.BLOCK);
        }

        this.state = 4096;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4097;
        this.expression();
        this.state = 4100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.COMMA) {
            this.state = 4098;
            this.match(PlSqlParser.COMMA);
            this.state = 4099;
            this.expression();
        }

        this.state = 4102;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 4104;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
        if(la_===1) {
            this.state = 4103;
            this.seed_part();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seed_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_seed_part;
    return this;
}

Seed_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seed_partContext.prototype.constructor = Seed_partContext;

Seed_partContext.prototype.SEED = function() {
    return this.getToken(PlSqlParser.SEED, 0);
};

Seed_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Seed_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSeed_part(this);
	}
};

Seed_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSeed_part(this);
	}
};




PlSqlParser.Seed_partContext = Seed_partContext;

PlSqlParser.prototype.seed_part = function() {

    var localctx = new Seed_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, PlSqlParser.RULE_seed_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4106;
        this.match(PlSqlParser.SEED);
        this.state = 4107;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4108;
        this.expression();
        this.state = 4109;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCondition(this);
	}
};




PlSqlParser.ConditionContext = ConditionContext;

PlSqlParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, PlSqlParser.RULE_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4111;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_expressions;
    return this;
}

ExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsContext.prototype.constructor = ExpressionsContext;

ExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterExpressions(this);
	}
};

ExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitExpressions(this);
	}
};




PlSqlParser.ExpressionsContext = ExpressionsContext;

PlSqlParser.prototype.expressions = function() {

    var localctx = new ExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, PlSqlParser.RULE_expressions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4113;
        this.expression();
        this.state = 4118;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,501,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4114;
                this.match(PlSqlParser.COMMA);
                this.state = 4115;
                this.expression(); 
            }
            this.state = 4120;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,501,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.cursor_expression = function() {
    return this.getTypedRuleContext(Cursor_expressionContext,0);
};

ExpressionContext.prototype.logical_expression = function() {
    return this.getTypedRuleContext(Logical_expressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitExpression(this);
	}
};




PlSqlParser.ExpressionContext = ExpressionContext;

PlSqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, PlSqlParser.RULE_expression);
    try {
        this.state = 4123;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4121;
            this.cursor_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4122;
            this.logical_expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cursor_expression;
    return this;
}

Cursor_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_expressionContext.prototype.constructor = Cursor_expressionContext;

Cursor_expressionContext.prototype.CURSOR = function() {
    return this.getToken(PlSqlParser.CURSOR, 0);
};

Cursor_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Cursor_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCursor_expression(this);
	}
};

Cursor_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCursor_expression(this);
	}
};




PlSqlParser.Cursor_expressionContext = Cursor_expressionContext;

PlSqlParser.prototype.cursor_expression = function() {

    var localctx = new Cursor_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, PlSqlParser.RULE_cursor_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4125;
        this.match(PlSqlParser.CURSOR);
        this.state = 4126;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4127;
        this.subquery();
        this.state = 4128;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Logical_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_logical_expression;
    return this;
}

Logical_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_expressionContext.prototype.constructor = Logical_expressionContext;

Logical_expressionContext.prototype.multiset_expression = function() {
    return this.getTypedRuleContext(Multiset_expressionContext,0);
};

Logical_expressionContext.prototype.IS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.IS);
    } else {
        return this.getToken(PlSqlParser.IS, i);
    }
};


Logical_expressionContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NULL);
    } else {
        return this.getToken(PlSqlParser.NULL, i);
    }
};


Logical_expressionContext.prototype.NAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NAN);
    } else {
        return this.getToken(PlSqlParser.NAN, i);
    }
};


Logical_expressionContext.prototype.PRESENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.PRESENT);
    } else {
        return this.getToken(PlSqlParser.PRESENT, i);
    }
};


Logical_expressionContext.prototype.INFINITE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.INFINITE);
    } else {
        return this.getToken(PlSqlParser.INFINITE, i);
    }
};


Logical_expressionContext.prototype.A_LETTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.A_LETTER);
    } else {
        return this.getToken(PlSqlParser.A_LETTER, i);
    }
};


Logical_expressionContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.SET);
    } else {
        return this.getToken(PlSqlParser.SET, i);
    }
};


Logical_expressionContext.prototype.EMPTY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.EMPTY);
    } else {
        return this.getToken(PlSqlParser.EMPTY, i);
    }
};


Logical_expressionContext.prototype.OF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.OF);
    } else {
        return this.getToken(PlSqlParser.OF, i);
    }
};


Logical_expressionContext.prototype.type_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_specContext);
    } else {
        return this.getTypedRuleContext(Type_specContext,i);
    }
};

Logical_expressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NOT);
    } else {
        return this.getToken(PlSqlParser.NOT, i);
    }
};


Logical_expressionContext.prototype.TYPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.TYPE);
    } else {
        return this.getToken(PlSqlParser.TYPE, i);
    }
};


Logical_expressionContext.prototype.ONLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ONLY);
    } else {
        return this.getToken(PlSqlParser.ONLY, i);
    }
};


Logical_expressionContext.prototype.logical_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_expressionContext);
    } else {
        return this.getTypedRuleContext(Logical_expressionContext,i);
    }
};

Logical_expressionContext.prototype.AND = function() {
    return this.getToken(PlSqlParser.AND, 0);
};

Logical_expressionContext.prototype.OR = function() {
    return this.getToken(PlSqlParser.OR, 0);
};

Logical_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLogical_expression(this);
	}
};

Logical_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLogical_expression(this);
	}
};



PlSqlParser.prototype.logical_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Logical_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 538;
    this.enterRecursionRule(localctx, 538, PlSqlParser.RULE_logical_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4170;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 4131;
            this.multiset_expression();
            this.state = 4165;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,508,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4132;
                    this.match(PlSqlParser.IS);
                    this.state = 4134;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===PlSqlParser.NOT) {
                        this.state = 4133;
                        this.match(PlSqlParser.NOT);
                    }

                    this.state = 4161;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case PlSqlParser.NULL:
                        this.state = 4136;
                        this.match(PlSqlParser.NULL);
                        break;
                    case PlSqlParser.NAN:
                        this.state = 4137;
                        this.match(PlSqlParser.NAN);
                        break;
                    case PlSqlParser.PRESENT:
                        this.state = 4138;
                        this.match(PlSqlParser.PRESENT);
                        break;
                    case PlSqlParser.INFINITE:
                        this.state = 4139;
                        this.match(PlSqlParser.INFINITE);
                        break;
                    case PlSqlParser.A_LETTER:
                        this.state = 4140;
                        this.match(PlSqlParser.A_LETTER);
                        this.state = 4141;
                        this.match(PlSqlParser.SET);
                        break;
                    case PlSqlParser.EMPTY:
                        this.state = 4142;
                        this.match(PlSqlParser.EMPTY);
                        break;
                    case PlSqlParser.OF:
                        this.state = 4143;
                        this.match(PlSqlParser.OF);
                        this.state = 4145;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===PlSqlParser.TYPE) {
                            this.state = 4144;
                            this.match(PlSqlParser.TYPE);
                        }

                        this.state = 4147;
                        this.match(PlSqlParser.LEFT_PAREN);
                        this.state = 4149;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
                        if(la_===1) {
                            this.state = 4148;
                            this.match(PlSqlParser.ONLY);

                        }
                        this.state = 4151;
                        this.type_spec();
                        this.state = 4156;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===PlSqlParser.COMMA) {
                            this.state = 4152;
                            this.match(PlSqlParser.COMMA);
                            this.state = 4153;
                            this.type_spec();
                            this.state = 4158;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 4159;
                        this.match(PlSqlParser.RIGHT_PAREN);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 4167;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,508,this._ctx);
            }

            break;
        case PlSqlParser.NOT:
            this.state = 4168;
            this.match(PlSqlParser.NOT);
            this.state = 4169;
            this.logical_expression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 4180;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,511,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 4178;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Logical_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_logical_expression);
                    this.state = 4172;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 4173;
                    this.match(PlSqlParser.AND);
                    this.state = 4174;
                    this.logical_expression(3);
                    break;

                case 2:
                    localctx = new Logical_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_logical_expression);
                    this.state = 4175;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 4176;
                    this.match(PlSqlParser.OR);
                    this.state = 4177;
                    this.logical_expression(2);
                    break;

                } 
            }
            this.state = 4182;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,511,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Multiset_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_multiset_expression;
    this.multiset_type = null; // Token
    return this;
}

Multiset_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiset_expressionContext.prototype.constructor = Multiset_expressionContext;

Multiset_expressionContext.prototype.relational_expression = function() {
    return this.getTypedRuleContext(Relational_expressionContext,0);
};

Multiset_expressionContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Multiset_expressionContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Multiset_expressionContext.prototype.SUBMULTISET = function() {
    return this.getToken(PlSqlParser.SUBMULTISET, 0);
};

Multiset_expressionContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Multiset_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMultiset_expression(this);
	}
};

Multiset_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMultiset_expression(this);
	}
};




PlSqlParser.Multiset_expressionContext = Multiset_expressionContext;

PlSqlParser.prototype.multiset_expression = function() {

    var localctx = new Multiset_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, PlSqlParser.RULE_multiset_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4183;
        this.relational_expression(0);
        this.state = 4189;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
        if(la_===1) {
            this.state = 4184;
            localctx.multiset_type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.MEMBER || _la===PlSqlParser.SUBMULTISET)) {
                localctx.multiset_type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.OF) {
                this.state = 4185;
                this.match(PlSqlParser.OF);
            }

            this.state = 4188;
            this.concatenation(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_relational_expression;
    return this;
}

Relational_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_expressionContext.prototype.constructor = Relational_expressionContext;

Relational_expressionContext.prototype.compound_expression = function() {
    return this.getTypedRuleContext(Compound_expressionContext,0);
};

Relational_expressionContext.prototype.relational_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relational_expressionContext);
    } else {
        return this.getTypedRuleContext(Relational_expressionContext,i);
    }
};

Relational_expressionContext.prototype.relational_operator = function() {
    return this.getTypedRuleContext(Relational_operatorContext,0);
};

Relational_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRelational_expression(this);
	}
};

Relational_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRelational_expression(this);
	}
};



PlSqlParser.prototype.relational_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Relational_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 542;
    this.enterRecursionRule(localctx, 542, PlSqlParser.RULE_relational_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4192;
        this.compound_expression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 4200;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,514,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Relational_expressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_relational_expression);
                this.state = 4194;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 4195;
                this.relational_operator();
                this.state = 4196;
                this.relational_expression(3); 
            }
            this.state = 4202;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,514,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Compound_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_compound_expression;
    this.like_type = null; // Token
    return this;
}

Compound_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_expressionContext.prototype.constructor = Compound_expressionContext;

Compound_expressionContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Compound_expressionContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Compound_expressionContext.prototype.in_elements = function() {
    return this.getTypedRuleContext(In_elementsContext,0);
};

Compound_expressionContext.prototype.BETWEEN = function() {
    return this.getToken(PlSqlParser.BETWEEN, 0);
};

Compound_expressionContext.prototype.between_elements = function() {
    return this.getTypedRuleContext(Between_elementsContext,0);
};

Compound_expressionContext.prototype.NOT = function() {
    return this.getToken(PlSqlParser.NOT, 0);
};

Compound_expressionContext.prototype.LIKE = function() {
    return this.getToken(PlSqlParser.LIKE, 0);
};

Compound_expressionContext.prototype.LIKEC = function() {
    return this.getToken(PlSqlParser.LIKEC, 0);
};

Compound_expressionContext.prototype.LIKE2 = function() {
    return this.getToken(PlSqlParser.LIKE2, 0);
};

Compound_expressionContext.prototype.LIKE4 = function() {
    return this.getToken(PlSqlParser.LIKE4, 0);
};

Compound_expressionContext.prototype.ESCAPE = function() {
    return this.getToken(PlSqlParser.ESCAPE, 0);
};

Compound_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCompound_expression(this);
	}
};

Compound_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCompound_expression(this);
	}
};




PlSqlParser.Compound_expressionContext = Compound_expressionContext;

PlSqlParser.prototype.compound_expression = function() {

    var localctx = new Compound_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, PlSqlParser.RULE_compound_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4203;
        this.concatenation(0);
        this.state = 4219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
        if(la_===1) {
            this.state = 4205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.NOT) {
                this.state = 4204;
                this.match(PlSqlParser.NOT);
            }

            this.state = 4217;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.IN:
                this.state = 4207;
                this.match(PlSqlParser.IN);
                this.state = 4208;
                this.in_elements();
                break;
            case PlSqlParser.BETWEEN:
                this.state = 4209;
                this.match(PlSqlParser.BETWEEN);
                this.state = 4210;
                this.between_elements();
                break;
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIKE:
                this.state = 4211;
                localctx.like_type = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(((((_la - 218)) & ~0x1f) == 0 && ((1 << (_la - 218)) & ((1 << (PlSqlParser.LIKE2 - 218)) | (1 << (PlSqlParser.LIKE4 - 218)) | (1 << (PlSqlParser.LIKEC - 218)) | (1 << (PlSqlParser.LIKE - 218)))) !== 0))) {
                    localctx.like_type = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4212;
                this.concatenation(0);
                this.state = 4215;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,516,this._ctx);
                if(la_===1) {
                    this.state = 4213;
                    this.match(PlSqlParser.ESCAPE);
                    this.state = 4214;
                    this.concatenation(0);

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relational_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_relational_operator;
    return this;
}

Relational_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_operatorContext.prototype.constructor = Relational_operatorContext;

Relational_operatorContext.prototype.NOT_EQUAL_OP = function() {
    return this.getToken(PlSqlParser.NOT_EQUAL_OP, 0);
};

Relational_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRelational_operator(this);
	}
};

Relational_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRelational_operator(this);
	}
};




PlSqlParser.Relational_operatorContext = Relational_operatorContext;

PlSqlParser.prototype.relational_operator = function() {

    var localctx = new Relational_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, PlSqlParser.RULE_relational_operator);
    var _la = 0; // Token type
    try {
        this.state = 4235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,521,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4221;
            this.match(PlSqlParser.EQUALS_OP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4229;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.NOT_EQUAL_OP:
                this.state = 4222;
                this.match(PlSqlParser.NOT_EQUAL_OP);
                break;
            case PlSqlParser.LESS_THAN_OP:
                this.state = 4223;
                this.match(PlSqlParser.LESS_THAN_OP);
                this.state = 4224;
                this.match(PlSqlParser.GREATER_THAN_OP);
                break;
            case PlSqlParser.EXCLAMATION_OPERATOR_PART:
                this.state = 4225;
                this.match(PlSqlParser.EXCLAMATION_OPERATOR_PART);
                this.state = 4226;
                this.match(PlSqlParser.EQUALS_OP);
                break;
            case PlSqlParser.CARRET_OPERATOR_PART:
                this.state = 4227;
                this.match(PlSqlParser.CARRET_OPERATOR_PART);
                this.state = 4228;
                this.match(PlSqlParser.EQUALS_OP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4231;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.GREATER_THAN_OP || _la===PlSqlParser.LESS_THAN_OP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.EQUALS_OP) {
                this.state = 4232;
                this.match(PlSqlParser.EQUALS_OP);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function In_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_in_elements;
    return this;
}

In_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
In_elementsContext.prototype.constructor = In_elementsContext;

In_elementsContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

In_elementsContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

In_elementsContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

In_elementsContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

In_elementsContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

In_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterIn_elements(this);
	}
};

In_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitIn_elements(this);
	}
};




PlSqlParser.In_elementsContext = In_elementsContext;

PlSqlParser.prototype.in_elements = function() {

    var localctx = new In_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, PlSqlParser.RULE_in_elements);
    var _la = 0; // Token type
    try {
        this.state = 4255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4237;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4238;
            this.subquery();
            this.state = 4239;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4241;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4242;
            this.concatenation(0);
            this.state = 4247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4243;
                this.match(PlSqlParser.COMMA);
                this.state = 4244;
                this.concatenation(0);
                this.state = 4249;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4250;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4252;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4253;
            this.bind_variable();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4254;
            this.general_element();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Between_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_between_elements;
    return this;
}

Between_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Between_elementsContext.prototype.constructor = Between_elementsContext;

Between_elementsContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Between_elementsContext.prototype.AND = function() {
    return this.getToken(PlSqlParser.AND, 0);
};

Between_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBetween_elements(this);
	}
};

Between_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBetween_elements(this);
	}
};




PlSqlParser.Between_elementsContext = Between_elementsContext;

PlSqlParser.prototype.between_elements = function() {

    var localctx = new Between_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, PlSqlParser.RULE_between_elements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4257;
        this.concatenation(0);
        this.state = 4258;
        this.match(PlSqlParser.AND);
        this.state = 4259;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConcatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_concatenation;
    this.op = null; // Token
    return this;
}

ConcatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

ConcatenationContext.prototype.model_expression = function() {
    return this.getTypedRuleContext(Model_expressionContext,0);
};

ConcatenationContext.prototype.AT = function() {
    return this.getToken(PlSqlParser.AT, 0);
};

ConcatenationContext.prototype.interval_expression = function() {
    return this.getTypedRuleContext(Interval_expressionContext,0);
};

ConcatenationContext.prototype.LOCAL = function() {
    return this.getToken(PlSqlParser.LOCAL, 0);
};

ConcatenationContext.prototype.TIME = function() {
    return this.getToken(PlSqlParser.TIME, 0);
};

ConcatenationContext.prototype.ZONE = function() {
    return this.getToken(PlSqlParser.ZONE, 0);
};

ConcatenationContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

ConcatenationContext.prototype.ASTERISK = function() {
    return this.getToken(PlSqlParser.ASTERISK, 0);
};

ConcatenationContext.prototype.SOLIDUS = function() {
    return this.getToken(PlSqlParser.SOLIDUS, 0);
};

ConcatenationContext.prototype.PLUS_SIGN = function() {
    return this.getToken(PlSqlParser.PLUS_SIGN, 0);
};

ConcatenationContext.prototype.MINUS_SIGN = function() {
    return this.getToken(PlSqlParser.MINUS_SIGN, 0);
};

ConcatenationContext.prototype.BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.BAR);
    } else {
        return this.getToken(PlSqlParser.BAR, i);
    }
};


ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConcatenation(this);
	}
};



PlSqlParser.prototype.concatenation = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConcatenationContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 552;
    this.enterRecursionRule(localctx, 552, PlSqlParser.RULE_concatenation, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4262;
        this.model_expression();
        this.state = 4271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,525,this._ctx);
        if(la_===1) {
            this.state = 4263;
            this.match(PlSqlParser.AT);
            this.state = 4268;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.LOCAL:
                this.state = 4264;
                this.match(PlSqlParser.LOCAL);
                break;
            case PlSqlParser.TIME:
                this.state = 4265;
                this.match(PlSqlParser.TIME);
                this.state = 4266;
                this.match(PlSqlParser.ZONE);
                this.state = 4267;
                this.concatenation(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        } else if(la_===2) {
            this.state = 4270;
            this.interval_expression();

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 4285;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,527,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 4283;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,526,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ConcatenationContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_concatenation);
                    this.state = 4273;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 4274;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.ASTERISK || _la===PlSqlParser.SOLIDUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4275;
                    this.concatenation(4);
                    break;

                case 2:
                    localctx = new ConcatenationContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_concatenation);
                    this.state = 4276;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 4277;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.PLUS_SIGN || _la===PlSqlParser.MINUS_SIGN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4278;
                    this.concatenation(3);
                    break;

                case 3:
                    localctx = new ConcatenationContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PlSqlParser.RULE_concatenation);
                    this.state = 4279;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 4280;
                    this.match(PlSqlParser.BAR);
                    this.state = 4281;
                    this.match(PlSqlParser.BAR);
                    this.state = 4282;
                    this.concatenation(2);
                    break;

                } 
            }
            this.state = 4287;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,527,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Interval_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_interval_expression;
    return this;
}

Interval_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interval_expressionContext.prototype.constructor = Interval_expressionContext;

Interval_expressionContext.prototype.DAY = function() {
    return this.getToken(PlSqlParser.DAY, 0);
};

Interval_expressionContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Interval_expressionContext.prototype.SECOND = function() {
    return this.getToken(PlSqlParser.SECOND, 0);
};

Interval_expressionContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Interval_expressionContext.prototype.YEAR = function() {
    return this.getToken(PlSqlParser.YEAR, 0);
};

Interval_expressionContext.prototype.MONTH = function() {
    return this.getToken(PlSqlParser.MONTH, 0);
};

Interval_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterInterval_expression(this);
	}
};

Interval_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitInterval_expression(this);
	}
};




PlSqlParser.Interval_expressionContext = Interval_expressionContext;

PlSqlParser.prototype.interval_expression = function() {

    var localctx = new Interval_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, PlSqlParser.RULE_interval_expression);
    var _la = 0; // Token type
    try {
        this.state = 4312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.DAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 4288;
            this.match(PlSqlParser.DAY);
            this.state = 4293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.LEFT_PAREN) {
                this.state = 4289;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 4290;
                this.concatenation(0);
                this.state = 4291;
                this.match(PlSqlParser.RIGHT_PAREN);
            }

            this.state = 4295;
            this.match(PlSqlParser.TO);
            this.state = 4296;
            this.match(PlSqlParser.SECOND);
            this.state = 4301;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,529,this._ctx);
            if(la_===1) {
                this.state = 4297;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 4298;
                this.concatenation(0);
                this.state = 4299;
                this.match(PlSqlParser.RIGHT_PAREN);

            }
            break;
        case PlSqlParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 4303;
            this.match(PlSqlParser.YEAR);
            this.state = 4308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.LEFT_PAREN) {
                this.state = 4304;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 4305;
                this.concatenation(0);
                this.state = 4306;
                this.match(PlSqlParser.RIGHT_PAREN);
            }

            this.state = 4310;
            this.match(PlSqlParser.TO);
            this.state = 4311;
            this.match(PlSqlParser.MONTH);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_expression;
    return this;
}

Model_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expressionContext.prototype.constructor = Model_expressionContext;

Model_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Model_expressionContext.prototype.model_expression_element = function() {
    return this.getTypedRuleContext(Model_expression_elementContext,0);
};

Model_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_expression(this);
	}
};

Model_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_expression(this);
	}
};




PlSqlParser.Model_expressionContext = Model_expressionContext;

PlSqlParser.prototype.model_expression = function() {

    var localctx = new Model_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, PlSqlParser.RULE_model_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4314;
        this.unary_expression();
        this.state = 4319;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
        if(la_===1) {
            this.state = 4315;
            this.match(PlSqlParser.LEFT_BRACKET);
            this.state = 4316;
            this.model_expression_element();
            this.state = 4317;
            this.match(PlSqlParser.RIGHT_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_model_expression_element;
    return this;
}

Model_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_expression_elementContext.prototype.constructor = Model_expression_elementContext;

Model_expression_elementContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.ANY);
    } else {
        return this.getToken(PlSqlParser.ANY, i);
    }
};


Model_expression_elementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Model_expression_elementContext.prototype.single_column_for_loop = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Single_column_for_loopContext);
    } else {
        return this.getTypedRuleContext(Single_column_for_loopContext,i);
    }
};

Model_expression_elementContext.prototype.multi_column_for_loop = function() {
    return this.getTypedRuleContext(Multi_column_for_loopContext,0);
};

Model_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterModel_expression_element(this);
	}
};

Model_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitModel_expression_element(this);
	}
};




PlSqlParser.Model_expression_elementContext = Model_expression_elementContext;

PlSqlParser.prototype.model_expression_element = function() {

    var localctx = new Model_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, PlSqlParser.RULE_model_expression_element);
    var _la = 0; // Token type
    try {
        this.state = 4344;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4323;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,533,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4321;
                this.match(PlSqlParser.ANY);
                break;

            case 2:
                this.state = 4322;
                this.expression();
                break;

            }
            this.state = 4332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4325;
                this.match(PlSqlParser.COMMA);
                this.state = 4328;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 4326;
                    this.match(PlSqlParser.ANY);
                    break;

                case 2:
                    this.state = 4327;
                    this.expression();
                    break;

                }
                this.state = 4334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4335;
            this.single_column_for_loop();
            this.state = 4340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4336;
                this.match(PlSqlParser.COMMA);
                this.state = 4337;
                this.single_column_for_loop();
                this.state = 4342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4343;
            this.multi_column_for_loop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Single_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_single_column_for_loop;
    this.fromExpr = null; // ExpressionContext
    this.toExpr = null; // ExpressionContext
    this.action_type = null; // Token
    this.action_expr = null; // ExpressionContext
    return this;
}

Single_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_column_for_loopContext.prototype.constructor = Single_column_for_loopContext;

Single_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Single_column_for_loopContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Single_column_for_loopContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Single_column_for_loopContext.prototype.FROM = function() {
    return this.getToken(PlSqlParser.FROM, 0);
};

Single_column_for_loopContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

Single_column_for_loopContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Single_column_for_loopContext.prototype.INCREMENT = function() {
    return this.getToken(PlSqlParser.INCREMENT, 0);
};

Single_column_for_loopContext.prototype.DECREMENT = function() {
    return this.getToken(PlSqlParser.DECREMENT, 0);
};

Single_column_for_loopContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Single_column_for_loopContext.prototype.LIKE = function() {
    return this.getToken(PlSqlParser.LIKE, 0);
};

Single_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSingle_column_for_loop(this);
	}
};

Single_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSingle_column_for_loop(this);
	}
};




PlSqlParser.Single_column_for_loopContext = Single_column_for_loopContext;

PlSqlParser.prototype.single_column_for_loop = function() {

    var localctx = new Single_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, PlSqlParser.RULE_single_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4346;
        this.match(PlSqlParser.FOR);
        this.state = 4347;
        this.column_name();
        this.state = 4365;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.IN:
            this.state = 4348;
            this.match(PlSqlParser.IN);
            this.state = 4349;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 4350;
                this.expressions();
            }

            this.state = 4353;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.FROM:
        case PlSqlParser.LIKE:
            this.state = 4356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.LIKE) {
                this.state = 4354;
                this.match(PlSqlParser.LIKE);
                this.state = 4355;
                this.expression();
            }

            this.state = 4358;
            this.match(PlSqlParser.FROM);
            this.state = 4359;
            localctx.fromExpr = this.expression();
            this.state = 4360;
            this.match(PlSqlParser.TO);
            this.state = 4361;
            localctx.toExpr = this.expression();
            this.state = 4362;
            localctx.action_type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DECREMENT || _la===PlSqlParser.INCREMENT)) {
                localctx.action_type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4363;
            localctx.action_expr = this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_column_for_loopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_multi_column_for_loop;
    return this;
}

Multi_column_for_loopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_column_for_loopContext.prototype.constructor = Multi_column_for_loopContext;

Multi_column_for_loopContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Multi_column_for_loopContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Multi_column_for_loopContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Multi_column_for_loopContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Multi_column_for_loopContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Multi_column_for_loopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMulti_column_for_loop(this);
	}
};

Multi_column_for_loopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMulti_column_for_loop(this);
	}
};




PlSqlParser.Multi_column_for_loopContext = Multi_column_for_loopContext;

PlSqlParser.prototype.multi_column_for_loop = function() {

    var localctx = new Multi_column_for_loopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, PlSqlParser.RULE_multi_column_for_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4367;
        this.match(PlSqlParser.FOR);
        this.state = 4368;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4369;
        this.column_name();
        this.state = 4374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 4370;
            this.match(PlSqlParser.COMMA);
            this.state = 4371;
            this.column_name();
            this.state = 4376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4377;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 4378;
        this.match(PlSqlParser.IN);
        this.state = 4379;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4380;
            this.subquery();
            break;

        case 2:
            this.state = 4381;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 4382;
                this.expressions();
            }

            this.state = 4385;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
        this.state = 4388;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_unary_expression;
    return this;
}

Unary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_expressionContext.prototype.constructor = Unary_expressionContext;

Unary_expressionContext.prototype.unary_expression = function() {
    return this.getTypedRuleContext(Unary_expressionContext,0);
};

Unary_expressionContext.prototype.PRIOR = function() {
    return this.getToken(PlSqlParser.PRIOR, 0);
};

Unary_expressionContext.prototype.CONNECT_BY_ROOT = function() {
    return this.getToken(PlSqlParser.CONNECT_BY_ROOT, 0);
};

Unary_expressionContext.prototype.NEW = function() {
    return this.getToken(PlSqlParser.NEW, 0);
};

Unary_expressionContext.prototype.DISTINCT = function() {
    return this.getToken(PlSqlParser.DISTINCT, 0);
};

Unary_expressionContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Unary_expressionContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

Unary_expressionContext.prototype.quantified_expression = function() {
    return this.getTypedRuleContext(Quantified_expressionContext,0);
};

Unary_expressionContext.prototype.standard_function = function() {
    return this.getTypedRuleContext(Standard_functionContext,0);
};

Unary_expressionContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Unary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUnary_expression(this);
	}
};

Unary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUnary_expression(this);
	}
};




PlSqlParser.Unary_expressionContext = Unary_expressionContext;

PlSqlParser.prototype.unary_expression = function() {

    var localctx = new Unary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, PlSqlParser.RULE_unary_expression);
    var _la = 0; // Token type
    try {
        this.state = 4406;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,544,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4390;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.PLUS_SIGN || _la===PlSqlParser.MINUS_SIGN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4391;
            this.unary_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4392;
            this.match(PlSqlParser.PRIOR);
            this.state = 4393;
            this.unary_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4394;
            this.match(PlSqlParser.CONNECT_BY_ROOT);
            this.state = 4395;
            this.unary_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4396;
            this.match(PlSqlParser.NEW);
            this.state = 4397;
            this.unary_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4398;
            this.match(PlSqlParser.DISTINCT);
            this.state = 4399;
            this.unary_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4400;
            this.match(PlSqlParser.ALL);
            this.state = 4401;
            this.unary_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4402;
            this.case_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4403;
            this.quantified_expression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4404;
            this.standard_function();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4405;
            this.atom();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_case_statement;
    return this;
}

Case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statementContext.prototype.constructor = Case_statementContext;

Case_statementContext.prototype.searched_case_statement = function() {
    return this.getTypedRuleContext(Searched_case_statementContext,0);
};

Case_statementContext.prototype.simple_case_statement = function() {
    return this.getTypedRuleContext(Simple_case_statementContext,0);
};

Case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCase_statement(this);
	}
};

Case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCase_statement(this);
	}
};




PlSqlParser.Case_statementContext = Case_statementContext;

PlSqlParser.prototype.case_statement = function() {

    var localctx = new Case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, PlSqlParser.RULE_case_statement);
    try {
        this.state = 4410;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4408;
            this.searched_case_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4409;
            this.simple_case_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_simple_case_statement;
    this.ck1 = null; // Token
    return this;
}

Simple_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_statementContext.prototype.constructor = Simple_case_statementContext;

Simple_case_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Simple_case_statementContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Simple_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.CASE);
    } else {
        return this.getToken(PlSqlParser.CASE, i);
    }
};


Simple_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Simple_case_statementContext.prototype.simple_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Simple_case_when_partContext,i);
    }
};

Simple_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Simple_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSimple_case_statement(this);
	}
};

Simple_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSimple_case_statement(this);
	}
};




PlSqlParser.Simple_case_statementContext = Simple_case_statementContext;

PlSqlParser.prototype.simple_case_statement = function() {

    var localctx = new Simple_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, PlSqlParser.RULE_simple_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 4412;
            this.label_name();
        }

        this.state = 4415;
        localctx.ck1 = this.match(PlSqlParser.CASE);
        this.state = 4416;
        this.expression();
        this.state = 4418; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4417;
            this.simple_case_when_part();
            this.state = 4420; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.WHEN);
        this.state = 4423;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ELSE) {
            this.state = 4422;
            this.case_else_part();
        }

        this.state = 4425;
        this.match(PlSqlParser.END);
        this.state = 4427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
        if(la_===1) {
            this.state = 4426;
            this.match(PlSqlParser.CASE);

        }
        this.state = 4430;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,550,this._ctx);
        if(la_===1) {
            this.state = 4429;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_simple_case_when_part;
    return this;
}

Simple_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_case_when_partContext.prototype.constructor = Simple_case_when_partContext;

Simple_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Simple_case_when_partContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Simple_case_when_partContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Simple_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Simple_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSimple_case_when_part(this);
	}
};

Simple_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSimple_case_when_part(this);
	}
};




PlSqlParser.Simple_case_when_partContext = Simple_case_when_partContext;

PlSqlParser.prototype.simple_case_when_part = function() {

    var localctx = new Simple_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, PlSqlParser.RULE_simple_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4432;
        this.match(PlSqlParser.WHEN);
        this.state = 4433;
        this.expression();
        this.state = 4434;
        this.match(PlSqlParser.THEN);
        this.state = 4437;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,551,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4435;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4436;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_searched_case_statement;
    this.ck1 = null; // Token
    return this;
}

Searched_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_statementContext.prototype.constructor = Searched_case_statementContext;

Searched_case_statementContext.prototype.END = function() {
    return this.getToken(PlSqlParser.END, 0);
};

Searched_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.CASE);
    } else {
        return this.getToken(PlSqlParser.CASE, i);
    }
};


Searched_case_statementContext.prototype.label_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_nameContext);
    } else {
        return this.getTypedRuleContext(Label_nameContext,i);
    }
};

Searched_case_statementContext.prototype.searched_case_when_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Searched_case_when_partContext);
    } else {
        return this.getTypedRuleContext(Searched_case_when_partContext,i);
    }
};

Searched_case_statementContext.prototype.case_else_part = function() {
    return this.getTypedRuleContext(Case_else_partContext,0);
};

Searched_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSearched_case_statement(this);
	}
};

Searched_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSearched_case_statement(this);
	}
};




PlSqlParser.Searched_case_statementContext = Searched_case_statementContext;

PlSqlParser.prototype.searched_case_statement = function() {

    var localctx = new Searched_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, PlSqlParser.RULE_searched_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID) {
            this.state = 4439;
            this.label_name();
        }

        this.state = 4442;
        localctx.ck1 = this.match(PlSqlParser.CASE);
        this.state = 4444; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4443;
            this.searched_case_when_part();
            this.state = 4446; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PlSqlParser.WHEN);
        this.state = 4449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ELSE) {
            this.state = 4448;
            this.case_else_part();
        }

        this.state = 4451;
        this.match(PlSqlParser.END);
        this.state = 4453;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,555,this._ctx);
        if(la_===1) {
            this.state = 4452;
            this.match(PlSqlParser.CASE);

        }
        this.state = 4456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,556,this._ctx);
        if(la_===1) {
            this.state = 4455;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Searched_case_when_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_searched_case_when_part;
    return this;
}

Searched_case_when_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Searched_case_when_partContext.prototype.constructor = Searched_case_when_partContext;

Searched_case_when_partContext.prototype.WHEN = function() {
    return this.getToken(PlSqlParser.WHEN, 0);
};

Searched_case_when_partContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Searched_case_when_partContext.prototype.THEN = function() {
    return this.getToken(PlSqlParser.THEN, 0);
};

Searched_case_when_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Searched_case_when_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSearched_case_when_part(this);
	}
};

Searched_case_when_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSearched_case_when_part(this);
	}
};




PlSqlParser.Searched_case_when_partContext = Searched_case_when_partContext;

PlSqlParser.prototype.searched_case_when_part = function() {

    var localctx = new Searched_case_when_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, PlSqlParser.RULE_searched_case_when_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4458;
        this.match(PlSqlParser.WHEN);
        this.state = 4459;
        this.expression();
        this.state = 4460;
        this.match(PlSqlParser.THEN);
        this.state = 4463;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,557,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4461;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4462;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_else_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_case_else_part;
    return this;
}

Case_else_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_else_partContext.prototype.constructor = Case_else_partContext;

Case_else_partContext.prototype.ELSE = function() {
    return this.getToken(PlSqlParser.ELSE, 0);
};

Case_else_partContext.prototype.seq_of_statements = function() {
    return this.getTypedRuleContext(Seq_of_statementsContext,0);
};

Case_else_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Case_else_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCase_else_part(this);
	}
};

Case_else_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCase_else_part(this);
	}
};




PlSqlParser.Case_else_partContext = Case_else_partContext;

PlSqlParser.prototype.case_else_part = function() {

    var localctx = new Case_else_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, PlSqlParser.RULE_case_else_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4465;
        this.match(PlSqlParser.ELSE);
        this.state = 4468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4466;
            this.seq_of_statements();
            break;

        case 2:
            this.state = 4467;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.table_element = function() {
    return this.getTypedRuleContext(Table_elementContext,0);
};

AtomContext.prototype.outer_join_sign = function() {
    return this.getTypedRuleContext(Outer_join_signContext,0);
};

AtomContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

AtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

AtomContext.prototype.general_element = function() {
    return this.getTypedRuleContext(General_elementContext,0);
};

AtomContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

AtomContext.prototype.subquery_operation_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_operation_partContext);
    } else {
        return this.getTypedRuleContext(Subquery_operation_partContext,i);
    }
};

AtomContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAtom(this);
	}
};




PlSqlParser.AtomContext = AtomContext;

PlSqlParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, PlSqlParser.RULE_atom);
    try {
        this.state = 4489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4470;
            this.table_element();
            this.state = 4471;
            this.outer_join_sign();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4473;
            this.bind_variable();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4474;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4475;
            this.general_element();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4476;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4477;
            this.subquery();
            this.state = 4478;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4482;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,559,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4479;
                    this.subquery_operation_part(); 
                }
                this.state = 4484;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,559,this._ctx);
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4485;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4486;
            this.expressions();
            this.state = 4487;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantified_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_quantified_expression;
    return this;
}

Quantified_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantified_expressionContext.prototype.constructor = Quantified_expressionContext;

Quantified_expressionContext.prototype.SOME = function() {
    return this.getToken(PlSqlParser.SOME, 0);
};

Quantified_expressionContext.prototype.EXISTS = function() {
    return this.getToken(PlSqlParser.EXISTS, 0);
};

Quantified_expressionContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Quantified_expressionContext.prototype.ANY = function() {
    return this.getToken(PlSqlParser.ANY, 0);
};

Quantified_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Quantified_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Quantified_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterQuantified_expression(this);
	}
};

Quantified_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitQuantified_expression(this);
	}
};




PlSqlParser.Quantified_expressionContext = Quantified_expressionContext;

PlSqlParser.prototype.quantified_expression = function() {

    var localctx = new Quantified_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, PlSqlParser.RULE_quantified_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4491;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.ANY || _la===PlSqlParser.EXISTS || _la===PlSqlParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4492;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4493;
            this.subquery();
            this.state = 4494;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 2:
            this.state = 4496;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4497;
            this.expression();
            this.state = 4498;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_string_function;
    return this;
}

String_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_functionContext.prototype.constructor = String_functionContext;

String_functionContext.prototype.SUBSTR = function() {
    return this.getToken(PlSqlParser.SUBSTR, 0);
};

String_functionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

String_functionContext.prototype.TO_CHAR = function() {
    return this.getToken(PlSqlParser.TO_CHAR, 0);
};

String_functionContext.prototype.table_element = function() {
    return this.getTypedRuleContext(Table_elementContext,0);
};

String_functionContext.prototype.standard_function = function() {
    return this.getTypedRuleContext(Standard_functionContext,0);
};

String_functionContext.prototype.quoted_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Quoted_stringContext);
    } else {
        return this.getTypedRuleContext(Quoted_stringContext,i);
    }
};

String_functionContext.prototype.DECODE = function() {
    return this.getToken(PlSqlParser.DECODE, 0);
};

String_functionContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

String_functionContext.prototype.CHR = function() {
    return this.getToken(PlSqlParser.CHR, 0);
};

String_functionContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

String_functionContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

String_functionContext.prototype.NCHAR_CS = function() {
    return this.getToken(PlSqlParser.NCHAR_CS, 0);
};

String_functionContext.prototype.NVL = function() {
    return this.getToken(PlSqlParser.NVL, 0);
};

String_functionContext.prototype.TRIM = function() {
    return this.getToken(PlSqlParser.TRIM, 0);
};

String_functionContext.prototype.FROM = function() {
    return this.getToken(PlSqlParser.FROM, 0);
};

String_functionContext.prototype.LEADING = function() {
    return this.getToken(PlSqlParser.LEADING, 0);
};

String_functionContext.prototype.TRAILING = function() {
    return this.getToken(PlSqlParser.TRAILING, 0);
};

String_functionContext.prototype.BOTH = function() {
    return this.getToken(PlSqlParser.BOTH, 0);
};

String_functionContext.prototype.TO_DATE = function() {
    return this.getToken(PlSqlParser.TO_DATE, 0);
};

String_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterString_function(this);
	}
};

String_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitString_function(this);
	}
};




PlSqlParser.String_functionContext = String_functionContext;

PlSqlParser.prototype.string_function = function() {

    var localctx = new String_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, PlSqlParser.RULE_string_function);
    var _la = 0; // Token type
    try {
        this.state = 4572;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SUBSTR:
            this.enterOuterAlt(localctx, 1);
            this.state = 4502;
            this.match(PlSqlParser.SUBSTR);
            this.state = 4503;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4504;
            this.expression();
            this.state = 4505;
            this.match(PlSqlParser.COMMA);
            this.state = 4506;
            this.expression();
            this.state = 4509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4507;
                this.match(PlSqlParser.COMMA);
                this.state = 4508;
                this.expression();
            }

            this.state = 4511;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.TO_CHAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 4513;
            this.match(PlSqlParser.TO_CHAR);
            this.state = 4514;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4515;
                this.table_element();
                break;

            case 2:
                this.state = 4516;
                this.standard_function();
                break;

            case 3:
                this.state = 4517;
                this.expression();
                break;

            }
            this.state = 4522;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,564,this._ctx);
            if(la_===1) {
                this.state = 4520;
                this.match(PlSqlParser.COMMA);
                this.state = 4521;
                this.quoted_string();

            }
            this.state = 4526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4524;
                this.match(PlSqlParser.COMMA);
                this.state = 4525;
                this.quoted_string();
            }

            this.state = 4528;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.DECODE:
            this.enterOuterAlt(localctx, 3);
            this.state = 4530;
            this.match(PlSqlParser.DECODE);
            this.state = 4531;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4532;
            this.expressions();
            this.state = 4533;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.CHR:
            this.enterOuterAlt(localctx, 4);
            this.state = 4535;
            this.match(PlSqlParser.CHR);
            this.state = 4536;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4537;
            this.concatenation(0);
            this.state = 4538;
            this.match(PlSqlParser.USING);
            this.state = 4539;
            this.match(PlSqlParser.NCHAR_CS);
            this.state = 4540;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.NVL:
            this.enterOuterAlt(localctx, 5);
            this.state = 4542;
            this.match(PlSqlParser.NVL);
            this.state = 4543;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4544;
            this.expression();
            this.state = 4545;
            this.match(PlSqlParser.COMMA);
            this.state = 4546;
            this.expression();
            this.state = 4547;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.TRIM:
            this.enterOuterAlt(localctx, 6);
            this.state = 4549;
            this.match(PlSqlParser.TRIM);
            this.state = 4550;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4558;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,568,this._ctx);
            if(la_===1) {
                this.state = 4552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.BOTH || _la===PlSqlParser.LEADING || _la===PlSqlParser.TRAILING) {
                    this.state = 4551;
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.BOTH || _la===PlSqlParser.LEADING || _la===PlSqlParser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 4555;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.NATIONAL_CHAR_STRING_LIT || _la===PlSqlParser.CHAR_STRING) {
                    this.state = 4554;
                    this.quoted_string();
                }

                this.state = 4557;
                this.match(PlSqlParser.FROM);

            }
            this.state = 4560;
            this.concatenation(0);
            this.state = 4561;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.TO_DATE:
            this.enterOuterAlt(localctx, 7);
            this.state = 4563;
            this.match(PlSqlParser.TO_DATE);
            this.state = 4564;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4565;
            this.expression();
            this.state = 4568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4566;
                this.match(PlSqlParser.COMMA);
                this.state = 4567;
                this.quoted_string();
            }

            this.state = 4570;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_standard_function;
    return this;
}

Standard_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_functionContext.prototype.constructor = Standard_functionContext;

Standard_functionContext.prototype.string_function = function() {
    return this.getTypedRuleContext(String_functionContext,0);
};

Standard_functionContext.prototype.numeric_function_wrapper = function() {
    return this.getTypedRuleContext(Numeric_function_wrapperContext,0);
};

Standard_functionContext.prototype.other_function = function() {
    return this.getTypedRuleContext(Other_functionContext,0);
};

Standard_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStandard_function(this);
	}
};

Standard_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStandard_function(this);
	}
};




PlSqlParser.Standard_functionContext = Standard_functionContext;

PlSqlParser.prototype.standard_function = function() {

    var localctx = new Standard_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, PlSqlParser.RULE_standard_function);
    try {
        this.state = 4577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4574;
            this.string_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4575;
            this.numeric_function_wrapper();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4576;
            this.other_function();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_function_wrapperContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_numeric_function_wrapper;
    return this;
}

Numeric_function_wrapperContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_function_wrapperContext.prototype.constructor = Numeric_function_wrapperContext;

Numeric_function_wrapperContext.prototype.numeric_function = function() {
    return this.getTypedRuleContext(Numeric_functionContext,0);
};

Numeric_function_wrapperContext.prototype.single_column_for_loop = function() {
    return this.getTypedRuleContext(Single_column_for_loopContext,0);
};

Numeric_function_wrapperContext.prototype.multi_column_for_loop = function() {
    return this.getTypedRuleContext(Multi_column_for_loopContext,0);
};

Numeric_function_wrapperContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNumeric_function_wrapper(this);
	}
};

Numeric_function_wrapperContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNumeric_function_wrapper(this);
	}
};




PlSqlParser.Numeric_function_wrapperContext = Numeric_function_wrapperContext;

PlSqlParser.prototype.numeric_function_wrapper = function() {

    var localctx = new Numeric_function_wrapperContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, PlSqlParser.RULE_numeric_function_wrapper);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4579;
        this.numeric_function();
        this.state = 4582;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,572,this._ctx);
        if(la_===1) {
            this.state = 4580;
            this.single_column_for_loop();

        } else if(la_===2) {
            this.state = 4581;
            this.multi_column_for_loop();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_numeric_function;
    return this;
}

Numeric_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_functionContext.prototype.constructor = Numeric_functionContext;

Numeric_functionContext.prototype.SUM = function() {
    return this.getToken(PlSqlParser.SUM, 0);
};

Numeric_functionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Numeric_functionContext.prototype.DISTINCT = function() {
    return this.getToken(PlSqlParser.DISTINCT, 0);
};

Numeric_functionContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Numeric_functionContext.prototype.COUNT = function() {
    return this.getToken(PlSqlParser.COUNT, 0);
};

Numeric_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Numeric_functionContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Numeric_functionContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Numeric_functionContext.prototype.ROUND = function() {
    return this.getToken(PlSqlParser.ROUND, 0);
};

Numeric_functionContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PlSqlParser.UNSIGNED_INTEGER, 0);
};

Numeric_functionContext.prototype.AVG = function() {
    return this.getToken(PlSqlParser.AVG, 0);
};

Numeric_functionContext.prototype.MAX = function() {
    return this.getToken(PlSqlParser.MAX, 0);
};

Numeric_functionContext.prototype.LEAST = function() {
    return this.getToken(PlSqlParser.LEAST, 0);
};

Numeric_functionContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Numeric_functionContext.prototype.GREATEST = function() {
    return this.getToken(PlSqlParser.GREATEST, 0);
};

Numeric_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNumeric_function(this);
	}
};

Numeric_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNumeric_function(this);
	}
};




PlSqlParser.Numeric_functionContext = Numeric_functionContext;

PlSqlParser.prototype.numeric_function = function() {

    var localctx = new Numeric_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, PlSqlParser.RULE_numeric_function);
    var _la = 0; // Token type
    try {
        this.state = 4642;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SUM:
            this.enterOuterAlt(localctx, 1);
            this.state = 4584;
            this.match(PlSqlParser.SUM);
            this.state = 4585;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,573,this._ctx);
            if(la_===1) {
                this.state = 4586;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4589;
            this.expression();
            this.state = 4590;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.COUNT:
            this.enterOuterAlt(localctx, 2);
            this.state = 4592;
            this.match(PlSqlParser.COUNT);
            this.state = 4593;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4601;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ASTERISK:
                this.state = 4594;
                this.match(PlSqlParser.ASTERISK);
                break;
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ALL:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ANY:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CASE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COALESCE:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONNECT_BY_ROOT:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DATE:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DISTINCT:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXISTS:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FALSE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULL:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.PRIOR:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUE:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNIQUE:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.DECODE:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.NVL:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROUND:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TO_CHAR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.LEAST:
            case PlSqlParser.GREATEST:
            case PlSqlParser.TO_DATE:
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.UNSIGNED_INTEGER:
            case PlSqlParser.APPROXIMATE_NUM_LIT:
            case PlSqlParser.CHAR_STRING:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.LEFT_PAREN:
            case PlSqlParser.RIGHT_PAREN:
            case PlSqlParser.PLUS_SIGN:
            case PlSqlParser.MINUS_SIGN:
            case PlSqlParser.BINDVAR:
            case PlSqlParser.COLON:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 4599;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNIQUE - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                    this.state = 4596;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
                    if(la_===1) {
                        this.state = 4595;
                        _la = this._input.LA(1);
                        if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT || _la===PlSqlParser.UNIQUE)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }

                    }
                    this.state = 4598;
                    this.concatenation(0);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4603;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4605;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
            if(la_===1) {
                this.state = 4604;
                this.over_clause();

            }
            break;
        case PlSqlParser.ROUND:
            this.enterOuterAlt(localctx, 3);
            this.state = 4607;
            this.match(PlSqlParser.ROUND);
            this.state = 4608;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4609;
            this.expression();
            this.state = 4612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4610;
                this.match(PlSqlParser.COMMA);
                this.state = 4611;
                this.match(PlSqlParser.UNSIGNED_INTEGER);
            }

            this.state = 4614;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.AVG:
            this.enterOuterAlt(localctx, 4);
            this.state = 4616;
            this.match(PlSqlParser.AVG);
            this.state = 4617;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4619;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,579,this._ctx);
            if(la_===1) {
                this.state = 4618;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4621;
            this.expression();
            this.state = 4622;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.MAX:
            this.enterOuterAlt(localctx, 5);
            this.state = 4624;
            this.match(PlSqlParser.MAX);
            this.state = 4625;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4627;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
            if(la_===1) {
                this.state = 4626;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4629;
            this.expression();
            this.state = 4630;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.LEAST:
            this.enterOuterAlt(localctx, 6);
            this.state = 4632;
            this.match(PlSqlParser.LEAST);
            this.state = 4633;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4634;
            this.expressions();
            this.state = 4635;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.GREATEST:
            this.enterOuterAlt(localctx, 7);
            this.state = 4637;
            this.match(PlSqlParser.GREATEST);
            this.state = 4638;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4639;
            this.expressions();
            this.state = 4640;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Other_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_other_function;
    return this;
}

Other_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Other_functionContext.prototype.constructor = Other_functionContext;

Other_functionContext.prototype.over_clause_keyword = function() {
    return this.getTypedRuleContext(Over_clause_keywordContext,0);
};

Other_functionContext.prototype.function_argument_analytic = function() {
    return this.getTypedRuleContext(Function_argument_analyticContext,0);
};

Other_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Other_functionContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Other_functionContext.prototype.function_argument_modeling = function() {
    return this.getTypedRuleContext(Function_argument_modelingContext,0);
};

Other_functionContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Other_functionContext.prototype.COUNT = function() {
    return this.getToken(PlSqlParser.COUNT, 0);
};

Other_functionContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Other_functionContext.prototype.DISTINCT = function() {
    return this.getToken(PlSqlParser.DISTINCT, 0);
};

Other_functionContext.prototype.UNIQUE = function() {
    return this.getToken(PlSqlParser.UNIQUE, 0);
};

Other_functionContext.prototype.ALL = function() {
    return this.getToken(PlSqlParser.ALL, 0);
};

Other_functionContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Other_functionContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Other_functionContext.prototype.CAST = function() {
    return this.getToken(PlSqlParser.CAST, 0);
};

Other_functionContext.prototype.XMLCAST = function() {
    return this.getToken(PlSqlParser.XMLCAST, 0);
};

Other_functionContext.prototype.MULTISET = function() {
    return this.getToken(PlSqlParser.MULTISET, 0);
};

Other_functionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Other_functionContext.prototype.COALESCE = function() {
    return this.getToken(PlSqlParser.COALESCE, 0);
};

Other_functionContext.prototype.table_element = function() {
    return this.getTypedRuleContext(Table_elementContext,0);
};

Other_functionContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Other_functionContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Other_functionContext.prototype.COLLECT = function() {
    return this.getToken(PlSqlParser.COLLECT, 0);
};

Other_functionContext.prototype.collect_order_by_part = function() {
    return this.getTypedRuleContext(Collect_order_by_partContext,0);
};

Other_functionContext.prototype.within_or_over_clause_keyword = function() {
    return this.getTypedRuleContext(Within_or_over_clause_keywordContext,0);
};

Other_functionContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

Other_functionContext.prototype.within_or_over_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Within_or_over_partContext);
    } else {
        return this.getTypedRuleContext(Within_or_over_partContext,i);
    }
};

Other_functionContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Other_functionContext.prototype.PERCENT_ISOPEN = function() {
    return this.getToken(PlSqlParser.PERCENT_ISOPEN, 0);
};

Other_functionContext.prototype.PERCENT_FOUND = function() {
    return this.getToken(PlSqlParser.PERCENT_FOUND, 0);
};

Other_functionContext.prototype.PERCENT_NOTFOUND = function() {
    return this.getToken(PlSqlParser.PERCENT_NOTFOUND, 0);
};

Other_functionContext.prototype.PERCENT_ROWCOUNT = function() {
    return this.getToken(PlSqlParser.PERCENT_ROWCOUNT, 0);
};

Other_functionContext.prototype.DECOMPOSE = function() {
    return this.getToken(PlSqlParser.DECOMPOSE, 0);
};

Other_functionContext.prototype.CANONICAL = function() {
    return this.getToken(PlSqlParser.CANONICAL, 0);
};

Other_functionContext.prototype.COMPATIBILITY = function() {
    return this.getToken(PlSqlParser.COMPATIBILITY, 0);
};

Other_functionContext.prototype.EXTRACT = function() {
    return this.getToken(PlSqlParser.EXTRACT, 0);
};

Other_functionContext.prototype.FROM = function() {
    return this.getToken(PlSqlParser.FROM, 0);
};

Other_functionContext.prototype.FIRST_VALUE = function() {
    return this.getToken(PlSqlParser.FIRST_VALUE, 0);
};

Other_functionContext.prototype.LAST_VALUE = function() {
    return this.getToken(PlSqlParser.LAST_VALUE, 0);
};

Other_functionContext.prototype.respect_or_ignore_nulls = function() {
    return this.getTypedRuleContext(Respect_or_ignore_nullsContext,0);
};

Other_functionContext.prototype.standard_prediction_function_keyword = function() {
    return this.getTypedRuleContext(Standard_prediction_function_keywordContext,0);
};

Other_functionContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Other_functionContext.prototype.cost_matrix_clause = function() {
    return this.getTypedRuleContext(Cost_matrix_clauseContext,0);
};

Other_functionContext.prototype.TRANSLATE = function() {
    return this.getToken(PlSqlParser.TRANSLATE, 0);
};

Other_functionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Other_functionContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Other_functionContext.prototype.CHAR_CS = function() {
    return this.getToken(PlSqlParser.CHAR_CS, 0);
};

Other_functionContext.prototype.NCHAR_CS = function() {
    return this.getToken(PlSqlParser.NCHAR_CS, 0);
};

Other_functionContext.prototype.TREAT = function() {
    return this.getToken(PlSqlParser.TREAT, 0);
};

Other_functionContext.prototype.REF = function() {
    return this.getToken(PlSqlParser.REF, 0);
};

Other_functionContext.prototype.TRIM = function() {
    return this.getToken(PlSqlParser.TRIM, 0);
};

Other_functionContext.prototype.LEADING = function() {
    return this.getToken(PlSqlParser.LEADING, 0);
};

Other_functionContext.prototype.TRAILING = function() {
    return this.getToken(PlSqlParser.TRAILING, 0);
};

Other_functionContext.prototype.BOTH = function() {
    return this.getToken(PlSqlParser.BOTH, 0);
};

Other_functionContext.prototype.XMLAGG = function() {
    return this.getToken(PlSqlParser.XMLAGG, 0);
};

Other_functionContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Other_functionContext.prototype.general_element_part = function() {
    return this.getTypedRuleContext(General_element_partContext,0);
};

Other_functionContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

Other_functionContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(PlSqlParser.XMLCOLATTVAL, 0);
};

Other_functionContext.prototype.XMLFOREST = function() {
    return this.getToken(PlSqlParser.XMLFOREST, 0);
};

Other_functionContext.prototype.XMLELEMENT = function() {
    return this.getToken(PlSqlParser.XMLELEMENT, 0);
};

Other_functionContext.prototype.xml_attributes_clause = function() {
    return this.getTypedRuleContext(Xml_attributes_clauseContext,0);
};

Other_functionContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.ENTITYESCAPING, 0);
};

Other_functionContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.NOENTITYESCAPING, 0);
};

Other_functionContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Other_functionContext.prototype.EVALNAME = function() {
    return this.getToken(PlSqlParser.EVALNAME, 0);
};

Other_functionContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Other_functionContext.prototype.XMLEXISTS = function() {
    return this.getToken(PlSqlParser.XMLEXISTS, 0);
};

Other_functionContext.prototype.xml_passing_clause = function() {
    return this.getTypedRuleContext(Xml_passing_clauseContext,0);
};

Other_functionContext.prototype.XMLPARSE = function() {
    return this.getToken(PlSqlParser.XMLPARSE, 0);
};

Other_functionContext.prototype.DOCUMENT = function() {
    return this.getToken(PlSqlParser.DOCUMENT, 0);
};

Other_functionContext.prototype.CONTENT = function() {
    return this.getToken(PlSqlParser.CONTENT, 0);
};

Other_functionContext.prototype.WELLFORMED = function() {
    return this.getToken(PlSqlParser.WELLFORMED, 0);
};

Other_functionContext.prototype.XMLPI = function() {
    return this.getToken(PlSqlParser.XMLPI, 0);
};

Other_functionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Other_functionContext.prototype.XMLQUERY = function() {
    return this.getToken(PlSqlParser.XMLQUERY, 0);
};

Other_functionContext.prototype.RETURNING = function() {
    return this.getToken(PlSqlParser.RETURNING, 0);
};

Other_functionContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

Other_functionContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Other_functionContext.prototype.EMPTY = function() {
    return this.getToken(PlSqlParser.EMPTY, 0);
};

Other_functionContext.prototype.XMLROOT = function() {
    return this.getToken(PlSqlParser.XMLROOT, 0);
};

Other_functionContext.prototype.xmlroot_param_version_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_version_partContext,0);
};

Other_functionContext.prototype.xmlroot_param_standalone_part = function() {
    return this.getTypedRuleContext(Xmlroot_param_standalone_partContext,0);
};

Other_functionContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(PlSqlParser.XMLSERIALIZE, 0);
};

Other_functionContext.prototype.xmlserialize_param_enconding_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_enconding_partContext,0);
};

Other_functionContext.prototype.xmlserialize_param_version_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_version_partContext,0);
};

Other_functionContext.prototype.xmlserialize_param_ident_part = function() {
    return this.getTypedRuleContext(Xmlserialize_param_ident_partContext,0);
};

Other_functionContext.prototype.DEFAULTS = function() {
    return this.getToken(PlSqlParser.DEFAULTS, 0);
};

Other_functionContext.prototype.HIDE = function() {
    return this.getToken(PlSqlParser.HIDE, 0);
};

Other_functionContext.prototype.SHOW = function() {
    return this.getToken(PlSqlParser.SHOW, 0);
};

Other_functionContext.prototype.XMLTABLE = function() {
    return this.getToken(PlSqlParser.XMLTABLE, 0);
};

Other_functionContext.prototype.xml_namespaces_clause = function() {
    return this.getTypedRuleContext(Xml_namespaces_clauseContext,0);
};

Other_functionContext.prototype.COLUMNS = function() {
    return this.getToken(PlSqlParser.COLUMNS, 0);
};

Other_functionContext.prototype.xml_table_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_table_columnContext);
    } else {
        return this.getTypedRuleContext(Xml_table_columnContext,i);
    }
};

Other_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOther_function(this);
	}
};

Other_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOther_function(this);
	}
};




PlSqlParser.Other_functionContext = Other_functionContext;

PlSqlParser.prototype.other_function = function() {

    var localctx = new Other_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, PlSqlParser.RULE_other_function);
    var _la = 0; // Token type
    try {
        this.state = 4959;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,635,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4644;
            this.over_clause_keyword();
            this.state = 4645;
            this.function_argument_analytic();
            this.state = 4647;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,582,this._ctx);
            if(la_===1) {
                this.state = 4646;
                this.over_clause();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4649;
            this.regular_id();
            this.state = 4650;
            this.function_argument_modeling();
            this.state = 4652;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,583,this._ctx);
            if(la_===1) {
                this.state = 4651;
                this.using_clause();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4654;
            this.match(PlSqlParser.COUNT);
            this.state = 4655;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4661;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ASTERISK:
                this.state = 4656;
                this.match(PlSqlParser.ASTERISK);
                break;
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ALL:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ANY:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CASE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COALESCE:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONNECT_BY_ROOT:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DATE:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DISTINCT:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXISTS:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FALSE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULL:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.PRIOR:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUE:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNIQUE:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.DECODE:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.NVL:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROUND:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TO_CHAR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.LEAST:
            case PlSqlParser.GREATEST:
            case PlSqlParser.TO_DATE:
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.UNSIGNED_INTEGER:
            case PlSqlParser.APPROXIMATE_NUM_LIT:
            case PlSqlParser.CHAR_STRING:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.LEFT_PAREN:
            case PlSqlParser.PLUS_SIGN:
            case PlSqlParser.MINUS_SIGN:
            case PlSqlParser.BINDVAR:
            case PlSqlParser.COLON:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 4658;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
                if(la_===1) {
                    this.state = 4657;
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.ALL || _la===PlSqlParser.DISTINCT || _la===PlSqlParser.UNIQUE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }

                }
                this.state = 4660;
                this.concatenation(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4663;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4665;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,586,this._ctx);
            if(la_===1) {
                this.state = 4664;
                this.over_clause();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4667;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.CAST || _la===PlSqlParser.XMLCAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4668;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4675;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
            switch(la_) {
            case 1:
                this.state = 4669;
                this.match(PlSqlParser.MULTISET);
                this.state = 4670;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 4671;
                this.subquery();
                this.state = 4672;
                this.match(PlSqlParser.RIGHT_PAREN);
                break;

            case 2:
                this.state = 4674;
                this.concatenation(0);
                break;

            }
            this.state = 4677;
            this.match(PlSqlParser.AS);
            this.state = 4678;
            this.type_spec();
            this.state = 4679;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4681;
            this.match(PlSqlParser.COALESCE);
            this.state = 4682;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4683;
            this.table_element();
            this.state = 4689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4684;
                this.match(PlSqlParser.COMMA);
                this.state = 4687;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.UNSIGNED_INTEGER:
                case PlSqlParser.APPROXIMATE_NUM_LIT:
                    this.state = 4685;
                    this.numeric();
                    break;
                case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
                case PlSqlParser.CHAR_STRING:
                    this.state = 4686;
                    this.quoted_string();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 4691;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4693;
            this.match(PlSqlParser.COLLECT);
            this.state = 4694;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
            if(la_===1) {
                this.state = 4695;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.DISTINCT || _la===PlSqlParser.UNIQUE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4698;
            this.concatenation(0);
            this.state = 4700;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.ORDER) {
                this.state = 4699;
                this.collect_order_by_part();
            }

            this.state = 4702;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4704;
            this.within_or_over_clause_keyword();
            this.state = 4705;
            this.function_argument();
            this.state = 4707; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 4706;
            		this.within_or_over_part();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 4709; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,592, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4711;
            this.cursor_name();
            this.state = 4712;
            _la = this._input.LA(1);
            if(!(((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (PlSqlParser.PERCENT_FOUND - 312)) | (1 << (PlSqlParser.PERCENT_ISOPEN - 312)) | (1 << (PlSqlParser.PERCENT_NOTFOUND - 312)) | (1 << (PlSqlParser.PERCENT_ROWCOUNT - 312)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4714;
            this.match(PlSqlParser.DECOMPOSE);
            this.state = 4715;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4716;
            this.concatenation(0);
            this.state = 4718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.CANONICAL || _la===PlSqlParser.COMPATIBILITY) {
                this.state = 4717;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.CANONICAL || _la===PlSqlParser.COMPATIBILITY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4720;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 4722;
            this.match(PlSqlParser.EXTRACT);
            this.state = 4723;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4724;
            this.regular_id();
            this.state = 4725;
            this.match(PlSqlParser.FROM);
            this.state = 4726;
            this.concatenation(0);
            this.state = 4727;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 4729;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FIRST_VALUE || _la===PlSqlParser.LAST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4730;
            this.function_argument_analytic();
            this.state = 4732;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.IGNORE || _la===PlSqlParser.RESPECT) {
                this.state = 4731;
                this.respect_or_ignore_nulls();
            }

            this.state = 4734;
            this.over_clause();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 4736;
            this.standard_prediction_function_keyword();
            this.state = 4737;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4738;
            this.expressions();
            this.state = 4740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COST) {
                this.state = 4739;
                this.cost_matrix_clause();
            }

            this.state = 4743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.USING) {
                this.state = 4742;
                this.using_clause();
            }

            this.state = 4745;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 4747;
            this.match(PlSqlParser.TRANSLATE);
            this.state = 4748;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4749;
            this.expression();
            this.state = 4752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.USING) {
                this.state = 4750;
                this.match(PlSqlParser.USING);
                this.state = 4751;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.CHAR_CS || _la===PlSqlParser.NCHAR_CS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4754;
                this.match(PlSqlParser.COMMA);
                this.state = 4755;
                this.expression();
                this.state = 4760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4761;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 4763;
            this.match(PlSqlParser.TREAT);
            this.state = 4764;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4765;
            this.expression();
            this.state = 4766;
            this.match(PlSqlParser.AS);
            this.state = 4768;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,599,this._ctx);
            if(la_===1) {
                this.state = 4767;
                this.match(PlSqlParser.REF);

            }
            this.state = 4770;
            this.type_spec();
            this.state = 4771;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 4773;
            this.match(PlSqlParser.TRIM);
            this.state = 4774;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4782;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
            if(la_===1) {
                this.state = 4776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.BOTH || _la===PlSqlParser.LEADING || _la===PlSqlParser.TRAILING) {
                    this.state = 4775;
                    _la = this._input.LA(1);
                    if(!(_la===PlSqlParser.BOTH || _la===PlSqlParser.LEADING || _la===PlSqlParser.TRAILING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 4779;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.NATIONAL_CHAR_STRING_LIT || _la===PlSqlParser.CHAR_STRING) {
                    this.state = 4778;
                    this.quoted_string();
                }

                this.state = 4781;
                this.match(PlSqlParser.FROM);

            }
            this.state = 4784;
            this.concatenation(0);
            this.state = 4785;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 4787;
            this.match(PlSqlParser.XMLAGG);
            this.state = 4788;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4789;
            this.expression();
            this.state = 4791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.ORDER) {
                this.state = 4790;
                this.order_by_clause();
            }

            this.state = 4793;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4796;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
            if(la_===1) {
                this.state = 4794;
                this.match(PlSqlParser.PERIOD);
                this.state = 4795;
                this.general_element_part();

            }
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 4798;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.XMLCOLATTVAL || _la===PlSqlParser.XMLFOREST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4799;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4800;
            this.xml_multiuse_expression_element();
            this.state = 4805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4801;
                this.match(PlSqlParser.COMMA);
                this.state = 4802;
                this.xml_multiuse_expression_element();
                this.state = 4807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4808;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4811;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,606,this._ctx);
            if(la_===1) {
                this.state = 4809;
                this.match(PlSqlParser.PERIOD);
                this.state = 4810;
                this.general_element_part();

            }
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 4813;
            this.match(PlSqlParser.XMLELEMENT);
            this.state = 4814;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4816;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,607,this._ctx);
            if(la_===1) {
                this.state = 4815;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.ENTITYESCAPING || _la===PlSqlParser.NOENTITYESCAPING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4819;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
            if(la_===1) {
                this.state = 4818;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.EVALNAME || _la===PlSqlParser.NAME)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4821;
            this.expression();
            this.state = 4824;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,609,this._ctx);
            if(la_===1) {
                this.state = 4822;
                this.match(PlSqlParser.COMMA);
                this.state = 4823;
                this.xml_attributes_clause();

            }
            this.state = 4833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 4826;
                this.match(PlSqlParser.COMMA);
                this.state = 4827;
                this.expression();
                this.state = 4829;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                    this.state = 4828;
                    this.column_alias();
                }

                this.state = 4835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4836;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4839;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,612,this._ctx);
            if(la_===1) {
                this.state = 4837;
                this.match(PlSqlParser.PERIOD);
                this.state = 4838;
                this.general_element_part();

            }
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 4841;
            this.match(PlSqlParser.XMLEXISTS);
            this.state = 4842;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4843;
            this.expression();
            this.state = 4845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PASSING) {
                this.state = 4844;
                this.xml_passing_clause();
            }

            this.state = 4847;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 4849;
            this.match(PlSqlParser.XMLPARSE);
            this.state = 4850;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4851;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.CONTENT || _la===PlSqlParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4852;
            this.concatenation(0);
            this.state = 4854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.WELLFORMED) {
                this.state = 4853;
                this.match(PlSqlParser.WELLFORMED);
            }

            this.state = 4856;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4859;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,615,this._ctx);
            if(la_===1) {
                this.state = 4857;
                this.match(PlSqlParser.PERIOD);
                this.state = 4858;
                this.general_element_part();

            }
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 4861;
            this.match(PlSqlParser.XMLPI);
            this.state = 4862;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4867;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.NAME:
                this.state = 4863;
                this.match(PlSqlParser.NAME);
                this.state = 4864;
                this.identifier();
                break;
            case PlSqlParser.EVALNAME:
                this.state = 4865;
                this.match(PlSqlParser.EVALNAME);
                this.state = 4866;
                this.concatenation(0);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4869;
                this.match(PlSqlParser.COMMA);
                this.state = 4870;
                this.concatenation(0);
            }

            this.state = 4873;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4876;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,618,this._ctx);
            if(la_===1) {
                this.state = 4874;
                this.match(PlSqlParser.PERIOD);
                this.state = 4875;
                this.general_element_part();

            }
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 4878;
            this.match(PlSqlParser.XMLQUERY);
            this.state = 4879;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4880;
            this.concatenation(0);
            this.state = 4882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PASSING) {
                this.state = 4881;
                this.xml_passing_clause();
            }

            this.state = 4884;
            this.match(PlSqlParser.RETURNING);
            this.state = 4885;
            this.match(PlSqlParser.CONTENT);
            this.state = 4889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.NULL) {
                this.state = 4886;
                this.match(PlSqlParser.NULL);
                this.state = 4887;
                this.match(PlSqlParser.ON);
                this.state = 4888;
                this.match(PlSqlParser.EMPTY);
            }

            this.state = 4891;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4894;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,621,this._ctx);
            if(la_===1) {
                this.state = 4892;
                this.match(PlSqlParser.PERIOD);
                this.state = 4893;
                this.general_element_part();

            }
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 4896;
            this.match(PlSqlParser.XMLROOT);
            this.state = 4897;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4898;
            this.concatenation(0);
            this.state = 4901;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,622,this._ctx);
            if(la_===1) {
                this.state = 4899;
                this.match(PlSqlParser.COMMA);
                this.state = 4900;
                this.xmlroot_param_version_part();

            }
            this.state = 4905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 4903;
                this.match(PlSqlParser.COMMA);
                this.state = 4904;
                this.xmlroot_param_standalone_part();
            }

            this.state = 4907;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4910;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,624,this._ctx);
            if(la_===1) {
                this.state = 4908;
                this.match(PlSqlParser.PERIOD);
                this.state = 4909;
                this.general_element_part();

            }
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 4912;
            this.match(PlSqlParser.XMLSERIALIZE);
            this.state = 4913;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4914;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.CONTENT || _la===PlSqlParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4915;
            this.concatenation(0);
            this.state = 4918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.AS) {
                this.state = 4916;
                this.match(PlSqlParser.AS);
                this.state = 4917;
                this.type_spec();
            }

            this.state = 4921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.ENCODING) {
                this.state = 4920;
                this.xmlserialize_param_enconding_part();
            }

            this.state = 4924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.VERSION) {
                this.state = 4923;
                this.xmlserialize_param_version_part();
            }

            this.state = 4927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.INDENT || _la===PlSqlParser.NO) {
                this.state = 4926;
                this.xmlserialize_param_ident_part();
            }

            this.state = 4931;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.HIDE || _la===PlSqlParser.SHOW) {
                this.state = 4929;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.HIDE || _la===PlSqlParser.SHOW)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4930;
                this.match(PlSqlParser.DEFAULTS);
            }

            this.state = 4933;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4936;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,630,this._ctx);
            if(la_===1) {
                this.state = 4934;
                this.match(PlSqlParser.PERIOD);
                this.state = 4935;
                this.general_element_part();

            }
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 4938;
            this.match(PlSqlParser.XMLTABLE);
            this.state = 4939;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 4941;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
            if(la_===1) {
                this.state = 4940;
                this.xml_namespaces_clause();

            }
            this.state = 4943;
            this.concatenation(0);
            this.state = 4945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PASSING) {
                this.state = 4944;
                this.xml_passing_clause();
            }

            this.state = 4952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COLUMNS) {
                this.state = 4947;
                this.match(PlSqlParser.COLUMNS);
                this.state = 4948;
                this.xml_table_column();

                this.state = 4949;
                this.match(PlSqlParser.COMMA);
                this.state = 4950;
                this.xml_table_column();
            }

            this.state = 4954;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 4957;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,634,this._ctx);
            if(la_===1) {
                this.state = 4955;
                this.match(PlSqlParser.PERIOD);
                this.state = 4956;
                this.general_element_part();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_over_clause_keyword;
    return this;
}

Over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clause_keywordContext.prototype.constructor = Over_clause_keywordContext;

Over_clause_keywordContext.prototype.AVG = function() {
    return this.getToken(PlSqlParser.AVG, 0);
};

Over_clause_keywordContext.prototype.CORR = function() {
    return this.getToken(PlSqlParser.CORR, 0);
};

Over_clause_keywordContext.prototype.LAG = function() {
    return this.getToken(PlSqlParser.LAG, 0);
};

Over_clause_keywordContext.prototype.LEAD = function() {
    return this.getToken(PlSqlParser.LEAD, 0);
};

Over_clause_keywordContext.prototype.MAX = function() {
    return this.getToken(PlSqlParser.MAX, 0);
};

Over_clause_keywordContext.prototype.MEDIAN = function() {
    return this.getToken(PlSqlParser.MEDIAN, 0);
};

Over_clause_keywordContext.prototype.MIN = function() {
    return this.getToken(PlSqlParser.MIN, 0);
};

Over_clause_keywordContext.prototype.NTILE = function() {
    return this.getToken(PlSqlParser.NTILE, 0);
};

Over_clause_keywordContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(PlSqlParser.RATIO_TO_REPORT, 0);
};

Over_clause_keywordContext.prototype.ROW_NUMBER = function() {
    return this.getToken(PlSqlParser.ROW_NUMBER, 0);
};

Over_clause_keywordContext.prototype.SUM = function() {
    return this.getToken(PlSqlParser.SUM, 0);
};

Over_clause_keywordContext.prototype.VARIANCE = function() {
    return this.getToken(PlSqlParser.VARIANCE, 0);
};

Over_clause_keywordContext.prototype.REGR_ = function() {
    return this.getToken(PlSqlParser.REGR_, 0);
};

Over_clause_keywordContext.prototype.STDDEV = function() {
    return this.getToken(PlSqlParser.STDDEV, 0);
};

Over_clause_keywordContext.prototype.VAR_ = function() {
    return this.getToken(PlSqlParser.VAR_, 0);
};

Over_clause_keywordContext.prototype.COVAR_ = function() {
    return this.getToken(PlSqlParser.COVAR_, 0);
};

Over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOver_clause_keyword(this);
	}
};

Over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOver_clause_keyword(this);
	}
};




PlSqlParser.Over_clause_keywordContext = Over_clause_keywordContext;

PlSqlParser.prototype.over_clause_keyword = function() {

    var localctx = new Over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, PlSqlParser.RULE_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4961;
        _la = this._input.LA(1);
        if(!(((((_la - 507)) & ~0x1f) == 0 && ((1 << (_la - 507)) & ((1 << (PlSqlParser.AVG - 507)) | (1 << (PlSqlParser.CORR - 507)) | (1 << (PlSqlParser.COVAR_ - 507)) | (1 << (PlSqlParser.LAG - 507)) | (1 << (PlSqlParser.LEAD - 507)) | (1 << (PlSqlParser.MAX - 507)) | (1 << (PlSqlParser.MEDIAN - 507)) | (1 << (PlSqlParser.MIN - 507)) | (1 << (PlSqlParser.NTILE - 507)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 507)) | (1 << (PlSqlParser.REGR_ - 507)) | (1 << (PlSqlParser.ROW_NUMBER - 507)) | (1 << (PlSqlParser.SUM - 507)) | (1 << (PlSqlParser.STDDEV - 507)) | (1 << (PlSqlParser.VAR_ - 507)) | (1 << (PlSqlParser.VARIANCE - 507)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_clause_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_within_or_over_clause_keyword;
    return this;
}

Within_or_over_clause_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_clause_keywordContext.prototype.constructor = Within_or_over_clause_keywordContext;

Within_or_over_clause_keywordContext.prototype.CUME_DIST = function() {
    return this.getToken(PlSqlParser.CUME_DIST, 0);
};

Within_or_over_clause_keywordContext.prototype.DENSE_RANK = function() {
    return this.getToken(PlSqlParser.DENSE_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.LISTAGG = function() {
    return this.getToken(PlSqlParser.LISTAGG, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENT_RANK = function() {
    return this.getToken(PlSqlParser.PERCENT_RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(PlSqlParser.PERCENTILE_CONT, 0);
};

Within_or_over_clause_keywordContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(PlSqlParser.PERCENTILE_DISC, 0);
};

Within_or_over_clause_keywordContext.prototype.RANK = function() {
    return this.getToken(PlSqlParser.RANK, 0);
};

Within_or_over_clause_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWithin_or_over_clause_keyword(this);
	}
};

Within_or_over_clause_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWithin_or_over_clause_keyword(this);
	}
};




PlSqlParser.Within_or_over_clause_keywordContext = Within_or_over_clause_keywordContext;

PlSqlParser.prototype.within_or_over_clause_keyword = function() {

    var localctx = new Within_or_over_clause_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, PlSqlParser.RULE_within_or_over_clause_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4963;
        _la = this._input.LA(1);
        if(!(((((_la - 500)) & ~0x1f) == 0 && ((1 << (_la - 500)) & ((1 << (PlSqlParser.CUME_DIST - 500)) | (1 << (PlSqlParser.DENSE_RANK - 500)) | (1 << (PlSqlParser.LISTAGG - 500)) | (1 << (PlSqlParser.PERCENT_RANK - 500)) | (1 << (PlSqlParser.PERCENTILE_CONT - 500)) | (1 << (PlSqlParser.PERCENTILE_DISC - 500)) | (1 << (PlSqlParser.RANK - 500)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Standard_prediction_function_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_standard_prediction_function_keyword;
    return this;
}

Standard_prediction_function_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Standard_prediction_function_keywordContext.prototype.constructor = Standard_prediction_function_keywordContext;

Standard_prediction_function_keywordContext.prototype.PREDICTION = function() {
    return this.getToken(PlSqlParser.PREDICTION, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(PlSqlParser.PREDICTION_BOUNDS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_COST = function() {
    return this.getToken(PlSqlParser.PREDICTION_COST, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(PlSqlParser.PREDICTION_DETAILS, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0);
};

Standard_prediction_function_keywordContext.prototype.PREDICTION_SET = function() {
    return this.getToken(PlSqlParser.PREDICTION_SET, 0);
};

Standard_prediction_function_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterStandard_prediction_function_keyword(this);
	}
};

Standard_prediction_function_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitStandard_prediction_function_keyword(this);
	}
};




PlSqlParser.Standard_prediction_function_keywordContext = Standard_prediction_function_keywordContext;

PlSqlParser.prototype.standard_prediction_function_keyword = function() {

    var localctx = new Standard_prediction_function_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, PlSqlParser.RULE_standard_prediction_function_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4965;
        _la = this._input.LA(1);
        if(!(((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (PlSqlParser.PREDICTION - 494)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 494)) | (1 << (PlSqlParser.PREDICTION_COST - 494)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 494)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 494)) | (1 << (PlSqlParser.PREDICTION_SET - 494)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_over_clause;
    return this;
}

Over_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clauseContext.prototype.constructor = Over_clauseContext;

Over_clauseContext.prototype.OVER = function() {
    return this.getToken(PlSqlParser.OVER, 0);
};

Over_clauseContext.prototype.query_partition_clause = function() {
    return this.getTypedRuleContext(Query_partition_clauseContext,0);
};

Over_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Over_clauseContext.prototype.windowing_clause = function() {
    return this.getTypedRuleContext(Windowing_clauseContext,0);
};

Over_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOver_clause(this);
	}
};

Over_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOver_clause(this);
	}
};




PlSqlParser.Over_clauseContext = Over_clauseContext;

PlSqlParser.prototype.over_clause = function() {

    var localctx = new Over_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, PlSqlParser.RULE_over_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4967;
        this.match(PlSqlParser.OVER);
        this.state = 4968;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 4970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PARTITION) {
            this.state = 4969;
            this.query_partition_clause();
        }

        this.state = 4976;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.ORDER) {
            this.state = 4972;
            this.order_by_clause();
            this.state = 4974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.RANGE || _la===PlSqlParser.ROWS) {
                this.state = 4973;
                this.windowing_clause();
            }

        }

        this.state = 4978;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_windowing_clause;
    return this;
}

Windowing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_clauseContext.prototype.constructor = Windowing_clauseContext;

Windowing_clauseContext.prototype.windowing_type = function() {
    return this.getTypedRuleContext(Windowing_typeContext,0);
};

Windowing_clauseContext.prototype.BETWEEN = function() {
    return this.getToken(PlSqlParser.BETWEEN, 0);
};

Windowing_clauseContext.prototype.windowing_elements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Windowing_elementsContext);
    } else {
        return this.getTypedRuleContext(Windowing_elementsContext,i);
    }
};

Windowing_clauseContext.prototype.AND = function() {
    return this.getToken(PlSqlParser.AND, 0);
};

Windowing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWindowing_clause(this);
	}
};

Windowing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWindowing_clause(this);
	}
};




PlSqlParser.Windowing_clauseContext = Windowing_clauseContext;

PlSqlParser.prototype.windowing_clause = function() {

    var localctx = new Windowing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, PlSqlParser.RULE_windowing_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4980;
        this.windowing_type();
        this.state = 4987;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BETWEEN:
            this.state = 4981;
            this.match(PlSqlParser.BETWEEN);
            this.state = 4982;
            this.windowing_elements();
            this.state = 4983;
            this.match(PlSqlParser.AND);
            this.state = 4984;
            this.windowing_elements();
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 4986;
            this.windowing_elements();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_windowing_type;
    return this;
}

Windowing_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_typeContext.prototype.constructor = Windowing_typeContext;

Windowing_typeContext.prototype.ROWS = function() {
    return this.getToken(PlSqlParser.ROWS, 0);
};

Windowing_typeContext.prototype.RANGE = function() {
    return this.getToken(PlSqlParser.RANGE, 0);
};

Windowing_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWindowing_type(this);
	}
};

Windowing_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWindowing_type(this);
	}
};




PlSqlParser.Windowing_typeContext = Windowing_typeContext;

PlSqlParser.prototype.windowing_type = function() {

    var localctx = new Windowing_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, PlSqlParser.RULE_windowing_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4989;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.RANGE || _la===PlSqlParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Windowing_elementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_windowing_elements;
    return this;
}

Windowing_elementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Windowing_elementsContext.prototype.constructor = Windowing_elementsContext;

Windowing_elementsContext.prototype.UNBOUNDED = function() {
    return this.getToken(PlSqlParser.UNBOUNDED, 0);
};

Windowing_elementsContext.prototype.PRECEDING = function() {
    return this.getToken(PlSqlParser.PRECEDING, 0);
};

Windowing_elementsContext.prototype.CURRENT = function() {
    return this.getToken(PlSqlParser.CURRENT, 0);
};

Windowing_elementsContext.prototype.ROW = function() {
    return this.getToken(PlSqlParser.ROW, 0);
};

Windowing_elementsContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Windowing_elementsContext.prototype.FOLLOWING = function() {
    return this.getToken(PlSqlParser.FOLLOWING, 0);
};

Windowing_elementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWindowing_elements(this);
	}
};

Windowing_elementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWindowing_elements(this);
	}
};




PlSqlParser.Windowing_elementsContext = Windowing_elementsContext;

PlSqlParser.prototype.windowing_elements = function() {

    var localctx = new Windowing_elementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, PlSqlParser.RULE_windowing_elements);
    var _la = 0; // Token type
    try {
        this.state = 4998;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4991;
            this.match(PlSqlParser.UNBOUNDED);
            this.state = 4992;
            this.match(PlSqlParser.PRECEDING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4993;
            this.match(PlSqlParser.CURRENT);
            this.state = 4994;
            this.match(PlSqlParser.ROW);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4995;
            this.concatenation(0);
            this.state = 4996;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FOLLOWING || _la===PlSqlParser.PRECEDING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_using_clause;
    return this;
}

Using_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_clauseContext.prototype.constructor = Using_clauseContext;

Using_clauseContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Using_clauseContext.prototype.using_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Using_elementContext);
    } else {
        return this.getTypedRuleContext(Using_elementContext,i);
    }
};

Using_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUsing_clause(this);
	}
};

Using_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUsing_clause(this);
	}
};




PlSqlParser.Using_clauseContext = Using_clauseContext;

PlSqlParser.prototype.using_clause = function() {

    var localctx = new Using_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, PlSqlParser.RULE_using_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5000;
        this.match(PlSqlParser.USING);
        this.state = 5010;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ASTERISK:
            this.state = 5001;
            this.match(PlSqlParser.ASTERISK);
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.IN:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NOT:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 5002;
            this.using_element();
            this.state = 5007;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,641,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 5003;
                    this.match(PlSqlParser.COMMA);
                    this.state = 5004;
                    this.using_element(); 
                }
                this.state = 5009;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,641,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_using_element;
    return this;
}

Using_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_elementContext.prototype.constructor = Using_elementContext;

Using_elementContext.prototype.select_list_elements = function() {
    return this.getTypedRuleContext(Select_list_elementsContext,0);
};

Using_elementContext.prototype.IN = function() {
    return this.getToken(PlSqlParser.IN, 0);
};

Using_elementContext.prototype.OUT = function() {
    return this.getToken(PlSqlParser.OUT, 0);
};

Using_elementContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Using_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterUsing_element(this);
	}
};

Using_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitUsing_element(this);
	}
};




PlSqlParser.Using_elementContext = Using_elementContext;

PlSqlParser.prototype.using_element = function() {

    var localctx = new Using_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, PlSqlParser.RULE_using_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5017;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
        if(la_===1) {
            this.state = 5012;
            this.match(PlSqlParser.IN);
            this.state = 5014;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,643,this._ctx);
            if(la_===1) {
                this.state = 5013;
                this.match(PlSqlParser.OUT);

            }

        } else if(la_===2) {
            this.state = 5016;
            this.match(PlSqlParser.OUT);

        }
        this.state = 5019;
        this.select_list_elements();
        this.state = 5021;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,645,this._ctx);
        if(la_===1) {
            this.state = 5020;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collect_order_by_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_collect_order_by_part;
    return this;
}

Collect_order_by_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collect_order_by_partContext.prototype.constructor = Collect_order_by_partContext;

Collect_order_by_partContext.prototype.ORDER = function() {
    return this.getToken(PlSqlParser.ORDER, 0);
};

Collect_order_by_partContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Collect_order_by_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Collect_order_by_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCollect_order_by_part(this);
	}
};

Collect_order_by_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCollect_order_by_part(this);
	}
};




PlSqlParser.Collect_order_by_partContext = Collect_order_by_partContext;

PlSqlParser.prototype.collect_order_by_part = function() {

    var localctx = new Collect_order_by_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, PlSqlParser.RULE_collect_order_by_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5023;
        this.match(PlSqlParser.ORDER);
        this.state = 5024;
        this.match(PlSqlParser.BY);
        this.state = 5025;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Within_or_over_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_within_or_over_part;
    return this;
}

Within_or_over_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Within_or_over_partContext.prototype.constructor = Within_or_over_partContext;

Within_or_over_partContext.prototype.WITHIN = function() {
    return this.getToken(PlSqlParser.WITHIN, 0);
};

Within_or_over_partContext.prototype.GROUP = function() {
    return this.getToken(PlSqlParser.GROUP, 0);
};

Within_or_over_partContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Within_or_over_partContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Within_or_over_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWithin_or_over_part(this);
	}
};

Within_or_over_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWithin_or_over_part(this);
	}
};




PlSqlParser.Within_or_over_partContext = Within_or_over_partContext;

PlSqlParser.prototype.within_or_over_part = function() {

    var localctx = new Within_or_over_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, PlSqlParser.RULE_within_or_over_part);
    try {
        this.state = 5034;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.WITHIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 5027;
            this.match(PlSqlParser.WITHIN);
            this.state = 5028;
            this.match(PlSqlParser.GROUP);
            this.state = 5029;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 5030;
            this.order_by_clause();
            this.state = 5031;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        case PlSqlParser.OVER:
            this.enterOuterAlt(localctx, 2);
            this.state = 5033;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_matrix_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cost_matrix_clause;
    return this;
}

Cost_matrix_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_matrix_clauseContext.prototype.constructor = Cost_matrix_clauseContext;

Cost_matrix_clauseContext.prototype.COST = function() {
    return this.getToken(PlSqlParser.COST, 0);
};

Cost_matrix_clauseContext.prototype.MODEL = function() {
    return this.getToken(PlSqlParser.MODEL, 0);
};

Cost_matrix_clauseContext.prototype.cost_class_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cost_class_nameContext);
    } else {
        return this.getTypedRuleContext(Cost_class_nameContext,i);
    }
};

Cost_matrix_clauseContext.prototype.VALUES = function() {
    return this.getToken(PlSqlParser.VALUES, 0);
};

Cost_matrix_clauseContext.prototype.AUTO = function() {
    return this.getToken(PlSqlParser.AUTO, 0);
};

Cost_matrix_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Cost_matrix_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCost_matrix_clause(this);
	}
};

Cost_matrix_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCost_matrix_clause(this);
	}
};




PlSqlParser.Cost_matrix_clauseContext = Cost_matrix_clauseContext;

PlSqlParser.prototype.cost_matrix_clause = function() {

    var localctx = new Cost_matrix_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, PlSqlParser.RULE_cost_matrix_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5036;
        this.match(PlSqlParser.COST);
        this.state = 5058;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.MODEL:
            this.state = 5037;
            this.match(PlSqlParser.MODEL);
            this.state = 5039;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.AUTO) {
                this.state = 5038;
                this.match(PlSqlParser.AUTO);
            }

            break;
        case PlSqlParser.LEFT_PAREN:
            this.state = 5041;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 5042;
            this.cost_class_name();
            this.state = 5047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 5043;
                this.match(PlSqlParser.COMMA);
                this.state = 5044;
                this.cost_class_name();
                this.state = 5049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 5050;
            this.match(PlSqlParser.RIGHT_PAREN);
            this.state = 5051;
            this.match(PlSqlParser.VALUES);
            this.state = 5052;
            this.match(PlSqlParser.LEFT_PAREN);
            this.state = 5054;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
                this.state = 5053;
                this.expressions();
            }

            this.state = 5056;
            this.match(PlSqlParser.RIGHT_PAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_passing_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_passing_clause;
    return this;
}

Xml_passing_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_passing_clauseContext.prototype.constructor = Xml_passing_clauseContext;

Xml_passing_clauseContext.prototype.PASSING = function() {
    return this.getToken(PlSqlParser.PASSING, 0);
};

Xml_passing_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Xml_passing_clauseContext.prototype.BY = function() {
    return this.getToken(PlSqlParser.BY, 0);
};

Xml_passing_clauseContext.prototype.VALUE = function() {
    return this.getToken(PlSqlParser.VALUE, 0);
};

Xml_passing_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_passing_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_passing_clause(this);
	}
};

Xml_passing_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_passing_clause(this);
	}
};




PlSqlParser.Xml_passing_clauseContext = Xml_passing_clauseContext;

PlSqlParser.prototype.xml_passing_clause = function() {

    var localctx = new Xml_passing_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, PlSqlParser.RULE_xml_passing_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5060;
        this.match(PlSqlParser.PASSING);
        this.state = 5063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BY) {
            this.state = 5061;
            this.match(PlSqlParser.BY);
            this.state = 5062;
            this.match(PlSqlParser.VALUE);
        }

        this.state = 5065;
        this.expression();
        this.state = 5067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
            this.state = 5066;
            this.column_alias();
        }

        this.state = 5069;
        this.match(PlSqlParser.COMMA);
        this.state = 5070;
        this.expression();
        this.state = 5072;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,653,this._ctx);
        if(la_===1) {
            this.state = 5071;
            this.column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_attributes_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_attributes_clause;
    return this;
}

Xml_attributes_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_attributes_clauseContext.prototype.constructor = Xml_attributes_clauseContext;

Xml_attributes_clauseContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(PlSqlParser.XMLATTRIBUTES, 0);
};

Xml_attributes_clauseContext.prototype.xml_multiuse_expression_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_multiuse_expression_elementContext);
    } else {
        return this.getTypedRuleContext(Xml_multiuse_expression_elementContext,i);
    }
};

Xml_attributes_clauseContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.ENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.NOENTITYESCAPING, 0);
};

Xml_attributes_clauseContext.prototype.SCHEMACHECK = function() {
    return this.getToken(PlSqlParser.SCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(PlSqlParser.NOSCHEMACHECK, 0);
};

Xml_attributes_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_attributes_clause(this);
	}
};

Xml_attributes_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_attributes_clause(this);
	}
};




PlSqlParser.Xml_attributes_clauseContext = Xml_attributes_clauseContext;

PlSqlParser.prototype.xml_attributes_clause = function() {

    var localctx = new Xml_attributes_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, PlSqlParser.RULE_xml_attributes_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5074;
        this.match(PlSqlParser.XMLATTRIBUTES);
        this.state = 5075;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5077;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
        if(la_===1) {
            this.state = 5076;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.ENTITYESCAPING || _la===PlSqlParser.NOENTITYESCAPING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 5080;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,655,this._ctx);
        if(la_===1) {
            this.state = 5079;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.NOSCHEMACHECK || _la===PlSqlParser.SCHEMACHECK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 5082;
        this.xml_multiuse_expression_element();
        this.state = 5087;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 5083;
            this.match(PlSqlParser.COMMA);
            this.state = 5084;
            this.xml_multiuse_expression_element();
            this.state = 5089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5090;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_namespaces_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_namespaces_clause;
    return this;
}

Xml_namespaces_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_namespaces_clauseContext.prototype.constructor = Xml_namespaces_clauseContext;

Xml_namespaces_clauseContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(PlSqlParser.XMLNAMESPACES, 0);
};

Xml_namespaces_clauseContext.prototype.concatenation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConcatenationContext);
    } else {
        return this.getTypedRuleContext(ConcatenationContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Xml_namespaces_clauseContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_namespaces_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_namespaces_clause(this);
	}
};

Xml_namespaces_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_namespaces_clause(this);
	}
};




PlSqlParser.Xml_namespaces_clauseContext = Xml_namespaces_clauseContext;

PlSqlParser.prototype.xml_namespaces_clause = function() {

    var localctx = new Xml_namespaces_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, PlSqlParser.RULE_xml_namespaces_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5092;
        this.match(PlSqlParser.XMLNAMESPACES);
        this.state = 5093;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5097;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
        if(la_===1) {
            this.state = 5094;
            this.concatenation(0);
            this.state = 5095;
            this.column_alias();

        }
        this.state = 5105;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 5099;
            this.match(PlSqlParser.COMMA);
            this.state = 5100;
            this.concatenation(0);
            this.state = 5101;
            this.column_alias();
            this.state = 5107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.DEFAULT) {
            this.state = 5108;
            this.xml_general_default_part();
        }

        this.state = 5111;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_table_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_table_column;
    return this;
}

Xml_table_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_table_columnContext.prototype.constructor = Xml_table_columnContext;

Xml_table_columnContext.prototype.xml_column_name = function() {
    return this.getTypedRuleContext(Xml_column_nameContext,0);
};

Xml_table_columnContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Xml_table_columnContext.prototype.ORDINALITY = function() {
    return this.getToken(PlSqlParser.ORDINALITY, 0);
};

Xml_table_columnContext.prototype.type_spec = function() {
    return this.getTypedRuleContext(Type_specContext,0);
};

Xml_table_columnContext.prototype.PATH = function() {
    return this.getToken(PlSqlParser.PATH, 0);
};

Xml_table_columnContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_table_columnContext.prototype.xml_general_default_part = function() {
    return this.getTypedRuleContext(Xml_general_default_partContext,0);
};

Xml_table_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_table_column(this);
	}
};

Xml_table_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_table_column(this);
	}
};




PlSqlParser.Xml_table_columnContext = Xml_table_columnContext;

PlSqlParser.prototype.xml_table_column = function() {

    var localctx = new Xml_table_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, PlSqlParser.RULE_xml_table_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5113;
        this.xml_column_name();
        this.state = 5124;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.FOR:
            this.state = 5114;
            this.match(PlSqlParser.FOR);
            this.state = 5115;
            this.match(PlSqlParser.ORDINALITY);
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.REGULAR_ID:
            this.state = 5116;
            this.type_spec();
            this.state = 5119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PATH) {
                this.state = 5117;
                this.match(PlSqlParser.PATH);
                this.state = 5118;
                this.concatenation(0);
            }

            this.state = 5122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.DEFAULT) {
                this.state = 5121;
                this.xml_general_default_part();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_general_default_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_general_default_part;
    return this;
}

Xml_general_default_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_general_default_partContext.prototype.constructor = Xml_general_default_partContext;

Xml_general_default_partContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

Xml_general_default_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_general_default_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_general_default_part(this);
	}
};

Xml_general_default_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_general_default_part(this);
	}
};




PlSqlParser.Xml_general_default_partContext = Xml_general_default_partContext;

PlSqlParser.prototype.xml_general_default_part = function() {

    var localctx = new Xml_general_default_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, PlSqlParser.RULE_xml_general_default_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5126;
        this.match(PlSqlParser.DEFAULT);
        this.state = 5127;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_multiuse_expression_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_multiuse_expression_element;
    return this;
}

Xml_multiuse_expression_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_multiuse_expression_elementContext.prototype.constructor = Xml_multiuse_expression_elementContext;

Xml_multiuse_expression_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Xml_multiuse_expression_elementContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Xml_multiuse_expression_elementContext.prototype.EVALNAME = function() {
    return this.getToken(PlSqlParser.EVALNAME, 0);
};

Xml_multiuse_expression_elementContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xml_multiuse_expression_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_multiuse_expression_element(this);
	}
};

Xml_multiuse_expression_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_multiuse_expression_element(this);
	}
};




PlSqlParser.Xml_multiuse_expression_elementContext = Xml_multiuse_expression_elementContext;

PlSqlParser.prototype.xml_multiuse_expression_element = function() {

    var localctx = new Xml_multiuse_expression_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, PlSqlParser.RULE_xml_multiuse_expression_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5129;
        this.expression();
        this.state = 5136;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AS) {
            this.state = 5130;
            this.match(PlSqlParser.AS);
            this.state = 5134;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5131;
                this.id_expression();
                break;

            case 2:
                this.state = 5132;
                this.match(PlSqlParser.EVALNAME);
                this.state = 5133;
                this.concatenation(0);
                break;

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xmlroot_param_version_part;
    return this;
}

Xmlroot_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_version_partContext.prototype.constructor = Xmlroot_param_version_partContext;

Xmlroot_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(PlSqlParser.VERSION, 0);
};

Xmlroot_param_version_partContext.prototype.NO = function() {
    return this.getToken(PlSqlParser.NO, 0);
};

Xmlroot_param_version_partContext.prototype.VALUE = function() {
    return this.getToken(PlSqlParser.VALUE, 0);
};

Xmlroot_param_version_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Xmlroot_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXmlroot_param_version_part(this);
	}
};

Xmlroot_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXmlroot_param_version_part(this);
	}
};




PlSqlParser.Xmlroot_param_version_partContext = Xmlroot_param_version_partContext;

PlSqlParser.prototype.xmlroot_param_version_part = function() {

    var localctx = new Xmlroot_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, PlSqlParser.RULE_xmlroot_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5138;
        this.match(PlSqlParser.VERSION);
        this.state = 5142;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,665,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5139;
            this.match(PlSqlParser.NO);
            this.state = 5140;
            this.match(PlSqlParser.VALUE);
            break;

        case 2:
            this.state = 5141;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlroot_param_standalone_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xmlroot_param_standalone_part;
    return this;
}

Xmlroot_param_standalone_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlroot_param_standalone_partContext.prototype.constructor = Xmlroot_param_standalone_partContext;

Xmlroot_param_standalone_partContext.prototype.STANDALONE = function() {
    return this.getToken(PlSqlParser.STANDALONE, 0);
};

Xmlroot_param_standalone_partContext.prototype.YES = function() {
    return this.getToken(PlSqlParser.YES, 0);
};

Xmlroot_param_standalone_partContext.prototype.NO = function() {
    return this.getToken(PlSqlParser.NO, 0);
};

Xmlroot_param_standalone_partContext.prototype.VALUE = function() {
    return this.getToken(PlSqlParser.VALUE, 0);
};

Xmlroot_param_standalone_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXmlroot_param_standalone_part(this);
	}
};

Xmlroot_param_standalone_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXmlroot_param_standalone_part(this);
	}
};




PlSqlParser.Xmlroot_param_standalone_partContext = Xmlroot_param_standalone_partContext;

PlSqlParser.prototype.xmlroot_param_standalone_part = function() {

    var localctx = new Xmlroot_param_standalone_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, PlSqlParser.RULE_xmlroot_param_standalone_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5144;
        this.match(PlSqlParser.STANDALONE);
        this.state = 5150;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.YES:
            this.state = 5145;
            this.match(PlSqlParser.YES);
            break;
        case PlSqlParser.NO:
            this.state = 5146;
            this.match(PlSqlParser.NO);
            this.state = 5148;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.VALUE) {
                this.state = 5147;
                this.match(PlSqlParser.VALUE);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_enconding_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xmlserialize_param_enconding_part;
    return this;
}

Xmlserialize_param_enconding_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_enconding_partContext.prototype.constructor = Xmlserialize_param_enconding_partContext;

Xmlserialize_param_enconding_partContext.prototype.ENCODING = function() {
    return this.getToken(PlSqlParser.ENCODING, 0);
};

Xmlserialize_param_enconding_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_enconding_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXmlserialize_param_enconding_part(this);
	}
};

Xmlserialize_param_enconding_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXmlserialize_param_enconding_part(this);
	}
};




PlSqlParser.Xmlserialize_param_enconding_partContext = Xmlserialize_param_enconding_partContext;

PlSqlParser.prototype.xmlserialize_param_enconding_part = function() {

    var localctx = new Xmlserialize_param_enconding_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, PlSqlParser.RULE_xmlserialize_param_enconding_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5152;
        this.match(PlSqlParser.ENCODING);
        this.state = 5153;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_version_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xmlserialize_param_version_part;
    return this;
}

Xmlserialize_param_version_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_version_partContext.prototype.constructor = Xmlserialize_param_version_partContext;

Xmlserialize_param_version_partContext.prototype.VERSION = function() {
    return this.getToken(PlSqlParser.VERSION, 0);
};

Xmlserialize_param_version_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_version_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXmlserialize_param_version_part(this);
	}
};

Xmlserialize_param_version_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXmlserialize_param_version_part(this);
	}
};




PlSqlParser.Xmlserialize_param_version_partContext = Xmlserialize_param_version_partContext;

PlSqlParser.prototype.xmlserialize_param_version_part = function() {

    var localctx = new Xmlserialize_param_version_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, PlSqlParser.RULE_xmlserialize_param_version_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5155;
        this.match(PlSqlParser.VERSION);
        this.state = 5156;
        this.concatenation(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xmlserialize_param_ident_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xmlserialize_param_ident_part;
    return this;
}

Xmlserialize_param_ident_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xmlserialize_param_ident_partContext.prototype.constructor = Xmlserialize_param_ident_partContext;

Xmlserialize_param_ident_partContext.prototype.NO = function() {
    return this.getToken(PlSqlParser.NO, 0);
};

Xmlserialize_param_ident_partContext.prototype.INDENT = function() {
    return this.getToken(PlSqlParser.INDENT, 0);
};

Xmlserialize_param_ident_partContext.prototype.SIZE = function() {
    return this.getToken(PlSqlParser.SIZE, 0);
};

Xmlserialize_param_ident_partContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Xmlserialize_param_ident_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXmlserialize_param_ident_part(this);
	}
};

Xmlserialize_param_ident_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXmlserialize_param_ident_part(this);
	}
};




PlSqlParser.Xmlserialize_param_ident_partContext = Xmlserialize_param_ident_partContext;

PlSqlParser.prototype.xmlserialize_param_ident_part = function() {

    var localctx = new Xmlserialize_param_ident_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, PlSqlParser.RULE_xmlserialize_param_ident_part);
    var _la = 0; // Token type
    try {
        this.state = 5166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.NO:
            this.enterOuterAlt(localctx, 1);
            this.state = 5158;
            this.match(PlSqlParser.NO);
            this.state = 5159;
            this.match(PlSqlParser.INDENT);
            break;
        case PlSqlParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 5160;
            this.match(PlSqlParser.INDENT);
            this.state = 5164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.SIZE) {
                this.state = 5161;
                this.match(PlSqlParser.SIZE);
                this.state = 5162;
                this.match(PlSqlParser.EQUALS_OP);
                this.state = 5163;
                this.concatenation(0);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_plus_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sql_plus_command;
    return this;
}

Sql_plus_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_plus_commandContext.prototype.constructor = Sql_plus_commandContext;

Sql_plus_commandContext.prototype.EXIT = function() {
    return this.getToken(PlSqlParser.EXIT, 0);
};

Sql_plus_commandContext.prototype.PROMPT = function() {
    return this.getToken(PlSqlParser.PROMPT, 0);
};

Sql_plus_commandContext.prototype.SHOW = function() {
    return this.getToken(PlSqlParser.SHOW, 0);
};

Sql_plus_commandContext.prototype.ERR = function() {
    return this.getToken(PlSqlParser.ERR, 0);
};

Sql_plus_commandContext.prototype.ERRORS = function() {
    return this.getToken(PlSqlParser.ERRORS, 0);
};

Sql_plus_commandContext.prototype.START_CMD = function() {
    return this.getToken(PlSqlParser.START_CMD, 0);
};

Sql_plus_commandContext.prototype.whenever_command = function() {
    return this.getTypedRuleContext(Whenever_commandContext,0);
};

Sql_plus_commandContext.prototype.set_command = function() {
    return this.getTypedRuleContext(Set_commandContext,0);
};

Sql_plus_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSql_plus_command(this);
	}
};

Sql_plus_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSql_plus_command(this);
	}
};




PlSqlParser.Sql_plus_commandContext = Sql_plus_commandContext;

PlSqlParser.prototype.sql_plus_command = function() {

    var localctx = new Sql_plus_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, PlSqlParser.RULE_sql_plus_command);
    var _la = 0; // Token type
    try {
        this.state = 5176;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.SOLIDUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 5168;
            this.match(PlSqlParser.SOLIDUS);
            break;
        case PlSqlParser.EXIT:
            this.enterOuterAlt(localctx, 2);
            this.state = 5169;
            this.match(PlSqlParser.EXIT);
            break;
        case PlSqlParser.PROMPT:
            this.enterOuterAlt(localctx, 3);
            this.state = 5170;
            this.match(PlSqlParser.PROMPT);
            break;
        case PlSqlParser.SHOW:
            this.enterOuterAlt(localctx, 4);
            this.state = 5171;
            this.match(PlSqlParser.SHOW);
            this.state = 5172;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.ERR || _la===PlSqlParser.ERRORS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case PlSqlParser.START_CMD:
            this.enterOuterAlt(localctx, 5);
            this.state = 5173;
            this.match(PlSqlParser.START_CMD);
            break;
        case PlSqlParser.WHENEVER:
            this.enterOuterAlt(localctx, 6);
            this.state = 5174;
            this.whenever_command();
            break;
        case PlSqlParser.SET:
            this.enterOuterAlt(localctx, 7);
            this.state = 5175;
            this.set_command();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Whenever_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_whenever_command;
    return this;
}

Whenever_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Whenever_commandContext.prototype.constructor = Whenever_commandContext;

Whenever_commandContext.prototype.WHENEVER = function() {
    return this.getToken(PlSqlParser.WHENEVER, 0);
};

Whenever_commandContext.prototype.SQLERROR = function() {
    return this.getToken(PlSqlParser.SQLERROR, 0);
};

Whenever_commandContext.prototype.OSERROR = function() {
    return this.getToken(PlSqlParser.OSERROR, 0);
};

Whenever_commandContext.prototype.EXIT = function() {
    return this.getToken(PlSqlParser.EXIT, 0);
};

Whenever_commandContext.prototype.CONTINUE = function() {
    return this.getToken(PlSqlParser.CONTINUE, 0);
};

Whenever_commandContext.prototype.SUCCESS = function() {
    return this.getToken(PlSqlParser.SUCCESS, 0);
};

Whenever_commandContext.prototype.FAILURE = function() {
    return this.getToken(PlSqlParser.FAILURE, 0);
};

Whenever_commandContext.prototype.WARNING = function() {
    return this.getToken(PlSqlParser.WARNING, 0);
};

Whenever_commandContext.prototype.COMMIT = function() {
    return this.getToken(PlSqlParser.COMMIT, 0);
};

Whenever_commandContext.prototype.ROLLBACK = function() {
    return this.getToken(PlSqlParser.ROLLBACK, 0);
};

Whenever_commandContext.prototype.NONE = function() {
    return this.getToken(PlSqlParser.NONE, 0);
};

Whenever_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWhenever_command(this);
	}
};

Whenever_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWhenever_command(this);
	}
};




PlSqlParser.Whenever_commandContext = Whenever_commandContext;

PlSqlParser.prototype.whenever_command = function() {

    var localctx = new Whenever_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, PlSqlParser.RULE_whenever_command);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5178;
        this.match(PlSqlParser.WHENEVER);
        this.state = 5179;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.OSERROR || _la===PlSqlParser.SQLERROR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5185;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.EXIT:
            this.state = 5180;
            this.match(PlSqlParser.EXIT);
            this.state = 5181;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.FAILURE || _la===PlSqlParser.SUCCESS || _la===PlSqlParser.WARNING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5182;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.COMMIT || _la===PlSqlParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case PlSqlParser.CONTINUE:
            this.state = 5183;
            this.match(PlSqlParser.CONTINUE);
            this.state = 5184;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.COMMIT || _la===PlSqlParser.NONE || _la===PlSqlParser.ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_commandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_set_command;
    return this;
}

Set_commandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_commandContext.prototype.constructor = Set_commandContext;

Set_commandContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Set_commandContext.prototype.regular_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Regular_idContext);
    } else {
        return this.getTypedRuleContext(Regular_idContext,i);
    }
};

Set_commandContext.prototype.CHAR_STRING = function() {
    return this.getToken(PlSqlParser.CHAR_STRING, 0);
};

Set_commandContext.prototype.ON = function() {
    return this.getToken(PlSqlParser.ON, 0);
};

Set_commandContext.prototype.OFF = function() {
    return this.getToken(PlSqlParser.OFF, 0);
};

Set_commandContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Set_commandContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSet_command(this);
	}
};

Set_commandContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSet_command(this);
	}
};




PlSqlParser.Set_commandContext = Set_commandContext;

PlSqlParser.prototype.set_command = function() {

    var localctx = new Set_commandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, PlSqlParser.RULE_set_command);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5187;
        this.match(PlSqlParser.SET);
        this.state = 5188;
        this.regular_id();
        this.state = 5194;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5189;
            this.match(PlSqlParser.CHAR_STRING);
            break;

        case 2:
            this.state = 5190;
            this.match(PlSqlParser.ON);
            break;

        case 3:
            this.state = 5191;
            this.match(PlSqlParser.OFF);
            break;

        case 4:
            this.state = 5192;
            this.numeric();
            break;

        case 5:
            this.state = 5193;
            this.regular_id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partition_extension_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_partition_extension_clause;
    return this;
}

Partition_extension_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partition_extension_clauseContext.prototype.constructor = Partition_extension_clauseContext;

Partition_extension_clauseContext.prototype.SUBPARTITION = function() {
    return this.getToken(PlSqlParser.SUBPARTITION, 0);
};

Partition_extension_clauseContext.prototype.PARTITION = function() {
    return this.getToken(PlSqlParser.PARTITION, 0);
};

Partition_extension_clauseContext.prototype.FOR = function() {
    return this.getToken(PlSqlParser.FOR, 0);
};

Partition_extension_clauseContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

Partition_extension_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPartition_extension_clause(this);
	}
};

Partition_extension_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPartition_extension_clause(this);
	}
};




PlSqlParser.Partition_extension_clauseContext = Partition_extension_clauseContext;

PlSqlParser.prototype.partition_extension_clause = function() {

    var localctx = new Partition_extension_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, PlSqlParser.RULE_partition_extension_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5196;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.PARTITION || _la===PlSqlParser.SUBPARTITION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.FOR) {
            this.state = 5197;
            this.match(PlSqlParser.FOR);
        }

        this.state = 5200;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 5201;
            this.expressions();
        }

        this.state = 5204;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Column_aliasContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Column_aliasContext.prototype.AS = function() {
    return this.getToken(PlSqlParser.AS, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitColumn_alias(this);
	}
};




PlSqlParser.Column_aliasContext = Column_aliasContext;

PlSqlParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, PlSqlParser.RULE_column_alias);
    var _la = 0; // Token type
    try {
        this.state = 5214;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,677,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.AS) {
                this.state = 5206;
                this.match(PlSqlParser.AS);
            }

            this.state = 5211;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 5209;
                this.identifier();
                break;
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.CHAR_STRING:
                this.state = 5210;
                this.quoted_string();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5213;
            this.match(PlSqlParser.AS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_aliasContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_alias(this);
	}
};




PlSqlParser.Table_aliasContext = Table_aliasContext;

PlSqlParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, PlSqlParser.RULE_table_alias);
    try {
        this.state = 5218;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5216;
            this.identifier();
            break;
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 5217;
            this.quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(PlSqlParser.WHERE, 0);
};

Where_clauseContext.prototype.CURRENT = function() {
    return this.getToken(PlSqlParser.CURRENT, 0);
};

Where_clauseContext.prototype.OF = function() {
    return this.getToken(PlSqlParser.OF, 0);
};

Where_clauseContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Where_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitWhere_clause(this);
	}
};




PlSqlParser.Where_clauseContext = Where_clauseContext;

PlSqlParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, PlSqlParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5220;
        this.match(PlSqlParser.WHERE);
        this.state = 5225;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.CURRENT:
            this.state = 5221;
            this.match(PlSqlParser.CURRENT);
            this.state = 5222;
            this.match(PlSqlParser.OF);
            this.state = 5223;
            this.cursor_name();
            break;
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ALL:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ANY:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CASE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COALESCE:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONNECT_BY_ROOT:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DISTINCT:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXISTS:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FALSE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NOT:
        case PlSqlParser.NULL:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.PRIOR:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUE:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.DECODE:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.NVL:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROUND:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TO_CHAR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.LEAST:
        case PlSqlParser.GREATEST:
        case PlSqlParser.TO_DATE:
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
        case PlSqlParser.CHAR_STRING:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.LEFT_PAREN:
        case PlSqlParser.PLUS_SIGN:
        case PlSqlParser.MINUS_SIGN:
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.state = 5224;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_into_clause;
    return this;
}

Into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Into_clauseContext.prototype.constructor = Into_clauseContext;

Into_clauseContext.prototype.INTO = function() {
    return this.getToken(PlSqlParser.INTO, 0);
};

Into_clauseContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Into_clauseContext.prototype.BULK = function() {
    return this.getToken(PlSqlParser.BULK, 0);
};

Into_clauseContext.prototype.COLLECT = function() {
    return this.getToken(PlSqlParser.COLLECT, 0);
};

Into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterInto_clause(this);
	}
};

Into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitInto_clause(this);
	}
};




PlSqlParser.Into_clauseContext = Into_clauseContext;

PlSqlParser.prototype.into_clause = function() {

    var localctx = new Into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, PlSqlParser.RULE_into_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BULK) {
            this.state = 5227;
            this.match(PlSqlParser.BULK);
            this.state = 5228;
            this.match(PlSqlParser.COLLECT);
        }

        this.state = 5231;
        this.match(PlSqlParser.INTO);
        this.state = 5232;
        this.variable_name();
        this.state = 5237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 5233;
            this.match(PlSqlParser.COMMA);
            this.state = 5234;
            this.variable_name();
            this.state = 5239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_xml_column_name;
    return this;
}

Xml_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_column_nameContext.prototype.constructor = Xml_column_nameContext;

Xml_column_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Xml_column_nameContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

Xml_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterXml_column_name(this);
	}
};

Xml_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitXml_column_name(this);
	}
};




PlSqlParser.Xml_column_nameContext = Xml_column_nameContext;

PlSqlParser.prototype.xml_column_name = function() {

    var localctx = new Xml_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, PlSqlParser.RULE_xml_column_name);
    try {
        this.state = 5242;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5240;
            this.identifier();
            break;
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 5241;
            this.quoted_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cost_class_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cost_class_name;
    return this;
}

Cost_class_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cost_class_nameContext.prototype.constructor = Cost_class_nameContext;

Cost_class_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Cost_class_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCost_class_name(this);
	}
};

Cost_class_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCost_class_name(this);
	}
};




PlSqlParser.Cost_class_nameContext = Cost_class_nameContext;

PlSqlParser.prototype.cost_class_name = function() {

    var localctx = new Cost_class_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, PlSqlParser.RULE_cost_class_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5244;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_attribute_name;
    return this;
}

Attribute_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_nameContext.prototype.constructor = Attribute_nameContext;

Attribute_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAttribute_name(this);
	}
};

Attribute_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAttribute_name(this);
	}
};




PlSqlParser.Attribute_nameContext = Attribute_nameContext;

PlSqlParser.prototype.attribute_name = function() {

    var localctx = new Attribute_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, PlSqlParser.RULE_attribute_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5246;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_savepoint_name;
    return this;
}

Savepoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_nameContext.prototype.constructor = Savepoint_nameContext;

Savepoint_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Savepoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSavepoint_name(this);
	}
};




PlSqlParser.Savepoint_nameContext = Savepoint_nameContext;

PlSqlParser.prototype.savepoint_name = function() {

    var localctx = new Savepoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, PlSqlParser.RULE_savepoint_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5248;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_segment_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_rollback_segment_name;
    return this;
}

Rollback_segment_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_segment_nameContext.prototype.constructor = Rollback_segment_nameContext;

Rollback_segment_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Rollback_segment_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRollback_segment_name(this);
	}
};

Rollback_segment_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRollback_segment_name(this);
	}
};




PlSqlParser.Rollback_segment_nameContext = Rollback_segment_nameContext;

PlSqlParser.prototype.rollback_segment_name = function() {

    var localctx = new Rollback_segment_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, PlSqlParser.RULE_rollback_segment_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5250;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_var_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_var_name;
    return this;
}

Table_var_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_var_nameContext.prototype.constructor = Table_var_nameContext;

Table_var_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Table_var_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_var_name(this);
	}
};

Table_var_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_var_name(this);
	}
};




PlSqlParser.Table_var_nameContext = Table_var_nameContext;

PlSqlParser.prototype.table_var_name = function() {

    var localctx = new Table_var_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, PlSqlParser.RULE_table_var_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5252;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_schema_name;
    return this;
}

Schema_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_nameContext.prototype.constructor = Schema_nameContext;

Schema_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Schema_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSchema_name(this);
	}
};

Schema_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSchema_name(this);
	}
};




PlSqlParser.Schema_nameContext = Schema_nameContext;

PlSqlParser.prototype.schema_name = function() {

    var localctx = new Schema_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, PlSqlParser.RULE_schema_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5254;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Routine_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_routine_name;
    return this;
}

Routine_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Routine_nameContext.prototype.constructor = Routine_nameContext;

Routine_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Routine_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Routine_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Routine_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRoutine_name(this);
	}
};

Routine_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRoutine_name(this);
	}
};




PlSqlParser.Routine_nameContext = Routine_nameContext;

PlSqlParser.prototype.routine_name = function() {

    var localctx = new Routine_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, PlSqlParser.RULE_routine_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5256;
        this.identifier();
        this.state = 5261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5257;
            this.match(PlSqlParser.PERIOD);
            this.state = 5258;
            this.id_expression();
            this.state = 5263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AT_SIGN) {
            this.state = 5264;
            this.match(PlSqlParser.AT_SIGN);
            this.state = 5265;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_package_name;
    return this;
}

Package_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_nameContext.prototype.constructor = Package_nameContext;

Package_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Package_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPackage_name(this);
	}
};

Package_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPackage_name(this);
	}
};




PlSqlParser.Package_nameContext = Package_nameContext;

PlSqlParser.prototype.package_name = function() {

    var localctx = new Package_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, PlSqlParser.RULE_package_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5268;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implementation_type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_implementation_type_name;
    return this;
}

Implementation_type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implementation_type_nameContext.prototype.constructor = Implementation_type_nameContext;

Implementation_type_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Implementation_type_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Implementation_type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterImplementation_type_name(this);
	}
};

Implementation_type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitImplementation_type_name(this);
	}
};




PlSqlParser.Implementation_type_nameContext = Implementation_type_nameContext;

PlSqlParser.prototype.implementation_type_name = function() {

    var localctx = new Implementation_type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, PlSqlParser.RULE_implementation_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5270;
        this.identifier();
        this.state = 5273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PERIOD) {
            this.state = 5271;
            this.match(PlSqlParser.PERIOD);
            this.state = 5272;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameter_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_parameter_name;
    return this;
}

Parameter_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_nameContext.prototype.constructor = Parameter_nameContext;

Parameter_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Parameter_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterParameter_name(this);
	}
};

Parameter_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitParameter_name(this);
	}
};




PlSqlParser.Parameter_nameContext = Parameter_nameContext;

PlSqlParser.prototype.parameter_name = function() {

    var localctx = new Parameter_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, PlSqlParser.RULE_parameter_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5275;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reference_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_reference_model_name;
    return this;
}

Reference_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_model_nameContext.prototype.constructor = Reference_model_nameContext;

Reference_model_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Reference_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterReference_model_name(this);
	}
};

Reference_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitReference_model_name(this);
	}
};




PlSqlParser.Reference_model_nameContext = Reference_model_nameContext;

PlSqlParser.prototype.reference_model_name = function() {

    var localctx = new Reference_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, PlSqlParser.RULE_reference_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5277;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Main_model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_main_model_name;
    return this;
}

Main_model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Main_model_nameContext.prototype.constructor = Main_model_nameContext;

Main_model_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Main_model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterMain_model_name(this);
	}
};

Main_model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitMain_model_name(this);
	}
};




PlSqlParser.Main_model_nameContext = Main_model_nameContext;

PlSqlParser.prototype.main_model_name = function() {

    var localctx = new Main_model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, PlSqlParser.RULE_main_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5279;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_aggregate_function_name;
    return this;
}

Aggregate_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_function_nameContext.prototype.constructor = Aggregate_function_nameContext;

Aggregate_function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Aggregate_function_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Aggregate_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterAggregate_function_name(this);
	}
};

Aggregate_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitAggregate_function_name(this);
	}
};




PlSqlParser.Aggregate_function_nameContext = Aggregate_function_nameContext;

PlSqlParser.prototype.aggregate_function_name = function() {

    var localctx = new Aggregate_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, PlSqlParser.RULE_aggregate_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5281;
        this.identifier();
        this.state = 5286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5282;
            this.match(PlSqlParser.PERIOD);
            this.state = 5283;
            this.id_expression();
            this.state = 5288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_query_name;
    return this;
}

Query_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_nameContext.prototype.constructor = Query_nameContext;

Query_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Query_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterQuery_name(this);
	}
};

Query_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitQuery_name(this);
	}
};




PlSqlParser.Query_nameContext = Query_nameContext;

PlSqlParser.prototype.query_name = function() {

    var localctx = new Query_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, PlSqlParser.RULE_query_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5289;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constraint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_constraint_name;
    return this;
}

Constraint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constraint_nameContext.prototype.constructor = Constraint_nameContext;

Constraint_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Constraint_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Constraint_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Constraint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConstraint_name(this);
	}
};

Constraint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConstraint_name(this);
	}
};




PlSqlParser.Constraint_nameContext = Constraint_nameContext;

PlSqlParser.prototype.constraint_name = function() {

    var localctx = new Constraint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, PlSqlParser.RULE_constraint_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5291;
        this.identifier();
        this.state = 5296;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5292;
            this.match(PlSqlParser.PERIOD);
            this.state = 5293;
            this.id_expression();
            this.state = 5298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.AT_SIGN) {
            this.state = 5299;
            this.match(PlSqlParser.AT_SIGN);
            this.state = 5300;
            this.link_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Label_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_label_name;
    return this;
}

Label_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_nameContext.prototype.constructor = Label_nameContext;

Label_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Label_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLabel_name(this);
	}
};

Label_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLabel_name(this);
	}
};




PlSqlParser.Label_nameContext = Label_nameContext;

PlSqlParser.prototype.label_name = function() {

    var localctx = new Label_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, PlSqlParser.RULE_label_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5303;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_name(this);
	}
};




PlSqlParser.Type_nameContext = Type_nameContext;

PlSqlParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, PlSqlParser.RULE_type_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5305;
        this.id_expression();
        this.state = 5310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5306;
            this.match(PlSqlParser.PERIOD);
            this.state = 5307;
            this.id_expression();
            this.state = 5312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sequence_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_sequence_name;
    return this;
}

Sequence_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_nameContext.prototype.constructor = Sequence_nameContext;

Sequence_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Sequence_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSequence_name(this);
	}
};

Sequence_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSequence_name(this);
	}
};




PlSqlParser.Sequence_nameContext = Sequence_nameContext;

PlSqlParser.prototype.sequence_name = function() {

    var localctx = new Sequence_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, PlSqlParser.RULE_sequence_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5313;
        this.id_expression();
        this.state = 5318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5314;
            this.match(PlSqlParser.PERIOD);
            this.state = 5315;
            this.id_expression();
            this.state = 5320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exception_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_exception_name;
    return this;
}

Exception_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exception_nameContext.prototype.constructor = Exception_nameContext;

Exception_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Exception_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Exception_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterException_name(this);
	}
};

Exception_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitException_name(this);
	}
};




PlSqlParser.Exception_nameContext = Exception_nameContext;

PlSqlParser.prototype.exception_name = function() {

    var localctx = new Exception_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, PlSqlParser.RULE_exception_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5321;
        this.identifier();
        this.state = 5326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5322;
            this.match(PlSqlParser.PERIOD);
            this.state = 5323;
            this.id_expression();
            this.state = 5328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_name(this);
	}
};




PlSqlParser.Function_nameContext = Function_nameContext;

PlSqlParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, PlSqlParser.RULE_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5329;
        this.identifier();
        this.state = 5332;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PERIOD) {
            this.state = 5330;
            this.match(PlSqlParser.PERIOD);
            this.state = 5331;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_procedure_name;
    return this;
}

Procedure_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_nameContext.prototype.constructor = Procedure_nameContext;

Procedure_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Procedure_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Procedure_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterProcedure_name(this);
	}
};

Procedure_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitProcedure_name(this);
	}
};




PlSqlParser.Procedure_nameContext = Procedure_nameContext;

PlSqlParser.prototype.procedure_name = function() {

    var localctx = new Procedure_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, PlSqlParser.RULE_procedure_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5334;
        this.identifier();
        this.state = 5337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PERIOD) {
            this.state = 5335;
            this.match(PlSqlParser.PERIOD);
            this.state = 5336;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_trigger_name;
    return this;
}

Trigger_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_nameContext.prototype.constructor = Trigger_nameContext;

Trigger_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Trigger_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Trigger_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTrigger_name(this);
	}
};

Trigger_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTrigger_name(this);
	}
};




PlSqlParser.Trigger_nameContext = Trigger_nameContext;

PlSqlParser.prototype.trigger_name = function() {

    var localctx = new Trigger_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, PlSqlParser.RULE_trigger_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5339;
        this.identifier();
        this.state = 5342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PERIOD) {
            this.state = 5340;
            this.match(PlSqlParser.PERIOD);
            this.state = 5341;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Variable_nameContext.prototype.INTRODUCER = function() {
    return this.getToken(PlSqlParser.INTRODUCER, 0);
};

Variable_nameContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

Variable_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitVariable_name(this);
	}
};




PlSqlParser.Variable_nameContext = Variable_nameContext;

PlSqlParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, PlSqlParser.RULE_variable_name);
    var _la = 0; // Token type
    try {
        this.state = 5354;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.INTRODUCER) {
                this.state = 5344;
                this.match(PlSqlParser.INTRODUCER);
                this.state = 5345;
                this.char_set_name();
            }

            this.state = 5348;
            this.id_expression();
            this.state = 5351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PERIOD) {
                this.state = 5349;
                this.match(PlSqlParser.PERIOD);
                this.state = 5350;
                this.id_expression();
            }

            break;
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 5353;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_index_name;
    return this;
}

Index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_nameContext.prototype.constructor = Index_nameContext;

Index_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterIndex_name(this);
	}
};

Index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitIndex_name(this);
	}
};




PlSqlParser.Index_nameContext = Index_nameContext;

PlSqlParser.prototype.index_name = function() {

    var localctx = new Index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, PlSqlParser.RULE_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5356;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_cursor_name;
    return this;
}

Cursor_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_nameContext.prototype.constructor = Cursor_nameContext;

Cursor_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Cursor_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Cursor_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCursor_name(this);
	}
};

Cursor_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCursor_name(this);
	}
};




PlSqlParser.Cursor_nameContext = Cursor_nameContext;

PlSqlParser.prototype.cursor_name = function() {

    var localctx = new Cursor_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, PlSqlParser.RULE_cursor_name);
    try {
        this.state = 5360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5358;
            this.identifier();
            break;
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 5359;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_record_name;
    return this;
}

Record_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_nameContext.prototype.constructor = Record_nameContext;

Record_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Record_nameContext.prototype.bind_variable = function() {
    return this.getTypedRuleContext(Bind_variableContext,0);
};

Record_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRecord_name(this);
	}
};

Record_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRecord_name(this);
	}
};




PlSqlParser.Record_nameContext = Record_nameContext;

PlSqlParser.prototype.record_name = function() {

    var localctx = new Record_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, PlSqlParser.RULE_record_name);
    try {
        this.state = 5364;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.DELIMITED_ID:
        case PlSqlParser.INTRODUCER:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5362;
            this.identifier();
            break;
        case PlSqlParser.BINDVAR:
        case PlSqlParser.COLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 5363;
            this.bind_variable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_collection_name;
    return this;
}

Collection_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_nameContext.prototype.constructor = Collection_nameContext;

Collection_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Collection_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Collection_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterCollection_name(this);
	}
};

Collection_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitCollection_name(this);
	}
};




PlSqlParser.Collection_nameContext = Collection_nameContext;

PlSqlParser.prototype.collection_name = function() {

    var localctx = new Collection_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, PlSqlParser.RULE_collection_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5366;
        this.identifier();
        this.state = 5369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.PERIOD) {
            this.state = 5367;
            this.match(PlSqlParser.PERIOD);
            this.state = 5368;
            this.id_expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Link_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_link_name;
    return this;
}

Link_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Link_nameContext.prototype.constructor = Link_nameContext;

Link_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Link_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterLink_name(this);
	}
};

Link_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitLink_name(this);
	}
};




PlSqlParser.Link_nameContext = Link_nameContext;

PlSqlParser.prototype.link_name = function() {

    var localctx = new Link_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, PlSqlParser.RULE_link_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5371;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_column_name;
    return this;
}

Column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_nameContext.prototype.constructor = Column_nameContext;

Column_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Column_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterColumn_name(this);
	}
};

Column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitColumn_name(this);
	}
};




PlSqlParser.Column_nameContext = Column_nameContext;

PlSqlParser.prototype.column_name = function() {

    var localctx = new Column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, PlSqlParser.RULE_column_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5373;
        this.identifier();
        this.state = 5378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5374;
            this.match(PlSqlParser.PERIOD);
            this.state = 5375;
            this.id_expression();
            this.state = 5380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tableview_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_tableview_name;
    return this;
}

Tableview_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tableview_nameContext.prototype.constructor = Tableview_nameContext;

Tableview_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Tableview_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Tableview_nameContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

Tableview_nameContext.prototype.partition_extension_clause = function() {
    return this.getTypedRuleContext(Partition_extension_clauseContext,0);
};

Tableview_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTableview_name(this);
	}
};

Tableview_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTableview_name(this);
	}
};




PlSqlParser.Tableview_nameContext = Tableview_nameContext;

PlSqlParser.prototype.tableview_name = function() {

    var localctx = new Tableview_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, PlSqlParser.RULE_tableview_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5381;
        this.identifier();
        this.state = 5384;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,702,this._ctx);
        if(la_===1) {
            this.state = 5382;
            this.match(PlSqlParser.PERIOD);
            this.state = 5383;
            this.id_expression();

        }
        this.state = 5389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
        if(la_===1) {
            this.state = 5386;
            this.match(PlSqlParser.AT_SIGN);
            this.state = 5387;
            this.link_name();

        } else if(la_===2) {
            this.state = 5388;
            this.partition_extension_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Char_set_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_char_set_name;
    return this;
}

Char_set_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Char_set_nameContext.prototype.constructor = Char_set_nameContext;

Char_set_nameContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Char_set_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterChar_set_name(this);
	}
};

Char_set_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitChar_set_name(this);
	}
};




PlSqlParser.Char_set_nameContext = Char_set_nameContext;

PlSqlParser.prototype.char_set_name = function() {

    var localctx = new Char_set_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, PlSqlParser.RULE_char_set_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5391;
        this.id_expression();
        this.state = 5396;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5392;
            this.match(PlSqlParser.PERIOD);
            this.state = 5393;
            this.id_expression();
            this.state = 5398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Synonym_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_synonym_name;
    return this;
}

Synonym_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Synonym_nameContext.prototype.constructor = Synonym_nameContext;

Synonym_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Synonym_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSynonym_name(this);
	}
};

Synonym_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSynonym_name(this);
	}
};




PlSqlParser.Synonym_nameContext = Synonym_nameContext;

PlSqlParser.prototype.synonym_name = function() {

    var localctx = new Synonym_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, PlSqlParser.RULE_synonym_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5399;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_object_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_schema_object_name;
    return this;
}

Schema_object_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_object_nameContext.prototype.constructor = Schema_object_nameContext;

Schema_object_nameContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

Schema_object_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterSchema_object_name(this);
	}
};

Schema_object_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitSchema_object_name(this);
	}
};




PlSqlParser.Schema_object_nameContext = Schema_object_nameContext;

PlSqlParser.prototype.schema_object_name = function() {

    var localctx = new Schema_object_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, PlSqlParser.RULE_schema_object_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5401;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Keep_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_keep_clause;
    return this;
}

Keep_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keep_clauseContext.prototype.constructor = Keep_clauseContext;

Keep_clauseContext.prototype.KEEP = function() {
    return this.getToken(PlSqlParser.KEEP, 0);
};

Keep_clauseContext.prototype.DENSE_RANK = function() {
    return this.getToken(PlSqlParser.DENSE_RANK, 0);
};

Keep_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Keep_clauseContext.prototype.FIRST = function() {
    return this.getToken(PlSqlParser.FIRST, 0);
};

Keep_clauseContext.prototype.LAST = function() {
    return this.getToken(PlSqlParser.LAST, 0);
};

Keep_clauseContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Keep_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterKeep_clause(this);
	}
};

Keep_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitKeep_clause(this);
	}
};




PlSqlParser.Keep_clauseContext = Keep_clauseContext;

PlSqlParser.prototype.keep_clause = function() {

    var localctx = new Keep_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, PlSqlParser.RULE_keep_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5403;
        this.match(PlSqlParser.KEEP);
        this.state = 5404;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5405;
        this.match(PlSqlParser.DENSE_RANK);
        this.state = 5406;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.FIRST || _la===PlSqlParser.LAST)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5407;
        this.order_by_clause();
        this.state = 5408;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 5410;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
        if(la_===1) {
            this.state = 5409;
            this.over_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_argument;
    return this;
}

Function_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argumentContext.prototype.constructor = Function_argumentContext;

Function_argumentContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argumentContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_argument(this);
	}
};

Function_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_argument(this);
	}
};




PlSqlParser.Function_argumentContext = Function_argumentContext;

PlSqlParser.prototype.function_argument = function() {

    var localctx = new Function_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, PlSqlParser.RULE_function_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5412;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 5413;
            this.argument();
        }

        this.state = 5420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 5416;
            this.match(PlSqlParser.COMMA);
            this.state = 5417;
            this.argument();
            this.state = 5422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5423;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 5425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
        if(la_===1) {
            this.state = 5424;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_analyticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_argument_analytic;
    return this;
}

Function_argument_analyticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_analyticContext.prototype.constructor = Function_argument_analyticContext;

Function_argument_analyticContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

Function_argument_analyticContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_analyticContext.prototype.respect_or_ignore_nulls = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Respect_or_ignore_nullsContext);
    } else {
        return this.getTypedRuleContext(Respect_or_ignore_nullsContext,i);
    }
};

Function_argument_analyticContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_argument_analytic(this);
	}
};

Function_argument_analyticContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_argument_analytic(this);
	}
};




PlSqlParser.Function_argument_analyticContext = Function_argument_analyticContext;

PlSqlParser.prototype.function_argument_analytic = function() {

    var localctx = new Function_argument_analyticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, PlSqlParser.RULE_function_argument_analytic);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5427;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ALL) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ANY) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CASE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COALESCE - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONNECT_BY_ROOT - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DATE - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DISTINCT - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXISTS - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FALSE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NOT - 260)) | (1 << (PlSqlParser.NULL - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.PRIOR - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUE - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.DECODE - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.NVL - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & ((1 << (PlSqlParser.ROUND - 520)) | (1 << (PlSqlParser.ROW_NUMBER - 520)) | (1 << (PlSqlParser.SUBSTR - 520)) | (1 << (PlSqlParser.TO_CHAR - 520)) | (1 << (PlSqlParser.TRIM - 520)) | (1 << (PlSqlParser.SUM - 520)) | (1 << (PlSqlParser.STDDEV - 520)) | (1 << (PlSqlParser.VAR_ - 520)) | (1 << (PlSqlParser.VARIANCE - 520)) | (1 << (PlSqlParser.LEAST - 520)) | (1 << (PlSqlParser.GREATEST - 520)) | (1 << (PlSqlParser.TO_DATE - 520)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 520)) | (1 << (PlSqlParser.UNSIGNED_INTEGER - 520)) | (1 << (PlSqlParser.APPROXIMATE_NUM_LIT - 520)) | (1 << (PlSqlParser.CHAR_STRING - 520)) | (1 << (PlSqlParser.DELIMITED_ID - 520)) | (1 << (PlSqlParser.LEFT_PAREN - 520)) | (1 << (PlSqlParser.PLUS_SIGN - 520)) | (1 << (PlSqlParser.MINUS_SIGN - 520)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (PlSqlParser.BINDVAR - 553)) | (1 << (PlSqlParser.COLON - 553)) | (1 << (PlSqlParser.INTRODUCER - 553)) | (1 << (PlSqlParser.REGULAR_ID - 553)))) !== 0)) {
            this.state = 5428;
            this.argument();
            this.state = 5430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.IGNORE || _la===PlSqlParser.RESPECT) {
                this.state = 5429;
                this.respect_or_ignore_nulls();
            }

        }

        this.state = 5441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.COMMA) {
            this.state = 5434;
            this.match(PlSqlParser.COMMA);
            this.state = 5435;
            this.argument();
            this.state = 5437;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.IGNORE || _la===PlSqlParser.RESPECT) {
                this.state = 5436;
                this.respect_or_ignore_nulls();
            }

            this.state = 5443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5444;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 5446;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,713,this._ctx);
        if(la_===1) {
            this.state = 5445;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_argument_modelingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_function_argument_modeling;
    return this;
}

Function_argument_modelingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_argument_modelingContext.prototype.constructor = Function_argument_modelingContext;

Function_argument_modelingContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Function_argument_modelingContext.prototype.USING = function() {
    return this.getToken(PlSqlParser.USING, 0);
};

Function_argument_modelingContext.prototype.tableview_name = function() {
    return this.getTypedRuleContext(Tableview_nameContext,0);
};

Function_argument_modelingContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_argument_modelingContext.prototype.keep_clause = function() {
    return this.getTypedRuleContext(Keep_clauseContext,0);
};

Function_argument_modelingContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Function_argument_modelingContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.NULL);
    } else {
        return this.getToken(PlSqlParser.NULL, i);
    }
};


Function_argument_modelingContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Function_argument_modelingContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterFunction_argument_modeling(this);
	}
};

Function_argument_modelingContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitFunction_argument_modeling(this);
	}
};




PlSqlParser.Function_argument_modelingContext = Function_argument_modelingContext;

PlSqlParser.prototype.function_argument_modeling = function() {

    var localctx = new Function_argument_modelingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, PlSqlParser.RULE_function_argument_modeling);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5448;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5449;
        this.column_name();
        this.state = 5462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.COMMA) {
            this.state = 5450;
            this.match(PlSqlParser.COMMA);
            this.state = 5453;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.UNSIGNED_INTEGER:
            case PlSqlParser.APPROXIMATE_NUM_LIT:
                this.state = 5451;
                this.numeric();
                break;
            case PlSqlParser.NULL:
                this.state = 5452;
                this.match(PlSqlParser.NULL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.COMMA) {
                this.state = 5455;
                this.match(PlSqlParser.COMMA);
                this.state = 5458;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.UNSIGNED_INTEGER:
                case PlSqlParser.APPROXIMATE_NUM_LIT:
                    this.state = 5456;
                    this.numeric();
                    break;
                case PlSqlParser.NULL:
                    this.state = 5457;
                    this.match(PlSqlParser.NULL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

        }

        this.state = 5464;
        this.match(PlSqlParser.USING);
        this.state = 5484;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,721,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5465;
            this.tableview_name();
            this.state = 5466;
            this.match(PlSqlParser.PERIOD);
            this.state = 5467;
            this.match(PlSqlParser.ASTERISK);
            break;

        case 2:
            this.state = 5469;
            this.match(PlSqlParser.ASTERISK);
            break;

        case 3:
            this.state = 5470;
            this.expression();
            this.state = 5472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                this.state = 5471;
                this.column_alias();
            }

            this.state = 5481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PlSqlParser.COMMA) {
                this.state = 5474;
                this.match(PlSqlParser.COMMA);
                this.state = 5475;
                this.expression();
                this.state = 5477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.AS) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)) | (1 << (PlSqlParser.NATIONAL_CHAR_STRING_LIT - 521)) | (1 << (PlSqlParser.CHAR_STRING - 521)) | (1 << (PlSqlParser.DELIMITED_ID - 521)))) !== 0) || _la===PlSqlParser.INTRODUCER || _la===PlSqlParser.REGULAR_ID) {
                    this.state = 5476;
                    this.column_alias();
                }

                this.state = 5483;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 5486;
        this.match(PlSqlParser.RIGHT_PAREN);
        this.state = 5488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,722,this._ctx);
        if(la_===1) {
            this.state = 5487;
            this.keep_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Respect_or_ignore_nullsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_respect_or_ignore_nulls;
    return this;
}

Respect_or_ignore_nullsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Respect_or_ignore_nullsContext.prototype.constructor = Respect_or_ignore_nullsContext;

Respect_or_ignore_nullsContext.prototype.NULLS = function() {
    return this.getToken(PlSqlParser.NULLS, 0);
};

Respect_or_ignore_nullsContext.prototype.RESPECT = function() {
    return this.getToken(PlSqlParser.RESPECT, 0);
};

Respect_or_ignore_nullsContext.prototype.IGNORE = function() {
    return this.getToken(PlSqlParser.IGNORE, 0);
};

Respect_or_ignore_nullsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRespect_or_ignore_nulls(this);
	}
};

Respect_or_ignore_nullsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRespect_or_ignore_nulls(this);
	}
};




PlSqlParser.Respect_or_ignore_nullsContext = Respect_or_ignore_nullsContext;

PlSqlParser.prototype.respect_or_ignore_nulls = function() {

    var localctx = new Respect_or_ignore_nullsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, PlSqlParser.RULE_respect_or_ignore_nulls);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5490;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.IGNORE || _la===PlSqlParser.RESPECT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5491;
        this.match(PlSqlParser.NULLS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitArgument(this);
	}
};




PlSqlParser.ArgumentContext = ArgumentContext;

PlSqlParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, PlSqlParser.RULE_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
        if(la_===1) {
            this.state = 5493;
            this.identifier();
            this.state = 5494;
            this.match(PlSqlParser.EQUALS_OP);
            this.state = 5495;
            this.match(PlSqlParser.GREATER_THAN_OP);

        }
        this.state = 5499;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_type_spec;
    return this;
}

Type_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_specContext.prototype.constructor = Type_specContext;

Type_specContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

Type_specContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_specContext.prototype.REF = function() {
    return this.getToken(PlSqlParser.REF, 0);
};

Type_specContext.prototype.PERCENT_ROWTYPE = function() {
    return this.getToken(PlSqlParser.PERCENT_ROWTYPE, 0);
};

Type_specContext.prototype.PERCENT_TYPE = function() {
    return this.getToken(PlSqlParser.PERCENT_TYPE, 0);
};

Type_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterType_spec(this);
	}
};

Type_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitType_spec(this);
	}
};




PlSqlParser.Type_specContext = Type_specContext;

PlSqlParser.prototype.type_spec = function() {

    var localctx = new Type_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, PlSqlParser.RULE_type_spec);
    var _la = 0; // Token type
    try {
        this.state = 5509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5501;
            this.datatype();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5503;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,724,this._ctx);
            if(la_===1) {
                this.state = 5502;
                this.match(PlSqlParser.REF);

            }
            this.state = 5505;
            this.type_name();
            this.state = 5507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PERCENT_ROWTYPE || _la===PlSqlParser.PERCENT_TYPE) {
                this.state = 5506;
                _la = this._input.LA(1);
                if(!(_la===PlSqlParser.PERCENT_ROWTYPE || _la===PlSqlParser.PERCENT_TYPE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatatypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_datatype;
    return this;
}

DatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatatypeContext.prototype.constructor = DatatypeContext;

DatatypeContext.prototype.native_datatype_element = function() {
    return this.getTypedRuleContext(Native_datatype_elementContext,0);
};

DatatypeContext.prototype.precision_part = function() {
    return this.getTypedRuleContext(Precision_partContext,0);
};

DatatypeContext.prototype.WITH = function() {
    return this.getToken(PlSqlParser.WITH, 0);
};

DatatypeContext.prototype.TIME = function() {
    return this.getToken(PlSqlParser.TIME, 0);
};

DatatypeContext.prototype.ZONE = function() {
    return this.getToken(PlSqlParser.ZONE, 0);
};

DatatypeContext.prototype.CHARACTER = function() {
    return this.getToken(PlSqlParser.CHARACTER, 0);
};

DatatypeContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

DatatypeContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

DatatypeContext.prototype.LOCAL = function() {
    return this.getToken(PlSqlParser.LOCAL, 0);
};

DatatypeContext.prototype.INTERVAL = function() {
    return this.getToken(PlSqlParser.INTERVAL, 0);
};

DatatypeContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

DatatypeContext.prototype.YEAR = function() {
    return this.getToken(PlSqlParser.YEAR, 0);
};

DatatypeContext.prototype.DAY = function() {
    return this.getToken(PlSqlParser.DAY, 0);
};

DatatypeContext.prototype.MONTH = function() {
    return this.getToken(PlSqlParser.MONTH, 0);
};

DatatypeContext.prototype.SECOND = function() {
    return this.getToken(PlSqlParser.SECOND, 0);
};

DatatypeContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

DatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterDatatype(this);
	}
};

DatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitDatatype(this);
	}
};




PlSqlParser.DatatypeContext = DatatypeContext;

PlSqlParser.prototype.datatype = function() {

    var localctx = new DatatypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, PlSqlParser.RULE_datatype);
    var _la = 0; // Token type
    try {
        this.state = 5542;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CLOB:
        case PlSqlParser.DATE:
        case PlSqlParser.DAY:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.FLOAT:
        case PlSqlParser.HOUR:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INT:
        case PlSqlParser.LONG:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MONTH:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.RAW:
        case PlSqlParser.REAL:
        case PlSqlParser.ROWID:
        case PlSqlParser.SECOND:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.STRING:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.UROWID:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.YEAR:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 1);
            this.state = 5511;
            this.native_datatype_element();
            this.state = 5513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
            if(la_===1) {
                this.state = 5512;
                this.precision_part();

            }
            this.state = 5524;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case PlSqlParser.WITH:
            	this.state = 5515;
            	this.match(PlSqlParser.WITH);
            	this.state = 5517;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===PlSqlParser.LOCAL) {
            	    this.state = 5516;
            	    this.match(PlSqlParser.LOCAL);
            	}

            	this.state = 5519;
            	this.match(PlSqlParser.TIME);
            	this.state = 5520;
            	this.match(PlSqlParser.ZONE);
            	break;
            case PlSqlParser.CHARACTER:
            	this.state = 5521;
            	this.match(PlSqlParser.CHARACTER);
            	this.state = 5522;
            	this.match(PlSqlParser.SET);
            	this.state = 5523;
            	this.char_set_name();
            	break;
            case PlSqlParser.EOF:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.AS:
            case PlSqlParser.AUTHID:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.DEFAULT:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.ENCODING:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.FINAL:
            case PlSqlParser.HIDE:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDEX:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.IS:
            case PlSqlParser.MAP:
            case PlSqlParser.MEMBER:
            case PlSqlParser.NO:
            case PlSqlParser.NOT:
            case PlSqlParser.ORDER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.RANGE:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RETURN:
            case PlSqlParser.SHOW:
            case PlSqlParser.STATIC:
            case PlSqlParser.VERSION:
            case PlSqlParser.LEFT_PAREN:
            case PlSqlParser.RIGHT_PAREN:
            case PlSqlParser.COMMA:
            case PlSqlParser.ASSIGN_OP:
            case PlSqlParser.SEMICOLON:
            	break;
            default:
            	break;
            }
            break;
        case PlSqlParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5526;
            this.match(PlSqlParser.INTERVAL);
            this.state = 5527;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DAY || _la===PlSqlParser.YEAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.LEFT_PAREN) {
                this.state = 5528;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 5529;
                this.expression();
                this.state = 5530;
                this.match(PlSqlParser.RIGHT_PAREN);
            }

            this.state = 5534;
            this.match(PlSqlParser.TO);
            this.state = 5535;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.MONTH || _la===PlSqlParser.SECOND)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5540;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
            if(la_===1) {
                this.state = 5536;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 5537;
                this.expression();
                this.state = 5538;
                this.match(PlSqlParser.RIGHT_PAREN);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Precision_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_precision_part;
    return this;
}

Precision_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precision_partContext.prototype.constructor = Precision_partContext;

Precision_partContext.prototype.numeric = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericContext);
    } else {
        return this.getTypedRuleContext(NumericContext,i);
    }
};

Precision_partContext.prototype.CHAR = function() {
    return this.getToken(PlSqlParser.CHAR, 0);
};

Precision_partContext.prototype.BYTE = function() {
    return this.getToken(PlSqlParser.BYTE, 0);
};

Precision_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterPrecision_part(this);
	}
};

Precision_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitPrecision_part(this);
	}
};




PlSqlParser.Precision_partContext = Precision_partContext;

PlSqlParser.prototype.precision_part = function() {

    var localctx = new Precision_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, PlSqlParser.RULE_precision_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5544;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5545;
        this.numeric();
        this.state = 5548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.COMMA) {
            this.state = 5546;
            this.match(PlSqlParser.COMMA);
            this.state = 5547;
            this.numeric();
        }

        this.state = 5551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.BYTE || _la===PlSqlParser.CHAR) {
            this.state = 5550;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.BYTE || _la===PlSqlParser.CHAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 5553;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Native_datatype_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_native_datatype_element;
    return this;
}

Native_datatype_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Native_datatype_elementContext.prototype.constructor = Native_datatype_elementContext;

Native_datatype_elementContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(PlSqlParser.BINARY_INTEGER, 0);
};

Native_datatype_elementContext.prototype.PLS_INTEGER = function() {
    return this.getToken(PlSqlParser.PLS_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NATURAL = function() {
    return this.getToken(PlSqlParser.NATURAL, 0);
};

Native_datatype_elementContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(PlSqlParser.BINARY_FLOAT, 0);
};

Native_datatype_elementContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(PlSqlParser.BINARY_DOUBLE, 0);
};

Native_datatype_elementContext.prototype.NATURALN = function() {
    return this.getToken(PlSqlParser.NATURALN, 0);
};

Native_datatype_elementContext.prototype.POSITIVE = function() {
    return this.getToken(PlSqlParser.POSITIVE, 0);
};

Native_datatype_elementContext.prototype.POSITIVEN = function() {
    return this.getToken(PlSqlParser.POSITIVEN, 0);
};

Native_datatype_elementContext.prototype.SIGNTYPE = function() {
    return this.getToken(PlSqlParser.SIGNTYPE, 0);
};

Native_datatype_elementContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(PlSqlParser.SIMPLE_INTEGER, 0);
};

Native_datatype_elementContext.prototype.NVARCHAR2 = function() {
    return this.getToken(PlSqlParser.NVARCHAR2, 0);
};

Native_datatype_elementContext.prototype.DEC = function() {
    return this.getToken(PlSqlParser.DEC, 0);
};

Native_datatype_elementContext.prototype.INTEGER = function() {
    return this.getToken(PlSqlParser.INTEGER, 0);
};

Native_datatype_elementContext.prototype.INT = function() {
    return this.getToken(PlSqlParser.INT, 0);
};

Native_datatype_elementContext.prototype.NUMERIC = function() {
    return this.getToken(PlSqlParser.NUMERIC, 0);
};

Native_datatype_elementContext.prototype.SMALLINT = function() {
    return this.getToken(PlSqlParser.SMALLINT, 0);
};

Native_datatype_elementContext.prototype.NUMBER = function() {
    return this.getToken(PlSqlParser.NUMBER, 0);
};

Native_datatype_elementContext.prototype.DECIMAL = function() {
    return this.getToken(PlSqlParser.DECIMAL, 0);
};

Native_datatype_elementContext.prototype.DOUBLE = function() {
    return this.getToken(PlSqlParser.DOUBLE, 0);
};

Native_datatype_elementContext.prototype.PRECISION = function() {
    return this.getToken(PlSqlParser.PRECISION, 0);
};

Native_datatype_elementContext.prototype.FLOAT = function() {
    return this.getToken(PlSqlParser.FLOAT, 0);
};

Native_datatype_elementContext.prototype.REAL = function() {
    return this.getToken(PlSqlParser.REAL, 0);
};

Native_datatype_elementContext.prototype.NCHAR = function() {
    return this.getToken(PlSqlParser.NCHAR, 0);
};

Native_datatype_elementContext.prototype.LONG = function() {
    return this.getToken(PlSqlParser.LONG, 0);
};

Native_datatype_elementContext.prototype.RAW = function() {
    return this.getToken(PlSqlParser.RAW, 0);
};

Native_datatype_elementContext.prototype.CHAR = function() {
    return this.getToken(PlSqlParser.CHAR, 0);
};

Native_datatype_elementContext.prototype.CHARACTER = function() {
    return this.getToken(PlSqlParser.CHARACTER, 0);
};

Native_datatype_elementContext.prototype.VARCHAR2 = function() {
    return this.getToken(PlSqlParser.VARCHAR2, 0);
};

Native_datatype_elementContext.prototype.VARCHAR = function() {
    return this.getToken(PlSqlParser.VARCHAR, 0);
};

Native_datatype_elementContext.prototype.STRING = function() {
    return this.getToken(PlSqlParser.STRING, 0);
};

Native_datatype_elementContext.prototype.BOOLEAN = function() {
    return this.getToken(PlSqlParser.BOOLEAN, 0);
};

Native_datatype_elementContext.prototype.DATE = function() {
    return this.getToken(PlSqlParser.DATE, 0);
};

Native_datatype_elementContext.prototype.ROWID = function() {
    return this.getToken(PlSqlParser.ROWID, 0);
};

Native_datatype_elementContext.prototype.UROWID = function() {
    return this.getToken(PlSqlParser.UROWID, 0);
};

Native_datatype_elementContext.prototype.YEAR = function() {
    return this.getToken(PlSqlParser.YEAR, 0);
};

Native_datatype_elementContext.prototype.MONTH = function() {
    return this.getToken(PlSqlParser.MONTH, 0);
};

Native_datatype_elementContext.prototype.DAY = function() {
    return this.getToken(PlSqlParser.DAY, 0);
};

Native_datatype_elementContext.prototype.HOUR = function() {
    return this.getToken(PlSqlParser.HOUR, 0);
};

Native_datatype_elementContext.prototype.MINUTE = function() {
    return this.getToken(PlSqlParser.MINUTE, 0);
};

Native_datatype_elementContext.prototype.SECOND = function() {
    return this.getToken(PlSqlParser.SECOND, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(PlSqlParser.TIMEZONE_HOUR, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(PlSqlParser.TIMEZONE_MINUTE, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(PlSqlParser.TIMEZONE_REGION, 0);
};

Native_datatype_elementContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(PlSqlParser.TIMEZONE_ABBR, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP = function() {
    return this.getToken(PlSqlParser.TIMESTAMP, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Native_datatype_elementContext.prototype.BFILE = function() {
    return this.getToken(PlSqlParser.BFILE, 0);
};

Native_datatype_elementContext.prototype.BLOB = function() {
    return this.getToken(PlSqlParser.BLOB, 0);
};

Native_datatype_elementContext.prototype.CLOB = function() {
    return this.getToken(PlSqlParser.CLOB, 0);
};

Native_datatype_elementContext.prototype.NCLOB = function() {
    return this.getToken(PlSqlParser.NCLOB, 0);
};

Native_datatype_elementContext.prototype.MLSLABEL = function() {
    return this.getToken(PlSqlParser.MLSLABEL, 0);
};

Native_datatype_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNative_datatype_element(this);
	}
};

Native_datatype_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNative_datatype_element(this);
	}
};




PlSqlParser.Native_datatype_elementContext = Native_datatype_elementContext;

PlSqlParser.prototype.native_datatype_element = function() {

    var localctx = new Native_datatype_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, PlSqlParser.RULE_native_datatype_element);
    var _la = 0; // Token type
    try {
        this.state = 5615;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BINARY_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 5555;
            this.match(PlSqlParser.BINARY_INTEGER);
            break;
        case PlSqlParser.PLS_INTEGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 5556;
            this.match(PlSqlParser.PLS_INTEGER);
            break;
        case PlSqlParser.NATURAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5557;
            this.match(PlSqlParser.NATURAL);
            break;
        case PlSqlParser.BINARY_FLOAT:
            this.enterOuterAlt(localctx, 4);
            this.state = 5558;
            this.match(PlSqlParser.BINARY_FLOAT);
            break;
        case PlSqlParser.BINARY_DOUBLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 5559;
            this.match(PlSqlParser.BINARY_DOUBLE);
            break;
        case PlSqlParser.NATURALN:
            this.enterOuterAlt(localctx, 6);
            this.state = 5560;
            this.match(PlSqlParser.NATURALN);
            break;
        case PlSqlParser.POSITIVE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5561;
            this.match(PlSqlParser.POSITIVE);
            break;
        case PlSqlParser.POSITIVEN:
            this.enterOuterAlt(localctx, 8);
            this.state = 5562;
            this.match(PlSqlParser.POSITIVEN);
            break;
        case PlSqlParser.SIGNTYPE:
            this.enterOuterAlt(localctx, 9);
            this.state = 5563;
            this.match(PlSqlParser.SIGNTYPE);
            break;
        case PlSqlParser.SIMPLE_INTEGER:
            this.enterOuterAlt(localctx, 10);
            this.state = 5564;
            this.match(PlSqlParser.SIMPLE_INTEGER);
            break;
        case PlSqlParser.NVARCHAR2:
            this.enterOuterAlt(localctx, 11);
            this.state = 5565;
            this.match(PlSqlParser.NVARCHAR2);
            break;
        case PlSqlParser.DEC:
            this.enterOuterAlt(localctx, 12);
            this.state = 5566;
            this.match(PlSqlParser.DEC);
            break;
        case PlSqlParser.INTEGER:
            this.enterOuterAlt(localctx, 13);
            this.state = 5567;
            this.match(PlSqlParser.INTEGER);
            break;
        case PlSqlParser.INT:
            this.enterOuterAlt(localctx, 14);
            this.state = 5568;
            this.match(PlSqlParser.INT);
            break;
        case PlSqlParser.NUMERIC:
            this.enterOuterAlt(localctx, 15);
            this.state = 5569;
            this.match(PlSqlParser.NUMERIC);
            break;
        case PlSqlParser.SMALLINT:
            this.enterOuterAlt(localctx, 16);
            this.state = 5570;
            this.match(PlSqlParser.SMALLINT);
            break;
        case PlSqlParser.NUMBER:
            this.enterOuterAlt(localctx, 17);
            this.state = 5571;
            this.match(PlSqlParser.NUMBER);
            break;
        case PlSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 18);
            this.state = 5572;
            this.match(PlSqlParser.DECIMAL);
            break;
        case PlSqlParser.DOUBLE:
            this.enterOuterAlt(localctx, 19);
            this.state = 5573;
            this.match(PlSqlParser.DOUBLE);
            this.state = 5575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.PRECISION) {
                this.state = 5574;
                this.match(PlSqlParser.PRECISION);
            }

            break;
        case PlSqlParser.FLOAT:
            this.enterOuterAlt(localctx, 20);
            this.state = 5577;
            this.match(PlSqlParser.FLOAT);
            break;
        case PlSqlParser.REAL:
            this.enterOuterAlt(localctx, 21);
            this.state = 5578;
            this.match(PlSqlParser.REAL);
            break;
        case PlSqlParser.NCHAR:
            this.enterOuterAlt(localctx, 22);
            this.state = 5579;
            this.match(PlSqlParser.NCHAR);
            break;
        case PlSqlParser.LONG:
            this.enterOuterAlt(localctx, 23);
            this.state = 5580;
            this.match(PlSqlParser.LONG);
            this.state = 5582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.RAW) {
                this.state = 5581;
                this.match(PlSqlParser.RAW);
            }

            break;
        case PlSqlParser.CHAR:
            this.enterOuterAlt(localctx, 24);
            this.state = 5584;
            this.match(PlSqlParser.CHAR);
            break;
        case PlSqlParser.CHARACTER:
            this.enterOuterAlt(localctx, 25);
            this.state = 5585;
            this.match(PlSqlParser.CHARACTER);
            break;
        case PlSqlParser.VARCHAR2:
            this.enterOuterAlt(localctx, 26);
            this.state = 5586;
            this.match(PlSqlParser.VARCHAR2);
            break;
        case PlSqlParser.VARCHAR:
            this.enterOuterAlt(localctx, 27);
            this.state = 5587;
            this.match(PlSqlParser.VARCHAR);
            break;
        case PlSqlParser.STRING:
            this.enterOuterAlt(localctx, 28);
            this.state = 5588;
            this.match(PlSqlParser.STRING);
            break;
        case PlSqlParser.RAW:
            this.enterOuterAlt(localctx, 29);
            this.state = 5589;
            this.match(PlSqlParser.RAW);
            break;
        case PlSqlParser.BOOLEAN:
            this.enterOuterAlt(localctx, 30);
            this.state = 5590;
            this.match(PlSqlParser.BOOLEAN);
            break;
        case PlSqlParser.DATE:
            this.enterOuterAlt(localctx, 31);
            this.state = 5591;
            this.match(PlSqlParser.DATE);
            break;
        case PlSqlParser.ROWID:
            this.enterOuterAlt(localctx, 32);
            this.state = 5592;
            this.match(PlSqlParser.ROWID);
            break;
        case PlSqlParser.UROWID:
            this.enterOuterAlt(localctx, 33);
            this.state = 5593;
            this.match(PlSqlParser.UROWID);
            break;
        case PlSqlParser.YEAR:
            this.enterOuterAlt(localctx, 34);
            this.state = 5594;
            this.match(PlSqlParser.YEAR);
            break;
        case PlSqlParser.MONTH:
            this.enterOuterAlt(localctx, 35);
            this.state = 5595;
            this.match(PlSqlParser.MONTH);
            break;
        case PlSqlParser.DAY:
            this.enterOuterAlt(localctx, 36);
            this.state = 5596;
            this.match(PlSqlParser.DAY);
            break;
        case PlSqlParser.HOUR:
            this.enterOuterAlt(localctx, 37);
            this.state = 5597;
            this.match(PlSqlParser.HOUR);
            break;
        case PlSqlParser.MINUTE:
            this.enterOuterAlt(localctx, 38);
            this.state = 5598;
            this.match(PlSqlParser.MINUTE);
            break;
        case PlSqlParser.SECOND:
            this.enterOuterAlt(localctx, 39);
            this.state = 5599;
            this.match(PlSqlParser.SECOND);
            break;
        case PlSqlParser.TIMEZONE_HOUR:
            this.enterOuterAlt(localctx, 40);
            this.state = 5600;
            this.match(PlSqlParser.TIMEZONE_HOUR);
            break;
        case PlSqlParser.TIMEZONE_MINUTE:
            this.enterOuterAlt(localctx, 41);
            this.state = 5601;
            this.match(PlSqlParser.TIMEZONE_MINUTE);
            break;
        case PlSqlParser.TIMEZONE_REGION:
            this.enterOuterAlt(localctx, 42);
            this.state = 5602;
            this.match(PlSqlParser.TIMEZONE_REGION);
            break;
        case PlSqlParser.TIMEZONE_ABBR:
            this.enterOuterAlt(localctx, 43);
            this.state = 5603;
            this.match(PlSqlParser.TIMEZONE_ABBR);
            break;
        case PlSqlParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 44);
            this.state = 5604;
            this.match(PlSqlParser.TIMESTAMP);
            break;
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 45);
            this.state = 5605;
            this.match(PlSqlParser.TIMESTAMP_UNCONSTRAINED);
            break;
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 46);
            this.state = 5606;
            this.match(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED);
            break;
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 47);
            this.state = 5607;
            this.match(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED);
            break;
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 48);
            this.state = 5608;
            this.match(PlSqlParser.YMINTERVAL_UNCONSTRAINED);
            break;
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            this.enterOuterAlt(localctx, 49);
            this.state = 5609;
            this.match(PlSqlParser.DSINTERVAL_UNCONSTRAINED);
            break;
        case PlSqlParser.BFILE:
            this.enterOuterAlt(localctx, 50);
            this.state = 5610;
            this.match(PlSqlParser.BFILE);
            break;
        case PlSqlParser.BLOB:
            this.enterOuterAlt(localctx, 51);
            this.state = 5611;
            this.match(PlSqlParser.BLOB);
            break;
        case PlSqlParser.CLOB:
            this.enterOuterAlt(localctx, 52);
            this.state = 5612;
            this.match(PlSqlParser.CLOB);
            break;
        case PlSqlParser.NCLOB:
            this.enterOuterAlt(localctx, 53);
            this.state = 5613;
            this.match(PlSqlParser.NCLOB);
            break;
        case PlSqlParser.MLSLABEL:
            this.enterOuterAlt(localctx, 54);
            this.state = 5614;
            this.match(PlSqlParser.MLSLABEL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bind_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_bind_variable;
    return this;
}

Bind_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bind_variableContext.prototype.constructor = Bind_variableContext;

Bind_variableContext.prototype.BINDVAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.BINDVAR);
    } else {
        return this.getToken(PlSqlParser.BINDVAR, i);
    }
};


Bind_variableContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(PlSqlParser.UNSIGNED_INTEGER, i);
    }
};


Bind_variableContext.prototype.general_element_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(General_element_partContext);
    } else {
        return this.getTypedRuleContext(General_element_partContext,i);
    }
};

Bind_variableContext.prototype.INDICATOR = function() {
    return this.getToken(PlSqlParser.INDICATOR, 0);
};

Bind_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterBind_variable(this);
	}
};

Bind_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitBind_variable(this);
	}
};




PlSqlParser.Bind_variableContext = Bind_variableContext;

PlSqlParser.prototype.bind_variable = function() {

    var localctx = new Bind_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 742, PlSqlParser.RULE_bind_variable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5620;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.BINDVAR:
            this.state = 5617;
            this.match(PlSqlParser.BINDVAR);
            break;
        case PlSqlParser.COLON:
            this.state = 5618;
            this.match(PlSqlParser.COLON);
            this.state = 5619;
            this.match(PlSqlParser.UNSIGNED_INTEGER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5630;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,741,this._ctx);
        if(la_===1) {
            this.state = 5623;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PlSqlParser.INDICATOR) {
                this.state = 5622;
                this.match(PlSqlParser.INDICATOR);
            }

            this.state = 5628;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.BINDVAR:
                this.state = 5625;
                this.match(PlSqlParser.BINDVAR);
                break;
            case PlSqlParser.COLON:
                this.state = 5626;
                this.match(PlSqlParser.COLON);
                this.state = 5627;
                this.match(PlSqlParser.UNSIGNED_INTEGER);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 5636;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,742,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5632;
                this.match(PlSqlParser.PERIOD);
                this.state = 5633;
                this.general_element_part(); 
            }
            this.state = 5638;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,742,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_general_element;
    return this;
}

General_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_elementContext.prototype.constructor = General_elementContext;

General_elementContext.prototype.general_element_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(General_element_partContext);
    } else {
        return this.getTypedRuleContext(General_element_partContext,i);
    }
};

General_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGeneral_element(this);
	}
};

General_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGeneral_element(this);
	}
};




PlSqlParser.General_elementContext = General_elementContext;

PlSqlParser.prototype.general_element = function() {

    var localctx = new General_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 744, PlSqlParser.RULE_general_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5639;
        this.general_element_part();
        this.state = 5644;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,743,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5640;
                this.match(PlSqlParser.PERIOD);
                this.state = 5641;
                this.general_element_part(); 
            }
            this.state = 5646;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,743,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function General_element_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_general_element_part;
    return this;
}

General_element_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
General_element_partContext.prototype.constructor = General_element_partContext;

General_element_partContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

General_element_partContext.prototype.INTRODUCER = function() {
    return this.getToken(PlSqlParser.INTRODUCER, 0);
};

General_element_partContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

General_element_partContext.prototype.link_name = function() {
    return this.getTypedRuleContext(Link_nameContext,0);
};

General_element_partContext.prototype.function_argument = function() {
    return this.getTypedRuleContext(Function_argumentContext,0);
};

General_element_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterGeneral_element_part(this);
	}
};

General_element_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitGeneral_element_part(this);
	}
};




PlSqlParser.General_element_partContext = General_element_partContext;

PlSqlParser.prototype.general_element_part = function() {

    var localctx = new General_element_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 746, PlSqlParser.RULE_general_element_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INTRODUCER) {
            this.state = 5647;
            this.match(PlSqlParser.INTRODUCER);
            this.state = 5648;
            this.char_set_name();
        }

        this.state = 5651;
        this.id_expression();
        this.state = 5656;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,745,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5652;
                this.match(PlSqlParser.PERIOD);
                this.state = 5653;
                this.id_expression(); 
            }
            this.state = 5658;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,745,this._ctx);
        }

        this.state = 5661;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
        if(la_===1) {
            this.state = 5659;
            this.match(PlSqlParser.AT_SIGN);
            this.state = 5660;
            this.link_name();

        }
        this.state = 5664;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,747,this._ctx);
        if(la_===1) {
            this.state = 5663;
            this.function_argument();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_table_element;
    return this;
}

Table_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_elementContext.prototype.constructor = Table_elementContext;

Table_elementContext.prototype.id_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_expressionContext);
    } else {
        return this.getTypedRuleContext(Id_expressionContext,i);
    }
};

Table_elementContext.prototype.INTRODUCER = function() {
    return this.getToken(PlSqlParser.INTRODUCER, 0);
};

Table_elementContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

Table_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterTable_element(this);
	}
};

Table_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitTable_element(this);
	}
};




PlSqlParser.Table_elementContext = Table_elementContext;

PlSqlParser.prototype.table_element = function() {

    var localctx = new Table_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 748, PlSqlParser.RULE_table_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INTRODUCER) {
            this.state = 5666;
            this.match(PlSqlParser.INTRODUCER);
            this.state = 5667;
            this.char_set_name();
        }

        this.state = 5670;
        this.id_expression();
        this.state = 5675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PlSqlParser.PERIOD) {
            this.state = 5671;
            this.match(PlSqlParser.PERIOD);
            this.state = 5672;
            this.id_expression();
            this.state = 5677;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.TIMESTAMP = function() {
    return this.getToken(PlSqlParser.TIMESTAMP, 0);
};

ConstantContext.prototype.quoted_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Quoted_stringContext);
    } else {
        return this.getTypedRuleContext(Quoted_stringContext,i);
    }
};

ConstantContext.prototype.bind_variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bind_variableContext);
    } else {
        return this.getTypedRuleContext(Bind_variableContext,i);
    }
};

ConstantContext.prototype.AT = function() {
    return this.getToken(PlSqlParser.AT, 0);
};

ConstantContext.prototype.TIME = function() {
    return this.getToken(PlSqlParser.TIME, 0);
};

ConstantContext.prototype.ZONE = function() {
    return this.getToken(PlSqlParser.ZONE, 0);
};

ConstantContext.prototype.INTERVAL = function() {
    return this.getToken(PlSqlParser.INTERVAL, 0);
};

ConstantContext.prototype.YEAR = function() {
    return this.getToken(PlSqlParser.YEAR, 0);
};

ConstantContext.prototype.MONTH = function() {
    return this.getToken(PlSqlParser.MONTH, 0);
};

ConstantContext.prototype.DAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.DAY);
    } else {
        return this.getToken(PlSqlParser.DAY, i);
    }
};


ConstantContext.prototype.HOUR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.HOUR);
    } else {
        return this.getToken(PlSqlParser.HOUR, i);
    }
};


ConstantContext.prototype.MINUTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.MINUTE);
    } else {
        return this.getToken(PlSqlParser.MINUTE, i);
    }
};


ConstantContext.prototype.SECOND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.SECOND);
    } else {
        return this.getToken(PlSqlParser.SECOND, i);
    }
};


ConstantContext.prototype.general_element_part = function() {
    return this.getTypedRuleContext(General_element_partContext,0);
};

ConstantContext.prototype.TO = function() {
    return this.getToken(PlSqlParser.TO, 0);
};

ConstantContext.prototype.UNSIGNED_INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PlSqlParser.UNSIGNED_INTEGER);
    } else {
        return this.getToken(PlSqlParser.UNSIGNED_INTEGER, i);
    }
};


ConstantContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

ConstantContext.prototype.DATE = function() {
    return this.getToken(PlSqlParser.DATE, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(PlSqlParser.NULL, 0);
};

ConstantContext.prototype.TRUE = function() {
    return this.getToken(PlSqlParser.TRUE, 0);
};

ConstantContext.prototype.FALSE = function() {
    return this.getToken(PlSqlParser.FALSE, 0);
};

ConstantContext.prototype.DBTIMEZONE = function() {
    return this.getToken(PlSqlParser.DBTIMEZONE, 0);
};

ConstantContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(PlSqlParser.SESSIONTIMEZONE, 0);
};

ConstantContext.prototype.MINVALUE = function() {
    return this.getToken(PlSqlParser.MINVALUE, 0);
};

ConstantContext.prototype.MAXVALUE = function() {
    return this.getToken(PlSqlParser.MAXVALUE, 0);
};

ConstantContext.prototype.DEFAULT = function() {
    return this.getToken(PlSqlParser.DEFAULT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitConstant(this);
	}
};




PlSqlParser.ConstantContext = ConstantContext;

PlSqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 750, PlSqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 5740;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 1);
            this.state = 5678;
            this.match(PlSqlParser.TIMESTAMP);
            this.state = 5681;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.CHAR_STRING:
                this.state = 5679;
                this.quoted_string();
                break;
            case PlSqlParser.BINDVAR:
            case PlSqlParser.COLON:
                this.state = 5680;
                this.bind_variable();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5687;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
            if(la_===1) {
                this.state = 5683;
                this.match(PlSqlParser.AT);
                this.state = 5684;
                this.match(PlSqlParser.TIME);
                this.state = 5685;
                this.match(PlSqlParser.ZONE);
                this.state = 5686;
                this.quoted_string();

            }
            break;
        case PlSqlParser.INTERVAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5689;
            this.match(PlSqlParser.INTERVAL);
            this.state = 5693;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
            case PlSqlParser.CHAR_STRING:
                this.state = 5690;
                this.quoted_string();
                break;
            case PlSqlParser.BINDVAR:
            case PlSqlParser.COLON:
                this.state = 5691;
                this.bind_variable();
                break;
            case PlSqlParser.ADD:
            case PlSqlParser.AFTER:
            case PlSqlParser.AGENT:
            case PlSqlParser.AGGREGATE:
            case PlSqlParser.A_LETTER:
            case PlSqlParser.ANALYZE:
            case PlSqlParser.ARRAY:
            case PlSqlParser.ASSOCIATE:
            case PlSqlParser.AT:
            case PlSqlParser.ATTRIBUTE:
            case PlSqlParser.AUDIT:
            case PlSqlParser.AUTHID:
            case PlSqlParser.AUTO:
            case PlSqlParser.AUTOMATIC:
            case PlSqlParser.AUTONOMOUS_TRANSACTION:
            case PlSqlParser.BATCH:
            case PlSqlParser.BEFORE:
            case PlSqlParser.BFILE:
            case PlSqlParser.BINARY_DOUBLE:
            case PlSqlParser.BINARY_FLOAT:
            case PlSqlParser.BINARY_INTEGER:
            case PlSqlParser.BLOB:
            case PlSqlParser.BLOCK:
            case PlSqlParser.BODY:
            case PlSqlParser.BOOLEAN:
            case PlSqlParser.BOTH:
            case PlSqlParser.BULK:
            case PlSqlParser.BYTE:
            case PlSqlParser.CALL:
            case PlSqlParser.CANONICAL:
            case PlSqlParser.CASCADE:
            case PlSqlParser.CAST:
            case PlSqlParser.CHARACTER:
            case PlSqlParser.CHAR:
            case PlSqlParser.CHAR_CS:
            case PlSqlParser.CHR:
            case PlSqlParser.C_LETTER:
            case PlSqlParser.CLOB:
            case PlSqlParser.CLOSE:
            case PlSqlParser.CLUSTER:
            case PlSqlParser.COLLECT:
            case PlSqlParser.COLUMNS:
            case PlSqlParser.COMMENT:
            case PlSqlParser.COMMIT:
            case PlSqlParser.COMMITTED:
            case PlSqlParser.COMPATIBILITY:
            case PlSqlParser.COMPILE:
            case PlSqlParser.COMPOUND:
            case PlSqlParser.CONSTANT:
            case PlSqlParser.CONSTRAINT:
            case PlSqlParser.CONSTRAINTS:
            case PlSqlParser.CONSTRUCTOR:
            case PlSqlParser.CONTENT:
            case PlSqlParser.CONTEXT:
            case PlSqlParser.CONTINUE:
            case PlSqlParser.CONVERT:
            case PlSqlParser.CORRUPT_XID_ALL:
            case PlSqlParser.CORRUPT_XID:
            case PlSqlParser.COST:
            case PlSqlParser.COUNT:
            case PlSqlParser.CROSS:
            case PlSqlParser.CUBE:
            case PlSqlParser.CURRENT_USER:
            case PlSqlParser.CURSOR:
            case PlSqlParser.CUSTOMDATUM:
            case PlSqlParser.CYCLE:
            case PlSqlParser.DATABASE:
            case PlSqlParser.DATA:
            case PlSqlParser.DAY:
            case PlSqlParser.DB_ROLE_CHANGE:
            case PlSqlParser.DBTIMEZONE:
            case PlSqlParser.DDL:
            case PlSqlParser.DEBUG:
            case PlSqlParser.DEC:
            case PlSqlParser.DECIMAL:
            case PlSqlParser.DECOMPOSE:
            case PlSqlParser.DECREMENT:
            case PlSqlParser.DEFAULTS:
            case PlSqlParser.DEFERRED:
            case PlSqlParser.DEFINER:
            case PlSqlParser.DELETE:
            case PlSqlParser.DETERMINISTIC:
            case PlSqlParser.DIMENSION:
            case PlSqlParser.DISABLE:
            case PlSqlParser.DISASSOCIATE:
            case PlSqlParser.DOCUMENT:
            case PlSqlParser.DOUBLE:
            case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
            case PlSqlParser.EACH:
            case PlSqlParser.ELEMENT:
            case PlSqlParser.EMPTY:
            case PlSqlParser.ENABLE:
            case PlSqlParser.ENCODING:
            case PlSqlParser.ENTITYESCAPING:
            case PlSqlParser.ERR:
            case PlSqlParser.ERRORS:
            case PlSqlParser.ESCAPE:
            case PlSqlParser.EVALNAME:
            case PlSqlParser.EXCEPTION:
            case PlSqlParser.EXCEPTION_INIT:
            case PlSqlParser.EXCEPTIONS:
            case PlSqlParser.EXCLUDE:
            case PlSqlParser.EXECUTE:
            case PlSqlParser.EXIT:
            case PlSqlParser.EXPLAIN:
            case PlSqlParser.EXTERNAL:
            case PlSqlParser.EXTRACT:
            case PlSqlParser.FAILURE:
            case PlSqlParser.FINAL:
            case PlSqlParser.FIRST:
            case PlSqlParser.FIRST_VALUE:
            case PlSqlParser.FLOAT:
            case PlSqlParser.FOLLOWING:
            case PlSqlParser.FOLLOWS:
            case PlSqlParser.FORALL:
            case PlSqlParser.FORCE:
            case PlSqlParser.FULL:
            case PlSqlParser.FUNCTION:
            case PlSqlParser.GROUPING:
            case PlSqlParser.HASH:
            case PlSqlParser.HIDE:
            case PlSqlParser.HOUR:
            case PlSqlParser.IGNORE:
            case PlSqlParser.IMMEDIATE:
            case PlSqlParser.INCLUDE:
            case PlSqlParser.INCLUDING:
            case PlSqlParser.INCREMENT:
            case PlSqlParser.INDENT:
            case PlSqlParser.INDEXED:
            case PlSqlParser.INDICATOR:
            case PlSqlParser.INDICES:
            case PlSqlParser.INFINITE:
            case PlSqlParser.INLINE:
            case PlSqlParser.INNER:
            case PlSqlParser.INOUT:
            case PlSqlParser.INSTANTIABLE:
            case PlSqlParser.INSTEAD:
            case PlSqlParser.INTEGER:
            case PlSqlParser.INTERVAL:
            case PlSqlParser.INT:
            case PlSqlParser.INVALIDATE:
            case PlSqlParser.ISOLATION:
            case PlSqlParser.ITERATE:
            case PlSqlParser.JAVA:
            case PlSqlParser.JOIN:
            case PlSqlParser.KEEP:
            case PlSqlParser.KEY:
            case PlSqlParser.LANGUAGE:
            case PlSqlParser.LAST:
            case PlSqlParser.LAST_VALUE:
            case PlSqlParser.LEADING:
            case PlSqlParser.LEFT:
            case PlSqlParser.LEVEL:
            case PlSqlParser.LIBRARY:
            case PlSqlParser.LIKE2:
            case PlSqlParser.LIKE4:
            case PlSqlParser.LIKEC:
            case PlSqlParser.LIMIT:
            case PlSqlParser.LOCAL:
            case PlSqlParser.LOCKED:
            case PlSqlParser.LOG:
            case PlSqlParser.LOGOFF:
            case PlSqlParser.LOGON:
            case PlSqlParser.LONG:
            case PlSqlParser.LOOP:
            case PlSqlParser.MAIN:
            case PlSqlParser.MAP:
            case PlSqlParser.MATCHED:
            case PlSqlParser.MAXVALUE:
            case PlSqlParser.MEASURES:
            case PlSqlParser.MEMBER:
            case PlSqlParser.MERGE:
            case PlSqlParser.MINUTE:
            case PlSqlParser.MINVALUE:
            case PlSqlParser.MLSLABEL:
            case PlSqlParser.MODEL:
            case PlSqlParser.MODIFY:
            case PlSqlParser.MONTH:
            case PlSqlParser.MULTISET:
            case PlSqlParser.NAME:
            case PlSqlParser.NAN:
            case PlSqlParser.NATURAL:
            case PlSqlParser.NATURALN:
            case PlSqlParser.NAV:
            case PlSqlParser.NCHAR_CS:
            case PlSqlParser.NCHAR:
            case PlSqlParser.NCLOB:
            case PlSqlParser.NESTED:
            case PlSqlParser.NEW:
            case PlSqlParser.NOAUDIT:
            case PlSqlParser.NOCOPY:
            case PlSqlParser.NOCYCLE:
            case PlSqlParser.NOENTITYESCAPING:
            case PlSqlParser.NONE:
            case PlSqlParser.NO:
            case PlSqlParser.NOSCHEMACHECK:
            case PlSqlParser.NULLS:
            case PlSqlParser.NUMBER:
            case PlSqlParser.NUMERIC:
            case PlSqlParser.NVARCHAR2:
            case PlSqlParser.OBJECT:
            case PlSqlParser.OFF:
            case PlSqlParser.OID:
            case PlSqlParser.OLD:
            case PlSqlParser.ONLY:
            case PlSqlParser.OPEN:
            case PlSqlParser.ORADATA:
            case PlSqlParser.ORDINALITY:
            case PlSqlParser.OSERROR:
            case PlSqlParser.OUTER:
            case PlSqlParser.OUT:
            case PlSqlParser.OVER:
            case PlSqlParser.OVERRIDING:
            case PlSqlParser.PACKAGE:
            case PlSqlParser.PARALLEL_ENABLE:
            case PlSqlParser.PARAMETERS:
            case PlSqlParser.PARENT:
            case PlSqlParser.PARTITION:
            case PlSqlParser.PASSING:
            case PlSqlParser.PATH:
            case PlSqlParser.PIPELINED:
            case PlSqlParser.PLAN:
            case PlSqlParser.PLS_INTEGER:
            case PlSqlParser.POSITIVEN:
            case PlSqlParser.POSITIVE:
            case PlSqlParser.PRAGMA:
            case PlSqlParser.PRECEDING:
            case PlSqlParser.PRECISION:
            case PlSqlParser.PRESENT:
            case PlSqlParser.RAISE:
            case PlSqlParser.RANGE:
            case PlSqlParser.RAW:
            case PlSqlParser.READ:
            case PlSqlParser.REAL:
            case PlSqlParser.RECORD:
            case PlSqlParser.REFERENCE:
            case PlSqlParser.REFERENCING:
            case PlSqlParser.REF:
            case PlSqlParser.REJECT:
            case PlSqlParser.RELIES_ON:
            case PlSqlParser.RENAME:
            case PlSqlParser.REPLACE:
            case PlSqlParser.RESPECT:
            case PlSqlParser.RESTRICT_REFERENCES:
            case PlSqlParser.RESULT_CACHE:
            case PlSqlParser.RESULT:
            case PlSqlParser.RETURNING:
            case PlSqlParser.RETURN:
            case PlSqlParser.REUSE:
            case PlSqlParser.REVERSE:
            case PlSqlParser.RIGHT:
            case PlSqlParser.ROLLBACK:
            case PlSqlParser.ROLLUP:
            case PlSqlParser.ROWID:
            case PlSqlParser.ROW:
            case PlSqlParser.ROWS:
            case PlSqlParser.RULES:
            case PlSqlParser.SAMPLE:
            case PlSqlParser.SAVEPOINT:
            case PlSqlParser.SAVE:
            case PlSqlParser.SCHEMACHECK:
            case PlSqlParser.SCHEMA:
            case PlSqlParser.SCN:
            case PlSqlParser.SECOND:
            case PlSqlParser.SEED:
            case PlSqlParser.SEGMENT:
            case PlSqlParser.SELF:
            case PlSqlParser.SEQUENTIAL:
            case PlSqlParser.SERIALIZABLE:
            case PlSqlParser.SERIALLY_REUSABLE:
            case PlSqlParser.SERVERERROR:
            case PlSqlParser.SESSIONTIMEZONE:
            case PlSqlParser.SET:
            case PlSqlParser.SETS:
            case PlSqlParser.SETTINGS:
            case PlSqlParser.SHOW:
            case PlSqlParser.SHUTDOWN:
            case PlSqlParser.SIBLINGS:
            case PlSqlParser.SIGNTYPE:
            case PlSqlParser.SIMPLE_INTEGER:
            case PlSqlParser.SINGLE:
            case PlSqlParser.SKIP_:
            case PlSqlParser.SMALLINT:
            case PlSqlParser.SNAPSHOT:
            case PlSqlParser.SOME:
            case PlSqlParser.SPECIFICATION:
            case PlSqlParser.SQLDATA:
            case PlSqlParser.SQLERROR:
            case PlSqlParser.STANDALONE:
            case PlSqlParser.STARTUP:
            case PlSqlParser.STATEMENT_ID:
            case PlSqlParser.STATEMENT:
            case PlSqlParser.STATIC:
            case PlSqlParser.STATISTICS:
            case PlSqlParser.STRING:
            case PlSqlParser.SUBMULTISET:
            case PlSqlParser.SUBPARTITION:
            case PlSqlParser.SUBSTITUTABLE:
            case PlSqlParser.SUBTYPE:
            case PlSqlParser.SUCCESS:
            case PlSqlParser.SUSPEND:
            case PlSqlParser.TEMPORARY:
            case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP:
            case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
            case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
            case PlSqlParser.TIME:
            case PlSqlParser.TIMEZONE_ABBR:
            case PlSqlParser.TIMEZONE_HOUR:
            case PlSqlParser.TIMEZONE_MINUTE:
            case PlSqlParser.TIMEZONE_REGION:
            case PlSqlParser.TRAILING:
            case PlSqlParser.TRANSACTION:
            case PlSqlParser.TRANSLATE:
            case PlSqlParser.TREAT:
            case PlSqlParser.TRIGGER:
            case PlSqlParser.TRUNCATE:
            case PlSqlParser.TYPE:
            case PlSqlParser.UNBOUNDED:
            case PlSqlParser.UNDER:
            case PlSqlParser.UNLIMITED:
            case PlSqlParser.UNTIL:
            case PlSqlParser.UPDATED:
            case PlSqlParser.UPSERT:
            case PlSqlParser.UROWID:
            case PlSqlParser.USE:
            case PlSqlParser.VALIDATE:
            case PlSqlParser.VALUE:
            case PlSqlParser.VARCHAR2:
            case PlSqlParser.VARCHAR:
            case PlSqlParser.VARIABLE:
            case PlSqlParser.VARRAY:
            case PlSqlParser.VARYING:
            case PlSqlParser.VERSIONS:
            case PlSqlParser.VERSION:
            case PlSqlParser.WAIT:
            case PlSqlParser.WARNING:
            case PlSqlParser.WELLFORMED:
            case PlSqlParser.WHENEVER:
            case PlSqlParser.WHILE:
            case PlSqlParser.WITHIN:
            case PlSqlParser.WORK:
            case PlSqlParser.WRITE:
            case PlSqlParser.XMLAGG:
            case PlSqlParser.XMLATTRIBUTES:
            case PlSqlParser.XMLCAST:
            case PlSqlParser.XMLCOLATTVAL:
            case PlSqlParser.XMLELEMENT:
            case PlSqlParser.XMLEXISTS:
            case PlSqlParser.XMLFOREST:
            case PlSqlParser.XMLNAMESPACES:
            case PlSqlParser.XMLPARSE:
            case PlSqlParser.XMLPI:
            case PlSqlParser.XMLQUERY:
            case PlSqlParser.XMLROOT:
            case PlSqlParser.XMLSERIALIZE:
            case PlSqlParser.XMLTABLE:
            case PlSqlParser.XML:
            case PlSqlParser.YEAR:
            case PlSqlParser.YES:
            case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
            case PlSqlParser.ZONE:
            case PlSqlParser.PREDICTION:
            case PlSqlParser.PREDICTION_BOUNDS:
            case PlSqlParser.PREDICTION_COST:
            case PlSqlParser.PREDICTION_DETAILS:
            case PlSqlParser.PREDICTION_PROBABILITY:
            case PlSqlParser.PREDICTION_SET:
            case PlSqlParser.CUME_DIST:
            case PlSqlParser.DENSE_RANK:
            case PlSqlParser.LISTAGG:
            case PlSqlParser.PERCENT_RANK:
            case PlSqlParser.PERCENTILE_CONT:
            case PlSqlParser.PERCENTILE_DISC:
            case PlSqlParser.RANK:
            case PlSqlParser.AVG:
            case PlSqlParser.CORR:
            case PlSqlParser.COVAR_:
            case PlSqlParser.LAG:
            case PlSqlParser.LEAD:
            case PlSqlParser.MAX:
            case PlSqlParser.MEDIAN:
            case PlSqlParser.MIN:
            case PlSqlParser.NTILE:
            case PlSqlParser.RATIO_TO_REPORT:
            case PlSqlParser.REGR_:
            case PlSqlParser.ROW_NUMBER:
            case PlSqlParser.SUBSTR:
            case PlSqlParser.TRIM:
            case PlSqlParser.SUM:
            case PlSqlParser.STDDEV:
            case PlSqlParser.VAR_:
            case PlSqlParser.VARIANCE:
            case PlSqlParser.DELIMITED_ID:
            case PlSqlParser.INTRODUCER:
            case PlSqlParser.REGULAR_ID:
                this.state = 5692;
                this.general_element_part();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5695;
            _la = this._input.LA(1);
            if(!(_la===PlSqlParser.DAY || _la===PlSqlParser.HOUR || _la===PlSqlParser.MINUTE || _la===PlSqlParser.MONTH || _la===PlSqlParser.SECOND || _la===PlSqlParser.YEAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5709;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,756,this._ctx);
            if(la_===1) {
                this.state = 5696;
                this.match(PlSqlParser.LEFT_PAREN);
                this.state = 5699;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.UNSIGNED_INTEGER:
                    this.state = 5697;
                    this.match(PlSqlParser.UNSIGNED_INTEGER);
                    break;
                case PlSqlParser.BINDVAR:
                case PlSqlParser.COLON:
                    this.state = 5698;
                    this.bind_variable();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PlSqlParser.COMMA) {
                    this.state = 5701;
                    this.match(PlSqlParser.COMMA);
                    this.state = 5704;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case PlSqlParser.UNSIGNED_INTEGER:
                        this.state = 5702;
                        this.match(PlSqlParser.UNSIGNED_INTEGER);
                        break;
                    case PlSqlParser.BINDVAR:
                    case PlSqlParser.COLON:
                        this.state = 5703;
                        this.bind_variable();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                }

                this.state = 5708;
                this.match(PlSqlParser.RIGHT_PAREN);

            }
            this.state = 5726;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
            if(la_===1) {
                this.state = 5711;
                this.match(PlSqlParser.TO);
                this.state = 5724;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case PlSqlParser.DAY:
                    this.state = 5712;
                    this.match(PlSqlParser.DAY);
                    break;
                case PlSqlParser.HOUR:
                    this.state = 5713;
                    this.match(PlSqlParser.HOUR);
                    break;
                case PlSqlParser.MINUTE:
                    this.state = 5714;
                    this.match(PlSqlParser.MINUTE);
                    break;
                case PlSqlParser.SECOND:
                    this.state = 5715;
                    this.match(PlSqlParser.SECOND);
                    this.state = 5722;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,758,this._ctx);
                    if(la_===1) {
                        this.state = 5716;
                        this.match(PlSqlParser.LEFT_PAREN);
                        this.state = 5719;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case PlSqlParser.UNSIGNED_INTEGER:
                            this.state = 5717;
                            this.match(PlSqlParser.UNSIGNED_INTEGER);
                            break;
                        case PlSqlParser.BINDVAR:
                        case PlSqlParser.COLON:
                            this.state = 5718;
                            this.bind_variable();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 5721;
                        this.match(PlSqlParser.RIGHT_PAREN);

                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }

            }
            break;
        case PlSqlParser.UNSIGNED_INTEGER:
        case PlSqlParser.APPROXIMATE_NUM_LIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 5728;
            this.numeric();
            break;
        case PlSqlParser.DATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 5729;
            this.match(PlSqlParser.DATE);
            this.state = 5730;
            this.quoted_string();
            break;
        case PlSqlParser.NATIONAL_CHAR_STRING_LIT:
        case PlSqlParser.CHAR_STRING:
            this.enterOuterAlt(localctx, 5);
            this.state = 5731;
            this.quoted_string();
            break;
        case PlSqlParser.NULL:
            this.enterOuterAlt(localctx, 6);
            this.state = 5732;
            this.match(PlSqlParser.NULL);
            break;
        case PlSqlParser.TRUE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5733;
            this.match(PlSqlParser.TRUE);
            break;
        case PlSqlParser.FALSE:
            this.enterOuterAlt(localctx, 8);
            this.state = 5734;
            this.match(PlSqlParser.FALSE);
            break;
        case PlSqlParser.DBTIMEZONE:
            this.enterOuterAlt(localctx, 9);
            this.state = 5735;
            this.match(PlSqlParser.DBTIMEZONE);
            break;
        case PlSqlParser.SESSIONTIMEZONE:
            this.enterOuterAlt(localctx, 10);
            this.state = 5736;
            this.match(PlSqlParser.SESSIONTIMEZONE);
            break;
        case PlSqlParser.MINVALUE:
            this.enterOuterAlt(localctx, 11);
            this.state = 5737;
            this.match(PlSqlParser.MINVALUE);
            break;
        case PlSqlParser.MAXVALUE:
            this.enterOuterAlt(localctx, 12);
            this.state = 5738;
            this.match(PlSqlParser.MAXVALUE);
            break;
        case PlSqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 13);
            this.state = 5739;
            this.match(PlSqlParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_numeric;
    return this;
}

NumericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericContext.prototype.constructor = NumericContext;

NumericContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(PlSqlParser.UNSIGNED_INTEGER, 0);
};

NumericContext.prototype.APPROXIMATE_NUM_LIT = function() {
    return this.getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0);
};

NumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNumeric(this);
	}
};

NumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNumeric(this);
	}
};




PlSqlParser.NumericContext = NumericContext;

PlSqlParser.prototype.numeric = function() {

    var localctx = new NumericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 752, PlSqlParser.RULE_numeric);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5742;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.UNSIGNED_INTEGER || _la===PlSqlParser.APPROXIMATE_NUM_LIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_negativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_numeric_negative;
    return this;
}

Numeric_negativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_negativeContext.prototype.constructor = Numeric_negativeContext;

Numeric_negativeContext.prototype.MINUS_SIGN = function() {
    return this.getToken(PlSqlParser.MINUS_SIGN, 0);
};

Numeric_negativeContext.prototype.numeric = function() {
    return this.getTypedRuleContext(NumericContext,0);
};

Numeric_negativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNumeric_negative(this);
	}
};

Numeric_negativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNumeric_negative(this);
	}
};




PlSqlParser.Numeric_negativeContext = Numeric_negativeContext;

PlSqlParser.prototype.numeric_negative = function() {

    var localctx = new Numeric_negativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 754, PlSqlParser.RULE_numeric_negative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5744;
        this.match(PlSqlParser.MINUS_SIGN);
        this.state = 5745;
        this.numeric();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_quoted_string;
    return this;
}

Quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quoted_stringContext.prototype.constructor = Quoted_stringContext;

Quoted_stringContext.prototype.CHAR_STRING = function() {
    return this.getToken(PlSqlParser.CHAR_STRING, 0);
};

Quoted_stringContext.prototype.NATIONAL_CHAR_STRING_LIT = function() {
    return this.getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0);
};

Quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterQuoted_string(this);
	}
};

Quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitQuoted_string(this);
	}
};




PlSqlParser.Quoted_stringContext = Quoted_stringContext;

PlSqlParser.prototype.quoted_string = function() {

    var localctx = new Quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 756, PlSqlParser.RULE_quoted_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5747;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.NATIONAL_CHAR_STRING_LIT || _la===PlSqlParser.CHAR_STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.id_expression = function() {
    return this.getTypedRuleContext(Id_expressionContext,0);
};

IdentifierContext.prototype.INTRODUCER = function() {
    return this.getToken(PlSqlParser.INTRODUCER, 0);
};

IdentifierContext.prototype.char_set_name = function() {
    return this.getTypedRuleContext(Char_set_nameContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitIdentifier(this);
	}
};




PlSqlParser.IdentifierContext = IdentifierContext;

PlSqlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 758, PlSqlParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5751;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PlSqlParser.INTRODUCER) {
            this.state = 5749;
            this.match(PlSqlParser.INTRODUCER);
            this.state = 5750;
            this.char_set_name();
        }

        this.state = 5753;
        this.id_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_id_expression;
    return this;
}

Id_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_expressionContext.prototype.constructor = Id_expressionContext;

Id_expressionContext.prototype.regular_id = function() {
    return this.getTypedRuleContext(Regular_idContext,0);
};

Id_expressionContext.prototype.DELIMITED_ID = function() {
    return this.getToken(PlSqlParser.DELIMITED_ID, 0);
};

Id_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterId_expression(this);
	}
};

Id_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitId_expression(this);
	}
};




PlSqlParser.Id_expressionContext = Id_expressionContext;

PlSqlParser.prototype.id_expression = function() {

    var localctx = new Id_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 760, PlSqlParser.RULE_id_expression);
    try {
        this.state = 5757;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PlSqlParser.ADD:
        case PlSqlParser.AFTER:
        case PlSqlParser.AGENT:
        case PlSqlParser.AGGREGATE:
        case PlSqlParser.A_LETTER:
        case PlSqlParser.ANALYZE:
        case PlSqlParser.ARRAY:
        case PlSqlParser.ASSOCIATE:
        case PlSqlParser.AT:
        case PlSqlParser.ATTRIBUTE:
        case PlSqlParser.AUDIT:
        case PlSqlParser.AUTHID:
        case PlSqlParser.AUTO:
        case PlSqlParser.AUTOMATIC:
        case PlSqlParser.AUTONOMOUS_TRANSACTION:
        case PlSqlParser.BATCH:
        case PlSqlParser.BEFORE:
        case PlSqlParser.BFILE:
        case PlSqlParser.BINARY_DOUBLE:
        case PlSqlParser.BINARY_FLOAT:
        case PlSqlParser.BINARY_INTEGER:
        case PlSqlParser.BLOB:
        case PlSqlParser.BLOCK:
        case PlSqlParser.BODY:
        case PlSqlParser.BOOLEAN:
        case PlSqlParser.BOTH:
        case PlSqlParser.BULK:
        case PlSqlParser.BYTE:
        case PlSqlParser.CALL:
        case PlSqlParser.CANONICAL:
        case PlSqlParser.CASCADE:
        case PlSqlParser.CAST:
        case PlSqlParser.CHARACTER:
        case PlSqlParser.CHAR:
        case PlSqlParser.CHAR_CS:
        case PlSqlParser.CHR:
        case PlSqlParser.C_LETTER:
        case PlSqlParser.CLOB:
        case PlSqlParser.CLOSE:
        case PlSqlParser.CLUSTER:
        case PlSqlParser.COLLECT:
        case PlSqlParser.COLUMNS:
        case PlSqlParser.COMMENT:
        case PlSqlParser.COMMIT:
        case PlSqlParser.COMMITTED:
        case PlSqlParser.COMPATIBILITY:
        case PlSqlParser.COMPILE:
        case PlSqlParser.COMPOUND:
        case PlSqlParser.CONSTANT:
        case PlSqlParser.CONSTRAINT:
        case PlSqlParser.CONSTRAINTS:
        case PlSqlParser.CONSTRUCTOR:
        case PlSqlParser.CONTENT:
        case PlSqlParser.CONTEXT:
        case PlSqlParser.CONTINUE:
        case PlSqlParser.CONVERT:
        case PlSqlParser.CORRUPT_XID_ALL:
        case PlSqlParser.CORRUPT_XID:
        case PlSqlParser.COST:
        case PlSqlParser.COUNT:
        case PlSqlParser.CROSS:
        case PlSqlParser.CUBE:
        case PlSqlParser.CURRENT_USER:
        case PlSqlParser.CURSOR:
        case PlSqlParser.CUSTOMDATUM:
        case PlSqlParser.CYCLE:
        case PlSqlParser.DATABASE:
        case PlSqlParser.DATA:
        case PlSqlParser.DAY:
        case PlSqlParser.DB_ROLE_CHANGE:
        case PlSqlParser.DBTIMEZONE:
        case PlSqlParser.DDL:
        case PlSqlParser.DEBUG:
        case PlSqlParser.DEC:
        case PlSqlParser.DECIMAL:
        case PlSqlParser.DECOMPOSE:
        case PlSqlParser.DECREMENT:
        case PlSqlParser.DEFAULTS:
        case PlSqlParser.DEFERRED:
        case PlSqlParser.DEFINER:
        case PlSqlParser.DELETE:
        case PlSqlParser.DETERMINISTIC:
        case PlSqlParser.DIMENSION:
        case PlSqlParser.DISABLE:
        case PlSqlParser.DISASSOCIATE:
        case PlSqlParser.DOCUMENT:
        case PlSqlParser.DOUBLE:
        case PlSqlParser.DSINTERVAL_UNCONSTRAINED:
        case PlSqlParser.EACH:
        case PlSqlParser.ELEMENT:
        case PlSqlParser.EMPTY:
        case PlSqlParser.ENABLE:
        case PlSqlParser.ENCODING:
        case PlSqlParser.ENTITYESCAPING:
        case PlSqlParser.ERR:
        case PlSqlParser.ERRORS:
        case PlSqlParser.ESCAPE:
        case PlSqlParser.EVALNAME:
        case PlSqlParser.EXCEPTION:
        case PlSqlParser.EXCEPTION_INIT:
        case PlSqlParser.EXCEPTIONS:
        case PlSqlParser.EXCLUDE:
        case PlSqlParser.EXECUTE:
        case PlSqlParser.EXIT:
        case PlSqlParser.EXPLAIN:
        case PlSqlParser.EXTERNAL:
        case PlSqlParser.EXTRACT:
        case PlSqlParser.FAILURE:
        case PlSqlParser.FINAL:
        case PlSqlParser.FIRST:
        case PlSqlParser.FIRST_VALUE:
        case PlSqlParser.FLOAT:
        case PlSqlParser.FOLLOWING:
        case PlSqlParser.FOLLOWS:
        case PlSqlParser.FORALL:
        case PlSqlParser.FORCE:
        case PlSqlParser.FULL:
        case PlSqlParser.FUNCTION:
        case PlSqlParser.GROUPING:
        case PlSqlParser.HASH:
        case PlSqlParser.HIDE:
        case PlSqlParser.HOUR:
        case PlSqlParser.IGNORE:
        case PlSqlParser.IMMEDIATE:
        case PlSqlParser.INCLUDE:
        case PlSqlParser.INCLUDING:
        case PlSqlParser.INCREMENT:
        case PlSqlParser.INDENT:
        case PlSqlParser.INDEXED:
        case PlSqlParser.INDICATOR:
        case PlSqlParser.INDICES:
        case PlSqlParser.INFINITE:
        case PlSqlParser.INLINE:
        case PlSqlParser.INNER:
        case PlSqlParser.INOUT:
        case PlSqlParser.INSTANTIABLE:
        case PlSqlParser.INSTEAD:
        case PlSqlParser.INTEGER:
        case PlSqlParser.INTERVAL:
        case PlSqlParser.INT:
        case PlSqlParser.INVALIDATE:
        case PlSqlParser.ISOLATION:
        case PlSqlParser.ITERATE:
        case PlSqlParser.JAVA:
        case PlSqlParser.JOIN:
        case PlSqlParser.KEEP:
        case PlSqlParser.KEY:
        case PlSqlParser.LANGUAGE:
        case PlSqlParser.LAST:
        case PlSqlParser.LAST_VALUE:
        case PlSqlParser.LEADING:
        case PlSqlParser.LEFT:
        case PlSqlParser.LEVEL:
        case PlSqlParser.LIBRARY:
        case PlSqlParser.LIKE2:
        case PlSqlParser.LIKE4:
        case PlSqlParser.LIKEC:
        case PlSqlParser.LIMIT:
        case PlSqlParser.LOCAL:
        case PlSqlParser.LOCKED:
        case PlSqlParser.LOG:
        case PlSqlParser.LOGOFF:
        case PlSqlParser.LOGON:
        case PlSqlParser.LONG:
        case PlSqlParser.LOOP:
        case PlSqlParser.MAIN:
        case PlSqlParser.MAP:
        case PlSqlParser.MATCHED:
        case PlSqlParser.MAXVALUE:
        case PlSqlParser.MEASURES:
        case PlSqlParser.MEMBER:
        case PlSqlParser.MERGE:
        case PlSqlParser.MINUTE:
        case PlSqlParser.MINVALUE:
        case PlSqlParser.MLSLABEL:
        case PlSqlParser.MODEL:
        case PlSqlParser.MODIFY:
        case PlSqlParser.MONTH:
        case PlSqlParser.MULTISET:
        case PlSqlParser.NAME:
        case PlSqlParser.NAN:
        case PlSqlParser.NATURAL:
        case PlSqlParser.NATURALN:
        case PlSqlParser.NAV:
        case PlSqlParser.NCHAR_CS:
        case PlSqlParser.NCHAR:
        case PlSqlParser.NCLOB:
        case PlSqlParser.NESTED:
        case PlSqlParser.NEW:
        case PlSqlParser.NOAUDIT:
        case PlSqlParser.NOCOPY:
        case PlSqlParser.NOCYCLE:
        case PlSqlParser.NOENTITYESCAPING:
        case PlSqlParser.NONE:
        case PlSqlParser.NO:
        case PlSqlParser.NOSCHEMACHECK:
        case PlSqlParser.NULLS:
        case PlSqlParser.NUMBER:
        case PlSqlParser.NUMERIC:
        case PlSqlParser.NVARCHAR2:
        case PlSqlParser.OBJECT:
        case PlSqlParser.OFF:
        case PlSqlParser.OID:
        case PlSqlParser.OLD:
        case PlSqlParser.ONLY:
        case PlSqlParser.OPEN:
        case PlSqlParser.ORADATA:
        case PlSqlParser.ORDINALITY:
        case PlSqlParser.OSERROR:
        case PlSqlParser.OUTER:
        case PlSqlParser.OUT:
        case PlSqlParser.OVER:
        case PlSqlParser.OVERRIDING:
        case PlSqlParser.PACKAGE:
        case PlSqlParser.PARALLEL_ENABLE:
        case PlSqlParser.PARAMETERS:
        case PlSqlParser.PARENT:
        case PlSqlParser.PARTITION:
        case PlSqlParser.PASSING:
        case PlSqlParser.PATH:
        case PlSqlParser.PIPELINED:
        case PlSqlParser.PLAN:
        case PlSqlParser.PLS_INTEGER:
        case PlSqlParser.POSITIVEN:
        case PlSqlParser.POSITIVE:
        case PlSqlParser.PRAGMA:
        case PlSqlParser.PRECEDING:
        case PlSqlParser.PRECISION:
        case PlSqlParser.PRESENT:
        case PlSqlParser.RAISE:
        case PlSqlParser.RANGE:
        case PlSqlParser.RAW:
        case PlSqlParser.READ:
        case PlSqlParser.REAL:
        case PlSqlParser.RECORD:
        case PlSqlParser.REFERENCE:
        case PlSqlParser.REFERENCING:
        case PlSqlParser.REF:
        case PlSqlParser.REJECT:
        case PlSqlParser.RELIES_ON:
        case PlSqlParser.RENAME:
        case PlSqlParser.REPLACE:
        case PlSqlParser.RESPECT:
        case PlSqlParser.RESTRICT_REFERENCES:
        case PlSqlParser.RESULT_CACHE:
        case PlSqlParser.RESULT:
        case PlSqlParser.RETURNING:
        case PlSqlParser.RETURN:
        case PlSqlParser.REUSE:
        case PlSqlParser.REVERSE:
        case PlSqlParser.RIGHT:
        case PlSqlParser.ROLLBACK:
        case PlSqlParser.ROLLUP:
        case PlSqlParser.ROWID:
        case PlSqlParser.ROW:
        case PlSqlParser.ROWS:
        case PlSqlParser.RULES:
        case PlSqlParser.SAMPLE:
        case PlSqlParser.SAVEPOINT:
        case PlSqlParser.SAVE:
        case PlSqlParser.SCHEMACHECK:
        case PlSqlParser.SCHEMA:
        case PlSqlParser.SCN:
        case PlSqlParser.SECOND:
        case PlSqlParser.SEED:
        case PlSqlParser.SEGMENT:
        case PlSqlParser.SELF:
        case PlSqlParser.SEQUENTIAL:
        case PlSqlParser.SERIALIZABLE:
        case PlSqlParser.SERIALLY_REUSABLE:
        case PlSqlParser.SERVERERROR:
        case PlSqlParser.SESSIONTIMEZONE:
        case PlSqlParser.SET:
        case PlSqlParser.SETS:
        case PlSqlParser.SETTINGS:
        case PlSqlParser.SHOW:
        case PlSqlParser.SHUTDOWN:
        case PlSqlParser.SIBLINGS:
        case PlSqlParser.SIGNTYPE:
        case PlSqlParser.SIMPLE_INTEGER:
        case PlSqlParser.SINGLE:
        case PlSqlParser.SKIP_:
        case PlSqlParser.SMALLINT:
        case PlSqlParser.SNAPSHOT:
        case PlSqlParser.SOME:
        case PlSqlParser.SPECIFICATION:
        case PlSqlParser.SQLDATA:
        case PlSqlParser.SQLERROR:
        case PlSqlParser.STANDALONE:
        case PlSqlParser.STARTUP:
        case PlSqlParser.STATEMENT_ID:
        case PlSqlParser.STATEMENT:
        case PlSqlParser.STATIC:
        case PlSqlParser.STATISTICS:
        case PlSqlParser.STRING:
        case PlSqlParser.SUBMULTISET:
        case PlSqlParser.SUBPARTITION:
        case PlSqlParser.SUBSTITUTABLE:
        case PlSqlParser.SUBTYPE:
        case PlSqlParser.SUCCESS:
        case PlSqlParser.SUSPEND:
        case PlSqlParser.TEMPORARY:
        case PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP:
        case PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED:
        case PlSqlParser.TIMESTAMP_UNCONSTRAINED:
        case PlSqlParser.TIME:
        case PlSqlParser.TIMEZONE_ABBR:
        case PlSqlParser.TIMEZONE_HOUR:
        case PlSqlParser.TIMEZONE_MINUTE:
        case PlSqlParser.TIMEZONE_REGION:
        case PlSqlParser.TRAILING:
        case PlSqlParser.TRANSACTION:
        case PlSqlParser.TRANSLATE:
        case PlSqlParser.TREAT:
        case PlSqlParser.TRIGGER:
        case PlSqlParser.TRUNCATE:
        case PlSqlParser.TYPE:
        case PlSqlParser.UNBOUNDED:
        case PlSqlParser.UNDER:
        case PlSqlParser.UNLIMITED:
        case PlSqlParser.UNTIL:
        case PlSqlParser.UPDATED:
        case PlSqlParser.UPSERT:
        case PlSqlParser.UROWID:
        case PlSqlParser.USE:
        case PlSqlParser.VALIDATE:
        case PlSqlParser.VALUE:
        case PlSqlParser.VARCHAR2:
        case PlSqlParser.VARCHAR:
        case PlSqlParser.VARIABLE:
        case PlSqlParser.VARRAY:
        case PlSqlParser.VARYING:
        case PlSqlParser.VERSIONS:
        case PlSqlParser.VERSION:
        case PlSqlParser.WAIT:
        case PlSqlParser.WARNING:
        case PlSqlParser.WELLFORMED:
        case PlSqlParser.WHENEVER:
        case PlSqlParser.WHILE:
        case PlSqlParser.WITHIN:
        case PlSqlParser.WORK:
        case PlSqlParser.WRITE:
        case PlSqlParser.XMLAGG:
        case PlSqlParser.XMLATTRIBUTES:
        case PlSqlParser.XMLCAST:
        case PlSqlParser.XMLCOLATTVAL:
        case PlSqlParser.XMLELEMENT:
        case PlSqlParser.XMLEXISTS:
        case PlSqlParser.XMLFOREST:
        case PlSqlParser.XMLNAMESPACES:
        case PlSqlParser.XMLPARSE:
        case PlSqlParser.XMLPI:
        case PlSqlParser.XMLQUERY:
        case PlSqlParser.XMLROOT:
        case PlSqlParser.XMLSERIALIZE:
        case PlSqlParser.XMLTABLE:
        case PlSqlParser.XML:
        case PlSqlParser.YEAR:
        case PlSqlParser.YES:
        case PlSqlParser.YMINTERVAL_UNCONSTRAINED:
        case PlSqlParser.ZONE:
        case PlSqlParser.PREDICTION:
        case PlSqlParser.PREDICTION_BOUNDS:
        case PlSqlParser.PREDICTION_COST:
        case PlSqlParser.PREDICTION_DETAILS:
        case PlSqlParser.PREDICTION_PROBABILITY:
        case PlSqlParser.PREDICTION_SET:
        case PlSqlParser.CUME_DIST:
        case PlSqlParser.DENSE_RANK:
        case PlSqlParser.LISTAGG:
        case PlSqlParser.PERCENT_RANK:
        case PlSqlParser.PERCENTILE_CONT:
        case PlSqlParser.PERCENTILE_DISC:
        case PlSqlParser.RANK:
        case PlSqlParser.AVG:
        case PlSqlParser.CORR:
        case PlSqlParser.COVAR_:
        case PlSqlParser.LAG:
        case PlSqlParser.LEAD:
        case PlSqlParser.MAX:
        case PlSqlParser.MEDIAN:
        case PlSqlParser.MIN:
        case PlSqlParser.NTILE:
        case PlSqlParser.RATIO_TO_REPORT:
        case PlSqlParser.REGR_:
        case PlSqlParser.ROW_NUMBER:
        case PlSqlParser.SUBSTR:
        case PlSqlParser.TRIM:
        case PlSqlParser.SUM:
        case PlSqlParser.STDDEV:
        case PlSqlParser.VAR_:
        case PlSqlParser.VARIANCE:
        case PlSqlParser.REGULAR_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5755;
            this.regular_id();
            break;
        case PlSqlParser.DELIMITED_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 5756;
            this.match(PlSqlParser.DELIMITED_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Outer_join_signContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_outer_join_sign;
    return this;
}

Outer_join_signContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_join_signContext.prototype.constructor = Outer_join_signContext;


Outer_join_signContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterOuter_join_sign(this);
	}
};

Outer_join_signContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitOuter_join_sign(this);
	}
};




PlSqlParser.Outer_join_signContext = Outer_join_signContext;

PlSqlParser.prototype.outer_join_sign = function() {

    var localctx = new Outer_join_signContext(this, this._ctx, this.state);
    this.enterRule(localctx, 762, PlSqlParser.RULE_outer_join_sign);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5759;
        this.match(PlSqlParser.LEFT_PAREN);
        this.state = 5760;
        this.match(PlSqlParser.PLUS_SIGN);
        this.state = 5761;
        this.match(PlSqlParser.RIGHT_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Regular_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_regular_id;
    return this;
}

Regular_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Regular_idContext.prototype.constructor = Regular_idContext;

Regular_idContext.prototype.REGULAR_ID = function() {
    return this.getToken(PlSqlParser.REGULAR_ID, 0);
};

Regular_idContext.prototype.A_LETTER = function() {
    return this.getToken(PlSqlParser.A_LETTER, 0);
};

Regular_idContext.prototype.ADD = function() {
    return this.getToken(PlSqlParser.ADD, 0);
};

Regular_idContext.prototype.AFTER = function() {
    return this.getToken(PlSqlParser.AFTER, 0);
};

Regular_idContext.prototype.AGENT = function() {
    return this.getToken(PlSqlParser.AGENT, 0);
};

Regular_idContext.prototype.AGGREGATE = function() {
    return this.getToken(PlSqlParser.AGGREGATE, 0);
};

Regular_idContext.prototype.ANALYZE = function() {
    return this.getToken(PlSqlParser.ANALYZE, 0);
};

Regular_idContext.prototype.ARRAY = function() {
    return this.getToken(PlSqlParser.ARRAY, 0);
};

Regular_idContext.prototype.ASSOCIATE = function() {
    return this.getToken(PlSqlParser.ASSOCIATE, 0);
};

Regular_idContext.prototype.AT = function() {
    return this.getToken(PlSqlParser.AT, 0);
};

Regular_idContext.prototype.ATTRIBUTE = function() {
    return this.getToken(PlSqlParser.ATTRIBUTE, 0);
};

Regular_idContext.prototype.AUDIT = function() {
    return this.getToken(PlSqlParser.AUDIT, 0);
};

Regular_idContext.prototype.AUTHID = function() {
    return this.getToken(PlSqlParser.AUTHID, 0);
};

Regular_idContext.prototype.AUTO = function() {
    return this.getToken(PlSqlParser.AUTO, 0);
};

Regular_idContext.prototype.AUTOMATIC = function() {
    return this.getToken(PlSqlParser.AUTOMATIC, 0);
};

Regular_idContext.prototype.AUTONOMOUS_TRANSACTION = function() {
    return this.getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0);
};

Regular_idContext.prototype.BATCH = function() {
    return this.getToken(PlSqlParser.BATCH, 0);
};

Regular_idContext.prototype.BEFORE = function() {
    return this.getToken(PlSqlParser.BEFORE, 0);
};

Regular_idContext.prototype.BFILE = function() {
    return this.getToken(PlSqlParser.BFILE, 0);
};

Regular_idContext.prototype.BINARY_DOUBLE = function() {
    return this.getToken(PlSqlParser.BINARY_DOUBLE, 0);
};

Regular_idContext.prototype.BINARY_FLOAT = function() {
    return this.getToken(PlSqlParser.BINARY_FLOAT, 0);
};

Regular_idContext.prototype.BINARY_INTEGER = function() {
    return this.getToken(PlSqlParser.BINARY_INTEGER, 0);
};

Regular_idContext.prototype.BLOB = function() {
    return this.getToken(PlSqlParser.BLOB, 0);
};

Regular_idContext.prototype.BLOCK = function() {
    return this.getToken(PlSqlParser.BLOCK, 0);
};

Regular_idContext.prototype.BODY = function() {
    return this.getToken(PlSqlParser.BODY, 0);
};

Regular_idContext.prototype.BOOLEAN = function() {
    return this.getToken(PlSqlParser.BOOLEAN, 0);
};

Regular_idContext.prototype.BOTH = function() {
    return this.getToken(PlSqlParser.BOTH, 0);
};

Regular_idContext.prototype.BULK = function() {
    return this.getToken(PlSqlParser.BULK, 0);
};

Regular_idContext.prototype.BYTE = function() {
    return this.getToken(PlSqlParser.BYTE, 0);
};

Regular_idContext.prototype.C_LETTER = function() {
    return this.getToken(PlSqlParser.C_LETTER, 0);
};

Regular_idContext.prototype.CALL = function() {
    return this.getToken(PlSqlParser.CALL, 0);
};

Regular_idContext.prototype.CANONICAL = function() {
    return this.getToken(PlSqlParser.CANONICAL, 0);
};

Regular_idContext.prototype.CASCADE = function() {
    return this.getToken(PlSqlParser.CASCADE, 0);
};

Regular_idContext.prototype.CAST = function() {
    return this.getToken(PlSqlParser.CAST, 0);
};

Regular_idContext.prototype.CHAR = function() {
    return this.getToken(PlSqlParser.CHAR, 0);
};

Regular_idContext.prototype.CHAR_CS = function() {
    return this.getToken(PlSqlParser.CHAR_CS, 0);
};

Regular_idContext.prototype.CHARACTER = function() {
    return this.getToken(PlSqlParser.CHARACTER, 0);
};

Regular_idContext.prototype.CHR = function() {
    return this.getToken(PlSqlParser.CHR, 0);
};

Regular_idContext.prototype.CLOB = function() {
    return this.getToken(PlSqlParser.CLOB, 0);
};

Regular_idContext.prototype.CLOSE = function() {
    return this.getToken(PlSqlParser.CLOSE, 0);
};

Regular_idContext.prototype.CLUSTER = function() {
    return this.getToken(PlSqlParser.CLUSTER, 0);
};

Regular_idContext.prototype.COLLECT = function() {
    return this.getToken(PlSqlParser.COLLECT, 0);
};

Regular_idContext.prototype.COLUMNS = function() {
    return this.getToken(PlSqlParser.COLUMNS, 0);
};

Regular_idContext.prototype.COMMENT = function() {
    return this.getToken(PlSqlParser.COMMENT, 0);
};

Regular_idContext.prototype.COMMIT = function() {
    return this.getToken(PlSqlParser.COMMIT, 0);
};

Regular_idContext.prototype.COMMITTED = function() {
    return this.getToken(PlSqlParser.COMMITTED, 0);
};

Regular_idContext.prototype.COMPATIBILITY = function() {
    return this.getToken(PlSqlParser.COMPATIBILITY, 0);
};

Regular_idContext.prototype.COMPILE = function() {
    return this.getToken(PlSqlParser.COMPILE, 0);
};

Regular_idContext.prototype.COMPOUND = function() {
    return this.getToken(PlSqlParser.COMPOUND, 0);
};

Regular_idContext.prototype.CONSTANT = function() {
    return this.getToken(PlSqlParser.CONSTANT, 0);
};

Regular_idContext.prototype.CONSTRAINT = function() {
    return this.getToken(PlSqlParser.CONSTRAINT, 0);
};

Regular_idContext.prototype.CONSTRAINTS = function() {
    return this.getToken(PlSqlParser.CONSTRAINTS, 0);
};

Regular_idContext.prototype.CONSTRUCTOR = function() {
    return this.getToken(PlSqlParser.CONSTRUCTOR, 0);
};

Regular_idContext.prototype.CONTENT = function() {
    return this.getToken(PlSqlParser.CONTENT, 0);
};

Regular_idContext.prototype.CONTEXT = function() {
    return this.getToken(PlSqlParser.CONTEXT, 0);
};

Regular_idContext.prototype.CONTINUE = function() {
    return this.getToken(PlSqlParser.CONTINUE, 0);
};

Regular_idContext.prototype.CONVERT = function() {
    return this.getToken(PlSqlParser.CONVERT, 0);
};

Regular_idContext.prototype.CORRUPT_XID = function() {
    return this.getToken(PlSqlParser.CORRUPT_XID, 0);
};

Regular_idContext.prototype.CORRUPT_XID_ALL = function() {
    return this.getToken(PlSqlParser.CORRUPT_XID_ALL, 0);
};

Regular_idContext.prototype.COST = function() {
    return this.getToken(PlSqlParser.COST, 0);
};

Regular_idContext.prototype.COUNT = function() {
    return this.getToken(PlSqlParser.COUNT, 0);
};

Regular_idContext.prototype.CROSS = function() {
    return this.getToken(PlSqlParser.CROSS, 0);
};

Regular_idContext.prototype.CUBE = function() {
    return this.getToken(PlSqlParser.CUBE, 0);
};

Regular_idContext.prototype.CURRENT_USER = function() {
    return this.getToken(PlSqlParser.CURRENT_USER, 0);
};

Regular_idContext.prototype.CURSOR = function() {
    return this.getToken(PlSqlParser.CURSOR, 0);
};

Regular_idContext.prototype.CUSTOMDATUM = function() {
    return this.getToken(PlSqlParser.CUSTOMDATUM, 0);
};

Regular_idContext.prototype.CYCLE = function() {
    return this.getToken(PlSqlParser.CYCLE, 0);
};

Regular_idContext.prototype.DATA = function() {
    return this.getToken(PlSqlParser.DATA, 0);
};

Regular_idContext.prototype.DATABASE = function() {
    return this.getToken(PlSqlParser.DATABASE, 0);
};

Regular_idContext.prototype.DAY = function() {
    return this.getToken(PlSqlParser.DAY, 0);
};

Regular_idContext.prototype.DB_ROLE_CHANGE = function() {
    return this.getToken(PlSqlParser.DB_ROLE_CHANGE, 0);
};

Regular_idContext.prototype.DBTIMEZONE = function() {
    return this.getToken(PlSqlParser.DBTIMEZONE, 0);
};

Regular_idContext.prototype.DDL = function() {
    return this.getToken(PlSqlParser.DDL, 0);
};

Regular_idContext.prototype.DEBUG = function() {
    return this.getToken(PlSqlParser.DEBUG, 0);
};

Regular_idContext.prototype.DEC = function() {
    return this.getToken(PlSqlParser.DEC, 0);
};

Regular_idContext.prototype.DECIMAL = function() {
    return this.getToken(PlSqlParser.DECIMAL, 0);
};

Regular_idContext.prototype.DECOMPOSE = function() {
    return this.getToken(PlSqlParser.DECOMPOSE, 0);
};

Regular_idContext.prototype.DECREMENT = function() {
    return this.getToken(PlSqlParser.DECREMENT, 0);
};

Regular_idContext.prototype.DEFAULTS = function() {
    return this.getToken(PlSqlParser.DEFAULTS, 0);
};

Regular_idContext.prototype.DEFERRED = function() {
    return this.getToken(PlSqlParser.DEFERRED, 0);
};

Regular_idContext.prototype.DEFINER = function() {
    return this.getToken(PlSqlParser.DEFINER, 0);
};

Regular_idContext.prototype.DELETE = function() {
    return this.getToken(PlSqlParser.DELETE, 0);
};

Regular_idContext.prototype.DETERMINISTIC = function() {
    return this.getToken(PlSqlParser.DETERMINISTIC, 0);
};

Regular_idContext.prototype.DIMENSION = function() {
    return this.getToken(PlSqlParser.DIMENSION, 0);
};

Regular_idContext.prototype.DISABLE = function() {
    return this.getToken(PlSqlParser.DISABLE, 0);
};

Regular_idContext.prototype.DISASSOCIATE = function() {
    return this.getToken(PlSqlParser.DISASSOCIATE, 0);
};

Regular_idContext.prototype.DOCUMENT = function() {
    return this.getToken(PlSqlParser.DOCUMENT, 0);
};

Regular_idContext.prototype.DOUBLE = function() {
    return this.getToken(PlSqlParser.DOUBLE, 0);
};

Regular_idContext.prototype.DSINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.EACH = function() {
    return this.getToken(PlSqlParser.EACH, 0);
};

Regular_idContext.prototype.ELEMENT = function() {
    return this.getToken(PlSqlParser.ELEMENT, 0);
};

Regular_idContext.prototype.EMPTY = function() {
    return this.getToken(PlSqlParser.EMPTY, 0);
};

Regular_idContext.prototype.ENABLE = function() {
    return this.getToken(PlSqlParser.ENABLE, 0);
};

Regular_idContext.prototype.ENCODING = function() {
    return this.getToken(PlSqlParser.ENCODING, 0);
};

Regular_idContext.prototype.ENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.ENTITYESCAPING, 0);
};

Regular_idContext.prototype.ERR = function() {
    return this.getToken(PlSqlParser.ERR, 0);
};

Regular_idContext.prototype.ERRORS = function() {
    return this.getToken(PlSqlParser.ERRORS, 0);
};

Regular_idContext.prototype.ESCAPE = function() {
    return this.getToken(PlSqlParser.ESCAPE, 0);
};

Regular_idContext.prototype.EVALNAME = function() {
    return this.getToken(PlSqlParser.EVALNAME, 0);
};

Regular_idContext.prototype.EXCEPTION = function() {
    return this.getToken(PlSqlParser.EXCEPTION, 0);
};

Regular_idContext.prototype.EXCEPTION_INIT = function() {
    return this.getToken(PlSqlParser.EXCEPTION_INIT, 0);
};

Regular_idContext.prototype.EXCEPTIONS = function() {
    return this.getToken(PlSqlParser.EXCEPTIONS, 0);
};

Regular_idContext.prototype.EXCLUDE = function() {
    return this.getToken(PlSqlParser.EXCLUDE, 0);
};

Regular_idContext.prototype.EXECUTE = function() {
    return this.getToken(PlSqlParser.EXECUTE, 0);
};

Regular_idContext.prototype.EXIT = function() {
    return this.getToken(PlSqlParser.EXIT, 0);
};

Regular_idContext.prototype.EXPLAIN = function() {
    return this.getToken(PlSqlParser.EXPLAIN, 0);
};

Regular_idContext.prototype.EXTERNAL = function() {
    return this.getToken(PlSqlParser.EXTERNAL, 0);
};

Regular_idContext.prototype.EXTRACT = function() {
    return this.getToken(PlSqlParser.EXTRACT, 0);
};

Regular_idContext.prototype.FAILURE = function() {
    return this.getToken(PlSqlParser.FAILURE, 0);
};

Regular_idContext.prototype.FINAL = function() {
    return this.getToken(PlSqlParser.FINAL, 0);
};

Regular_idContext.prototype.FIRST = function() {
    return this.getToken(PlSqlParser.FIRST, 0);
};

Regular_idContext.prototype.FIRST_VALUE = function() {
    return this.getToken(PlSqlParser.FIRST_VALUE, 0);
};

Regular_idContext.prototype.FLOAT = function() {
    return this.getToken(PlSqlParser.FLOAT, 0);
};

Regular_idContext.prototype.FOLLOWING = function() {
    return this.getToken(PlSqlParser.FOLLOWING, 0);
};

Regular_idContext.prototype.FOLLOWS = function() {
    return this.getToken(PlSqlParser.FOLLOWS, 0);
};

Regular_idContext.prototype.FORALL = function() {
    return this.getToken(PlSqlParser.FORALL, 0);
};

Regular_idContext.prototype.FORCE = function() {
    return this.getToken(PlSqlParser.FORCE, 0);
};

Regular_idContext.prototype.FULL = function() {
    return this.getToken(PlSqlParser.FULL, 0);
};

Regular_idContext.prototype.FUNCTION = function() {
    return this.getToken(PlSqlParser.FUNCTION, 0);
};

Regular_idContext.prototype.GROUPING = function() {
    return this.getToken(PlSqlParser.GROUPING, 0);
};

Regular_idContext.prototype.HASH = function() {
    return this.getToken(PlSqlParser.HASH, 0);
};

Regular_idContext.prototype.HIDE = function() {
    return this.getToken(PlSqlParser.HIDE, 0);
};

Regular_idContext.prototype.HOUR = function() {
    return this.getToken(PlSqlParser.HOUR, 0);
};

Regular_idContext.prototype.IGNORE = function() {
    return this.getToken(PlSqlParser.IGNORE, 0);
};

Regular_idContext.prototype.IMMEDIATE = function() {
    return this.getToken(PlSqlParser.IMMEDIATE, 0);
};

Regular_idContext.prototype.INCLUDE = function() {
    return this.getToken(PlSqlParser.INCLUDE, 0);
};

Regular_idContext.prototype.INCLUDING = function() {
    return this.getToken(PlSqlParser.INCLUDING, 0);
};

Regular_idContext.prototype.INCREMENT = function() {
    return this.getToken(PlSqlParser.INCREMENT, 0);
};

Regular_idContext.prototype.INDENT = function() {
    return this.getToken(PlSqlParser.INDENT, 0);
};

Regular_idContext.prototype.INDEXED = function() {
    return this.getToken(PlSqlParser.INDEXED, 0);
};

Regular_idContext.prototype.INDICATOR = function() {
    return this.getToken(PlSqlParser.INDICATOR, 0);
};

Regular_idContext.prototype.INDICES = function() {
    return this.getToken(PlSqlParser.INDICES, 0);
};

Regular_idContext.prototype.INFINITE = function() {
    return this.getToken(PlSqlParser.INFINITE, 0);
};

Regular_idContext.prototype.INLINE = function() {
    return this.getToken(PlSqlParser.INLINE, 0);
};

Regular_idContext.prototype.INNER = function() {
    return this.getToken(PlSqlParser.INNER, 0);
};

Regular_idContext.prototype.INOUT = function() {
    return this.getToken(PlSqlParser.INOUT, 0);
};

Regular_idContext.prototype.INSTANTIABLE = function() {
    return this.getToken(PlSqlParser.INSTANTIABLE, 0);
};

Regular_idContext.prototype.INSTEAD = function() {
    return this.getToken(PlSqlParser.INSTEAD, 0);
};

Regular_idContext.prototype.INT = function() {
    return this.getToken(PlSqlParser.INT, 0);
};

Regular_idContext.prototype.INTEGER = function() {
    return this.getToken(PlSqlParser.INTEGER, 0);
};

Regular_idContext.prototype.INTERVAL = function() {
    return this.getToken(PlSqlParser.INTERVAL, 0);
};

Regular_idContext.prototype.INVALIDATE = function() {
    return this.getToken(PlSqlParser.INVALIDATE, 0);
};

Regular_idContext.prototype.ISOLATION = function() {
    return this.getToken(PlSqlParser.ISOLATION, 0);
};

Regular_idContext.prototype.ITERATE = function() {
    return this.getToken(PlSqlParser.ITERATE, 0);
};

Regular_idContext.prototype.JAVA = function() {
    return this.getToken(PlSqlParser.JAVA, 0);
};

Regular_idContext.prototype.JOIN = function() {
    return this.getToken(PlSqlParser.JOIN, 0);
};

Regular_idContext.prototype.KEEP = function() {
    return this.getToken(PlSqlParser.KEEP, 0);
};

Regular_idContext.prototype.KEY = function() {
    return this.getToken(PlSqlParser.KEY, 0);
};

Regular_idContext.prototype.LANGUAGE = function() {
    return this.getToken(PlSqlParser.LANGUAGE, 0);
};

Regular_idContext.prototype.LAST = function() {
    return this.getToken(PlSqlParser.LAST, 0);
};

Regular_idContext.prototype.LAST_VALUE = function() {
    return this.getToken(PlSqlParser.LAST_VALUE, 0);
};

Regular_idContext.prototype.LEADING = function() {
    return this.getToken(PlSqlParser.LEADING, 0);
};

Regular_idContext.prototype.LEFT = function() {
    return this.getToken(PlSqlParser.LEFT, 0);
};

Regular_idContext.prototype.LEVEL = function() {
    return this.getToken(PlSqlParser.LEVEL, 0);
};

Regular_idContext.prototype.LIBRARY = function() {
    return this.getToken(PlSqlParser.LIBRARY, 0);
};

Regular_idContext.prototype.LIKE2 = function() {
    return this.getToken(PlSqlParser.LIKE2, 0);
};

Regular_idContext.prototype.LIKE4 = function() {
    return this.getToken(PlSqlParser.LIKE4, 0);
};

Regular_idContext.prototype.LIKEC = function() {
    return this.getToken(PlSqlParser.LIKEC, 0);
};

Regular_idContext.prototype.LIMIT = function() {
    return this.getToken(PlSqlParser.LIMIT, 0);
};

Regular_idContext.prototype.LOCAL = function() {
    return this.getToken(PlSqlParser.LOCAL, 0);
};

Regular_idContext.prototype.LOCKED = function() {
    return this.getToken(PlSqlParser.LOCKED, 0);
};

Regular_idContext.prototype.LOG = function() {
    return this.getToken(PlSqlParser.LOG, 0);
};

Regular_idContext.prototype.LOGOFF = function() {
    return this.getToken(PlSqlParser.LOGOFF, 0);
};

Regular_idContext.prototype.LOGON = function() {
    return this.getToken(PlSqlParser.LOGON, 0);
};

Regular_idContext.prototype.LONG = function() {
    return this.getToken(PlSqlParser.LONG, 0);
};

Regular_idContext.prototype.LOOP = function() {
    return this.getToken(PlSqlParser.LOOP, 0);
};

Regular_idContext.prototype.MAIN = function() {
    return this.getToken(PlSqlParser.MAIN, 0);
};

Regular_idContext.prototype.MAP = function() {
    return this.getToken(PlSqlParser.MAP, 0);
};

Regular_idContext.prototype.MATCHED = function() {
    return this.getToken(PlSqlParser.MATCHED, 0);
};

Regular_idContext.prototype.MAXVALUE = function() {
    return this.getToken(PlSqlParser.MAXVALUE, 0);
};

Regular_idContext.prototype.MEASURES = function() {
    return this.getToken(PlSqlParser.MEASURES, 0);
};

Regular_idContext.prototype.MEMBER = function() {
    return this.getToken(PlSqlParser.MEMBER, 0);
};

Regular_idContext.prototype.MERGE = function() {
    return this.getToken(PlSqlParser.MERGE, 0);
};

Regular_idContext.prototype.MINUTE = function() {
    return this.getToken(PlSqlParser.MINUTE, 0);
};

Regular_idContext.prototype.MINVALUE = function() {
    return this.getToken(PlSqlParser.MINVALUE, 0);
};

Regular_idContext.prototype.MLSLABEL = function() {
    return this.getToken(PlSqlParser.MLSLABEL, 0);
};

Regular_idContext.prototype.MODEL = function() {
    return this.getToken(PlSqlParser.MODEL, 0);
};

Regular_idContext.prototype.MODIFY = function() {
    return this.getToken(PlSqlParser.MODIFY, 0);
};

Regular_idContext.prototype.MONTH = function() {
    return this.getToken(PlSqlParser.MONTH, 0);
};

Regular_idContext.prototype.MULTISET = function() {
    return this.getToken(PlSqlParser.MULTISET, 0);
};

Regular_idContext.prototype.NAME = function() {
    return this.getToken(PlSqlParser.NAME, 0);
};

Regular_idContext.prototype.NAN = function() {
    return this.getToken(PlSqlParser.NAN, 0);
};

Regular_idContext.prototype.NATURAL = function() {
    return this.getToken(PlSqlParser.NATURAL, 0);
};

Regular_idContext.prototype.NATURALN = function() {
    return this.getToken(PlSqlParser.NATURALN, 0);
};

Regular_idContext.prototype.NAV = function() {
    return this.getToken(PlSqlParser.NAV, 0);
};

Regular_idContext.prototype.NCHAR = function() {
    return this.getToken(PlSqlParser.NCHAR, 0);
};

Regular_idContext.prototype.NCHAR_CS = function() {
    return this.getToken(PlSqlParser.NCHAR_CS, 0);
};

Regular_idContext.prototype.NCLOB = function() {
    return this.getToken(PlSqlParser.NCLOB, 0);
};

Regular_idContext.prototype.NESTED = function() {
    return this.getToken(PlSqlParser.NESTED, 0);
};

Regular_idContext.prototype.NEW = function() {
    return this.getToken(PlSqlParser.NEW, 0);
};

Regular_idContext.prototype.NO = function() {
    return this.getToken(PlSqlParser.NO, 0);
};

Regular_idContext.prototype.NOAUDIT = function() {
    return this.getToken(PlSqlParser.NOAUDIT, 0);
};

Regular_idContext.prototype.NOCOPY = function() {
    return this.getToken(PlSqlParser.NOCOPY, 0);
};

Regular_idContext.prototype.NOCYCLE = function() {
    return this.getToken(PlSqlParser.NOCYCLE, 0);
};

Regular_idContext.prototype.NOENTITYESCAPING = function() {
    return this.getToken(PlSqlParser.NOENTITYESCAPING, 0);
};

Regular_idContext.prototype.NONE = function() {
    return this.getToken(PlSqlParser.NONE, 0);
};

Regular_idContext.prototype.NOSCHEMACHECK = function() {
    return this.getToken(PlSqlParser.NOSCHEMACHECK, 0);
};

Regular_idContext.prototype.NULLS = function() {
    return this.getToken(PlSqlParser.NULLS, 0);
};

Regular_idContext.prototype.NUMBER = function() {
    return this.getToken(PlSqlParser.NUMBER, 0);
};

Regular_idContext.prototype.NUMERIC = function() {
    return this.getToken(PlSqlParser.NUMERIC, 0);
};

Regular_idContext.prototype.NVARCHAR2 = function() {
    return this.getToken(PlSqlParser.NVARCHAR2, 0);
};

Regular_idContext.prototype.OBJECT = function() {
    return this.getToken(PlSqlParser.OBJECT, 0);
};

Regular_idContext.prototype.OFF = function() {
    return this.getToken(PlSqlParser.OFF, 0);
};

Regular_idContext.prototype.OID = function() {
    return this.getToken(PlSqlParser.OID, 0);
};

Regular_idContext.prototype.OLD = function() {
    return this.getToken(PlSqlParser.OLD, 0);
};

Regular_idContext.prototype.ONLY = function() {
    return this.getToken(PlSqlParser.ONLY, 0);
};

Regular_idContext.prototype.OPEN = function() {
    return this.getToken(PlSqlParser.OPEN, 0);
};

Regular_idContext.prototype.ORADATA = function() {
    return this.getToken(PlSqlParser.ORADATA, 0);
};

Regular_idContext.prototype.ORDINALITY = function() {
    return this.getToken(PlSqlParser.ORDINALITY, 0);
};

Regular_idContext.prototype.OSERROR = function() {
    return this.getToken(PlSqlParser.OSERROR, 0);
};

Regular_idContext.prototype.OUT = function() {
    return this.getToken(PlSqlParser.OUT, 0);
};

Regular_idContext.prototype.OUTER = function() {
    return this.getToken(PlSqlParser.OUTER, 0);
};

Regular_idContext.prototype.OVER = function() {
    return this.getToken(PlSqlParser.OVER, 0);
};

Regular_idContext.prototype.OVERRIDING = function() {
    return this.getToken(PlSqlParser.OVERRIDING, 0);
};

Regular_idContext.prototype.PACKAGE = function() {
    return this.getToken(PlSqlParser.PACKAGE, 0);
};

Regular_idContext.prototype.PARALLEL_ENABLE = function() {
    return this.getToken(PlSqlParser.PARALLEL_ENABLE, 0);
};

Regular_idContext.prototype.PARAMETERS = function() {
    return this.getToken(PlSqlParser.PARAMETERS, 0);
};

Regular_idContext.prototype.PARENT = function() {
    return this.getToken(PlSqlParser.PARENT, 0);
};

Regular_idContext.prototype.PARTITION = function() {
    return this.getToken(PlSqlParser.PARTITION, 0);
};

Regular_idContext.prototype.PASSING = function() {
    return this.getToken(PlSqlParser.PASSING, 0);
};

Regular_idContext.prototype.PATH = function() {
    return this.getToken(PlSqlParser.PATH, 0);
};

Regular_idContext.prototype.PIPELINED = function() {
    return this.getToken(PlSqlParser.PIPELINED, 0);
};

Regular_idContext.prototype.PLAN = function() {
    return this.getToken(PlSqlParser.PLAN, 0);
};

Regular_idContext.prototype.PLS_INTEGER = function() {
    return this.getToken(PlSqlParser.PLS_INTEGER, 0);
};

Regular_idContext.prototype.POSITIVE = function() {
    return this.getToken(PlSqlParser.POSITIVE, 0);
};

Regular_idContext.prototype.POSITIVEN = function() {
    return this.getToken(PlSqlParser.POSITIVEN, 0);
};

Regular_idContext.prototype.PRAGMA = function() {
    return this.getToken(PlSqlParser.PRAGMA, 0);
};

Regular_idContext.prototype.PRECEDING = function() {
    return this.getToken(PlSqlParser.PRECEDING, 0);
};

Regular_idContext.prototype.PRECISION = function() {
    return this.getToken(PlSqlParser.PRECISION, 0);
};

Regular_idContext.prototype.PRESENT = function() {
    return this.getToken(PlSqlParser.PRESENT, 0);
};

Regular_idContext.prototype.RAISE = function() {
    return this.getToken(PlSqlParser.RAISE, 0);
};

Regular_idContext.prototype.RANGE = function() {
    return this.getToken(PlSqlParser.RANGE, 0);
};

Regular_idContext.prototype.RAW = function() {
    return this.getToken(PlSqlParser.RAW, 0);
};

Regular_idContext.prototype.READ = function() {
    return this.getToken(PlSqlParser.READ, 0);
};

Regular_idContext.prototype.REAL = function() {
    return this.getToken(PlSqlParser.REAL, 0);
};

Regular_idContext.prototype.RECORD = function() {
    return this.getToken(PlSqlParser.RECORD, 0);
};

Regular_idContext.prototype.REF = function() {
    return this.getToken(PlSqlParser.REF, 0);
};

Regular_idContext.prototype.REFERENCE = function() {
    return this.getToken(PlSqlParser.REFERENCE, 0);
};

Regular_idContext.prototype.REFERENCING = function() {
    return this.getToken(PlSqlParser.REFERENCING, 0);
};

Regular_idContext.prototype.REJECT = function() {
    return this.getToken(PlSqlParser.REJECT, 0);
};

Regular_idContext.prototype.RELIES_ON = function() {
    return this.getToken(PlSqlParser.RELIES_ON, 0);
};

Regular_idContext.prototype.RENAME = function() {
    return this.getToken(PlSqlParser.RENAME, 0);
};

Regular_idContext.prototype.REPLACE = function() {
    return this.getToken(PlSqlParser.REPLACE, 0);
};

Regular_idContext.prototype.RESPECT = function() {
    return this.getToken(PlSqlParser.RESPECT, 0);
};

Regular_idContext.prototype.RESTRICT_REFERENCES = function() {
    return this.getToken(PlSqlParser.RESTRICT_REFERENCES, 0);
};

Regular_idContext.prototype.RESULT = function() {
    return this.getToken(PlSqlParser.RESULT, 0);
};

Regular_idContext.prototype.RESULT_CACHE = function() {
    return this.getToken(PlSqlParser.RESULT_CACHE, 0);
};

Regular_idContext.prototype.RETURN = function() {
    return this.getToken(PlSqlParser.RETURN, 0);
};

Regular_idContext.prototype.RETURNING = function() {
    return this.getToken(PlSqlParser.RETURNING, 0);
};

Regular_idContext.prototype.REUSE = function() {
    return this.getToken(PlSqlParser.REUSE, 0);
};

Regular_idContext.prototype.REVERSE = function() {
    return this.getToken(PlSqlParser.REVERSE, 0);
};

Regular_idContext.prototype.RIGHT = function() {
    return this.getToken(PlSqlParser.RIGHT, 0);
};

Regular_idContext.prototype.ROLLBACK = function() {
    return this.getToken(PlSqlParser.ROLLBACK, 0);
};

Regular_idContext.prototype.ROLLUP = function() {
    return this.getToken(PlSqlParser.ROLLUP, 0);
};

Regular_idContext.prototype.ROW = function() {
    return this.getToken(PlSqlParser.ROW, 0);
};

Regular_idContext.prototype.ROWID = function() {
    return this.getToken(PlSqlParser.ROWID, 0);
};

Regular_idContext.prototype.ROWS = function() {
    return this.getToken(PlSqlParser.ROWS, 0);
};

Regular_idContext.prototype.RULES = function() {
    return this.getToken(PlSqlParser.RULES, 0);
};

Regular_idContext.prototype.SAMPLE = function() {
    return this.getToken(PlSqlParser.SAMPLE, 0);
};

Regular_idContext.prototype.SAVE = function() {
    return this.getToken(PlSqlParser.SAVE, 0);
};

Regular_idContext.prototype.SAVEPOINT = function() {
    return this.getToken(PlSqlParser.SAVEPOINT, 0);
};

Regular_idContext.prototype.SCHEMA = function() {
    return this.getToken(PlSqlParser.SCHEMA, 0);
};

Regular_idContext.prototype.SCHEMACHECK = function() {
    return this.getToken(PlSqlParser.SCHEMACHECK, 0);
};

Regular_idContext.prototype.SCN = function() {
    return this.getToken(PlSqlParser.SCN, 0);
};

Regular_idContext.prototype.SECOND = function() {
    return this.getToken(PlSqlParser.SECOND, 0);
};

Regular_idContext.prototype.SEED = function() {
    return this.getToken(PlSqlParser.SEED, 0);
};

Regular_idContext.prototype.SEGMENT = function() {
    return this.getToken(PlSqlParser.SEGMENT, 0);
};

Regular_idContext.prototype.SELF = function() {
    return this.getToken(PlSqlParser.SELF, 0);
};

Regular_idContext.prototype.SEQUENTIAL = function() {
    return this.getToken(PlSqlParser.SEQUENTIAL, 0);
};

Regular_idContext.prototype.SERIALIZABLE = function() {
    return this.getToken(PlSqlParser.SERIALIZABLE, 0);
};

Regular_idContext.prototype.SERIALLY_REUSABLE = function() {
    return this.getToken(PlSqlParser.SERIALLY_REUSABLE, 0);
};

Regular_idContext.prototype.SERVERERROR = function() {
    return this.getToken(PlSqlParser.SERVERERROR, 0);
};

Regular_idContext.prototype.SESSIONTIMEZONE = function() {
    return this.getToken(PlSqlParser.SESSIONTIMEZONE, 0);
};

Regular_idContext.prototype.SET = function() {
    return this.getToken(PlSqlParser.SET, 0);
};

Regular_idContext.prototype.SETS = function() {
    return this.getToken(PlSqlParser.SETS, 0);
};

Regular_idContext.prototype.SETTINGS = function() {
    return this.getToken(PlSqlParser.SETTINGS, 0);
};

Regular_idContext.prototype.SHOW = function() {
    return this.getToken(PlSqlParser.SHOW, 0);
};

Regular_idContext.prototype.SHUTDOWN = function() {
    return this.getToken(PlSqlParser.SHUTDOWN, 0);
};

Regular_idContext.prototype.SIBLINGS = function() {
    return this.getToken(PlSqlParser.SIBLINGS, 0);
};

Regular_idContext.prototype.SIGNTYPE = function() {
    return this.getToken(PlSqlParser.SIGNTYPE, 0);
};

Regular_idContext.prototype.SIMPLE_INTEGER = function() {
    return this.getToken(PlSqlParser.SIMPLE_INTEGER, 0);
};

Regular_idContext.prototype.SINGLE = function() {
    return this.getToken(PlSqlParser.SINGLE, 0);
};

Regular_idContext.prototype.SKIP_ = function() {
    return this.getToken(PlSqlParser.SKIP_, 0);
};

Regular_idContext.prototype.SMALLINT = function() {
    return this.getToken(PlSqlParser.SMALLINT, 0);
};

Regular_idContext.prototype.SNAPSHOT = function() {
    return this.getToken(PlSqlParser.SNAPSHOT, 0);
};

Regular_idContext.prototype.SOME = function() {
    return this.getToken(PlSqlParser.SOME, 0);
};

Regular_idContext.prototype.SPECIFICATION = function() {
    return this.getToken(PlSqlParser.SPECIFICATION, 0);
};

Regular_idContext.prototype.SQLDATA = function() {
    return this.getToken(PlSqlParser.SQLDATA, 0);
};

Regular_idContext.prototype.SQLERROR = function() {
    return this.getToken(PlSqlParser.SQLERROR, 0);
};

Regular_idContext.prototype.STANDALONE = function() {
    return this.getToken(PlSqlParser.STANDALONE, 0);
};

Regular_idContext.prototype.STARTUP = function() {
    return this.getToken(PlSqlParser.STARTUP, 0);
};

Regular_idContext.prototype.STATEMENT = function() {
    return this.getToken(PlSqlParser.STATEMENT, 0);
};

Regular_idContext.prototype.STATEMENT_ID = function() {
    return this.getToken(PlSqlParser.STATEMENT_ID, 0);
};

Regular_idContext.prototype.STATIC = function() {
    return this.getToken(PlSqlParser.STATIC, 0);
};

Regular_idContext.prototype.STATISTICS = function() {
    return this.getToken(PlSqlParser.STATISTICS, 0);
};

Regular_idContext.prototype.STRING = function() {
    return this.getToken(PlSqlParser.STRING, 0);
};

Regular_idContext.prototype.SUBSTR = function() {
    return this.getToken(PlSqlParser.SUBSTR, 0);
};

Regular_idContext.prototype.SUBMULTISET = function() {
    return this.getToken(PlSqlParser.SUBMULTISET, 0);
};

Regular_idContext.prototype.SUBPARTITION = function() {
    return this.getToken(PlSqlParser.SUBPARTITION, 0);
};

Regular_idContext.prototype.SUBSTITUTABLE = function() {
    return this.getToken(PlSqlParser.SUBSTITUTABLE, 0);
};

Regular_idContext.prototype.SUBTYPE = function() {
    return this.getToken(PlSqlParser.SUBTYPE, 0);
};

Regular_idContext.prototype.SUCCESS = function() {
    return this.getToken(PlSqlParser.SUCCESS, 0);
};

Regular_idContext.prototype.SUSPEND = function() {
    return this.getToken(PlSqlParser.SUSPEND, 0);
};

Regular_idContext.prototype.TEMPORARY = function() {
    return this.getToken(PlSqlParser.TEMPORARY, 0);
};

Regular_idContext.prototype.TIME = function() {
    return this.getToken(PlSqlParser.TIME, 0);
};

Regular_idContext.prototype.TIMESTAMP = function() {
    return this.getToken(PlSqlParser.TIMESTAMP, 0);
};

Regular_idContext.prototype.TIMESTAMP_LTZ_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_TZ_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMESTAMP_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.TIMEZONE_ABBR = function() {
    return this.getToken(PlSqlParser.TIMEZONE_ABBR, 0);
};

Regular_idContext.prototype.TIMEZONE_HOUR = function() {
    return this.getToken(PlSqlParser.TIMEZONE_HOUR, 0);
};

Regular_idContext.prototype.TIMEZONE_MINUTE = function() {
    return this.getToken(PlSqlParser.TIMEZONE_MINUTE, 0);
};

Regular_idContext.prototype.TIMEZONE_REGION = function() {
    return this.getToken(PlSqlParser.TIMEZONE_REGION, 0);
};

Regular_idContext.prototype.TRAILING = function() {
    return this.getToken(PlSqlParser.TRAILING, 0);
};

Regular_idContext.prototype.TRANSACTION = function() {
    return this.getToken(PlSqlParser.TRANSACTION, 0);
};

Regular_idContext.prototype.TRANSLATE = function() {
    return this.getToken(PlSqlParser.TRANSLATE, 0);
};

Regular_idContext.prototype.TREAT = function() {
    return this.getToken(PlSqlParser.TREAT, 0);
};

Regular_idContext.prototype.TRIGGER = function() {
    return this.getToken(PlSqlParser.TRIGGER, 0);
};

Regular_idContext.prototype.TRIM = function() {
    return this.getToken(PlSqlParser.TRIM, 0);
};

Regular_idContext.prototype.TRUNCATE = function() {
    return this.getToken(PlSqlParser.TRUNCATE, 0);
};

Regular_idContext.prototype.TYPE = function() {
    return this.getToken(PlSqlParser.TYPE, 0);
};

Regular_idContext.prototype.UNBOUNDED = function() {
    return this.getToken(PlSqlParser.UNBOUNDED, 0);
};

Regular_idContext.prototype.UNDER = function() {
    return this.getToken(PlSqlParser.UNDER, 0);
};

Regular_idContext.prototype.UNLIMITED = function() {
    return this.getToken(PlSqlParser.UNLIMITED, 0);
};

Regular_idContext.prototype.UNTIL = function() {
    return this.getToken(PlSqlParser.UNTIL, 0);
};

Regular_idContext.prototype.UPDATED = function() {
    return this.getToken(PlSqlParser.UPDATED, 0);
};

Regular_idContext.prototype.UPSERT = function() {
    return this.getToken(PlSqlParser.UPSERT, 0);
};

Regular_idContext.prototype.UROWID = function() {
    return this.getToken(PlSqlParser.UROWID, 0);
};

Regular_idContext.prototype.USE = function() {
    return this.getToken(PlSqlParser.USE, 0);
};

Regular_idContext.prototype.VALIDATE = function() {
    return this.getToken(PlSqlParser.VALIDATE, 0);
};

Regular_idContext.prototype.VALUE = function() {
    return this.getToken(PlSqlParser.VALUE, 0);
};

Regular_idContext.prototype.VARCHAR = function() {
    return this.getToken(PlSqlParser.VARCHAR, 0);
};

Regular_idContext.prototype.VARCHAR2 = function() {
    return this.getToken(PlSqlParser.VARCHAR2, 0);
};

Regular_idContext.prototype.VARIABLE = function() {
    return this.getToken(PlSqlParser.VARIABLE, 0);
};

Regular_idContext.prototype.VARRAY = function() {
    return this.getToken(PlSqlParser.VARRAY, 0);
};

Regular_idContext.prototype.VARYING = function() {
    return this.getToken(PlSqlParser.VARYING, 0);
};

Regular_idContext.prototype.VERSION = function() {
    return this.getToken(PlSqlParser.VERSION, 0);
};

Regular_idContext.prototype.VERSIONS = function() {
    return this.getToken(PlSqlParser.VERSIONS, 0);
};

Regular_idContext.prototype.WAIT = function() {
    return this.getToken(PlSqlParser.WAIT, 0);
};

Regular_idContext.prototype.WARNING = function() {
    return this.getToken(PlSqlParser.WARNING, 0);
};

Regular_idContext.prototype.WELLFORMED = function() {
    return this.getToken(PlSqlParser.WELLFORMED, 0);
};

Regular_idContext.prototype.WHENEVER = function() {
    return this.getToken(PlSqlParser.WHENEVER, 0);
};

Regular_idContext.prototype.WHILE = function() {
    return this.getToken(PlSqlParser.WHILE, 0);
};

Regular_idContext.prototype.WITHIN = function() {
    return this.getToken(PlSqlParser.WITHIN, 0);
};

Regular_idContext.prototype.WORK = function() {
    return this.getToken(PlSqlParser.WORK, 0);
};

Regular_idContext.prototype.WRITE = function() {
    return this.getToken(PlSqlParser.WRITE, 0);
};

Regular_idContext.prototype.XML = function() {
    return this.getToken(PlSqlParser.XML, 0);
};

Regular_idContext.prototype.XMLAGG = function() {
    return this.getToken(PlSqlParser.XMLAGG, 0);
};

Regular_idContext.prototype.XMLATTRIBUTES = function() {
    return this.getToken(PlSqlParser.XMLATTRIBUTES, 0);
};

Regular_idContext.prototype.XMLCAST = function() {
    return this.getToken(PlSqlParser.XMLCAST, 0);
};

Regular_idContext.prototype.XMLCOLATTVAL = function() {
    return this.getToken(PlSqlParser.XMLCOLATTVAL, 0);
};

Regular_idContext.prototype.XMLELEMENT = function() {
    return this.getToken(PlSqlParser.XMLELEMENT, 0);
};

Regular_idContext.prototype.XMLEXISTS = function() {
    return this.getToken(PlSqlParser.XMLEXISTS, 0);
};

Regular_idContext.prototype.XMLFOREST = function() {
    return this.getToken(PlSqlParser.XMLFOREST, 0);
};

Regular_idContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(PlSqlParser.XMLNAMESPACES, 0);
};

Regular_idContext.prototype.XMLPARSE = function() {
    return this.getToken(PlSqlParser.XMLPARSE, 0);
};

Regular_idContext.prototype.XMLPI = function() {
    return this.getToken(PlSqlParser.XMLPI, 0);
};

Regular_idContext.prototype.XMLQUERY = function() {
    return this.getToken(PlSqlParser.XMLQUERY, 0);
};

Regular_idContext.prototype.XMLROOT = function() {
    return this.getToken(PlSqlParser.XMLROOT, 0);
};

Regular_idContext.prototype.XMLSERIALIZE = function() {
    return this.getToken(PlSqlParser.XMLSERIALIZE, 0);
};

Regular_idContext.prototype.XMLTABLE = function() {
    return this.getToken(PlSqlParser.XMLTABLE, 0);
};

Regular_idContext.prototype.YEAR = function() {
    return this.getToken(PlSqlParser.YEAR, 0);
};

Regular_idContext.prototype.YES = function() {
    return this.getToken(PlSqlParser.YES, 0);
};

Regular_idContext.prototype.YMINTERVAL_UNCONSTRAINED = function() {
    return this.getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0);
};

Regular_idContext.prototype.ZONE = function() {
    return this.getToken(PlSqlParser.ZONE, 0);
};

Regular_idContext.prototype.PREDICTION = function() {
    return this.getToken(PlSqlParser.PREDICTION, 0);
};

Regular_idContext.prototype.PREDICTION_BOUNDS = function() {
    return this.getToken(PlSqlParser.PREDICTION_BOUNDS, 0);
};

Regular_idContext.prototype.PREDICTION_COST = function() {
    return this.getToken(PlSqlParser.PREDICTION_COST, 0);
};

Regular_idContext.prototype.PREDICTION_DETAILS = function() {
    return this.getToken(PlSqlParser.PREDICTION_DETAILS, 0);
};

Regular_idContext.prototype.PREDICTION_PROBABILITY = function() {
    return this.getToken(PlSqlParser.PREDICTION_PROBABILITY, 0);
};

Regular_idContext.prototype.PREDICTION_SET = function() {
    return this.getToken(PlSqlParser.PREDICTION_SET, 0);
};

Regular_idContext.prototype.CUME_DIST = function() {
    return this.getToken(PlSqlParser.CUME_DIST, 0);
};

Regular_idContext.prototype.DENSE_RANK = function() {
    return this.getToken(PlSqlParser.DENSE_RANK, 0);
};

Regular_idContext.prototype.LISTAGG = function() {
    return this.getToken(PlSqlParser.LISTAGG, 0);
};

Regular_idContext.prototype.PERCENT_RANK = function() {
    return this.getToken(PlSqlParser.PERCENT_RANK, 0);
};

Regular_idContext.prototype.PERCENTILE_CONT = function() {
    return this.getToken(PlSqlParser.PERCENTILE_CONT, 0);
};

Regular_idContext.prototype.PERCENTILE_DISC = function() {
    return this.getToken(PlSqlParser.PERCENTILE_DISC, 0);
};

Regular_idContext.prototype.RANK = function() {
    return this.getToken(PlSqlParser.RANK, 0);
};

Regular_idContext.prototype.AVG = function() {
    return this.getToken(PlSqlParser.AVG, 0);
};

Regular_idContext.prototype.CORR = function() {
    return this.getToken(PlSqlParser.CORR, 0);
};

Regular_idContext.prototype.LAG = function() {
    return this.getToken(PlSqlParser.LAG, 0);
};

Regular_idContext.prototype.LEAD = function() {
    return this.getToken(PlSqlParser.LEAD, 0);
};

Regular_idContext.prototype.MAX = function() {
    return this.getToken(PlSqlParser.MAX, 0);
};

Regular_idContext.prototype.MEDIAN = function() {
    return this.getToken(PlSqlParser.MEDIAN, 0);
};

Regular_idContext.prototype.MIN = function() {
    return this.getToken(PlSqlParser.MIN, 0);
};

Regular_idContext.prototype.NTILE = function() {
    return this.getToken(PlSqlParser.NTILE, 0);
};

Regular_idContext.prototype.RATIO_TO_REPORT = function() {
    return this.getToken(PlSqlParser.RATIO_TO_REPORT, 0);
};

Regular_idContext.prototype.ROW_NUMBER = function() {
    return this.getToken(PlSqlParser.ROW_NUMBER, 0);
};

Regular_idContext.prototype.SUM = function() {
    return this.getToken(PlSqlParser.SUM, 0);
};

Regular_idContext.prototype.VARIANCE = function() {
    return this.getToken(PlSqlParser.VARIANCE, 0);
};

Regular_idContext.prototype.REGR_ = function() {
    return this.getToken(PlSqlParser.REGR_, 0);
};

Regular_idContext.prototype.STDDEV = function() {
    return this.getToken(PlSqlParser.STDDEV, 0);
};

Regular_idContext.prototype.VAR_ = function() {
    return this.getToken(PlSqlParser.VAR_, 0);
};

Regular_idContext.prototype.COVAR_ = function() {
    return this.getToken(PlSqlParser.COVAR_, 0);
};

Regular_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterRegular_id(this);
	}
};

Regular_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitRegular_id(this);
	}
};




PlSqlParser.Regular_idContext = Regular_idContext;

PlSqlParser.prototype.regular_id = function() {

    var localctx = new Regular_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 764, PlSqlParser.RULE_regular_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5763;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PlSqlParser.ADD) | (1 << PlSqlParser.AFTER) | (1 << PlSqlParser.AGENT) | (1 << PlSqlParser.AGGREGATE) | (1 << PlSqlParser.A_LETTER) | (1 << PlSqlParser.ANALYZE) | (1 << PlSqlParser.ARRAY) | (1 << PlSqlParser.ASSOCIATE) | (1 << PlSqlParser.AT) | (1 << PlSqlParser.ATTRIBUTE) | (1 << PlSqlParser.AUDIT) | (1 << PlSqlParser.AUTHID) | (1 << PlSqlParser.AUTO) | (1 << PlSqlParser.AUTOMATIC) | (1 << PlSqlParser.AUTONOMOUS_TRANSACTION) | (1 << PlSqlParser.BATCH) | (1 << PlSqlParser.BEFORE) | (1 << PlSqlParser.BFILE) | (1 << PlSqlParser.BINARY_DOUBLE) | (1 << PlSqlParser.BINARY_FLOAT) | (1 << PlSqlParser.BINARY_INTEGER))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PlSqlParser.BLOB - 32)) | (1 << (PlSqlParser.BLOCK - 32)) | (1 << (PlSqlParser.BODY - 32)) | (1 << (PlSqlParser.BOOLEAN - 32)) | (1 << (PlSqlParser.BOTH - 32)) | (1 << (PlSqlParser.BULK - 32)) | (1 << (PlSqlParser.BYTE - 32)) | (1 << (PlSqlParser.CALL - 32)) | (1 << (PlSqlParser.CANONICAL - 32)) | (1 << (PlSqlParser.CASCADE - 32)) | (1 << (PlSqlParser.CAST - 32)) | (1 << (PlSqlParser.CHARACTER - 32)) | (1 << (PlSqlParser.CHAR - 32)) | (1 << (PlSqlParser.CHAR_CS - 32)) | (1 << (PlSqlParser.CHR - 32)) | (1 << (PlSqlParser.C_LETTER - 32)) | (1 << (PlSqlParser.CLOB - 32)) | (1 << (PlSqlParser.CLOSE - 32)) | (1 << (PlSqlParser.CLUSTER - 32)) | (1 << (PlSqlParser.COLLECT - 32)) | (1 << (PlSqlParser.COLUMNS - 32)) | (1 << (PlSqlParser.COMMENT - 32)) | (1 << (PlSqlParser.COMMIT - 32)) | (1 << (PlSqlParser.COMMITTED - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PlSqlParser.COMPATIBILITY - 64)) | (1 << (PlSqlParser.COMPILE - 64)) | (1 << (PlSqlParser.COMPOUND - 64)) | (1 << (PlSqlParser.CONSTANT - 64)) | (1 << (PlSqlParser.CONSTRAINT - 64)) | (1 << (PlSqlParser.CONSTRAINTS - 64)) | (1 << (PlSqlParser.CONSTRUCTOR - 64)) | (1 << (PlSqlParser.CONTENT - 64)) | (1 << (PlSqlParser.CONTEXT - 64)) | (1 << (PlSqlParser.CONTINUE - 64)) | (1 << (PlSqlParser.CONVERT - 64)) | (1 << (PlSqlParser.CORRUPT_XID_ALL - 64)) | (1 << (PlSqlParser.CORRUPT_XID - 64)) | (1 << (PlSqlParser.COST - 64)) | (1 << (PlSqlParser.COUNT - 64)) | (1 << (PlSqlParser.CROSS - 64)) | (1 << (PlSqlParser.CUBE - 64)) | (1 << (PlSqlParser.CURRENT_USER - 64)) | (1 << (PlSqlParser.CURSOR - 64)) | (1 << (PlSqlParser.CUSTOMDATUM - 64)) | (1 << (PlSqlParser.CYCLE - 64)) | (1 << (PlSqlParser.DATABASE - 64)) | (1 << (PlSqlParser.DATA - 64)) | (1 << (PlSqlParser.DAY - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PlSqlParser.DB_ROLE_CHANGE - 96)) | (1 << (PlSqlParser.DBTIMEZONE - 96)) | (1 << (PlSqlParser.DDL - 96)) | (1 << (PlSqlParser.DEBUG - 96)) | (1 << (PlSqlParser.DEC - 96)) | (1 << (PlSqlParser.DECIMAL - 96)) | (1 << (PlSqlParser.DECOMPOSE - 96)) | (1 << (PlSqlParser.DECREMENT - 96)) | (1 << (PlSqlParser.DEFAULTS - 96)) | (1 << (PlSqlParser.DEFERRED - 96)) | (1 << (PlSqlParser.DEFINER - 96)) | (1 << (PlSqlParser.DELETE - 96)) | (1 << (PlSqlParser.DETERMINISTIC - 96)) | (1 << (PlSqlParser.DIMENSION - 96)) | (1 << (PlSqlParser.DISABLE - 96)) | (1 << (PlSqlParser.DISASSOCIATE - 96)) | (1 << (PlSqlParser.DOCUMENT - 96)) | (1 << (PlSqlParser.DOUBLE - 96)) | (1 << (PlSqlParser.DSINTERVAL_UNCONSTRAINED - 96)) | (1 << (PlSqlParser.EACH - 96)) | (1 << (PlSqlParser.ELEMENT - 96)) | (1 << (PlSqlParser.EMPTY - 96)) | (1 << (PlSqlParser.ENABLE - 96)) | (1 << (PlSqlParser.ENCODING - 96)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PlSqlParser.ENTITYESCAPING - 130)) | (1 << (PlSqlParser.ERR - 130)) | (1 << (PlSqlParser.ERRORS - 130)) | (1 << (PlSqlParser.ESCAPE - 130)) | (1 << (PlSqlParser.EVALNAME - 130)) | (1 << (PlSqlParser.EXCEPTION - 130)) | (1 << (PlSqlParser.EXCEPTION_INIT - 130)) | (1 << (PlSqlParser.EXCEPTIONS - 130)) | (1 << (PlSqlParser.EXCLUDE - 130)) | (1 << (PlSqlParser.EXECUTE - 130)) | (1 << (PlSqlParser.EXIT - 130)) | (1 << (PlSqlParser.EXPLAIN - 130)) | (1 << (PlSqlParser.EXTERNAL - 130)) | (1 << (PlSqlParser.EXTRACT - 130)) | (1 << (PlSqlParser.FAILURE - 130)) | (1 << (PlSqlParser.FINAL - 130)) | (1 << (PlSqlParser.FIRST - 130)) | (1 << (PlSqlParser.FIRST_VALUE - 130)) | (1 << (PlSqlParser.FLOAT - 130)) | (1 << (PlSqlParser.FOLLOWING - 130)) | (1 << (PlSqlParser.FOLLOWS - 130)) | (1 << (PlSqlParser.FORALL - 130)) | (1 << (PlSqlParser.FORCE - 130)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (PlSqlParser.FULL - 164)) | (1 << (PlSqlParser.FUNCTION - 164)) | (1 << (PlSqlParser.GROUPING - 164)) | (1 << (PlSqlParser.HASH - 164)) | (1 << (PlSqlParser.HIDE - 164)) | (1 << (PlSqlParser.HOUR - 164)) | (1 << (PlSqlParser.IGNORE - 164)) | (1 << (PlSqlParser.IMMEDIATE - 164)) | (1 << (PlSqlParser.INCLUDE - 164)) | (1 << (PlSqlParser.INCLUDING - 164)) | (1 << (PlSqlParser.INCREMENT - 164)) | (1 << (PlSqlParser.INDENT - 164)) | (1 << (PlSqlParser.INDEXED - 164)) | (1 << (PlSqlParser.INDICATOR - 164)) | (1 << (PlSqlParser.INDICES - 164)) | (1 << (PlSqlParser.INFINITE - 164)) | (1 << (PlSqlParser.INLINE - 164)) | (1 << (PlSqlParser.INNER - 164)) | (1 << (PlSqlParser.INOUT - 164)))) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & ((1 << (PlSqlParser.INSTANTIABLE - 196)) | (1 << (PlSqlParser.INSTEAD - 196)) | (1 << (PlSqlParser.INTEGER - 196)) | (1 << (PlSqlParser.INTERVAL - 196)) | (1 << (PlSqlParser.INT - 196)) | (1 << (PlSqlParser.INVALIDATE - 196)) | (1 << (PlSqlParser.ISOLATION - 196)) | (1 << (PlSqlParser.ITERATE - 196)) | (1 << (PlSqlParser.JAVA - 196)) | (1 << (PlSqlParser.JOIN - 196)) | (1 << (PlSqlParser.KEEP - 196)) | (1 << (PlSqlParser.KEY - 196)) | (1 << (PlSqlParser.LANGUAGE - 196)) | (1 << (PlSqlParser.LAST - 196)) | (1 << (PlSqlParser.LAST_VALUE - 196)) | (1 << (PlSqlParser.LEADING - 196)) | (1 << (PlSqlParser.LEFT - 196)) | (1 << (PlSqlParser.LEVEL - 196)) | (1 << (PlSqlParser.LIBRARY - 196)) | (1 << (PlSqlParser.LIKE2 - 196)) | (1 << (PlSqlParser.LIKE4 - 196)) | (1 << (PlSqlParser.LIKEC - 196)) | (1 << (PlSqlParser.LIMIT - 196)) | (1 << (PlSqlParser.LOCAL - 196)) | (1 << (PlSqlParser.LOCKED - 196)))) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & ((1 << (PlSqlParser.LOG - 228)) | (1 << (PlSqlParser.LOGOFF - 228)) | (1 << (PlSqlParser.LOGON - 228)) | (1 << (PlSqlParser.LONG - 228)) | (1 << (PlSqlParser.LOOP - 228)) | (1 << (PlSqlParser.MAIN - 228)) | (1 << (PlSqlParser.MAP - 228)) | (1 << (PlSqlParser.MATCHED - 228)) | (1 << (PlSqlParser.MAXVALUE - 228)) | (1 << (PlSqlParser.MEASURES - 228)) | (1 << (PlSqlParser.MEMBER - 228)) | (1 << (PlSqlParser.MERGE - 228)) | (1 << (PlSqlParser.MINUTE - 228)) | (1 << (PlSqlParser.MINVALUE - 228)) | (1 << (PlSqlParser.MLSLABEL - 228)) | (1 << (PlSqlParser.MODEL - 228)) | (1 << (PlSqlParser.MODIFY - 228)) | (1 << (PlSqlParser.MONTH - 228)) | (1 << (PlSqlParser.MULTISET - 228)) | (1 << (PlSqlParser.NAME - 228)) | (1 << (PlSqlParser.NAN - 228)) | (1 << (PlSqlParser.NATURAL - 228)) | (1 << (PlSqlParser.NATURALN - 228)) | (1 << (PlSqlParser.NAV - 228)) | (1 << (PlSqlParser.NCHAR_CS - 228)) | (1 << (PlSqlParser.NCHAR - 228)) | (1 << (PlSqlParser.NCLOB - 228)) | (1 << (PlSqlParser.NESTED - 228)))) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & ((1 << (PlSqlParser.NEW - 260)) | (1 << (PlSqlParser.NOAUDIT - 260)) | (1 << (PlSqlParser.NOCOPY - 260)) | (1 << (PlSqlParser.NOCYCLE - 260)) | (1 << (PlSqlParser.NOENTITYESCAPING - 260)) | (1 << (PlSqlParser.NONE - 260)) | (1 << (PlSqlParser.NO - 260)) | (1 << (PlSqlParser.NOSCHEMACHECK - 260)) | (1 << (PlSqlParser.NULLS - 260)) | (1 << (PlSqlParser.NUMBER - 260)) | (1 << (PlSqlParser.NUMERIC - 260)) | (1 << (PlSqlParser.NVARCHAR2 - 260)) | (1 << (PlSqlParser.OBJECT - 260)) | (1 << (PlSqlParser.OFF - 260)) | (1 << (PlSqlParser.OID - 260)) | (1 << (PlSqlParser.OLD - 260)) | (1 << (PlSqlParser.ONLY - 260)) | (1 << (PlSqlParser.OPEN - 260)))) !== 0) || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (PlSqlParser.ORADATA - 293)) | (1 << (PlSqlParser.ORDINALITY - 293)) | (1 << (PlSqlParser.OSERROR - 293)) | (1 << (PlSqlParser.OUTER - 293)) | (1 << (PlSqlParser.OUT - 293)) | (1 << (PlSqlParser.OVER - 293)) | (1 << (PlSqlParser.OVERRIDING - 293)) | (1 << (PlSqlParser.PACKAGE - 293)) | (1 << (PlSqlParser.PARALLEL_ENABLE - 293)) | (1 << (PlSqlParser.PARAMETERS - 293)) | (1 << (PlSqlParser.PARENT - 293)) | (1 << (PlSqlParser.PARTITION - 293)) | (1 << (PlSqlParser.PASSING - 293)) | (1 << (PlSqlParser.PATH - 293)) | (1 << (PlSqlParser.PIPELINED - 293)) | (1 << (PlSqlParser.PLAN - 293)) | (1 << (PlSqlParser.PLS_INTEGER - 293)) | (1 << (PlSqlParser.POSITIVEN - 293)) | (1 << (PlSqlParser.POSITIVE - 293)))) !== 0) || ((((_la - 325)) & ~0x1f) == 0 && ((1 << (_la - 325)) & ((1 << (PlSqlParser.PRAGMA - 325)) | (1 << (PlSqlParser.PRECEDING - 325)) | (1 << (PlSqlParser.PRECISION - 325)) | (1 << (PlSqlParser.PRESENT - 325)) | (1 << (PlSqlParser.RAISE - 325)) | (1 << (PlSqlParser.RANGE - 325)) | (1 << (PlSqlParser.RAW - 325)) | (1 << (PlSqlParser.READ - 325)) | (1 << (PlSqlParser.REAL - 325)) | (1 << (PlSqlParser.RECORD - 325)) | (1 << (PlSqlParser.REFERENCE - 325)) | (1 << (PlSqlParser.REFERENCING - 325)) | (1 << (PlSqlParser.REF - 325)) | (1 << (PlSqlParser.REJECT - 325)) | (1 << (PlSqlParser.RELIES_ON - 325)) | (1 << (PlSqlParser.RENAME - 325)) | (1 << (PlSqlParser.REPLACE - 325)) | (1 << (PlSqlParser.RESPECT - 325)) | (1 << (PlSqlParser.RESTRICT_REFERENCES - 325)) | (1 << (PlSqlParser.RESULT_CACHE - 325)) | (1 << (PlSqlParser.RESULT - 325)) | (1 << (PlSqlParser.RETURNING - 325)) | (1 << (PlSqlParser.RETURN - 325)) | (1 << (PlSqlParser.REUSE - 325)))) !== 0) || ((((_la - 357)) & ~0x1f) == 0 && ((1 << (_la - 357)) & ((1 << (PlSqlParser.REVERSE - 357)) | (1 << (PlSqlParser.RIGHT - 357)) | (1 << (PlSqlParser.ROLLBACK - 357)) | (1 << (PlSqlParser.ROLLUP - 357)) | (1 << (PlSqlParser.ROWID - 357)) | (1 << (PlSqlParser.ROW - 357)) | (1 << (PlSqlParser.ROWS - 357)) | (1 << (PlSqlParser.RULES - 357)) | (1 << (PlSqlParser.SAMPLE - 357)) | (1 << (PlSqlParser.SAVEPOINT - 357)) | (1 << (PlSqlParser.SAVE - 357)) | (1 << (PlSqlParser.SCHEMACHECK - 357)) | (1 << (PlSqlParser.SCHEMA - 357)) | (1 << (PlSqlParser.SCN - 357)) | (1 << (PlSqlParser.SECOND - 357)) | (1 << (PlSqlParser.SEED - 357)) | (1 << (PlSqlParser.SEGMENT - 357)) | (1 << (PlSqlParser.SELF - 357)) | (1 << (PlSqlParser.SEQUENTIAL - 357)) | (1 << (PlSqlParser.SERIALIZABLE - 357)) | (1 << (PlSqlParser.SERIALLY_REUSABLE - 357)) | (1 << (PlSqlParser.SERVERERROR - 357)) | (1 << (PlSqlParser.SESSIONTIMEZONE - 357)) | (1 << (PlSqlParser.SET - 357)) | (1 << (PlSqlParser.SETS - 357)) | (1 << (PlSqlParser.SETTINGS - 357)) | (1 << (PlSqlParser.SHOW - 357)))) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & ((1 << (PlSqlParser.SHUTDOWN - 389)) | (1 << (PlSqlParser.SIBLINGS - 389)) | (1 << (PlSqlParser.SIGNTYPE - 389)) | (1 << (PlSqlParser.SIMPLE_INTEGER - 389)) | (1 << (PlSqlParser.SINGLE - 389)) | (1 << (PlSqlParser.SKIP_ - 389)) | (1 << (PlSqlParser.SMALLINT - 389)) | (1 << (PlSqlParser.SNAPSHOT - 389)) | (1 << (PlSqlParser.SOME - 389)) | (1 << (PlSqlParser.SPECIFICATION - 389)) | (1 << (PlSqlParser.SQLDATA - 389)) | (1 << (PlSqlParser.SQLERROR - 389)) | (1 << (PlSqlParser.STANDALONE - 389)) | (1 << (PlSqlParser.STARTUP - 389)) | (1 << (PlSqlParser.STATEMENT_ID - 389)) | (1 << (PlSqlParser.STATEMENT - 389)) | (1 << (PlSqlParser.STATIC - 389)) | (1 << (PlSqlParser.STATISTICS - 389)) | (1 << (PlSqlParser.STRING - 389)) | (1 << (PlSqlParser.SUBMULTISET - 389)) | (1 << (PlSqlParser.SUBPARTITION - 389)) | (1 << (PlSqlParser.SUBSTITUTABLE - 389)) | (1 << (PlSqlParser.SUBTYPE - 389)) | (1 << (PlSqlParser.SUCCESS - 389)) | (1 << (PlSqlParser.SUSPEND - 389)) | (1 << (PlSqlParser.TEMPORARY - 389)))) !== 0) || ((((_la - 423)) & ~0x1f) == 0 && ((1 << (_la - 423)) & ((1 << (PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP - 423)) | (1 << (PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIMESTAMP_UNCONSTRAINED - 423)) | (1 << (PlSqlParser.TIME - 423)) | (1 << (PlSqlParser.TIMEZONE_ABBR - 423)) | (1 << (PlSqlParser.TIMEZONE_HOUR - 423)) | (1 << (PlSqlParser.TIMEZONE_MINUTE - 423)) | (1 << (PlSqlParser.TIMEZONE_REGION - 423)) | (1 << (PlSqlParser.TRAILING - 423)) | (1 << (PlSqlParser.TRANSACTION - 423)) | (1 << (PlSqlParser.TRANSLATE - 423)) | (1 << (PlSqlParser.TREAT - 423)) | (1 << (PlSqlParser.TRIGGER - 423)) | (1 << (PlSqlParser.TRUNCATE - 423)) | (1 << (PlSqlParser.TYPE - 423)) | (1 << (PlSqlParser.UNBOUNDED - 423)) | (1 << (PlSqlParser.UNDER - 423)) | (1 << (PlSqlParser.UNLIMITED - 423)) | (1 << (PlSqlParser.UNTIL - 423)) | (1 << (PlSqlParser.UPDATED - 423)) | (1 << (PlSqlParser.UPSERT - 423)) | (1 << (PlSqlParser.UROWID - 423)) | (1 << (PlSqlParser.USE - 423)) | (1 << (PlSqlParser.VALIDATE - 423)))) !== 0) || ((((_la - 456)) & ~0x1f) == 0 && ((1 << (_la - 456)) & ((1 << (PlSqlParser.VALUE - 456)) | (1 << (PlSqlParser.VARCHAR2 - 456)) | (1 << (PlSqlParser.VARCHAR - 456)) | (1 << (PlSqlParser.VARIABLE - 456)) | (1 << (PlSqlParser.VARRAY - 456)) | (1 << (PlSqlParser.VARYING - 456)) | (1 << (PlSqlParser.VERSIONS - 456)) | (1 << (PlSqlParser.VERSION - 456)) | (1 << (PlSqlParser.WAIT - 456)) | (1 << (PlSqlParser.WARNING - 456)) | (1 << (PlSqlParser.WELLFORMED - 456)) | (1 << (PlSqlParser.WHENEVER - 456)) | (1 << (PlSqlParser.WHILE - 456)) | (1 << (PlSqlParser.WITHIN - 456)) | (1 << (PlSqlParser.WORK - 456)) | (1 << (PlSqlParser.WRITE - 456)) | (1 << (PlSqlParser.XMLAGG - 456)) | (1 << (PlSqlParser.XMLATTRIBUTES - 456)) | (1 << (PlSqlParser.XMLCAST - 456)) | (1 << (PlSqlParser.XMLCOLATTVAL - 456)) | (1 << (PlSqlParser.XMLELEMENT - 456)) | (1 << (PlSqlParser.XMLEXISTS - 456)) | (1 << (PlSqlParser.XMLFOREST - 456)) | (1 << (PlSqlParser.XMLNAMESPACES - 456)) | (1 << (PlSqlParser.XMLPARSE - 456)) | (1 << (PlSqlParser.XMLPI - 456)) | (1 << (PlSqlParser.XMLQUERY - 456)) | (1 << (PlSqlParser.XMLROOT - 456)) | (1 << (PlSqlParser.XMLSERIALIZE - 456)))) !== 0) || ((((_la - 488)) & ~0x1f) == 0 && ((1 << (_la - 488)) & ((1 << (PlSqlParser.XMLTABLE - 488)) | (1 << (PlSqlParser.XML - 488)) | (1 << (PlSqlParser.YEAR - 488)) | (1 << (PlSqlParser.YES - 488)) | (1 << (PlSqlParser.YMINTERVAL_UNCONSTRAINED - 488)) | (1 << (PlSqlParser.ZONE - 488)) | (1 << (PlSqlParser.PREDICTION - 488)) | (1 << (PlSqlParser.PREDICTION_BOUNDS - 488)) | (1 << (PlSqlParser.PREDICTION_COST - 488)) | (1 << (PlSqlParser.PREDICTION_DETAILS - 488)) | (1 << (PlSqlParser.PREDICTION_PROBABILITY - 488)) | (1 << (PlSqlParser.PREDICTION_SET - 488)) | (1 << (PlSqlParser.CUME_DIST - 488)) | (1 << (PlSqlParser.DENSE_RANK - 488)) | (1 << (PlSqlParser.LISTAGG - 488)) | (1 << (PlSqlParser.PERCENT_RANK - 488)) | (1 << (PlSqlParser.PERCENTILE_CONT - 488)) | (1 << (PlSqlParser.PERCENTILE_DISC - 488)) | (1 << (PlSqlParser.RANK - 488)) | (1 << (PlSqlParser.AVG - 488)) | (1 << (PlSqlParser.CORR - 488)) | (1 << (PlSqlParser.COVAR_ - 488)) | (1 << (PlSqlParser.LAG - 488)) | (1 << (PlSqlParser.LEAD - 488)) | (1 << (PlSqlParser.MAX - 488)) | (1 << (PlSqlParser.MEDIAN - 488)) | (1 << (PlSqlParser.MIN - 488)) | (1 << (PlSqlParser.NTILE - 488)) | (1 << (PlSqlParser.RATIO_TO_REPORT - 488)) | (1 << (PlSqlParser.REGR_ - 488)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (PlSqlParser.ROW_NUMBER - 521)) | (1 << (PlSqlParser.SUBSTR - 521)) | (1 << (PlSqlParser.TRIM - 521)) | (1 << (PlSqlParser.SUM - 521)) | (1 << (PlSqlParser.STDDEV - 521)) | (1 << (PlSqlParser.VAR_ - 521)) | (1 << (PlSqlParser.VARIANCE - 521)))) !== 0) || _la===PlSqlParser.REGULAR_ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_string_function_name;
    return this;
}

String_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_function_nameContext.prototype.constructor = String_function_nameContext;

String_function_nameContext.prototype.CHR = function() {
    return this.getToken(PlSqlParser.CHR, 0);
};

String_function_nameContext.prototype.DECODE = function() {
    return this.getToken(PlSqlParser.DECODE, 0);
};

String_function_nameContext.prototype.SUBSTR = function() {
    return this.getToken(PlSqlParser.SUBSTR, 0);
};

String_function_nameContext.prototype.TO_CHAR = function() {
    return this.getToken(PlSqlParser.TO_CHAR, 0);
};

String_function_nameContext.prototype.TRIM = function() {
    return this.getToken(PlSqlParser.TRIM, 0);
};

String_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterString_function_name(this);
	}
};

String_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitString_function_name(this);
	}
};




PlSqlParser.String_function_nameContext = String_function_nameContext;

PlSqlParser.prototype.string_function_name = function() {

    var localctx = new String_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 766, PlSqlParser.RULE_string_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5765;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.CHR || ((((_la - 510)) & ~0x1f) == 0 && ((1 << (_la - 510)) & ((1 << (PlSqlParser.DECODE - 510)) | (1 << (PlSqlParser.SUBSTR - 510)) | (1 << (PlSqlParser.TO_CHAR - 510)) | (1 << (PlSqlParser.TRIM - 510)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Numeric_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PlSqlParser.RULE_numeric_function_name;
    return this;
}

Numeric_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_function_nameContext.prototype.constructor = Numeric_function_nameContext;

Numeric_function_nameContext.prototype.AVG = function() {
    return this.getToken(PlSqlParser.AVG, 0);
};

Numeric_function_nameContext.prototype.COUNT = function() {
    return this.getToken(PlSqlParser.COUNT, 0);
};

Numeric_function_nameContext.prototype.NVL = function() {
    return this.getToken(PlSqlParser.NVL, 0);
};

Numeric_function_nameContext.prototype.ROUND = function() {
    return this.getToken(PlSqlParser.ROUND, 0);
};

Numeric_function_nameContext.prototype.SUM = function() {
    return this.getToken(PlSqlParser.SUM, 0);
};

Numeric_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.enterNumeric_function_name(this);
	}
};

Numeric_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PlSqlParserListener ) {
        listener.exitNumeric_function_name(this);
	}
};




PlSqlParser.Numeric_function_nameContext = Numeric_function_nameContext;

PlSqlParser.prototype.numeric_function_name = function() {

    var localctx = new Numeric_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 768, PlSqlParser.RULE_numeric_function_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5767;
        _la = this._input.LA(1);
        if(!(_la===PlSqlParser.COUNT || ((((_la - 507)) & ~0x1f) == 0 && ((1 << (_la - 507)) & ((1 << (PlSqlParser.AVG - 507)) | (1 << (PlSqlParser.NVL - 507)) | (1 << (PlSqlParser.ROUND - 507)) | (1 << (PlSqlParser.SUM - 507)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


PlSqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 269:
			return this.logical_expression_sempred(localctx, predIndex);
	case 271:
			return this.relational_expression_sempred(localctx, predIndex);
	case 276:
			return this.concatenation_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

PlSqlParser.prototype.logical_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PlSqlParser.prototype.relational_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PlSqlParser.prototype.concatenation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.PlSqlParser = PlSqlParser;
